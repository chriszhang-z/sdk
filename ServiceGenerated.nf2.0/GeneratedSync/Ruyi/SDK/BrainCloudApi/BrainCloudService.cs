/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.BrainCloudApi
{
  public partial class BrainCloudService {
    public interface ISync {
      /// <summary>
      /// Creates an instance of an asynchronous match.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_CreateMatch(string jsonOpponentIds, string pushNotificationMessage, int clientIndex);
      /// <summary>
      /// Creates an instance of an asynchronous match with an initial turn.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string defining what the other player will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_CreateMatchWithInitialTurn(string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex);
      /// <summary>
      /// Submits a turn for the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string that other players will see as a summary of the game when listing their games</param>
      /// <param name="jsonStatistics">Optional JSON string blob provided by the caller</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_SubmitTurn(string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex);
      /// <summary>
      /// Allows the current player (only) to update Summary data without having to submit a whole turn.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonSummary">JSON string provided by the caller that other players will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_UpdateMatchSummaryData(string ownerId, string matchId, long version, string jsonSummary, int clientIndex);
      /// <summary>
      /// Marks the given match as complete.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_CompleteMatch(string ownerId, string matchId, int clientIndex);
      /// <summary>
      /// Returns the current state of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_ReadMatch(string ownerId, string matchId, int clientIndex);
      /// <summary>
      /// Returns the match history of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_ReadMatchHistory(string ownerId, string matchId, int clientIndex);
      /// <summary>
      /// Returns all matches that are NOT in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      string AsyncMatch_FindMatches(int clientIndex);
      /// <summary>
      /// Returns all matches that are in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      string AsyncMatch_FindCompleteMatches(int clientIndex);
      /// <summary>
      /// Marks the given match as abandoned.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_AbandonMatch(string ownerId, string matchId, int clientIndex);
      /// <summary>
      /// Removes the match and match history from the server. DEBUG ONLY, in production it is recommended
      /// the user leave it as completed.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      string AsyncMatch_DeleteMatch(string ownerId, string matchId, int clientIndex);
      /// <summary>
      /// Used to create the anonymous installation id for the brainCloud profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      string Authentication_GenerateAnonymousId(int clientIndex);
      /// <summary>
      /// Initialize - initializes the identity service with a saved
      /// anonymous installation id and most recently used profile id
      /// </summary>
      /// <param name="profileId">The id of the profile id that was most recently used by the app (on this device)</param>
      /// <param name="anonymousId">The anonymous installation id that was generated for this device</param>
      /// <param name="clientIndex"></param>
      void Authentication_Initialize(string profileId, string anonymousId, int clientIndex);
      /// <summary>
      /// Used to clear the saved profile id - to use in cases when the user is
      /// attempting to switch to a different app profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      void Authentication_ClearSavedProfileID(int clientIndex);
      /// <summary>
      /// Authenticate a user anonymously with brainCloud - used for apps that don't want to bother
      /// the user to login, or for users who are sensitive to their privacy
      /// </summary>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      string Authentication_AuthenticateAnonymous(bool forceCreate, int clientIndex);
      /// <summary>
      /// Authenticate the user with a custom Email and Password.  Note that the client app
      /// is responsible for collecting (and storing) the e-mail and potentially password
      /// (for convenience) in the client data.  For the greatest security,
      /// force the user to re-enter their password at each login.
      /// (Or at least give them that option).
      /// </summary>
      /// <param name="email">The e-mail address of the user</param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      string Authentication_AuthenticateEmailPassword(string email, string password, bool forceCreate, int clientIndex);
      /// <summary>
      /// Authenticate the user using a userId and password (without any validation on the userId).
      /// Similar to AuthenticateEmailPassword - except that that method has additional features to
      /// allow for e-mail validation, password resets, etc.
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      string Authentication_AuthenticateUniversal(string userId, string password, bool forceCreate, int clientIndex);
      /// <summary>
      /// Authenticate the user via cloud code (which in turn validates the supplied credentials against an external system).
      /// This allows the developer to extend brainCloud authentication to support other backend authentication systems.
      /// </summary>
      /// <param name="userId">The user id</param>
      /// <param name="token">The user token (password etc)</param>
      /// <param name="externalAuthName">The name of the cloud script to call for external authentication</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      string Authentication_AuthenticateExternal(string userId, string token, string externalAuthName, bool forceCreate, int clientIndex);
      /// <summary>
      /// Reset Email password - Sends a password reset email to the specified address
      /// </summary>
      /// <param name="externalId">The email address to send the reset email to.</param>
      /// <param name="clientIndex"></param>
      string Authentication_ResetEmailPassword(string externalId, int clientIndex);
      /// <summary>
      /// Returns the sessionId or empty string if no session present.
      /// </summary>
      /// <param name="clientIndex"></param>
      string Client_GetSessionId(int clientIndex);
      /// <summary>
      /// Returns true if the user is currently authenticated.
      /// If a session time out or session invalidation is returned from executing a
      /// sever API call, this flag will reset back to false.
      /// </summary>
      /// <param name="clientIndex"></param>
      bool Client_IsAuthenticated(int clientIndex);
      /// <summary>
      /// Returns true if brainCloud has been initialized.
      /// </summary>
      /// <param name="clientIndex"></param>
      bool Client_IsInitialized(int clientIndex);
      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId"></param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      void Client_Initialize_SSS(string secretKey, string appId, string appVersion, int clientIndex);
      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="serverURL">The URL to the brainCloud server</param>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId">The app id</param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      void Client_Initialize_SSSS(string serverURL, string secretKey, string appId, string appVersion, int clientIndex);
      /// <summary>
      /// Initialize the identity aspects of brainCloud.
      /// </summary>
      /// <param name="profileId">The profile id</param>
      /// <param name="anonymousId">The anonymous id</param>
      /// <param name="clientIndex"></param>
      void Client_InitializeIdentity(string profileId, string anonymousId, int clientIndex);
      /// <summary>
      /// Update method needs to be called regularly in order
      /// to process incoming and outgoing messages.
      /// </summary>
      /// <param name="clientIndex"></param>
      void Client_Update(int clientIndex);
      /// <summary>
      /// Enable logging of brainCloud transactions (comms etc)
      /// </summary>
      /// <param name="enable">True if logging is to be enabled</param>
      /// <param name="clientIndex"></param>
      void Client_EnableLogging(bool enable, int clientIndex);
      /// <summary>
      /// Resets all messages and calls to the server
      /// </summary>
      /// <param name="clientIndex"></param>
      void Client_ResetCommunication(int clientIndex);
      /// <summary>
      /// Sets the packet timeouts using a list of integers that
      /// represent timeout values for each packet retry. The
      /// first item in the list represents the timeout for the first packet
      /// attempt, the second for the second packet attempt, and so on.
      /// 
      /// The number of entries in this array determines how many packet
      /// retries will occur.
      /// 
      /// By default, the packet timeout array is {10, 10, 10}
      /// 
      /// Note that this method does not change the timeout for authentication
      /// packets (use SetAuthenticationPacketTimeout method).
      /// </summary>
      /// <param name="timeouts">An array of packet timeouts.</param>
      /// <param name="clientIndex"></param>
      void Client_SetPacketTimeouts(List<int> timeouts, int clientIndex);
      /// <summary>
      /// Sets the packet timeouts back to default.
      /// </summary>
      /// <param name="clientIndex"></param>
      void Client_SetPacketTimeoutsToDefault(int clientIndex);
      /// <summary>
      /// Returns the list of packet timeouts.
      /// </summary>
      /// <param name="clientIndex"></param>
      List<int> Client_GetPacketTimeouts(int clientIndex);
      /// <summary>
      /// Sets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      void Client_SetAuthenticationPacketTimeout(int timeoutSecs, int clientIndex);
      /// <summary>
      /// Gets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="clientIndex"></param>
      int Client_GetAuthenticationPacketTimeout(int clientIndex);
      /// <summary>
      /// Returns the low transfer rate timeout in secs
      /// </summary>
      /// <param name="clientIndex"></param>
      int Client_GetUploadLowTransferRateTimeout(int clientIndex);
      /// <summary>
      /// Sets the timeout in seconds of a low speed upload
      /// (i.e. transfer rate which is underneath the low transfer rate threshold).
      /// By default this is set to 120 secs.Setting this value to 0 will
      /// turn off the timeout. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      void Client_SetUploadLowTransferRateTimeout(int timeoutSecs, int clientIndex);
      /// <summary>
      /// Returns the low transfer rate threshold in bytes/sec
      /// </summary>
      /// <param name="clientIndex"></param>
      int Client_GetUploadLowTransferRateThreshold(int clientIndex);
      /// <summary>
      /// Sets the low transfer rate threshold of an upload in bytes/sec.
      /// If the transfer rate dips below the given threshold longer
      /// than the specified timeout, the transfer will fail.
      /// By default this is set to 50 bytes/sec. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="bytesPerSec">The low transfer rate threshold in bytes/sec</param>
      /// <param name="clientIndex"></param>
      void Client_SetUploadLowTransferRateThreshold(int bytesPerSec, int clientIndex);
      /// <summary>
      /// Enables the timeout message caching which is disabled by default.
      /// Once enabled, if a client side timeout is encountered
      /// (i.e. brainCloud server is unreachable presumably due to the client
      /// network being down) the SDK will do the following:
      /// 
      /// 1 - cache the currently queued messages to brainCloud
      /// 2 - call the network error callback
      /// 3 - then expect the app to call either:
      ///     a) RetryCachedMessages() to retry sending to brainCloud
      ///     b) FlushCachedMessages() to dump all messages in the queue.
      /// 
      /// Between steps 2 and 3, the app can prompt the user to retry connecting
      /// to brainCloud to determine whether to follow path 3a or 3b.
      /// 
      /// Note that if path 3a is followed, and another timeout is encountered,
      /// the process will begin all over again from step 1.
      /// 
      /// WARNING - the brainCloud SDK will cache *all* API calls sent
      /// when a timeout is encountered if this mechanism is enabled.
      /// This effectively freezes all communication with brainCloud.
      /// Apps must call either RetryCachedMessages() or FlushCachedMessages()
      /// for the brainCloud SDK to resume sending messages.
      /// ResetCommunication() will also clear the message cache.
      /// </summary>
      /// <param name="enabled">True if message should be cached on timeout</param>
      /// <param name="clientIndex"></param>
      void Client_EnableNetworkErrorMessageCaching(bool enabled, int clientIndex);
      /// <summary>
      /// Attempts to resend any cached messages. If no messages are in the cache,
      /// this method does nothing.
      /// </summary>
      /// <param name="clientIndex"></param>
      void Client_RetryCachedMessages(int clientIndex);
      /// <summary>
      /// Flushes the cached messages to resume API call processing. This will dump
      /// all of the cached messages in the queue.
      /// </summary>
      /// <param name="sendApiErrorCallbacks">If set to true API error callbacks willbe called for every cached message with statusCode CLIENT_NETWORK_ERROR and reasonCode CLIENT_NETWORK_ERROR_TIMEOUT.</param>
      /// <param name="clientIndex"></param>
      void Client_FlushCachedMessages(bool sendApiErrorCallbacks, int clientIndex);
      /// <summary>
      /// Inserts a marker which will tell the brainCloud comms layer
      /// to close the message bundle off at this point. Any messages queued
      /// before this method was called will likely be bundled together in
      /// the next send to the server.
      /// 
      /// To ensure that only a single message is sent to the server you would
      /// do something like this:
      /// 
      /// InsertEndOfMessageBundleMarker()
      /// SomeApiCall()
      /// InsertEndOfMessageBundleMarker()
      /// </summary>
      /// <param name="clientIndex"></param>
      void Client_InsertEndOfMessageBundleMarker(int clientIndex);
      /// <summary>
      /// Sets the country code sent to brainCloud when a user authenticates.
      /// Will override any auto detected country.
      /// </summary>
      /// <param name="countryCode">ISO 3166-1 two-letter country code</param>
      /// <param name="clientIndex"></param>
      void Client_OverrideCountryCode(string countryCode, int clientIndex);
      /// <summary>
      /// Sets the language code sent to brainCloud when a user authenticates.
      /// If the language is set to a non-ISO 639-1 standard value the game default will be used instead.
      /// Will override any auto detected language.
      /// </summary>
      /// <param name="languageCode">ISO 639-1 two-letter language code</param>
      /// <param name="clientIndex"></param>
      void Client_OverrideLanguageCode(string languageCode, int clientIndex);
      /// <summary>
      /// Creates custom data stream page event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      string DataStream_CustomPageEvent(string eventName, string jsonEventProperties, int clientIndex);
      /// <summary>
      /// Creates custom data stream screen event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      string DataStream_CustomScreenEvent(string eventName, string jsonEventProperties, int clientIndex);
      /// <summary>
      /// Creates custom data stream track event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      string DataStream_CustomTrackEvent(string eventName, string jsonEventProperties, int clientIndex);
      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="clientIndex"></param>
      string Entity_CreateEntity(string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex);
      /// <summary>
      /// Method returns all user entities that match the given type.
      /// </summary>
      /// <param name="entityType">The entity type to search for</param>
      /// <param name="clientIndex"></param>
      string Entity_GetEntitiesByType(string entityType, int clientIndex);
      /// <summary>
      /// Method updates a new entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      string Entity_UpdateEntity(string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex);
      /// <summary>
      /// Method updates a shared entity owned by another user. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="targetProfileId">The id of the entity's owner</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      string Entity_UpdateSharedEntity(string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex);
      /// <summary>
      /// Method deletes the given entity on the server.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      string Entity_DeleteEntity(string entityId, int version, int clientIndex);
      /// <summary>
      /// Method updates a singleton entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string. If the entity doesn't exist it is created.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      string Entity_UpdateSingleton(string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex);
      /// <summary>
      /// Method deletes the given singleton on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      string Entity_DeleteSingleton(string entityType, int version, int clientIndex);
      /// <summary>
      /// Method to get a specific entity.
      /// </summary>
      /// <param name="entityId">The id of the entity</param>
      /// <param name="clientIndex"></param>
      string Entity_GetEntity(string entityId, int clientIndex);
      /// <summary>
      /// Method retrieves a singleton entity on the server. If the entity doesn't exist, null is returned.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="clientIndex"></param>
      string Entity_GetSingleton(string entityType, int clientIndex);
      /// <summary>
      /// Method returns a shared entity for the given profile and entity ID.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The the profile ID of the user who owns the entity</param>
      /// <param name="entityId">The ID of the entity that will be retrieved</param>
      /// <param name="clientIndex"></param>
      string Entity_GetSharedEntityForProfileId(string profileId, string entityId, int clientIndex);
      /// <summary>
      /// Method returns all shared entities for the given profile id.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The profile id to retrieve shared entities for</param>
      /// <param name="clientIndex"></param>
      string Entity_GetSharedEntitiesForProfileId(string profileId, int clientIndex);
      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      string Entity_GetList(string whereJson, string orderByJson, int maxReturn, int clientIndex);
      /// <summary>
      /// Method gets list of shared entities for the specified user based on type and/or where clause
      /// </summary>
      /// <param name="profileId">The profile ID to retrieve shared entities for</param>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      string Entity_GetSharedEntitiesListForProfileId(string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex);
      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      string Entity_GetListCount(string whereJson, int clientIndex);
      /// <summary>
      /// Method uses a paging system to iterate through user entities.
      /// After retrieving a page of entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      string Entity_GetPage(string jsonContext, int clientIndex);
      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      string Entity_GetPageOffset(string context, int pageOffset, int clientIndex);
      /// <summary>
      /// Partial increment of entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      string Entity_IncrementUserEntityData(string entityId, string jsonData, int clientIndex);
      /// <summary>
      /// Partial increment of shared entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="targetProfileId">Profile ID of the entity owner</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      string Entity_IncrementSharedUserEntityData(string entityId, string targetProfileId, string jsonData, int clientIndex);
      /// <summary>
      /// Sends an event to the designated profile id with the attached json data.
      /// Any events that have been sent to a user will show up in their
      /// incoming event mailbox. If the recordLocally flag is set to true,
      /// a copy of this event (with the exact same event id) will be stored
      /// in the sending user's "sent" event mailbox.
      /// </summary>
      /// <param name="toProfileId">The id of the user who is being sent the event</param>
      /// <param name="eventType">The user-defined type of the event.</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      string Event_SendEvent(string toProfileId, string eventType, string jsonEventData, int clientIndex);
      /// <summary>
      /// Updates an event in the user's incoming event mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      string Event_UpdateIncomingEventData(string evId, string jsonEventData, int clientIndex);
      /// <summary>
      /// Delete an event out of the user's incoming mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="clientIndex"></param>
      string Event_DeleteIncomingEvent(string evId, int clientIndex);
      /// <summary>
      /// Get the events currently queued for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      string Event_GetEvents(int clientIndex);
      /// <summary>
      /// Prepares a user file upload. On success the file will begin uploading
      /// to the brainCloud server.To be informed of success/failure of the upload
      /// register an IFileUploadCallback with the BrainCloudClient class.
      /// </summary>
      /// <param name="cloudPath">The desired cloud path of the file</param>
      /// <param name="cloudFilename">The desired cloud fileName of the file</param>
      /// <param name="shareable">True if the file is shareable</param>
      /// <param name="replaceIfExists">Whether to replace file if it exists</param>
      /// <param name="localPath">The path and fileName of the local file</param>
      /// <param name="clientIndex"></param>
      string File_UploadFile(string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex);
      /// <summary>
      /// Method cancels an upload. If an IFileUploadCallback has been registered with the BrainCloudClient class,
      /// the fileUploadFailed callback method will be called once the upload has been canceled.
      /// NOTE: The upload will still continue in the background on versions of Unity before 5.3
      /// and on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">Upload ID of the file to cancel</param>
      /// <param name="clientIndex"></param>
      void File_CancelUpload(string uploadId, int clientIndex);
      /// <summary>
      /// Returns the progress of the given upload from 0.0 to 1.0 or -1 if upload not found.
      /// NOTE: This will always return 1 on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      double File_GetUploadProgress(string uploadId, int clientIndex);
      /// <summary>
      /// Returns the number of bytes uploaded or -1 if upload not found.
      /// NOTE: This will always return the total bytes to transfer on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      long File_GetUploadBytesTransferred(string uploadId, int clientIndex);
      /// <summary>
      /// Returns the total number of bytes that will be uploaded or -1 if upload not found.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      long File_GetUploadTotalBytesToTransfer(string uploadId, int clientIndex);
      /// <summary>
      /// List all user files
      /// </summary>
      /// <param name="clientIndex"></param>
      string File_ListUserFiles_SFO(int clientIndex);
      /// <summary>
      /// List user files from the given cloud path
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      string File_ListUserFiles_SNSFO(string cloudPath, bool recurse, int clientIndex);
      /// <summary>
      /// Deletes a single user file.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFileName"></param>
      /// <param name="clientIndex"></param>
      string File_DeleteUserFile(string cloudPath, string cloudFileName, int clientIndex);
      /// <summary>
      /// Delete multiple user files
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      string File_DeleteUserFiles(string cloudPath, bool recurse, int clientIndex);
      /// <summary>
      /// Returns the CDN URL for a file object.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFilename">Name of file</param>
      /// <param name="clientIndex"></param>
      string File_GetCDNUrl(string cloudPath, string cloudFilename, int clientIndex);
      /// <summary>
      /// Retrieves profile information for the partial matches of the specified text.
      /// </summary>
      /// <param name="searchText">Universal ID text on which to search.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      string Friend_FindUserByUniversalId(string searchText, int maxResults, int clientIndex);
      /// <summary>
      /// Retrieves profile information of the specified user.
      /// </summary>
      /// <param name="externalId">External id of the user to find</param>
      /// <param name="authenticationType">The authentication type used for the user's ID</param>
      /// <param name="clientIndex"></param>
      string Friend_GetProfileInfoForCredential(string externalId, string authenticationType, int clientIndex);
      /// <summary>
      /// Retrieves profile information for the specified external auth user.
      /// </summary>
      /// <param name="externalId">External id of the friend to find</param>
      /// <param name="externalAuthType">The external authentication type used for this friend's external id</param>
      /// <param name="clientIndex"></param>
      string Friend_GetProfileInfoForExternalAuthId(string externalId, string externalAuthType, int clientIndex);
      /// <summary>
      /// Retrieves the external ID for the specified user profile ID on the specified social platform.
      /// </summary>
      /// <param name="profileId">Profile (user) ID.</param>
      /// <param name="authenticationType">Associated authentication type.</param>
      /// <param name="clientIndex"></param>
      string Friend_GetExternalIdForProfileId(string profileId, string authenticationType, int clientIndex);
      /// <summary>
      /// Returns a particular entity of a particular friend.
      /// </summary>
      /// <param name="entityId">Id of entity to retrieve.</param>
      /// <param name="friendId">Profile Id of friend who owns entity.</param>
      /// <param name="clientIndex"></param>
      string Friend_ReadFriendEntity(string entityId, string friendId, int clientIndex);
      /// <summary>
      /// Returns entities of all friends based on type and/or subtype.
      /// </summary>
      /// <param name="entityType">Types of entities to retrieve.</param>
      /// <param name="clientIndex"></param>
      string Friend_ReadFriendsEntities(string entityType, int clientIndex);
      /// <summary>
      /// Returns user state of a particular friend.
      /// </summary>
      /// <param name="friendId">Profile Id of friend to retrieve user state for.</param>
      /// <param name="clientIndex"></param>
      string Friend_ReadFriendUserState(string friendId, int clientIndex);
      /// <summary>
      /// Returns user state of a particular user.
      /// </summary>
      /// <param name="profileId">Profile Id of user to retrieve player state for.</param>
      /// <param name="clientIndex"></param>
      string Friend_GetSummaryDataForProfileId(string profileId, int clientIndex);
      /// <summary>
      /// Finds a list of users matching the search text by performing an exact
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The string to search for.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      string Friend_FindUsersByExactName(string searchText, int maxResults, int clientIndex);
      /// <summary>
      /// Finds a list of users matching the search text by performing a substring
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The substring to search for. Minimum length of 3 characters.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      string Friend_FindUsersBySubstrName(string searchText, int maxResults, int clientIndex);
      /// <summary>
      /// Retrieves a list of user and friend platform information for all friends of the current user.
      /// </summary>
      /// <param name="friendPlatform">Friend platform to query.</param>
      /// <param name="includeSummaryData">True if including summary data; false otherwise.</param>
      /// <param name="clientIndex"></param>
      string Friend_ListFriends(Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex);
      /// <summary>
      /// Links the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      string Friend_AddFriends(List<string> profileIds, int clientIndex);
      /// <summary>
      /// Unlinks the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      string Friend_RemoveFriends(List<string> profileIds, int clientIndex);
      /// <summary>
      /// Get users online status
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      string Friend_GetUsersOnlineStatus(List<string> profileIds, int clientIndex);
      /// <summary>
      /// Method retrieves all gamification data for the player.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadAllGamification(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method retrieves all milestones defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadMilestones(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Read all of the achievements defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadAchievements(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all defined xp levels and any rewards associated
      /// with those xp levels.
      /// </summary>
      /// <param name="clientIndex"></param>
      string Gamification_ReadXpLevelsMetaData(int clientIndex);
      /// <summary>
      /// Method retrives the list of achieved achievements.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadAchievedAchievements(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method retrieves the list of completed milestones.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadCompletedMilestones(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method retrieves the list of in progress milestones
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadInProgressMilestones(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method retrieves milestones of the given category.
      /// </summary>
      /// <param name="category">The milestone category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadMilestonesByCategory(string category, bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method will award the achievements specified. On success, this will
      /// call AwardThirdPartyAchievement to hook into the client-side Achievement
      /// service (ie GameCentre, Facebook etc).
      /// </summary>
      /// <param name="achievementIds">A collection of achievement ids to award</param>
      /// <param name="clientIndex"></param>
      string Gamification_AwardAchievements(List<string> achievementIds, int clientIndex);
      /// <summary>
      /// Method retrieves all of the quests defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadQuests(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all completed quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadCompletedQuests(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all in progress quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadInProgressQuests(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all quests that haven't been started.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadNotStartedQuests(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all quests with status.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadQuestsWithStatus(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all quests with a basic percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadQuestsWithBasicPercentage(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all quests with a complex percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadQuestsWithComplexPercentage(bool includeMetaData, int clientIndex);
      /// <summary>
      /// Method returns all quests for the given category.
      /// </summary>
      /// <param name="category">The quest category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      string Gamification_ReadQuestsByCategory(string category, bool includeMetaData, int clientIndex);
      /// <summary>
      /// Sets the specified milestones' statuses to LOCKED.
      /// </summary>
      /// <param name="milestoneIds">List of milestones to reset</param>
      /// <param name="clientIndex"></param>
      string Gamification_ResetMilestones(List<string> milestoneIds, int clientIndex);
      /// <summary>
      /// Method reads all the global properties of the game
      /// </summary>
      /// <param name="clientIndex"></param>
      string GlobalApp_ReadProperties(int clientIndex);
      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_CreateEntity(string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex);
      /// <summary>
      /// Method creates a new entity on the server with an indexed id.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="indexedId">A secondary ID that will be indexed</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_CreateEntityWithIndexedId(string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex);
      /// <summary>
      /// Method updates an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_UpdateEntity(string entityId, int version, string jsonEntityData, int clientIndex);
      /// <summary>
      /// Method updates an existing entity's Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json.</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_UpdateEntityAcl(string entityId, int version, string jsonEntityAcl, int clientIndex);
      /// <summary>
      /// Method updates an existing entity's time to live on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_UpdateEntityTimeToLive(string entityId, int version, long timeToLive, int clientIndex);
      /// <summary>
      /// Method deletes an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to delete</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_DeleteEntity(string entityId, int version, int clientIndex);
      /// <summary>
      /// Method reads an existing entity from the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_ReadEntity(string entityId, int clientIndex);
      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_GetList(string whereJson, string orderByJson, int maxReturn, int clientIndex);
      /// <summary>
      /// Method gets list of entities from the server base on indexed id
      /// </summary>
      /// <param name="entityIndexedId">The entity indexed Id</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_GetListByIndexedId(string entityIndexedId, int maxReturn, int clientIndex);
      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_GetListCount(string whereJson, int clientIndex);
      /// <summary>
      /// Method uses a paging system to iterate through Global Entities.
      /// After retrieving a page of Global Entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_GetPage(string jsonContext, int clientIndex);
      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_GetPageOffset(string context, int pageOffset, int clientIndex);
      /// <summary>
      /// Partial increment of global entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_IncrementGlobalEntityData(string entityId, string jsonData, int clientIndex);
      /// <summary>
      /// Gets a list of up to randomCount randomly selected entities from the server based on the where condition and specified maximum return count.
      /// </summary>
      /// <param name="whereJson"></param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_GetRandomEntitiesMatching(string whereJson, int maxReturn, int clientIndex);
      /// <summary>
      /// Method updates an existing entity's Owner and Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="ownerId">The owner ID</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_UpdateEntityOwnerAndAcl(string entityId, long version, string ownerId, string acl, int clientIndex);
      /// <summary>
      /// Method clears the owner id of an existing entity and sets the Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      string GlobalEntity_MakeSystemEntity(string entityId, long version, string acl, int clientIndex);
      /// <summary>
      /// Method returns all of the global statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      string GlobalStatistics_ReadAllGlobalStats(int clientIndex);
      /// <summary>
      /// Reads a subset of global statistics as defined by the input JSON.
      /// </summary>
      /// <param name="globalStats">A list containing the statistics to read</param>
      /// <param name="clientIndex"></param>
      string GlobalStatistics_ReadGlobalStatsSubset(List<string> globalStats, int clientIndex);
      /// <summary>
      /// Method retrieves the global statistics for the given category.
      /// </summary>
      /// <param name="category">The global statistics category</param>
      /// <param name="clientIndex"></param>
      string GlobalStatistics_ReadGlobalStatsForCategory(string category, int clientIndex);
      /// <summary>
      /// Atomically increment (or decrement) global statistics.
      /// Global statistics are defined through the brainCloud portal.
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      string GlobalStatistics_IncrementGlobalStats(string jsonData, int clientIndex);
      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      string GlobalStatistics_ProcessStatistics(Dictionary<string, string> statisticsData, int clientIndex);
      /// <summary>
      /// Accept an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      string Group_AcceptGroupInvitation(string groupId, int clientIndex);
      /// <summary>
      /// Add a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being added.</param>
      /// <param name="role">Role of the member being added.</param>
      /// <param name="jsonAttributes">Attributes of the member being added.</param>
      /// <param name="clientIndex"></param>
      string Group_AddGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      /// <summary>
      /// Approve an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      string Group_ApproveGroupJoinRequest(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      /// <summary>
      /// Automatically join an open group that matches the search criteria and has space available.
      /// </summary>
      /// <param name="groupType">Name of the associated group type.</param>
      /// <param name="autoJoinStrategy">Selection strategy to employ when there are multiple matches</param>
      /// <param name="dataQueryJson">Query parameters (optional)</param>
      /// <param name="clientIndex"></param>
      string Group_AutoJoinGroup(string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex);
      /// <summary>
      /// Cancel an outstanding invitation to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      string Group_CancelGroupInvitation(string groupId, string profileId, int clientIndex);
      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="name">Name of the group.</param>
      /// <param name="groupType">Name of the type of group.</param>
      /// <param name="isOpenGroup">true if group is open; false if closed.</param>
      /// <param name="acl">The group's access control list. A null ACL implies default.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="jsonOwnerAttributes">Attributes for the group owner (current user).</param>
      /// <param name="jsonDefaultMemberAttributes">Default attributes for group members.</param>
      /// <param name="clientIndex"></param>
      string Group_CreateGroup(string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex);
      /// <summary>
      /// Create a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityType"></param>
      /// <param name="isOwnedByGroupMember">true if entity is owned by a member; false if owned by the entire group.</param>
      /// <param name="acl">Access control list for the group entity.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      string Group_CreateGroupEntity(string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex);
      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Current version of the group</param>
      /// <param name="clientIndex"></param>
      string Group_DeleteGroup(string groupId, long version, int clientIndex);
      /// <summary>
      /// Delete a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="clientIndex"></param>
      string Group_DeleteGroupEntity(string groupId, string entityId, long version, int clientIndex);
      /// <summary>
      /// Read information on groups to which the current user belongs.
      /// </summary>
      /// <param name="clientIndex"></param>
      string Group_GetMyGroups(int clientIndex);
      /// <summary>
      /// Increment elements for the group's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      string Group_IncrementGroupData(string groupId, string jsonData, int clientIndex);
      /// <summary>
      /// Increment elements for the group entity's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      string Group_IncrementGroupEntityData(string groupId, string entityId, string jsonData, int clientIndex);
      /// <summary>
      /// Invite a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being invited.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      string Group_InviteGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      /// <summary>
      /// Join an open group or request to join a closed group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      string Group_JoinGroup(string groupId, int clientIndex);
      /// <summary>
      /// Leave a group in which the user is a member.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      string Group_LeaveGroup(string groupId, int clientIndex);
      /// <summary>
      /// Retrieve a page of group summary information based on the specified context.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      string Group_ListGroupsPage(string jsonContext, int clientIndex);
      /// <summary>
      /// Retrieve a page of group summary information based on the encoded context
      /// and specified page offset.
      /// </summary>
      /// <param name="context">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      string Group_ListGroupsPageByOffset(string context, int pageOffset, int clientIndex);
      /// <summary>
      /// Read information on groups to which the specified user belongs.  Access is subject to restrictions.
      /// </summary>
      /// <param name="profileId">User to read groups for</param>
      /// <param name="clientIndex"></param>
      string Group_ListGroupsWithMember(string profileId, int clientIndex);
      /// <summary>
      /// Read the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      string Group_ReadGroup(string groupId, int clientIndex);
      /// <summary>
      /// Read the data of the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      string Group_ReadGroupData(string groupId, int clientIndex);
      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      string Group_ReadGroupEntitiesPage(string jsonContext, int clientIndex);
      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="encodedContext">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      string Group_ReadGroupEntitiesPageByOffset(string encodedContext, int pageOffset, int clientIndex);
      /// <summary>
      /// Read the specified group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="clientIndex"></param>
      string Group_ReadGroupEntity(string groupId, string entityId, int clientIndex);
      /// <summary>
      /// Read the members of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      string Group_ReadGroupMembers(string groupId, int clientIndex);
      /// <summary>
      /// Reject an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      string Group_RejectGroupInvitation(string groupId, int clientIndex);
      /// <summary>
      /// Reject an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      string Group_RejectGroupJoinRequest(string groupId, string profileId, int clientIndex);
      /// <summary>
      /// Remove a member from the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being deleted.</param>
      /// <param name="clientIndex"></param>
      string Group_RemoveGroupMember(string groupId, string profileId, int clientIndex);
      /// <summary>
      /// Updates a group's data.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Version to verify.</param>
      /// <param name="jsonData">Data to apply.</param>
      /// <param name="clientIndex"></param>
      string Group_UpdateGroupData(string groupId, long version, string jsonData, int clientIndex);
      /// <summary>
      /// Update a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      string Group_UpdateGroupEntityData(string groupId, string entityId, long version, string jsonData, int clientIndex);
      /// <summary>
      /// Update a member of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being updated.</param>
      /// <param name="role">Role of the member being updated (optional).</param>
      /// <param name="jsonAttributes">Attributes of the member being updated (optional).</param>
      /// <param name="clientIndex"></param>
      string Group_UpdateGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      /// <summary>
      /// Updates a group's name.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="name">Name to apply.</param>
      /// <param name="clientIndex"></param>
      string Group_UpdateGroupName(string groupId, string name, int clientIndex);
      /// <summary>
      /// Attach a Email and Password identity to the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      string Identity_AttachEmailIdentity(string email, string password, int clientIndex);
      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      string Identity_MergeEmailIdentity(string email, string password, int clientIndex);
      /// <summary>
      /// Detach the e-mail identity from the current profile
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      string Identity_DetachEmailIdentity(string email, bool continueAnon, int clientIndex);
      /// <summary>
      /// Attach a Universal (userId + password) identity to the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      string Identity_AttachUniversalIdentity(string userId, string password, int clientIndex);
      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      string Identity_MergeUniversalIdentity(string userId, string password, int clientIndex);
      /// <summary>
      /// Detach the universal identity from the current profile
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      string Identity_DetachUniversalIdentity(string userId, bool continueAnon, int clientIndex);
      /// <summary>
      /// Switch to a Child Profile
      /// </summary>
      /// <param name="childProfileId">The profileId of the child profile to switch toIf null and forceCreate is true a new profile will be created</param>
      /// <param name="childAppId">The appId of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      string Identity_SwitchToChildProfile(string childProfileId, string childAppId, bool forceCreate, int clientIndex);
      /// <summary>
      /// Switches to the child profile of an app when only one profile exists
      /// If multiple profiles exist this returns an error
      /// </summary>
      /// <param name="childAppId">The App ID of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if one does not exist?</param>
      /// <param name="clientIndex"></param>
      string Identity_SwitchToSingletonChildProfile(string childAppId, bool forceCreate, int clientIndex);
      /// <summary>
      /// Attach a new identity to a parent app
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      string Identity_AttachParentWithIdentity(string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex);
      /// <summary>
      /// Switch to a Parent Profile
      /// </summary>
      /// <param name="parentLevelName">The level of the parent to switch to</param>
      /// <param name="clientIndex"></param>
      string Identity_SwitchToParentProfile(string parentLevelName, int clientIndex);
      /// <summary>
      /// Detaches parent from this user's profile
      /// </summary>
      /// <param name="clientIndex"></param>
      string Identity_DetachParent(int clientIndex);
      /// <summary>
      /// Returns a list of all child profiles in child Apps
      /// </summary>
      /// <param name="includeSummaryData">Whether to return the summary friend data along with this call</param>
      /// <param name="clientIndex"></param>
      string Identity_GetChildProfiles(bool includeSummaryData, int clientIndex);
      /// <summary>
      /// Retrieve list of identities
      /// </summary>
      /// <param name="clientIndex"></param>
      string Identity_GetIdentities(int clientIndex);
      /// <summary>
      /// Retrieve list of expired identities
      /// </summary>
      /// <param name="clientIndex"></param>
      string Identity_GetExpiredIdentities(int clientIndex);
      /// <summary>
      /// Refreshes an identity for this user
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="clientIndex"></param>
      string Identity_RefreshIdentity(string externalId, string authenticationToken, string authenticationType, int clientIndex);
      /// <summary>
      /// Allows email identity email address to be changed
      /// </summary>
      /// <param name="oldEmailAddress">Old email address</param>
      /// <param name="password">Password for identity</param>
      /// <param name="newEmailAddress">New email address</param>
      /// <param name="updateContactEmail">Whether to update contact email in profile</param>
      /// <param name="clientIndex"></param>
      string Identity_ChangeEmailIdentity(string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex);
      /// <summary>
      /// Attaches a peer identity to this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      string Identity_AttachPeerProfile(string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex);
      /// <summary>
      /// Detaches a peer identity from this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="clientIndex"></param>
      string Identity_DetachPeer(string peer, int clientIndex);
      /// <summary>
      /// Retrieves a list of attached peer profiles
      /// </summary>
      /// <param name="clientIndex"></param>
      string Identity_GetPeerProfiles(int clientIndex);
      /// <summary>
      /// Sends a simple text email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="subject">The email subject</param>
      /// <param name="body">The email body</param>
      /// <param name="clientIndex"></param>
      string Mail_SendBasicEmail(string profileId, string subject, string body, int clientIndex);
      /// <summary>
      /// Sends an advanced email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      string Mail_SendAdvancedEmail(string profileId, string jsonServiceParams, int clientIndex);
      /// <summary>
      /// Sends an advanced email to the specified email address
      /// </summary>
      /// <param name="emailAddress">The address to send the email to</param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      string Mail_SendAdvancedEmailByAddress(string emailAddress, string jsonServiceParams, int clientIndex);
      /// <summary>
      /// Read match making record
      /// </summary>
      /// <param name="clientIndex"></param>
      string MatchMaking_Read(int clientIndex);
      /// <summary>
      /// Sets player rating
      /// </summary>
      /// <param name="playerRating">The new player rating.</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_SetPlayerRating(long playerRating, int clientIndex);
      /// <summary>
      /// Resets player rating
      /// </summary>
      /// <param name="clientIndex"></param>
      string MatchMaking_ResetPlayerRating(int clientIndex);
      /// <summary>
      /// Increments player rating
      /// </summary>
      /// <param name="increment">The increment amount</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_IncrementPlayerRating(long increment, int clientIndex);
      /// <summary>
      /// Decrements player rating
      /// </summary>
      /// <param name="decrement">The decrement amount</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_DecrementPlayerRating(long decrement, int clientIndex);
      /// <summary>
      /// Turns shield on
      /// </summary>
      /// <param name="clientIndex"></param>
      string MatchMaking_TurnShieldOn(int clientIndex);
      /// <summary>
      /// Turns shield on for the specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to turn the shield on for</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_TurnShieldOnFor(int minutes, int clientIndex);
      /// <summary>
      /// Turns shield off
      /// </summary>
      /// <param name="clientIndex"></param>
      string MatchMaking_TurnShieldOff(int clientIndex);
      /// <summary>
      /// Increases the shield on time by specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to increase the shield time for</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_IncrementShieldOnFor(int minutes, int clientIndex);
      /// <summary>
      /// Gets the shield expiry for the given player id. Passing in a null player id
      /// will return the shield expiry for the current player. The value returned is
      /// the time in UTC millis when the shield will expire.
      /// </summary>
      /// <param name="playerId">The player id or use null to retrieve for the current player</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_GetShieldExpiry(string playerId, int clientIndex);
      /// <summary>
      /// Finds matchmaking enabled players
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_FindPlayers(long rangeDelta, long numMatches, int clientIndex);
      /// <summary>
      /// Finds matchmaking enabled players with additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_FindPlayersWithAttributes(long rangeDelta, long numMatches, string jsonAttributes, int clientIndex);
      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_FindPlayersUsingFilter(long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex);
      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// and additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      string MatchMaking_FindPlayersWithAttributesUsingFilter(long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex);
      /// <summary>
      /// Enables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      string MatchMaking_EnableMatchMaking(int clientIndex);
      /// <summary>
      /// Disables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      string MatchMaking_DisableMatchMaking(int clientIndex);
      /// <summary>
      /// Starts a match
      /// </summary>
      /// <param name="otherPlayerId">The player to start a match with</param>
      /// <param name="rangeDelta">The range delta used for the initial match search</param>
      /// <param name="clientIndex"></param>
      string OneWayMatch_StartMatch(string otherPlayerId, long rangeDelta, int clientIndex);
      /// <summary>
      /// Cancels a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the start match</param>
      /// <param name="clientIndex"></param>
      string OneWayMatch_CancelMatch(string playbackStreamId, int clientIndex);
      /// <summary>
      /// Completes a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the initial start match</param>
      /// <param name="clientIndex"></param>
      string OneWayMatch_CompleteMatch(string playbackStreamId, int clientIndex);
      /// <summary>
      /// Starts a stream
      /// </summary>
      /// <param name="targetPlayerId">The player to start a stream with</param>
      /// <param name="includeSharedData">Whether to include shared data in the stream</param>
      /// <param name="clientIndex"></param>
      string PlaybackStream_StartStream(string targetPlayerId, bool includeSharedData, int clientIndex);
      /// <summary>
      /// Reads a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      string PlaybackStream_ReadStream(string playbackStreamId, int clientIndex);
      /// <summary>
      /// Ends a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      string PlaybackStream_EndStream(string playbackStreamId, int clientIndex);
      /// <summary>
      /// Deletes a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      string PlaybackStream_DeleteStream(string playbackStreamId, int clientIndex);
      /// <summary>
      /// Adds a stream event
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="eventData">Describes the event</param>
      /// <param name="summary">Current summary data as of this event</param>
      /// <param name="clientIndex"></param>
      string PlaybackStream_AddEvent(string playbackStreamId, string eventData, string summary, int clientIndex);
      /// <summary>
      /// Gets recent streams for initiating player
      /// </summary>
      /// <param name="initiatingPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      string PlaybackStream_GetRecentStreamsForInitiatingPlayer(string initiatingPlayerId, int maxNumStreams, int clientIndex);
      /// <summary>
      /// Gets recent streams for target player
      /// </summary>
      /// <param name="targetPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      string PlaybackStream_GetRecentStreamsForTargetPlayer(string targetPlayerId, int maxNumStreams, int clientIndex);
      /// <summary>
      /// Read the state of the currently logged in user.
      /// This method returns a JSON object describing most of the
      /// player's data: entities, statistics, level, currency.
      /// Apps will typically call this method after authenticating to get an
      /// up-to-date view of the user's data.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerState_ReadUserState(int clientIndex);
      /// <summary>
      /// Completely deletes the user record and all data fully owned
      /// by the user. After calling this method, the user will need
      /// to re-authenticate and create a new profile.
      /// This is mostly used for debugging/qa.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerState_DeleteUser(int clientIndex);
      /// <summary>
      /// This method will delete *most* data for the currently logged in user.
      /// Data which is not deleted includes: currency, credentials, and
      /// purchase transactions. ResetUser is different from DeleteUser in that
      /// the player record will continue to exist after the reset (so the user
      /// does not need to re-authenticate).
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerState_ResetUser(int clientIndex);
      /// <summary>
      /// Logs user out of server.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerState_Logout(int clientIndex);
      /// <summary>
      /// Sets the user name.
      /// </summary>
      /// <param name="userName">The name of the user</param>
      /// <param name="clientIndex"></param>
      string PlayerState_UpdateUserName(string userName, int clientIndex);
      /// <summary>
      /// Updates the "friend summary data" associated with the logged in user.
      /// Some operations will return this summary data. For instance the social
      /// leaderboards will return the player's score in the leaderboard along
      /// with the friend summary data. Generally this data is used to provide
      /// a quick overview of the player without requiring a separate API call
      /// to read their public stats or entity data.
      /// </summary>
      /// <param name="jsonSummaryData">A JSON string defining the summary data.For example:{  "xp":123,  "level":12,  "highScore":45123}</param>
      /// <param name="clientIndex"></param>
      string PlayerState_UpdateSummaryFriendData(string jsonSummaryData, int clientIndex);
      /// <summary>
      /// Retrieve the user's attributes.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerState_GetAttributes(int clientIndex);
      /// <summary>
      /// Update user's attributes.
      /// </summary>
      /// <param name="jsonAttributes">Single layer json string that is a set of key-value pairs</param>
      /// <param name="wipeExisting">Whether to wipe existing attributes prior to update.</param>
      /// <param name="clientIndex"></param>
      string PlayerState_UpdateAttributes(string jsonAttributes, bool wipeExisting, int clientIndex);
      /// <summary>
      /// Remove user's attributes.
      /// </summary>
      /// <param name="attributeNames">List of attribute names.</param>
      /// <param name="clientIndex"></param>
      string PlayerState_RemoveAttributes(List<string> attributeNames, int clientIndex);
      /// <summary>
      /// Updates player's picture URL.
      /// </summary>
      /// <param name="pictureUrl">URL to apply.</param>
      /// <param name="clientIndex"></param>
      string PlayerState_UpdateUserPictureUrl(string pictureUrl, int clientIndex);
      /// <summary>
      /// Update the user's contact email.
      /// Note this is unrelated to email authentication.
      /// </summary>
      /// <param name="contactEmail">Updated email</param>
      /// <param name="clientIndex"></param>
      string PlayerState_UpdateContactEmail(string contactEmail, int clientIndex);
      /// <summary>
      /// Read all available user statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_ReadAllUserStats(int clientIndex);
      /// <summary>
      /// Reads a subset of user statistics as defined by the input JSON.
      /// </summary>
      /// <param name="playerStats"></param>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_ReadUserStatsSubset(List<string> playerStats, int clientIndex);
      /// <summary>
      /// Method retrieves the user statistics for the given category.
      /// </summary>
      /// <param name="category">The user statistics category</param>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_ReadUserStatsForCategory(string category, int clientIndex);
      /// <summary>
      /// Reset all of the statistics for this user back to their initial value.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_ResetAllUserStats(int clientIndex);
      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_IncrementUserStats_SSFO(string jsonData, int clientIndex);
      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="dictData">Stats name and their increments:{ {"stat1", 10}, {"stat1", -5}}would increment stat1 by 10 and decrement stat2 by 5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_IncrementUserStats_DSFO(Dictionary<string, string> dictData, int clientIndex);
      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_ProcessStatistics(Dictionary<string, string> statisticsData, int clientIndex);
      /// <summary>
      /// Returns JSON representing the next experience level for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_GetNextExperienceLevel(int clientIndex);
      /// <summary>
      /// Increments the user's experience. If the user goes up a level,
      /// the new level details will be returned along with a list of rewards.
      /// </summary>
      /// <param name="xpValue">The amount to increase the user's experience by</param>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_IncrementExperiencePoints(int xpValue, int clientIndex);
      /// <summary>
      /// Sets the user's experience to an absolute value. Note that this
      /// is simply a set and will not reward the user if their level changes
      /// as a result.
      /// </summary>
      /// <param name="xpValue">The amount to set the the player's experience to</param>
      /// <param name="clientIndex"></param>
      string PlayerStatistics_SetExperiencePoints(int xpValue, int clientIndex);
      /// <summary>
      /// Trigger an event server side that will increase the user statistics.
      /// This may cause one or more awards to be sent back to the user -
      /// could be achievements, experience, etc. Achievements will be sent by this
      /// client library to the appropriate awards service (Apple Game Center, etc).
      /// 
      /// This mechanism supercedes the PlayerStatisticsService API methods, since
      /// PlayerStatisticsService API method only update the raw statistics without
      /// triggering the rewards.
      /// </summary>
      /// <param name="eventName"></param>
      /// <param name="eventMultiplier"></param>
      /// <param name="clientIndex"></param>
      string PlayerStatisticsEvent_TriggerStatsEvent(string eventName, int eventMultiplier, int clientIndex);
      /// <summary>
      /// See documentation for TriggerStatsEvent for more
      /// documentation.
      /// </summary>
      /// <param name="jsonData">jsonData[  {    "eventName": "event1",    "eventMultiplier": 1  },  {    "eventName": "event2",    "eventMultiplier": 1  }]</param>
      /// <param name="clientIndex"></param>
      string PlayerStatisticsEvent_TriggerStatsEvents(string jsonData, int clientIndex);
      /// <summary>
      /// Gets the player's currency for the given currency type
      /// or all currency types if null passed in.
      /// </summary>
      /// <param name="currencyType">The currency type to retrieve or nullif all currency types are being requested.</param>
      /// <param name="clientIndex"></param>
      string Product_GetCurrency(string currencyType, int clientIndex);
      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="clientIndex"></param>
      string Product_GetSalesInventory(string platform, string userCurrency, int clientIndex);
      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type and category.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="category">The product category</param>
      /// <param name="clientIndex"></param>
      string Product_GetSalesInventoryByCategory(string platform, string userCurrency, string category, int clientIndex);
      /// <summary>
      /// Verify Microsoft Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="receipt">Receipt XML</param>
      /// <param name="clientIndex"></param>
      string Product_VerifyMicrosoftReceipt(string receipt, int clientIndex);
      /// <summary>
      /// Returns the eligible promotions for the player.
      /// </summary>
      /// <param name="clientIndex"></param>
      string Product_GetEligiblePromotions(int clientIndex);
      /// <summary>
      /// Verify ITunes Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="base64EncReceiptData">Base64 encoded receipt data</param>
      /// <param name="clientIndex"></param>
      string Product_VerifyItunesReceipt(string base64EncReceiptData, int clientIndex);
      /// <summary>
      /// Checks supplied text for profanity.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      string Profanity_ProfanityCheck(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex);
      /// <summary>
      /// Replaces the characters of profanity text with a passed character(s).
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="replaceSymbol">The text to replace individual characters of profanity text with</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      string Profanity_ProfanityReplaceText(string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex);
      /// <summary>
      /// Checks supplied text for profanity and returns a list of bad wors.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      string Profanity_ProfanityIdentifyBadWords(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex);
      /// <summary>
      /// Deregisters all device tokens currently registered to the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      string PushNotification_DeregisterAllPushNotificationDeviceTokens(int clientIndex);
      /// <summary>
      /// Deregisters the given device token from the server to disable this device
      /// from receiving push notifications.
      /// </summary>
      /// <param name="platform">The device platform being registered.</param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      string PushNotification_DeregisterPushNotificationDeviceToken(string platform, string token, int clientIndex);
      /// <summary>
      /// Registers the given device token with the server to enable this device
      /// to receive push notifications.
      /// </summary>
      /// <param name="platform"></param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      string PushNotification_RegisterPushNotificationDeviceToken(string platform, string token, int clientIndex);
      /// <summary>
      /// Sends a simple push notification based on the passed in message.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="message">Text of the push notification</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendSimplePushNotification(string toProfileId, string message, int clientIndex);
      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendRichPushNotification(string toProfileId, int notificationTemplateId, int clientIndex);
      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendRichPushNotificationWithParams(string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex);
      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionsJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendTemplatedPushNotificationToGroup(string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex);
      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendNormalizedPushNotificationToGroup(string groupId, string alertContentJson, string customDataJson, int clientIndex);
      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      string PushNotification_ScheduleRawPushNotificationUTC(string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex);
      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      string PushNotification_ScheduleRawPushNotificationMinutes(string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex);
      /// <summary>
      /// Sends a raw push notification to a target user.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendRawPushNotification(string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex);
      /// <summary>
      /// Sends a raw push notification to a target list of users.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendRawPushNotificationBatch(List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex);
      /// <summary>
      /// Sends a raw push notification to a target group.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendRawPushNotificationToGroup(string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex);
      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      string PushNotification_ScheduleNormalizedPushNotificationUTC(string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex);
      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      string PushNotification_ScheduleNormalizedPushNotificationMinutes(string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex);
      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      string PushNotification_ScheduleRichPushNotificationUTC(string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex);
      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      string PushNotification_ScheduleRichPushNotificationMinutes(string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex);
      /// <summary>
      /// Sends a notification to a user consisting of alert content and custom data.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendNormalizedPushNotification(string toProfileId, string alertContentJson, string customDataJson, int clientIndex);
      /// <summary>
      /// Sends a notification to multiple users consisting of alert content and custom data.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      string PushNotification_SendNormalizedPushNotificationBatch(List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex);
      /// <summary>
      /// Executes a script on the server.
      /// </summary>
      /// <param name="scriptName">The name of the script to be run</param>
      /// <param name="jsonScriptData">Data to be sent to the script in json format</param>
      /// <param name="clientIndex"></param>
      string Script_RunScript(string scriptName, string jsonScriptData, int clientIndex);
      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="startDateInUTC">The start date as a DateTime object</param>
      /// <param name="clientIndex"></param>
      string Script_ScheduleRunScriptUTC(string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex);
      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="minutesFromNow">Number of minutes from now to run script</param>
      /// <param name="clientIndex"></param>
      string Script_ScheduleRunScriptMinutes(string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex);
      /// <summary>
      /// Run a cloud script in a parent app
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="parentLevel">The level name of the parent to run the script from</param>
      /// <param name="clientIndex"></param>
      string Script_RunParentScript(string scriptName, string jsonScriptData, string parentLevel, int clientIndex);
      /// <summary>
      /// Cancels a scheduled cloud code script
      /// </summary>
      /// <param name="jobId">ID of script job to cancel</param>
      /// <param name="clientIndex"></param>
      string Script_CancelScheduledScript(string jobId, int clientIndex);
      /// <summary>
      /// Runs a script from the context of a peer
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      string Script_RunPeerScript(string scriptName, string jsonScriptData, string peer, int clientIndex);
      /// <summary>
      /// Runs a script asynchronously from the context of a peer
      /// This operation does not wait for the script to complete before returning
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      string Script_RunPeerScriptAsynch(string scriptName, string jsonScriptData, string peer, int clientIndex);
      /// <summary>
      /// Method returns the social leaderboard. A player's social leaderboard is
      /// comprised of players who are recognized as being your friend.
      /// For now, this applies solely to Facebook connected players who are
      /// friends with the logged in player (who also must be Facebook connected).
      /// In the future this will expand to other identification means (such as
      /// Game Centre, Google circles etc).
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score. The currently logged in player will also
      /// be returned in the social leaderboard.
      /// 
      /// Note: If no friends have played the game, the bestScore, createdAt, updatedAt
      /// will contain NULL.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetSocialLeaderboard(string leaderboardId, bool replaceName, int clientIndex);
      /// <summary>
      /// Reads multiple social leaderboards.
      /// </summary>
      /// <param name="leaderboardIds">Array of leaderboard id strings</param>
      /// <param name="leaderboardResultCount">Maximum count of entries to return for each leaderboard.</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetMultiSocialLeaderboard(List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex);
      /// <summary>
      /// Method returns a page of global leaderboard results.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// 
      /// Note: This method allows the client to retrieve pages from within the global leaderboard list
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGlobalLeaderboardPage(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex);
      /// <summary>
      /// Method returns a page of global leaderboard results. By using a non-current version id,
      /// the user can retrieve a historical leaderboard. See GetGlobalLeaderboardVersions method
      /// to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="versionId">The historical version to retrieve.</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGlobalLeaderboardPageByVersion(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex);
      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGlobalLeaderboardView(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex);
      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// By using a non-current version id, the user can retrieve a historical leaderboard.
      /// See GetGlobalLeaderboardVersions method to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="versionId">The historial version to retrieve. Use -1 for current leaderboard.</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGlobalLeaderboardViewByVersion(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex);
      /// <summary>
      /// Gets the global leaderboard versions.
      /// </summary>
      /// <param name="leaderboardId">In_leaderboard identifier.</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGlobalLeaderboardVersions(string leaderboardId, int clientIndex);
      /// <summary>
      /// Retrieve the social leaderboard for a group.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to read</param>
      /// <param name="groupId">The group ID</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGroupSocialLeaderboard(string leaderboardId, string groupId, int clientIndex);
      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// 
      /// Note that the behaviour of posting a score can be modified in
      /// the brainCloud portal. By default, the server will only keep
      /// the player's best score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_PostScoreToLeaderboard(string leaderboardId, long score, string jsonData, int clientIndex);
      /// <summary>
      /// Removes a player's score from the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_RemovePlayerScore(string leaderboardId, int versionId, int clientIndex);
      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationType">Type of rotation</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_PostScoreToDynamicLeaderboard(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex);
      /// <summary>
      /// Post the players score to the given social leaderboard with a rotation type of DAYS.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="numDaysToRotate">How many days between each rotation</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_PostScoreToDynamicLeaderboardDays(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex);
      /// <summary>
      /// Retrieve the social leaderboard for a list of players.
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="profileIds">The IDs of the players</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetPlayersSocialLeaderboard(string leaderboardId, List<string> profileIds, int clientIndex);
      /// <summary>
      /// Retrieve a list of all leaderboards
      /// </summary>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_ListLeaderboards(int clientIndex);
      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGlobalLeaderboardEntryCount(string leaderboardId, int clientIndex);
      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(string leaderboardId, int versionId, int clientIndex);
      /// <summary>
      /// Gets a player's score from a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard. Use -1 for current.</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetPlayerScore(string leaderboardId, int versionId, int clientIndex);
      /// <summary>
      /// Gets a player's score from multiple leaderboards
      /// </summary>
      /// <param name="leaderboardIds">A collection of leaderboardIds to retrieve scores from</param>
      /// <param name="clientIndex"></param>
      string SocialLeaderboard_GetPlayerScoresFromLeaderboards(List<string> leaderboardIds, int clientIndex);
      /// <summary>
      /// Method returns the server time in UTC. This is in UNIX millis time format.
      /// For instance 1396378241893 represents 2014-04-01 2:50:41.893 in GMT-4.
      /// </summary>
      /// <param name="clientIndex"></param>
      string Time_ReadServerTime(int clientIndex);
      /// <summary>
      /// Processes any outstanding rewards for the given player
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament to claim rewards for.Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      string Tournament_ClaimTournamentReward(string leaderboardId, int versionId, int clientIndex);
      /// <summary>
      /// Get tournament status associated with a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      string Tournament_GetTournamentStatus(string leaderboardId, int versionId, int clientIndex);
      /// <summary>
      /// Join the specified tournament.
      /// Any entry fees will be automatically collected.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="tournamentCode">Tournament to join</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      string Tournament_JoinTournament(string leaderboardId, string tournamentCode, long initialScore, int clientIndex);
      /// <summary>
      /// Removes player's score from tournament leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      string Tournament_LeaveTournament(string leaderboardId, int clientIndex);
      /// <summary>
      /// Post the users score to the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="clientIndex"></param>
      string Tournament_PostTournamentScore(string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex);
      /// <summary>
      /// Post the users score to the leaderboard and returns the results
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      string Tournament_PostTournamentScoreWithResults(string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex);
      /// <summary>
      /// Returns the user's expected reward based on the current scores
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      string Tournament_ViewCurrentReward(string leaderboardId, int clientIndex);
      /// <summary>
      /// Returns the user's reward from a finished tournament
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      string Tournament_ViewReward(string leaderboardId, int versionId, int clientIndex);
      string Patch_GetGameManifest(string gameId, int clientIndex);
      string SocialFeed_ShareVideo(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string SocialFeed_ShareScreenshot(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string SocialFeed_ShareAchievement(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string SocialFeed_ShareApp(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string SocialFeed_ShareChannel(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string SocialFeed_ShareLink(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string SocialFeed_ShareGameGuide(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string SocialFeed_ReadSocialFeed(int skip, int limit, int clientIndex);
      string SocialFeed_ReadFilteredSocialFeed(int skip, int limit, List<string> playerIds, int clientIndex);
      string SocialFeed_ReadFriendsSocialFeed(int skip, int limit, int clientIndex);
      string SocialFeed_PostComment(int timestamp, string parentId, string content, int clientIndex);
      string SocialFeed_PostCommentReply(int timestamp, string parentId, string content, int clientIndex);
      string SocialFeed_ReadComments(int skip, int limit, string parentId, int clientIndex);
      string SocialFeed_ReadCommentReplies(int skip, int limit, string parentId, int clientIndex);
      string SocialFeed_LikeComment(string socialFeedId, int clientIndex);
      string SocialFeed_LikeActivity(string socialFeedId, int clientIndex);
      string SocialFeed_UnlikeComment(string socialFeedId, int clientIndex);
      string SocialFeed_UnlikeActivity(string socialFeedId, int clientIndex);
      string SocialFeed_SetFeedVisibility(string visibility, int clientIndex);
      string SocialFeed_BlockPlayer(string playerId, int clientIndex);
      string SocialFeed_HidePlayer(string playerId, int clientIndex);
      string SocialFeed_UnblockPlayer(string playerId, int clientIndex);
      string SocialFeed_UnhidePlayer(string playerId, int clientIndex);
      string Telemetry_StartTelemetrySession(int timestamp, int clientIndex);
      string Telemetry_EndTelemetrySession(string telemetrySessionId, int timestamp, int clientIndex);
      string Telemetry_LogTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex);
      string Telemetry_StartTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex);
      string Telemetry_EndTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex);
      string File_DownloadFile(string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex);
      string File_GetDownloadInfo(string cloudPath, string cloudFilename, int clientIndex);
      string File_CancelDownload(string cloudPath, string cloudFilename, int clientIndex);
    }

    public interface Iface : ISync {
      /// <summary>
      /// Creates an instance of an asynchronous match.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_CreateMatch(AsyncCallback callback, object state, string jsonOpponentIds, string pushNotificationMessage, int clientIndex);
      string End_AsyncMatch_CreateMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Creates an instance of an asynchronous match with an initial turn.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string defining what the other player will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_CreateMatchWithInitialTurn(AsyncCallback callback, object state, string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex);
      string End_AsyncMatch_CreateMatchWithInitialTurn(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Submits a turn for the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string that other players will see as a summary of the game when listing their games</param>
      /// <param name="jsonStatistics">Optional JSON string blob provided by the caller</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_SubmitTurn(AsyncCallback callback, object state, string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex);
      string End_AsyncMatch_SubmitTurn(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Allows the current player (only) to update Summary data without having to submit a whole turn.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonSummary">JSON string provided by the caller that other players will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_UpdateMatchSummaryData(AsyncCallback callback, object state, string ownerId, string matchId, long version, string jsonSummary, int clientIndex);
      string End_AsyncMatch_UpdateMatchSummaryData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Marks the given match as complete.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_CompleteMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex);
      string End_AsyncMatch_CompleteMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the current state of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_ReadMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex);
      string End_AsyncMatch_ReadMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the match history of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_ReadMatchHistory(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex);
      string End_AsyncMatch_ReadMatchHistory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns all matches that are NOT in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_FindMatches(AsyncCallback callback, object state, int clientIndex);
      string End_AsyncMatch_FindMatches(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns all matches that are in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_FindCompleteMatches(AsyncCallback callback, object state, int clientIndex);
      string End_AsyncMatch_FindCompleteMatches(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Marks the given match as abandoned.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_AbandonMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex);
      string End_AsyncMatch_AbandonMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Removes the match and match history from the server. DEBUG ONLY, in production it is recommended
      /// the user leave it as completed.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_AsyncMatch_DeleteMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex);
      string End_AsyncMatch_DeleteMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Used to create the anonymous installation id for the brainCloud profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_GenerateAnonymousId(AsyncCallback callback, object state, int clientIndex);
      string End_Authentication_GenerateAnonymousId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Initialize - initializes the identity service with a saved
      /// anonymous installation id and most recently used profile id
      /// </summary>
      /// <param name="profileId">The id of the profile id that was most recently used by the app (on this device)</param>
      /// <param name="anonymousId">The anonymous installation id that was generated for this device</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_Initialize(AsyncCallback callback, object state, string profileId, string anonymousId, int clientIndex);
      void End_Authentication_Initialize(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Used to clear the saved profile id - to use in cases when the user is
      /// attempting to switch to a different app profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_ClearSavedProfileID(AsyncCallback callback, object state, int clientIndex);
      void End_Authentication_ClearSavedProfileID(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Authenticate a user anonymously with brainCloud - used for apps that don't want to bother
      /// the user to login, or for users who are sensitive to their privacy
      /// </summary>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_AuthenticateAnonymous(AsyncCallback callback, object state, bool forceCreate, int clientIndex);
      string End_Authentication_AuthenticateAnonymous(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Authenticate the user with a custom Email and Password.  Note that the client app
      /// is responsible for collecting (and storing) the e-mail and potentially password
      /// (for convenience) in the client data.  For the greatest security,
      /// force the user to re-enter their password at each login.
      /// (Or at least give them that option).
      /// </summary>
      /// <param name="email">The e-mail address of the user</param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_AuthenticateEmailPassword(AsyncCallback callback, object state, string email, string password, bool forceCreate, int clientIndex);
      string End_Authentication_AuthenticateEmailPassword(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Authenticate the user using a userId and password (without any validation on the userId).
      /// Similar to AuthenticateEmailPassword - except that that method has additional features to
      /// allow for e-mail validation, password resets, etc.
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_AuthenticateUniversal(AsyncCallback callback, object state, string userId, string password, bool forceCreate, int clientIndex);
      string End_Authentication_AuthenticateUniversal(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Authenticate the user via cloud code (which in turn validates the supplied credentials against an external system).
      /// This allows the developer to extend brainCloud authentication to support other backend authentication systems.
      /// </summary>
      /// <param name="userId">The user id</param>
      /// <param name="token">The user token (password etc)</param>
      /// <param name="externalAuthName">The name of the cloud script to call for external authentication</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_AuthenticateExternal(AsyncCallback callback, object state, string userId, string token, string externalAuthName, bool forceCreate, int clientIndex);
      string End_Authentication_AuthenticateExternal(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reset Email password - Sends a password reset email to the specified address
      /// </summary>
      /// <param name="externalId">The email address to send the reset email to.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Authentication_ResetEmailPassword(AsyncCallback callback, object state, string externalId, int clientIndex);
      string End_Authentication_ResetEmailPassword(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the sessionId or empty string if no session present.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_GetSessionId(AsyncCallback callback, object state, int clientIndex);
      string End_Client_GetSessionId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns true if the user is currently authenticated.
      /// If a session time out or session invalidation is returned from executing a
      /// sever API call, this flag will reset back to false.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_IsAuthenticated(AsyncCallback callback, object state, int clientIndex);
      bool End_Client_IsAuthenticated(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns true if brainCloud has been initialized.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_IsInitialized(AsyncCallback callback, object state, int clientIndex);
      bool End_Client_IsInitialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId"></param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_Initialize_SSS(AsyncCallback callback, object state, string secretKey, string appId, string appVersion, int clientIndex);
      void End_Client_Initialize_SSS(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="serverURL">The URL to the brainCloud server</param>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId">The app id</param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_Initialize_SSSS(AsyncCallback callback, object state, string serverURL, string secretKey, string appId, string appVersion, int clientIndex);
      void End_Client_Initialize_SSSS(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Initialize the identity aspects of brainCloud.
      /// </summary>
      /// <param name="profileId">The profile id</param>
      /// <param name="anonymousId">The anonymous id</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_InitializeIdentity(AsyncCallback callback, object state, string profileId, string anonymousId, int clientIndex);
      void End_Client_InitializeIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Update method needs to be called regularly in order
      /// to process incoming and outgoing messages.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_Update(AsyncCallback callback, object state, int clientIndex);
      void End_Client_Update(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Enable logging of brainCloud transactions (comms etc)
      /// </summary>
      /// <param name="enable">True if logging is to be enabled</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_EnableLogging(AsyncCallback callback, object state, bool enable, int clientIndex);
      void End_Client_EnableLogging(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Resets all messages and calls to the server
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_ResetCommunication(AsyncCallback callback, object state, int clientIndex);
      void End_Client_ResetCommunication(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the packet timeouts using a list of integers that
      /// represent timeout values for each packet retry. The
      /// first item in the list represents the timeout for the first packet
      /// attempt, the second for the second packet attempt, and so on.
      /// 
      /// The number of entries in this array determines how many packet
      /// retries will occur.
      /// 
      /// By default, the packet timeout array is {10, 10, 10}
      /// 
      /// Note that this method does not change the timeout for authentication
      /// packets (use SetAuthenticationPacketTimeout method).
      /// </summary>
      /// <param name="timeouts">An array of packet timeouts.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_SetPacketTimeouts(AsyncCallback callback, object state, List<int> timeouts, int clientIndex);
      void End_Client_SetPacketTimeouts(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the packet timeouts back to default.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_SetPacketTimeoutsToDefault(AsyncCallback callback, object state, int clientIndex);
      void End_Client_SetPacketTimeoutsToDefault(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the list of packet timeouts.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_GetPacketTimeouts(AsyncCallback callback, object state, int clientIndex);
      List<int> End_Client_GetPacketTimeouts(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_SetAuthenticationPacketTimeout(AsyncCallback callback, object state, int timeoutSecs, int clientIndex);
      void End_Client_SetAuthenticationPacketTimeout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_GetAuthenticationPacketTimeout(AsyncCallback callback, object state, int clientIndex);
      int End_Client_GetAuthenticationPacketTimeout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the low transfer rate timeout in secs
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_GetUploadLowTransferRateTimeout(AsyncCallback callback, object state, int clientIndex);
      int End_Client_GetUploadLowTransferRateTimeout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the timeout in seconds of a low speed upload
      /// (i.e. transfer rate which is underneath the low transfer rate threshold).
      /// By default this is set to 120 secs.Setting this value to 0 will
      /// turn off the timeout. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_SetUploadLowTransferRateTimeout(AsyncCallback callback, object state, int timeoutSecs, int clientIndex);
      void End_Client_SetUploadLowTransferRateTimeout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the low transfer rate threshold in bytes/sec
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_GetUploadLowTransferRateThreshold(AsyncCallback callback, object state, int clientIndex);
      int End_Client_GetUploadLowTransferRateThreshold(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the low transfer rate threshold of an upload in bytes/sec.
      /// If the transfer rate dips below the given threshold longer
      /// than the specified timeout, the transfer will fail.
      /// By default this is set to 50 bytes/sec. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="bytesPerSec">The low transfer rate threshold in bytes/sec</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_SetUploadLowTransferRateThreshold(AsyncCallback callback, object state, int bytesPerSec, int clientIndex);
      void End_Client_SetUploadLowTransferRateThreshold(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Enables the timeout message caching which is disabled by default.
      /// Once enabled, if a client side timeout is encountered
      /// (i.e. brainCloud server is unreachable presumably due to the client
      /// network being down) the SDK will do the following:
      /// 
      /// 1 - cache the currently queued messages to brainCloud
      /// 2 - call the network error callback
      /// 3 - then expect the app to call either:
      ///     a) RetryCachedMessages() to retry sending to brainCloud
      ///     b) FlushCachedMessages() to dump all messages in the queue.
      /// 
      /// Between steps 2 and 3, the app can prompt the user to retry connecting
      /// to brainCloud to determine whether to follow path 3a or 3b.
      /// 
      /// Note that if path 3a is followed, and another timeout is encountered,
      /// the process will begin all over again from step 1.
      /// 
      /// WARNING - the brainCloud SDK will cache *all* API calls sent
      /// when a timeout is encountered if this mechanism is enabled.
      /// This effectively freezes all communication with brainCloud.
      /// Apps must call either RetryCachedMessages() or FlushCachedMessages()
      /// for the brainCloud SDK to resume sending messages.
      /// ResetCommunication() will also clear the message cache.
      /// </summary>
      /// <param name="enabled">True if message should be cached on timeout</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_EnableNetworkErrorMessageCaching(AsyncCallback callback, object state, bool enabled, int clientIndex);
      void End_Client_EnableNetworkErrorMessageCaching(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attempts to resend any cached messages. If no messages are in the cache,
      /// this method does nothing.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_RetryCachedMessages(AsyncCallback callback, object state, int clientIndex);
      void End_Client_RetryCachedMessages(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Flushes the cached messages to resume API call processing. This will dump
      /// all of the cached messages in the queue.
      /// </summary>
      /// <param name="sendApiErrorCallbacks">If set to true API error callbacks willbe called for every cached message with statusCode CLIENT_NETWORK_ERROR and reasonCode CLIENT_NETWORK_ERROR_TIMEOUT.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_FlushCachedMessages(AsyncCallback callback, object state, bool sendApiErrorCallbacks, int clientIndex);
      void End_Client_FlushCachedMessages(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts a marker which will tell the brainCloud comms layer
      /// to close the message bundle off at this point. Any messages queued
      /// before this method was called will likely be bundled together in
      /// the next send to the server.
      /// 
      /// To ensure that only a single message is sent to the server you would
      /// do something like this:
      /// 
      /// InsertEndOfMessageBundleMarker()
      /// SomeApiCall()
      /// InsertEndOfMessageBundleMarker()
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_InsertEndOfMessageBundleMarker(AsyncCallback callback, object state, int clientIndex);
      void End_Client_InsertEndOfMessageBundleMarker(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the country code sent to brainCloud when a user authenticates.
      /// Will override any auto detected country.
      /// </summary>
      /// <param name="countryCode">ISO 3166-1 two-letter country code</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_OverrideCountryCode(AsyncCallback callback, object state, string countryCode, int clientIndex);
      void End_Client_OverrideCountryCode(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the language code sent to brainCloud when a user authenticates.
      /// If the language is set to a non-ISO 639-1 standard value the game default will be used instead.
      /// Will override any auto detected language.
      /// </summary>
      /// <param name="languageCode">ISO 639-1 two-letter language code</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Client_OverrideLanguageCode(AsyncCallback callback, object state, string languageCode, int clientIndex);
      void End_Client_OverrideLanguageCode(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Creates custom data stream page event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_DataStream_CustomPageEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex);
      string End_DataStream_CustomPageEvent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Creates custom data stream screen event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_DataStream_CustomScreenEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex);
      string End_DataStream_CustomScreenEvent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Creates custom data stream track event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_DataStream_CustomTrackEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex);
      string End_DataStream_CustomTrackEvent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_CreateEntity(AsyncCallback callback, object state, string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex);
      string End_Entity_CreateEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all user entities that match the given type.
      /// </summary>
      /// <param name="entityType">The entity type to search for</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetEntitiesByType(AsyncCallback callback, object state, string entityType, int clientIndex);
      string End_Entity_GetEntitiesByType(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method updates a new entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_UpdateEntity(AsyncCallback callback, object state, string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex);
      string End_Entity_UpdateEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method updates a shared entity owned by another user. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="targetProfileId">The id of the entity's owner</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_UpdateSharedEntity(AsyncCallback callback, object state, string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex);
      string End_Entity_UpdateSharedEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method deletes the given entity on the server.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_DeleteEntity(AsyncCallback callback, object state, string entityId, int version, int clientIndex);
      string End_Entity_DeleteEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method updates a singleton entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string. If the entity doesn't exist it is created.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_UpdateSingleton(AsyncCallback callback, object state, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex);
      string End_Entity_UpdateSingleton(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method deletes the given singleton on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_DeleteSingleton(AsyncCallback callback, object state, string entityType, int version, int clientIndex);
      string End_Entity_DeleteSingleton(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to get a specific entity.
      /// </summary>
      /// <param name="entityId">The id of the entity</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetEntity(AsyncCallback callback, object state, string entityId, int clientIndex);
      string End_Entity_GetEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves a singleton entity on the server. If the entity doesn't exist, null is returned.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetSingleton(AsyncCallback callback, object state, string entityType, int clientIndex);
      string End_Entity_GetSingleton(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns a shared entity for the given profile and entity ID.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The the profile ID of the user who owns the entity</param>
      /// <param name="entityId">The ID of the entity that will be retrieved</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetSharedEntityForProfileId(AsyncCallback callback, object state, string profileId, string entityId, int clientIndex);
      string End_Entity_GetSharedEntityForProfileId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all shared entities for the given profile id.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The profile id to retrieve shared entities for</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetSharedEntitiesForProfileId(AsyncCallback callback, object state, string profileId, int clientIndex);
      string End_Entity_GetSharedEntitiesForProfileId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetList(AsyncCallback callback, object state, string whereJson, string orderByJson, int maxReturn, int clientIndex);
      string End_Entity_GetList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets list of shared entities for the specified user based on type and/or where clause
      /// </summary>
      /// <param name="profileId">The profile ID to retrieve shared entities for</param>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetSharedEntitiesListForProfileId(AsyncCallback callback, object state, string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex);
      string End_Entity_GetSharedEntitiesListForProfileId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetListCount(AsyncCallback callback, object state, string whereJson, int clientIndex);
      string End_Entity_GetListCount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method uses a paging system to iterate through user entities.
      /// After retrieving a page of entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetPage(AsyncCallback callback, object state, string jsonContext, int clientIndex);
      string End_Entity_GetPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_GetPageOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex);
      string End_Entity_GetPageOffset(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Partial increment of entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_IncrementUserEntityData(AsyncCallback callback, object state, string entityId, string jsonData, int clientIndex);
      string End_Entity_IncrementUserEntityData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Partial increment of shared entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="targetProfileId">Profile ID of the entity owner</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Entity_IncrementSharedUserEntityData(AsyncCallback callback, object state, string entityId, string targetProfileId, string jsonData, int clientIndex);
      string End_Entity_IncrementSharedUserEntityData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends an event to the designated profile id with the attached json data.
      /// Any events that have been sent to a user will show up in their
      /// incoming event mailbox. If the recordLocally flag is set to true,
      /// a copy of this event (with the exact same event id) will be stored
      /// in the sending user's "sent" event mailbox.
      /// </summary>
      /// <param name="toProfileId">The id of the user who is being sent the event</param>
      /// <param name="eventType">The user-defined type of the event.</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Event_SendEvent(AsyncCallback callback, object state, string toProfileId, string eventType, string jsonEventData, int clientIndex);
      string End_Event_SendEvent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates an event in the user's incoming event mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Event_UpdateIncomingEventData(AsyncCallback callback, object state, string evId, string jsonEventData, int clientIndex);
      string End_Event_UpdateIncomingEventData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Delete an event out of the user's incoming mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Event_DeleteIncomingEvent(AsyncCallback callback, object state, string evId, int clientIndex);
      string End_Event_DeleteIncomingEvent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the events currently queued for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Event_GetEvents(AsyncCallback callback, object state, int clientIndex);
      string End_Event_GetEvents(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prepares a user file upload. On success the file will begin uploading
      /// to the brainCloud server.To be informed of success/failure of the upload
      /// register an IFileUploadCallback with the BrainCloudClient class.
      /// </summary>
      /// <param name="cloudPath">The desired cloud path of the file</param>
      /// <param name="cloudFilename">The desired cloud fileName of the file</param>
      /// <param name="shareable">True if the file is shareable</param>
      /// <param name="replaceIfExists">Whether to replace file if it exists</param>
      /// <param name="localPath">The path and fileName of the local file</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_UploadFile(AsyncCallback callback, object state, string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex);
      string End_File_UploadFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method cancels an upload. If an IFileUploadCallback has been registered with the BrainCloudClient class,
      /// the fileUploadFailed callback method will be called once the upload has been canceled.
      /// NOTE: The upload will still continue in the background on versions of Unity before 5.3
      /// and on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">Upload ID of the file to cancel</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_CancelUpload(AsyncCallback callback, object state, string uploadId, int clientIndex);
      void End_File_CancelUpload(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the progress of the given upload from 0.0 to 1.0 or -1 if upload not found.
      /// NOTE: This will always return 1 on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_GetUploadProgress(AsyncCallback callback, object state, string uploadId, int clientIndex);
      double End_File_GetUploadProgress(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the number of bytes uploaded or -1 if upload not found.
      /// NOTE: This will always return the total bytes to transfer on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_GetUploadBytesTransferred(AsyncCallback callback, object state, string uploadId, int clientIndex);
      long End_File_GetUploadBytesTransferred(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the total number of bytes that will be uploaded or -1 if upload not found.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_GetUploadTotalBytesToTransfer(AsyncCallback callback, object state, string uploadId, int clientIndex);
      long End_File_GetUploadTotalBytesToTransfer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// List all user files
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_ListUserFiles_SFO(AsyncCallback callback, object state, int clientIndex);
      string End_File_ListUserFiles_SFO(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// List user files from the given cloud path
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_ListUserFiles_SNSFO(AsyncCallback callback, object state, string cloudPath, bool recurse, int clientIndex);
      string End_File_ListUserFiles_SNSFO(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Deletes a single user file.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFileName"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_DeleteUserFile(AsyncCallback callback, object state, string cloudPath, string cloudFileName, int clientIndex);
      string End_File_DeleteUserFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Delete multiple user files
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_DeleteUserFiles(AsyncCallback callback, object state, string cloudPath, bool recurse, int clientIndex);
      string End_File_DeleteUserFiles(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the CDN URL for a file object.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFilename">Name of file</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_File_GetCDNUrl(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex);
      string End_File_GetCDNUrl(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves profile information for the partial matches of the specified text.
      /// </summary>
      /// <param name="searchText">Universal ID text on which to search.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_FindUserByUniversalId(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex);
      string End_Friend_FindUserByUniversalId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves profile information of the specified user.
      /// </summary>
      /// <param name="externalId">External id of the user to find</param>
      /// <param name="authenticationType">The authentication type used for the user's ID</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_GetProfileInfoForCredential(AsyncCallback callback, object state, string externalId, string authenticationType, int clientIndex);
      string End_Friend_GetProfileInfoForCredential(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves profile information for the specified external auth user.
      /// </summary>
      /// <param name="externalId">External id of the friend to find</param>
      /// <param name="externalAuthType">The external authentication type used for this friend's external id</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_GetProfileInfoForExternalAuthId(AsyncCallback callback, object state, string externalId, string externalAuthType, int clientIndex);
      string End_Friend_GetProfileInfoForExternalAuthId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves the external ID for the specified user profile ID on the specified social platform.
      /// </summary>
      /// <param name="profileId">Profile (user) ID.</param>
      /// <param name="authenticationType">Associated authentication type.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_GetExternalIdForProfileId(AsyncCallback callback, object state, string profileId, string authenticationType, int clientIndex);
      string End_Friend_GetExternalIdForProfileId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns a particular entity of a particular friend.
      /// </summary>
      /// <param name="entityId">Id of entity to retrieve.</param>
      /// <param name="friendId">Profile Id of friend who owns entity.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_ReadFriendEntity(AsyncCallback callback, object state, string entityId, string friendId, int clientIndex);
      string End_Friend_ReadFriendEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns entities of all friends based on type and/or subtype.
      /// </summary>
      /// <param name="entityType">Types of entities to retrieve.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_ReadFriendsEntities(AsyncCallback callback, object state, string entityType, int clientIndex);
      string End_Friend_ReadFriendsEntities(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns user state of a particular friend.
      /// </summary>
      /// <param name="friendId">Profile Id of friend to retrieve user state for.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_ReadFriendUserState(AsyncCallback callback, object state, string friendId, int clientIndex);
      string End_Friend_ReadFriendUserState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns user state of a particular user.
      /// </summary>
      /// <param name="profileId">Profile Id of user to retrieve player state for.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_GetSummaryDataForProfileId(AsyncCallback callback, object state, string profileId, int clientIndex);
      string End_Friend_GetSummaryDataForProfileId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Finds a list of users matching the search text by performing an exact
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The string to search for.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_FindUsersByExactName(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex);
      string End_Friend_FindUsersByExactName(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Finds a list of users matching the search text by performing a substring
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The substring to search for. Minimum length of 3 characters.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_FindUsersBySubstrName(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex);
      string End_Friend_FindUsersBySubstrName(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves a list of user and friend platform information for all friends of the current user.
      /// </summary>
      /// <param name="friendPlatform">Friend platform to query.</param>
      /// <param name="includeSummaryData">True if including summary data; false otherwise.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_ListFriends(AsyncCallback callback, object state, Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex);
      string End_Friend_ListFriends(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Links the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_AddFriends(AsyncCallback callback, object state, List<string> profileIds, int clientIndex);
      string End_Friend_AddFriends(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Unlinks the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_RemoveFriends(AsyncCallback callback, object state, List<string> profileIds, int clientIndex);
      string End_Friend_RemoveFriends(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get users online status
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Friend_GetUsersOnlineStatus(AsyncCallback callback, object state, List<string> profileIds, int clientIndex);
      string End_Friend_GetUsersOnlineStatus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves all gamification data for the player.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadAllGamification(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadAllGamification(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves all milestones defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadMilestones(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read all of the achievements defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadAchievements(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadAchievements(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all defined xp levels and any rewards associated
      /// with those xp levels.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadXpLevelsMetaData(AsyncCallback callback, object state, int clientIndex);
      string End_Gamification_ReadXpLevelsMetaData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrives the list of achieved achievements.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadAchievedAchievements(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadAchievedAchievements(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves the list of completed milestones.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadCompletedMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadCompletedMilestones(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves the list of in progress milestones
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadInProgressMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadInProgressMilestones(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves milestones of the given category.
      /// </summary>
      /// <param name="category">The milestone category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadMilestonesByCategory(AsyncCallback callback, object state, string category, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadMilestonesByCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method will award the achievements specified. On success, this will
      /// call AwardThirdPartyAchievement to hook into the client-side Achievement
      /// service (ie GameCentre, Facebook etc).
      /// </summary>
      /// <param name="achievementIds">A collection of achievement ids to award</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_AwardAchievements(AsyncCallback callback, object state, List<string> achievementIds, int clientIndex);
      string End_Gamification_AwardAchievements(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves all of the quests defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadQuests(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all completed quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadCompletedQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadCompletedQuests(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all in progress quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadInProgressQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadInProgressQuests(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all quests that haven't been started.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadNotStartedQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadNotStartedQuests(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all quests with status.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadQuestsWithStatus(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadQuestsWithStatus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all quests with a basic percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadQuestsWithBasicPercentage(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadQuestsWithBasicPercentage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all quests with a complex percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadQuestsWithComplexPercentage(AsyncCallback callback, object state, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadQuestsWithComplexPercentage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all quests for the given category.
      /// </summary>
      /// <param name="category">The quest category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ReadQuestsByCategory(AsyncCallback callback, object state, string category, bool includeMetaData, int clientIndex);
      string End_Gamification_ReadQuestsByCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the specified milestones' statuses to LOCKED.
      /// </summary>
      /// <param name="milestoneIds">List of milestones to reset</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Gamification_ResetMilestones(AsyncCallback callback, object state, List<string> milestoneIds, int clientIndex);
      string End_Gamification_ResetMilestones(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method reads all the global properties of the game
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalApp_ReadProperties(AsyncCallback callback, object state, int clientIndex);
      string End_GlobalApp_ReadProperties(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_CreateEntity(AsyncCallback callback, object state, string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex);
      string End_GlobalEntity_CreateEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method creates a new entity on the server with an indexed id.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="indexedId">A secondary ID that will be indexed</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_CreateEntityWithIndexedId(AsyncCallback callback, object state, string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex);
      string End_GlobalEntity_CreateEntityWithIndexedId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method updates an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_UpdateEntity(AsyncCallback callback, object state, string entityId, int version, string jsonEntityData, int clientIndex);
      string End_GlobalEntity_UpdateEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method updates an existing entity's Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_UpdateEntityAcl(AsyncCallback callback, object state, string entityId, int version, string jsonEntityAcl, int clientIndex);
      string End_GlobalEntity_UpdateEntityAcl(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method updates an existing entity's time to live on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_UpdateEntityTimeToLive(AsyncCallback callback, object state, string entityId, int version, long timeToLive, int clientIndex);
      string End_GlobalEntity_UpdateEntityTimeToLive(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method deletes an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to delete</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_DeleteEntity(AsyncCallback callback, object state, string entityId, int version, int clientIndex);
      string End_GlobalEntity_DeleteEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method reads an existing entity from the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_ReadEntity(AsyncCallback callback, object state, string entityId, int clientIndex);
      string End_GlobalEntity_ReadEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_GetList(AsyncCallback callback, object state, string whereJson, string orderByJson, int maxReturn, int clientIndex);
      string End_GlobalEntity_GetList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets list of entities from the server base on indexed id
      /// </summary>
      /// <param name="entityIndexedId">The entity indexed Id</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_GetListByIndexedId(AsyncCallback callback, object state, string entityIndexedId, int maxReturn, int clientIndex);
      string End_GlobalEntity_GetListByIndexedId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_GetListCount(AsyncCallback callback, object state, string whereJson, int clientIndex);
      string End_GlobalEntity_GetListCount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method uses a paging system to iterate through Global Entities.
      /// After retrieving a page of Global Entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_GetPage(AsyncCallback callback, object state, string jsonContext, int clientIndex);
      string End_GlobalEntity_GetPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_GetPageOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex);
      string End_GlobalEntity_GetPageOffset(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Partial increment of global entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_IncrementGlobalEntityData(AsyncCallback callback, object state, string entityId, string jsonData, int clientIndex);
      string End_GlobalEntity_IncrementGlobalEntityData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets a list of up to randomCount randomly selected entities from the server based on the where condition and specified maximum return count.
      /// </summary>
      /// <param name="whereJson"></param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_GetRandomEntitiesMatching(AsyncCallback callback, object state, string whereJson, int maxReturn, int clientIndex);
      string End_GlobalEntity_GetRandomEntitiesMatching(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method updates an existing entity's Owner and Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="ownerId">The owner ID</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_UpdateEntityOwnerAndAcl(AsyncCallback callback, object state, string entityId, long version, string ownerId, string acl, int clientIndex);
      string End_GlobalEntity_UpdateEntityOwnerAndAcl(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method clears the owner id of an existing entity and sets the Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalEntity_MakeSystemEntity(AsyncCallback callback, object state, string entityId, long version, string acl, int clientIndex);
      string End_GlobalEntity_MakeSystemEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns all of the global statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalStatistics_ReadAllGlobalStats(AsyncCallback callback, object state, int clientIndex);
      string End_GlobalStatistics_ReadAllGlobalStats(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reads a subset of global statistics as defined by the input JSON.
      /// </summary>
      /// <param name="globalStats">A list containing the statistics to read</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalStatistics_ReadGlobalStatsSubset(AsyncCallback callback, object state, List<string> globalStats, int clientIndex);
      string End_GlobalStatistics_ReadGlobalStatsSubset(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves the global statistics for the given category.
      /// </summary>
      /// <param name="category">The global statistics category</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalStatistics_ReadGlobalStatsForCategory(AsyncCallback callback, object state, string category, int clientIndex);
      string End_GlobalStatistics_ReadGlobalStatsForCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Atomically increment (or decrement) global statistics.
      /// Global statistics are defined through the brainCloud portal.
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalStatistics_IncrementGlobalStats(AsyncCallback callback, object state, string jsonData, int clientIndex);
      string End_GlobalStatistics_IncrementGlobalStats(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_GlobalStatistics_ProcessStatistics(AsyncCallback callback, object state, Dictionary<string, string> statisticsData, int clientIndex);
      string End_GlobalStatistics_ProcessStatistics(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Accept an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_AcceptGroupInvitation(AsyncCallback callback, object state, string groupId, int clientIndex);
      string End_Group_AcceptGroupInvitation(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Add a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being added.</param>
      /// <param name="role">Role of the member being added.</param>
      /// <param name="jsonAttributes">Attributes of the member being added.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_AddGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      string End_Group_AddGroupMember(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Approve an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ApproveGroupJoinRequest(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      string End_Group_ApproveGroupJoinRequest(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Automatically join an open group that matches the search criteria and has space available.
      /// </summary>
      /// <param name="groupType">Name of the associated group type.</param>
      /// <param name="autoJoinStrategy">Selection strategy to employ when there are multiple matches</param>
      /// <param name="dataQueryJson">Query parameters (optional)</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_AutoJoinGroup(AsyncCallback callback, object state, string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex);
      string End_Group_AutoJoinGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Cancel an outstanding invitation to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_CancelGroupInvitation(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex);
      string End_Group_CancelGroupInvitation(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="name">Name of the group.</param>
      /// <param name="groupType">Name of the type of group.</param>
      /// <param name="isOpenGroup">true if group is open; false if closed.</param>
      /// <param name="acl">The group's access control list. A null ACL implies default.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="jsonOwnerAttributes">Attributes for the group owner (current user).</param>
      /// <param name="jsonDefaultMemberAttributes">Default attributes for group members.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_CreateGroup(AsyncCallback callback, object state, string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex);
      string End_Group_CreateGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Create a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityType"></param>
      /// <param name="isOwnedByGroupMember">true if entity is owned by a member; false if owned by the entire group.</param>
      /// <param name="acl">Access control list for the group entity.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_CreateGroupEntity(AsyncCallback callback, object state, string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex);
      string End_Group_CreateGroupEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Current version of the group</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_DeleteGroup(AsyncCallback callback, object state, string groupId, long version, int clientIndex);
      string End_Group_DeleteGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Delete a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_DeleteGroupEntity(AsyncCallback callback, object state, string groupId, string entityId, long version, int clientIndex);
      string End_Group_DeleteGroupEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read information on groups to which the current user belongs.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_GetMyGroups(AsyncCallback callback, object state, int clientIndex);
      string End_Group_GetMyGroups(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Increment elements for the group's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_IncrementGroupData(AsyncCallback callback, object state, string groupId, string jsonData, int clientIndex);
      string End_Group_IncrementGroupData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Increment elements for the group entity's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_IncrementGroupEntityData(AsyncCallback callback, object state, string groupId, string entityId, string jsonData, int clientIndex);
      string End_Group_IncrementGroupEntityData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Invite a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being invited.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_InviteGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      string End_Group_InviteGroupMember(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Join an open group or request to join a closed group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_JoinGroup(AsyncCallback callback, object state, string groupId, int clientIndex);
      string End_Group_JoinGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Leave a group in which the user is a member.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_LeaveGroup(AsyncCallback callback, object state, string groupId, int clientIndex);
      string End_Group_LeaveGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve a page of group summary information based on the specified context.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ListGroupsPage(AsyncCallback callback, object state, string jsonContext, int clientIndex);
      string End_Group_ListGroupsPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve a page of group summary information based on the encoded context
      /// and specified page offset.
      /// </summary>
      /// <param name="context">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ListGroupsPageByOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex);
      string End_Group_ListGroupsPageByOffset(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read information on groups to which the specified user belongs.  Access is subject to restrictions.
      /// </summary>
      /// <param name="profileId">User to read groups for</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ListGroupsWithMember(AsyncCallback callback, object state, string profileId, int clientIndex);
      string End_Group_ListGroupsWithMember(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ReadGroup(AsyncCallback callback, object state, string groupId, int clientIndex);
      string End_Group_ReadGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read the data of the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ReadGroupData(AsyncCallback callback, object state, string groupId, int clientIndex);
      string End_Group_ReadGroupData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ReadGroupEntitiesPage(AsyncCallback callback, object state, string jsonContext, int clientIndex);
      string End_Group_ReadGroupEntitiesPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="encodedContext">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ReadGroupEntitiesPageByOffset(AsyncCallback callback, object state, string encodedContext, int pageOffset, int clientIndex);
      string End_Group_ReadGroupEntitiesPageByOffset(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read the specified group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ReadGroupEntity(AsyncCallback callback, object state, string groupId, string entityId, int clientIndex);
      string End_Group_ReadGroupEntity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read the members of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_ReadGroupMembers(AsyncCallback callback, object state, string groupId, int clientIndex);
      string End_Group_ReadGroupMembers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reject an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_RejectGroupInvitation(AsyncCallback callback, object state, string groupId, int clientIndex);
      string End_Group_RejectGroupInvitation(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reject an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_RejectGroupJoinRequest(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex);
      string End_Group_RejectGroupJoinRequest(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Remove a member from the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being deleted.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_RemoveGroupMember(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex);
      string End_Group_RemoveGroupMember(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates a group's data.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Version to verify.</param>
      /// <param name="jsonData">Data to apply.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_UpdateGroupData(AsyncCallback callback, object state, string groupId, long version, string jsonData, int clientIndex);
      string End_Group_UpdateGroupData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Update a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_UpdateGroupEntityData(AsyncCallback callback, object state, string groupId, string entityId, long version, string jsonData, int clientIndex);
      string End_Group_UpdateGroupEntityData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Update a member of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being updated.</param>
      /// <param name="role">Role of the member being updated (optional).</param>
      /// <param name="jsonAttributes">Attributes of the member being updated (optional).</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_UpdateGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex);
      string End_Group_UpdateGroupMember(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates a group's name.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="name">Name to apply.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Group_UpdateGroupName(AsyncCallback callback, object state, string groupId, string name, int clientIndex);
      string End_Group_UpdateGroupName(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attach a Email and Password identity to the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_AttachEmailIdentity(AsyncCallback callback, object state, string email, string password, int clientIndex);
      string End_Identity_AttachEmailIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_MergeEmailIdentity(AsyncCallback callback, object state, string email, string password, int clientIndex);
      string End_Identity_MergeEmailIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Detach the e-mail identity from the current profile
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_DetachEmailIdentity(AsyncCallback callback, object state, string email, bool continueAnon, int clientIndex);
      string End_Identity_DetachEmailIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attach a Universal (userId + password) identity to the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_AttachUniversalIdentity(AsyncCallback callback, object state, string userId, string password, int clientIndex);
      string End_Identity_AttachUniversalIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_MergeUniversalIdentity(AsyncCallback callback, object state, string userId, string password, int clientIndex);
      string End_Identity_MergeUniversalIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Detach the universal identity from the current profile
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_DetachUniversalIdentity(AsyncCallback callback, object state, string userId, bool continueAnon, int clientIndex);
      string End_Identity_DetachUniversalIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Switch to a Child Profile
      /// </summary>
      /// <param name="childProfileId">The profileId of the child profile to switch toIf null and forceCreate is true a new profile will be created</param>
      /// <param name="childAppId">The appId of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_SwitchToChildProfile(AsyncCallback callback, object state, string childProfileId, string childAppId, bool forceCreate, int clientIndex);
      string End_Identity_SwitchToChildProfile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Switches to the child profile of an app when only one profile exists
      /// If multiple profiles exist this returns an error
      /// </summary>
      /// <param name="childAppId">The App ID of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if one does not exist?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_SwitchToSingletonChildProfile(AsyncCallback callback, object state, string childAppId, bool forceCreate, int clientIndex);
      string End_Identity_SwitchToSingletonChildProfile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attach a new identity to a parent app
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_AttachParentWithIdentity(AsyncCallback callback, object state, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex);
      string End_Identity_AttachParentWithIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Switch to a Parent Profile
      /// </summary>
      /// <param name="parentLevelName">The level of the parent to switch to</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_SwitchToParentProfile(AsyncCallback callback, object state, string parentLevelName, int clientIndex);
      string End_Identity_SwitchToParentProfile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Detaches parent from this user's profile
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_DetachParent(AsyncCallback callback, object state, int clientIndex);
      string End_Identity_DetachParent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns a list of all child profiles in child Apps
      /// </summary>
      /// <param name="includeSummaryData">Whether to return the summary friend data along with this call</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_GetChildProfiles(AsyncCallback callback, object state, bool includeSummaryData, int clientIndex);
      string End_Identity_GetChildProfiles(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve list of identities
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_GetIdentities(AsyncCallback callback, object state, int clientIndex);
      string End_Identity_GetIdentities(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve list of expired identities
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_GetExpiredIdentities(AsyncCallback callback, object state, int clientIndex);
      string End_Identity_GetExpiredIdentities(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Refreshes an identity for this user
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_RefreshIdentity(AsyncCallback callback, object state, string externalId, string authenticationToken, string authenticationType, int clientIndex);
      string End_Identity_RefreshIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Allows email identity email address to be changed
      /// </summary>
      /// <param name="oldEmailAddress">Old email address</param>
      /// <param name="password">Password for identity</param>
      /// <param name="newEmailAddress">New email address</param>
      /// <param name="updateContactEmail">Whether to update contact email in profile</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_ChangeEmailIdentity(AsyncCallback callback, object state, string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex);
      string End_Identity_ChangeEmailIdentity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attaches a peer identity to this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_AttachPeerProfile(AsyncCallback callback, object state, string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex);
      string End_Identity_AttachPeerProfile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Detaches a peer identity from this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_DetachPeer(AsyncCallback callback, object state, string peer, int clientIndex);
      string End_Identity_DetachPeer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves a list of attached peer profiles
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Identity_GetPeerProfiles(AsyncCallback callback, object state, int clientIndex);
      string End_Identity_GetPeerProfiles(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a simple text email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="subject">The email subject</param>
      /// <param name="body">The email body</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Mail_SendBasicEmail(AsyncCallback callback, object state, string profileId, string subject, string body, int clientIndex);
      string End_Mail_SendBasicEmail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends an advanced email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Mail_SendAdvancedEmail(AsyncCallback callback, object state, string profileId, string jsonServiceParams, int clientIndex);
      string End_Mail_SendAdvancedEmail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends an advanced email to the specified email address
      /// </summary>
      /// <param name="emailAddress">The address to send the email to</param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Mail_SendAdvancedEmailByAddress(AsyncCallback callback, object state, string emailAddress, string jsonServiceParams, int clientIndex);
      string End_Mail_SendAdvancedEmailByAddress(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read match making record
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_Read(AsyncCallback callback, object state, int clientIndex);
      string End_MatchMaking_Read(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets player rating
      /// </summary>
      /// <param name="playerRating">The new player rating.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_SetPlayerRating(AsyncCallback callback, object state, long playerRating, int clientIndex);
      string End_MatchMaking_SetPlayerRating(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Resets player rating
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_ResetPlayerRating(AsyncCallback callback, object state, int clientIndex);
      string End_MatchMaking_ResetPlayerRating(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Increments player rating
      /// </summary>
      /// <param name="increment">The increment amount</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_IncrementPlayerRating(AsyncCallback callback, object state, long increment, int clientIndex);
      string End_MatchMaking_IncrementPlayerRating(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Decrements player rating
      /// </summary>
      /// <param name="decrement">The decrement amount</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_DecrementPlayerRating(AsyncCallback callback, object state, long decrement, int clientIndex);
      string End_MatchMaking_DecrementPlayerRating(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Turns shield on
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_TurnShieldOn(AsyncCallback callback, object state, int clientIndex);
      string End_MatchMaking_TurnShieldOn(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Turns shield on for the specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to turn the shield on for</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_TurnShieldOnFor(AsyncCallback callback, object state, int minutes, int clientIndex);
      string End_MatchMaking_TurnShieldOnFor(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Turns shield off
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_TurnShieldOff(AsyncCallback callback, object state, int clientIndex);
      string End_MatchMaking_TurnShieldOff(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Increases the shield on time by specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to increase the shield time for</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_IncrementShieldOnFor(AsyncCallback callback, object state, int minutes, int clientIndex);
      string End_MatchMaking_IncrementShieldOnFor(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the shield expiry for the given player id. Passing in a null player id
      /// will return the shield expiry for the current player. The value returned is
      /// the time in UTC millis when the shield will expire.
      /// </summary>
      /// <param name="playerId">The player id or use null to retrieve for the current player</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_GetShieldExpiry(AsyncCallback callback, object state, string playerId, int clientIndex);
      string End_MatchMaking_GetShieldExpiry(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Finds matchmaking enabled players
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_FindPlayers(AsyncCallback callback, object state, long rangeDelta, long numMatches, int clientIndex);
      string End_MatchMaking_FindPlayers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Finds matchmaking enabled players with additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_FindPlayersWithAttributes(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonAttributes, int clientIndex);
      string End_MatchMaking_FindPlayersWithAttributes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_FindPlayersUsingFilter(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex);
      string End_MatchMaking_FindPlayersUsingFilter(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// and additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_FindPlayersWithAttributesUsingFilter(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex);
      string End_MatchMaking_FindPlayersWithAttributesUsingFilter(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Enables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_EnableMatchMaking(AsyncCallback callback, object state, int clientIndex);
      string End_MatchMaking_EnableMatchMaking(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Disables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_MatchMaking_DisableMatchMaking(AsyncCallback callback, object state, int clientIndex);
      string End_MatchMaking_DisableMatchMaking(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Starts a match
      /// </summary>
      /// <param name="otherPlayerId">The player to start a match with</param>
      /// <param name="rangeDelta">The range delta used for the initial match search</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_OneWayMatch_StartMatch(AsyncCallback callback, object state, string otherPlayerId, long rangeDelta, int clientIndex);
      string End_OneWayMatch_StartMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Cancels a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the start match</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_OneWayMatch_CancelMatch(AsyncCallback callback, object state, string playbackStreamId, int clientIndex);
      string End_OneWayMatch_CancelMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Completes a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the initial start match</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_OneWayMatch_CompleteMatch(AsyncCallback callback, object state, string playbackStreamId, int clientIndex);
      string End_OneWayMatch_CompleteMatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Starts a stream
      /// </summary>
      /// <param name="targetPlayerId">The player to start a stream with</param>
      /// <param name="includeSharedData">Whether to include shared data in the stream</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlaybackStream_StartStream(AsyncCallback callback, object state, string targetPlayerId, bool includeSharedData, int clientIndex);
      string End_PlaybackStream_StartStream(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reads a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlaybackStream_ReadStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex);
      string End_PlaybackStream_ReadStream(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Ends a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlaybackStream_EndStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex);
      string End_PlaybackStream_EndStream(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Deletes a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlaybackStream_DeleteStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex);
      string End_PlaybackStream_DeleteStream(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Adds a stream event
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="eventData">Describes the event</param>
      /// <param name="summary">Current summary data as of this event</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlaybackStream_AddEvent(AsyncCallback callback, object state, string playbackStreamId, string eventData, string summary, int clientIndex);
      string End_PlaybackStream_AddEvent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets recent streams for initiating player
      /// </summary>
      /// <param name="initiatingPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlaybackStream_GetRecentStreamsForInitiatingPlayer(AsyncCallback callback, object state, string initiatingPlayerId, int maxNumStreams, int clientIndex);
      string End_PlaybackStream_GetRecentStreamsForInitiatingPlayer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets recent streams for target player
      /// </summary>
      /// <param name="targetPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlaybackStream_GetRecentStreamsForTargetPlayer(AsyncCallback callback, object state, string targetPlayerId, int maxNumStreams, int clientIndex);
      string End_PlaybackStream_GetRecentStreamsForTargetPlayer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read the state of the currently logged in user.
      /// This method returns a JSON object describing most of the
      /// player's data: entities, statistics, level, currency.
      /// Apps will typically call this method after authenticating to get an
      /// up-to-date view of the user's data.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_ReadUserState(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerState_ReadUserState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Completely deletes the user record and all data fully owned
      /// by the user. After calling this method, the user will need
      /// to re-authenticate and create a new profile.
      /// This is mostly used for debugging/qa.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_DeleteUser(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerState_DeleteUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// This method will delete *most* data for the currently logged in user.
      /// Data which is not deleted includes: currency, credentials, and
      /// purchase transactions. ResetUser is different from DeleteUser in that
      /// the player record will continue to exist after the reset (so the user
      /// does not need to re-authenticate).
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_ResetUser(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerState_ResetUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Logs user out of server.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_Logout(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerState_Logout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the user name.
      /// </summary>
      /// <param name="userName">The name of the user</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_UpdateUserName(AsyncCallback callback, object state, string userName, int clientIndex);
      string End_PlayerState_UpdateUserName(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the "friend summary data" associated with the logged in user.
      /// Some operations will return this summary data. For instance the social
      /// leaderboards will return the player's score in the leaderboard along
      /// with the friend summary data. Generally this data is used to provide
      /// a quick overview of the player without requiring a separate API call
      /// to read their public stats or entity data.
      /// </summary>
      /// <param name="jsonSummaryData">A JSON string defining the summary data.For example:{  "xp":123,  "level":12,  "highScore":45123}</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_UpdateSummaryFriendData(AsyncCallback callback, object state, string jsonSummaryData, int clientIndex);
      string End_PlayerState_UpdateSummaryFriendData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve the user's attributes.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_GetAttributes(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerState_GetAttributes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Update user's attributes.
      /// </summary>
      /// <param name="jsonAttributes">Single layer json string that is a set of key-value pairs</param>
      /// <param name="wipeExisting">Whether to wipe existing attributes prior to update.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_UpdateAttributes(AsyncCallback callback, object state, string jsonAttributes, bool wipeExisting, int clientIndex);
      string End_PlayerState_UpdateAttributes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Remove user's attributes.
      /// </summary>
      /// <param name="attributeNames">List of attribute names.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_RemoveAttributes(AsyncCallback callback, object state, List<string> attributeNames, int clientIndex);
      string End_PlayerState_RemoveAttributes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates player's picture URL.
      /// </summary>
      /// <param name="pictureUrl">URL to apply.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_UpdateUserPictureUrl(AsyncCallback callback, object state, string pictureUrl, int clientIndex);
      string End_PlayerState_UpdateUserPictureUrl(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Update the user's contact email.
      /// Note this is unrelated to email authentication.
      /// </summary>
      /// <param name="contactEmail">Updated email</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerState_UpdateContactEmail(AsyncCallback callback, object state, string contactEmail, int clientIndex);
      string End_PlayerState_UpdateContactEmail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Read all available user statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_ReadAllUserStats(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerStatistics_ReadAllUserStats(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reads a subset of user statistics as defined by the input JSON.
      /// </summary>
      /// <param name="playerStats"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_ReadUserStatsSubset(AsyncCallback callback, object state, List<string> playerStats, int clientIndex);
      string End_PlayerStatistics_ReadUserStatsSubset(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method retrieves the user statistics for the given category.
      /// </summary>
      /// <param name="category">The user statistics category</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_ReadUserStatsForCategory(AsyncCallback callback, object state, string category, int clientIndex);
      string End_PlayerStatistics_ReadUserStatsForCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reset all of the statistics for this user back to their initial value.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_ResetAllUserStats(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerStatistics_ResetAllUserStats(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_IncrementUserStats_SSFO(AsyncCallback callback, object state, string jsonData, int clientIndex);
      string End_PlayerStatistics_IncrementUserStats_SSFO(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="dictData">Stats name and their increments:{ {"stat1", 10}, {"stat1", -5}}would increment stat1 by 10 and decrement stat2 by 5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_IncrementUserStats_DSFO(AsyncCallback callback, object state, Dictionary<string, string> dictData, int clientIndex);
      string End_PlayerStatistics_IncrementUserStats_DSFO(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_ProcessStatistics(AsyncCallback callback, object state, Dictionary<string, string> statisticsData, int clientIndex);
      string End_PlayerStatistics_ProcessStatistics(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns JSON representing the next experience level for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_GetNextExperienceLevel(AsyncCallback callback, object state, int clientIndex);
      string End_PlayerStatistics_GetNextExperienceLevel(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Increments the user's experience. If the user goes up a level,
      /// the new level details will be returned along with a list of rewards.
      /// </summary>
      /// <param name="xpValue">The amount to increase the user's experience by</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_IncrementExperiencePoints(AsyncCallback callback, object state, int xpValue, int clientIndex);
      string End_PlayerStatistics_IncrementExperiencePoints(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sets the user's experience to an absolute value. Note that this
      /// is simply a set and will not reward the user if their level changes
      /// as a result.
      /// </summary>
      /// <param name="xpValue">The amount to set the the player's experience to</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatistics_SetExperiencePoints(AsyncCallback callback, object state, int xpValue, int clientIndex);
      string End_PlayerStatistics_SetExperiencePoints(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Trigger an event server side that will increase the user statistics.
      /// This may cause one or more awards to be sent back to the user -
      /// could be achievements, experience, etc. Achievements will be sent by this
      /// client library to the appropriate awards service (Apple Game Center, etc).
      /// 
      /// This mechanism supercedes the PlayerStatisticsService API methods, since
      /// PlayerStatisticsService API method only update the raw statistics without
      /// triggering the rewards.
      /// </summary>
      /// <param name="eventName"></param>
      /// <param name="eventMultiplier"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatisticsEvent_TriggerStatsEvent(AsyncCallback callback, object state, string eventName, int eventMultiplier, int clientIndex);
      string End_PlayerStatisticsEvent_TriggerStatsEvent(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// See documentation for TriggerStatsEvent for more
      /// documentation.
      /// </summary>
      /// <param name="jsonData">jsonData[  {    "eventName": "event1",    "eventMultiplier": 1  },  {    "eventName": "event2",    "eventMultiplier": 1  }]</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerStatisticsEvent_TriggerStatsEvents(AsyncCallback callback, object state, string jsonData, int clientIndex);
      string End_PlayerStatisticsEvent_TriggerStatsEvents(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the player's currency for the given currency type
      /// or all currency types if null passed in.
      /// </summary>
      /// <param name="currencyType">The currency type to retrieve or nullif all currency types are being requested.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Product_GetCurrency(AsyncCallback callback, object state, string currencyType, int clientIndex);
      string End_Product_GetCurrency(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Product_GetSalesInventory(AsyncCallback callback, object state, string platform, string userCurrency, int clientIndex);
      string End_Product_GetSalesInventory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type and category.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="category">The product category</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Product_GetSalesInventoryByCategory(AsyncCallback callback, object state, string platform, string userCurrency, string category, int clientIndex);
      string End_Product_GetSalesInventoryByCategory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Verify Microsoft Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="receipt">Receipt XML</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Product_VerifyMicrosoftReceipt(AsyncCallback callback, object state, string receipt, int clientIndex);
      string End_Product_VerifyMicrosoftReceipt(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the eligible promotions for the player.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Product_GetEligiblePromotions(AsyncCallback callback, object state, int clientIndex);
      string End_Product_GetEligiblePromotions(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Verify ITunes Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="base64EncReceiptData">Base64 encoded receipt data</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Product_VerifyItunesReceipt(AsyncCallback callback, object state, string base64EncReceiptData, int clientIndex);
      string End_Product_VerifyItunesReceipt(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Checks supplied text for profanity.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Profanity_ProfanityCheck(AsyncCallback callback, object state, string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex);
      string End_Profanity_ProfanityCheck(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Replaces the characters of profanity text with a passed character(s).
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="replaceSymbol">The text to replace individual characters of profanity text with</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Profanity_ProfanityReplaceText(AsyncCallback callback, object state, string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex);
      string End_Profanity_ProfanityReplaceText(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Checks supplied text for profanity and returns a list of bad wors.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Profanity_ProfanityIdentifyBadWords(AsyncCallback callback, object state, string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex);
      string End_Profanity_ProfanityIdentifyBadWords(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Deregisters all device tokens currently registered to the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_DeregisterAllPushNotificationDeviceTokens(AsyncCallback callback, object state, int clientIndex);
      string End_PushNotification_DeregisterAllPushNotificationDeviceTokens(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Deregisters the given device token from the server to disable this device
      /// from receiving push notifications.
      /// </summary>
      /// <param name="platform">The device platform being registered.</param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_DeregisterPushNotificationDeviceToken(AsyncCallback callback, object state, string platform, string token, int clientIndex);
      string End_PushNotification_DeregisterPushNotificationDeviceToken(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Registers the given device token with the server to enable this device
      /// to receive push notifications.
      /// </summary>
      /// <param name="platform"></param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_RegisterPushNotificationDeviceToken(AsyncCallback callback, object state, string platform, string token, int clientIndex);
      string End_PushNotification_RegisterPushNotificationDeviceToken(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a simple push notification based on the passed in message.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="message">Text of the push notification</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendSimplePushNotification(AsyncCallback callback, object state, string toProfileId, string message, int clientIndex);
      string End_PushNotification_SendSimplePushNotification(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendRichPushNotification(AsyncCallback callback, object state, string toProfileId, int notificationTemplateId, int clientIndex);
      string End_PushNotification_SendRichPushNotification(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendRichPushNotificationWithParams(AsyncCallback callback, object state, string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex);
      string End_PushNotification_SendRichPushNotificationWithParams(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionsJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendTemplatedPushNotificationToGroup(AsyncCallback callback, object state, string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex);
      string End_PushNotification_SendTemplatedPushNotificationToGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendNormalizedPushNotificationToGroup(AsyncCallback callback, object state, string groupId, string alertContentJson, string customDataJson, int clientIndex);
      string End_PushNotification_SendNormalizedPushNotificationToGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_ScheduleRawPushNotificationUTC(AsyncCallback callback, object state, string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex);
      string End_PushNotification_ScheduleRawPushNotificationUTC(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_ScheduleRawPushNotificationMinutes(AsyncCallback callback, object state, string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex);
      string End_PushNotification_ScheduleRawPushNotificationMinutes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a raw push notification to a target user.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendRawPushNotification(AsyncCallback callback, object state, string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex);
      string End_PushNotification_SendRawPushNotification(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a raw push notification to a target list of users.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendRawPushNotificationBatch(AsyncCallback callback, object state, List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex);
      string End_PushNotification_SendRawPushNotificationBatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a raw push notification to a target group.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendRawPushNotificationToGroup(AsyncCallback callback, object state, string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex);
      string End_PushNotification_SendRawPushNotificationToGroup(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_ScheduleNormalizedPushNotificationUTC(AsyncCallback callback, object state, string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex);
      string End_PushNotification_ScheduleNormalizedPushNotificationUTC(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_ScheduleNormalizedPushNotificationMinutes(AsyncCallback callback, object state, string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex);
      string End_PushNotification_ScheduleNormalizedPushNotificationMinutes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_ScheduleRichPushNotificationUTC(AsyncCallback callback, object state, string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex);
      string End_PushNotification_ScheduleRichPushNotificationUTC(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_ScheduleRichPushNotificationMinutes(AsyncCallback callback, object state, string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex);
      string End_PushNotification_ScheduleRichPushNotificationMinutes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a notification to a user consisting of alert content and custom data.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendNormalizedPushNotification(AsyncCallback callback, object state, string toProfileId, string alertContentJson, string customDataJson, int clientIndex);
      string End_PushNotification_SendNormalizedPushNotification(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a notification to multiple users consisting of alert content and custom data.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_PushNotification_SendNormalizedPushNotificationBatch(AsyncCallback callback, object state, List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex);
      string End_PushNotification_SendNormalizedPushNotificationBatch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Executes a script on the server.
      /// </summary>
      /// <param name="scriptName">The name of the script to be run</param>
      /// <param name="jsonScriptData">Data to be sent to the script in json format</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Script_RunScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, int clientIndex);
      string End_Script_RunScript(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="startDateInUTC">The start date as a DateTime object</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Script_ScheduleRunScriptUTC(AsyncCallback callback, object state, string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex);
      string End_Script_ScheduleRunScriptUTC(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="minutesFromNow">Number of minutes from now to run script</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Script_ScheduleRunScriptMinutes(AsyncCallback callback, object state, string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex);
      string End_Script_ScheduleRunScriptMinutes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Run a cloud script in a parent app
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="parentLevel">The level name of the parent to run the script from</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Script_RunParentScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string parentLevel, int clientIndex);
      string End_Script_RunParentScript(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Cancels a scheduled cloud code script
      /// </summary>
      /// <param name="jobId">ID of script job to cancel</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Script_CancelScheduledScript(AsyncCallback callback, object state, string jobId, int clientIndex);
      string End_Script_CancelScheduledScript(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Runs a script from the context of a peer
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Script_RunPeerScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string peer, int clientIndex);
      string End_Script_RunPeerScript(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Runs a script asynchronously from the context of a peer
      /// This operation does not wait for the script to complete before returning
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Script_RunPeerScriptAsynch(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string peer, int clientIndex);
      string End_Script_RunPeerScriptAsynch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns the social leaderboard. A player's social leaderboard is
      /// comprised of players who are recognized as being your friend.
      /// For now, this applies solely to Facebook connected players who are
      /// friends with the logged in player (who also must be Facebook connected).
      /// In the future this will expand to other identification means (such as
      /// Game Centre, Google circles etc).
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score. The currently logged in player will also
      /// be returned in the social leaderboard.
      /// 
      /// Note: If no friends have played the game, the bestScore, createdAt, updatedAt
      /// will contain NULL.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, bool replaceName, int clientIndex);
      string End_SocialLeaderboard_GetSocialLeaderboard(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reads multiple social leaderboards.
      /// </summary>
      /// <param name="leaderboardIds">Array of leaderboard id strings</param>
      /// <param name="leaderboardResultCount">Maximum count of entries to return for each leaderboard.</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetMultiSocialLeaderboard(AsyncCallback callback, object state, List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex);
      string End_SocialLeaderboard_GetMultiSocialLeaderboard(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns a page of global leaderboard results.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// 
      /// Note: This method allows the client to retrieve pages from within the global leaderboard list
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardPage(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex);
      string End_SocialLeaderboard_GetGlobalLeaderboardPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns a page of global leaderboard results. By using a non-current version id,
      /// the user can retrieve a historical leaderboard. See GetGlobalLeaderboardVersions method
      /// to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="versionId">The historical version to retrieve.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex);
      string End_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardView(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex);
      string End_SocialLeaderboard_GetGlobalLeaderboardView(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// By using a non-current version id, the user can retrieve a historical leaderboard.
      /// See GetGlobalLeaderboardVersions method to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="versionId">The historial version to retrieve. Use -1 for current leaderboard.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex);
      string End_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the global leaderboard versions.
      /// </summary>
      /// <param name="leaderboardId">In_leaderboard identifier.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardVersions(AsyncCallback callback, object state, string leaderboardId, int clientIndex);
      string End_SocialLeaderboard_GetGlobalLeaderboardVersions(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve the social leaderboard for a group.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to read</param>
      /// <param name="groupId">The group ID</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGroupSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, string groupId, int clientIndex);
      string End_SocialLeaderboard_GetGroupSocialLeaderboard(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// 
      /// Note that the behaviour of posting a score can be modified in
      /// the brainCloud portal. By default, the server will only keep
      /// the player's best score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_PostScoreToLeaderboard(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, int clientIndex);
      string End_SocialLeaderboard_PostScoreToLeaderboard(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Removes a player's score from the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_RemovePlayerScore(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex);
      string End_SocialLeaderboard_RemovePlayerScore(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationType">Type of rotation</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_PostScoreToDynamicLeaderboard(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex);
      string End_SocialLeaderboard_PostScoreToDynamicLeaderboard(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Post the players score to the given social leaderboard with a rotation type of DAYS.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="numDaysToRotate">How many days between each rotation</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex);
      string End_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve the social leaderboard for a list of players.
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="profileIds">The IDs of the players</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetPlayersSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, List<string> profileIds, int clientIndex);
      string End_SocialLeaderboard_GetPlayersSocialLeaderboard(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieve a list of all leaderboards
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_ListLeaderboards(AsyncCallback callback, object state, int clientIndex);
      string End_SocialLeaderboard_ListLeaderboards(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardEntryCount(AsyncCallback callback, object state, string leaderboardId, int clientIndex);
      string End_SocialLeaderboard_GetGlobalLeaderboardEntryCount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex);
      string End_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets a player's score from a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard. Use -1 for current.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetPlayerScore(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex);
      string End_SocialLeaderboard_GetPlayerScore(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets a player's score from multiple leaderboards
      /// </summary>
      /// <param name="leaderboardIds">A collection of leaderboardIds to retrieve scores from</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_SocialLeaderboard_GetPlayerScoresFromLeaderboards(AsyncCallback callback, object state, List<string> leaderboardIds, int clientIndex);
      string End_SocialLeaderboard_GetPlayerScoresFromLeaderboards(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Method returns the server time in UTC. This is in UNIX millis time format.
      /// For instance 1396378241893 represents 2014-04-01 2:50:41.893 in GMT-4.
      /// </summary>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Time_ReadServerTime(AsyncCallback callback, object state, int clientIndex);
      string End_Time_ReadServerTime(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Processes any outstanding rewards for the given player
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament to claim rewards for.Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_ClaimTournamentReward(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex);
      string End_Tournament_ClaimTournamentReward(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get tournament status associated with a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_GetTournamentStatus(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex);
      string End_Tournament_GetTournamentStatus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Join the specified tournament.
      /// Any entry fees will be automatically collected.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="tournamentCode">Tournament to join</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_JoinTournament(AsyncCallback callback, object state, string leaderboardId, string tournamentCode, long initialScore, int clientIndex);
      string End_Tournament_JoinTournament(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Removes player's score from tournament leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_LeaveTournament(AsyncCallback callback, object state, string leaderboardId, int clientIndex);
      string End_Tournament_LeaveTournament(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Post the users score to the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_PostTournamentScore(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex);
      string End_Tournament_PostTournamentScore(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Post the users score to the leaderboard and returns the results
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_PostTournamentScoreWithResults(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex);
      string End_Tournament_PostTournamentScoreWithResults(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the user's expected reward based on the current scores
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_ViewCurrentReward(AsyncCallback callback, object state, string leaderboardId, int clientIndex);
      string End_Tournament_ViewCurrentReward(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the user's reward from a finished tournament
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      #if SILVERLIGHT
      IAsyncResult Begin_Tournament_ViewReward(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex);
      string End_Tournament_ViewReward(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Patch_GetGameManifest(AsyncCallback callback, object state, string gameId, int clientIndex);
      string End_Patch_GetGameManifest(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ShareVideo(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string End_SocialFeed_ShareVideo(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ShareScreenshot(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string End_SocialFeed_ShareScreenshot(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ShareAchievement(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string End_SocialFeed_ShareAchievement(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ShareApp(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string End_SocialFeed_ShareApp(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ShareChannel(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string End_SocialFeed_ShareChannel(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ShareLink(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string End_SocialFeed_ShareLink(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ShareGameGuide(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex);
      string End_SocialFeed_ShareGameGuide(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ReadSocialFeed(AsyncCallback callback, object state, int skip, int limit, int clientIndex);
      string End_SocialFeed_ReadSocialFeed(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ReadFilteredSocialFeed(AsyncCallback callback, object state, int skip, int limit, List<string> playerIds, int clientIndex);
      string End_SocialFeed_ReadFilteredSocialFeed(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ReadFriendsSocialFeed(AsyncCallback callback, object state, int skip, int limit, int clientIndex);
      string End_SocialFeed_ReadFriendsSocialFeed(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_PostComment(AsyncCallback callback, object state, int timestamp, string parentId, string content, int clientIndex);
      string End_SocialFeed_PostComment(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_PostCommentReply(AsyncCallback callback, object state, int timestamp, string parentId, string content, int clientIndex);
      string End_SocialFeed_PostCommentReply(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ReadComments(AsyncCallback callback, object state, int skip, int limit, string parentId, int clientIndex);
      string End_SocialFeed_ReadComments(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_ReadCommentReplies(AsyncCallback callback, object state, int skip, int limit, string parentId, int clientIndex);
      string End_SocialFeed_ReadCommentReplies(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_LikeComment(AsyncCallback callback, object state, string socialFeedId, int clientIndex);
      string End_SocialFeed_LikeComment(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_LikeActivity(AsyncCallback callback, object state, string socialFeedId, int clientIndex);
      string End_SocialFeed_LikeActivity(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_UnlikeComment(AsyncCallback callback, object state, string socialFeedId, int clientIndex);
      string End_SocialFeed_UnlikeComment(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_UnlikeActivity(AsyncCallback callback, object state, string socialFeedId, int clientIndex);
      string End_SocialFeed_UnlikeActivity(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_SetFeedVisibility(AsyncCallback callback, object state, string visibility, int clientIndex);
      string End_SocialFeed_SetFeedVisibility(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_BlockPlayer(AsyncCallback callback, object state, string playerId, int clientIndex);
      string End_SocialFeed_BlockPlayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_HidePlayer(AsyncCallback callback, object state, string playerId, int clientIndex);
      string End_SocialFeed_HidePlayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_UnblockPlayer(AsyncCallback callback, object state, string playerId, int clientIndex);
      string End_SocialFeed_UnblockPlayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SocialFeed_UnhidePlayer(AsyncCallback callback, object state, string playerId, int clientIndex);
      string End_SocialFeed_UnhidePlayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Telemetry_StartTelemetrySession(AsyncCallback callback, object state, int timestamp, int clientIndex);
      string End_Telemetry_StartTelemetrySession(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Telemetry_EndTelemetrySession(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, int clientIndex);
      string End_Telemetry_EndTelemetrySession(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Telemetry_LogTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex);
      string End_Telemetry_LogTelemetryEvent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Telemetry_StartTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex);
      string End_Telemetry_StartTelemetryEvent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Telemetry_EndTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex);
      string End_Telemetry_EndTelemetryEvent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_File_DownloadFile(AsyncCallback callback, object state, string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex);
      string End_File_DownloadFile(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_File_GetDownloadInfo(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex);
      string End_File_GetDownloadInfo(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_File_CancelDownload(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex);
      string End_File_CancelDownload(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_CreateMatch(AsyncCallback callback, object state, string jsonOpponentIds, string pushNotificationMessage, int clientIndex)
      {
        return send_AsyncMatch_CreateMatch(callback, state, jsonOpponentIds, pushNotificationMessage, clientIndex);
      }

      public string End_AsyncMatch_CreateMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_CreateMatch();
      }

      #endif

      /// <summary>
      /// Creates an instance of an asynchronous match.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_CreateMatch(string jsonOpponentIds, string pushNotificationMessage, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_CreateMatch(jsonOpponentIds, pushNotificationMessage, clientIndex);
        return recv_AsyncMatch_CreateMatch();

        #else
        var asyncResult = Begin_AsyncMatch_CreateMatch(null, null, jsonOpponentIds, pushNotificationMessage, clientIndex);
        return End_AsyncMatch_CreateMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_CreateMatch(AsyncCallback callback, object state, string jsonOpponentIds, string pushNotificationMessage, int clientIndex)
      #else
      public void send_AsyncMatch_CreateMatch(string jsonOpponentIds, string pushNotificationMessage, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_CreateMatch", TMessageType.Call, seqid_));
        AsyncMatch_CreateMatch_args args = new AsyncMatch_CreateMatch_args();
        args.JsonOpponentIds = jsonOpponentIds;
        args.PushNotificationMessage = pushNotificationMessage;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_CreateMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_CreateMatch_result result = new AsyncMatch_CreateMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_CreateMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_CreateMatchWithInitialTurn(AsyncCallback callback, object state, string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex)
      {
        return send_AsyncMatch_CreateMatchWithInitialTurn(callback, state, jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, clientIndex);
      }

      public string End_AsyncMatch_CreateMatchWithInitialTurn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_CreateMatchWithInitialTurn();
      }

      #endif

      /// <summary>
      /// Creates an instance of an asynchronous match with an initial turn.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string defining what the other player will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_CreateMatchWithInitialTurn(string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_CreateMatchWithInitialTurn(jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, clientIndex);
        return recv_AsyncMatch_CreateMatchWithInitialTurn();

        #else
        var asyncResult = Begin_AsyncMatch_CreateMatchWithInitialTurn(null, null, jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, clientIndex);
        return End_AsyncMatch_CreateMatchWithInitialTurn(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_CreateMatchWithInitialTurn(AsyncCallback callback, object state, string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex)
      #else
      public void send_AsyncMatch_CreateMatchWithInitialTurn(string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_CreateMatchWithInitialTurn", TMessageType.Call, seqid_));
        AsyncMatch_CreateMatchWithInitialTurn_args args = new AsyncMatch_CreateMatchWithInitialTurn_args();
        args.JsonOpponentIds = jsonOpponentIds;
        args.JsonMatchState = jsonMatchState;
        args.PushNotificationMessage = pushNotificationMessage;
        args.NextPlayer = nextPlayer;
        args.JsonSummary = jsonSummary;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_CreateMatchWithInitialTurn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_CreateMatchWithInitialTurn_result result = new AsyncMatch_CreateMatchWithInitialTurn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_CreateMatchWithInitialTurn failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_SubmitTurn(AsyncCallback callback, object state, string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex)
      {
        return send_AsyncMatch_SubmitTurn(callback, state, ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, clientIndex);
      }

      public string End_AsyncMatch_SubmitTurn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_SubmitTurn();
      }

      #endif

      /// <summary>
      /// Submits a turn for the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string that other players will see as a summary of the game when listing their games</param>
      /// <param name="jsonStatistics">Optional JSON string blob provided by the caller</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_SubmitTurn(string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_SubmitTurn(ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, clientIndex);
        return recv_AsyncMatch_SubmitTurn();

        #else
        var asyncResult = Begin_AsyncMatch_SubmitTurn(null, null, ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, clientIndex);
        return End_AsyncMatch_SubmitTurn(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_SubmitTurn(AsyncCallback callback, object state, string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex)
      #else
      public void send_AsyncMatch_SubmitTurn(string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_SubmitTurn", TMessageType.Call, seqid_));
        AsyncMatch_SubmitTurn_args args = new AsyncMatch_SubmitTurn_args();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.Version = version;
        args.JsonMatchState = jsonMatchState;
        args.PushNotificationMessage = pushNotificationMessage;
        args.NextPlayer = nextPlayer;
        args.JsonSummary = jsonSummary;
        args.JsonStatistics = jsonStatistics;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_SubmitTurn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_SubmitTurn_result result = new AsyncMatch_SubmitTurn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_SubmitTurn failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_UpdateMatchSummaryData(AsyncCallback callback, object state, string ownerId, string matchId, long version, string jsonSummary, int clientIndex)
      {
        return send_AsyncMatch_UpdateMatchSummaryData(callback, state, ownerId, matchId, version, jsonSummary, clientIndex);
      }

      public string End_AsyncMatch_UpdateMatchSummaryData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_UpdateMatchSummaryData();
      }

      #endif

      /// <summary>
      /// Allows the current player (only) to update Summary data without having to submit a whole turn.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonSummary">JSON string provided by the caller that other players will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_UpdateMatchSummaryData(string ownerId, string matchId, long version, string jsonSummary, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_UpdateMatchSummaryData(ownerId, matchId, version, jsonSummary, clientIndex);
        return recv_AsyncMatch_UpdateMatchSummaryData();

        #else
        var asyncResult = Begin_AsyncMatch_UpdateMatchSummaryData(null, null, ownerId, matchId, version, jsonSummary, clientIndex);
        return End_AsyncMatch_UpdateMatchSummaryData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_UpdateMatchSummaryData(AsyncCallback callback, object state, string ownerId, string matchId, long version, string jsonSummary, int clientIndex)
      #else
      public void send_AsyncMatch_UpdateMatchSummaryData(string ownerId, string matchId, long version, string jsonSummary, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_UpdateMatchSummaryData", TMessageType.Call, seqid_));
        AsyncMatch_UpdateMatchSummaryData_args args = new AsyncMatch_UpdateMatchSummaryData_args();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.Version = version;
        args.JsonSummary = jsonSummary;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_UpdateMatchSummaryData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_UpdateMatchSummaryData_result result = new AsyncMatch_UpdateMatchSummaryData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_UpdateMatchSummaryData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_CompleteMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      {
        return send_AsyncMatch_CompleteMatch(callback, state, ownerId, matchId, clientIndex);
      }

      public string End_AsyncMatch_CompleteMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_CompleteMatch();
      }

      #endif

      /// <summary>
      /// Marks the given match as complete.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_CompleteMatch(string ownerId, string matchId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_CompleteMatch(ownerId, matchId, clientIndex);
        return recv_AsyncMatch_CompleteMatch();

        #else
        var asyncResult = Begin_AsyncMatch_CompleteMatch(null, null, ownerId, matchId, clientIndex);
        return End_AsyncMatch_CompleteMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_CompleteMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      #else
      public void send_AsyncMatch_CompleteMatch(string ownerId, string matchId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_CompleteMatch", TMessageType.Call, seqid_));
        AsyncMatch_CompleteMatch_args args = new AsyncMatch_CompleteMatch_args();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_CompleteMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_CompleteMatch_result result = new AsyncMatch_CompleteMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_CompleteMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_ReadMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      {
        return send_AsyncMatch_ReadMatch(callback, state, ownerId, matchId, clientIndex);
      }

      public string End_AsyncMatch_ReadMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_ReadMatch();
      }

      #endif

      /// <summary>
      /// Returns the current state of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_ReadMatch(string ownerId, string matchId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_ReadMatch(ownerId, matchId, clientIndex);
        return recv_AsyncMatch_ReadMatch();

        #else
        var asyncResult = Begin_AsyncMatch_ReadMatch(null, null, ownerId, matchId, clientIndex);
        return End_AsyncMatch_ReadMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_ReadMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      #else
      public void send_AsyncMatch_ReadMatch(string ownerId, string matchId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_ReadMatch", TMessageType.Call, seqid_));
        AsyncMatch_ReadMatch_args args = new AsyncMatch_ReadMatch_args();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_ReadMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_ReadMatch_result result = new AsyncMatch_ReadMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_ReadMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_ReadMatchHistory(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      {
        return send_AsyncMatch_ReadMatchHistory(callback, state, ownerId, matchId, clientIndex);
      }

      public string End_AsyncMatch_ReadMatchHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_ReadMatchHistory();
      }

      #endif

      /// <summary>
      /// Returns the match history of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_ReadMatchHistory(string ownerId, string matchId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_ReadMatchHistory(ownerId, matchId, clientIndex);
        return recv_AsyncMatch_ReadMatchHistory();

        #else
        var asyncResult = Begin_AsyncMatch_ReadMatchHistory(null, null, ownerId, matchId, clientIndex);
        return End_AsyncMatch_ReadMatchHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_ReadMatchHistory(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      #else
      public void send_AsyncMatch_ReadMatchHistory(string ownerId, string matchId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_ReadMatchHistory", TMessageType.Call, seqid_));
        AsyncMatch_ReadMatchHistory_args args = new AsyncMatch_ReadMatchHistory_args();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_ReadMatchHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_ReadMatchHistory_result result = new AsyncMatch_ReadMatchHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_ReadMatchHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_FindMatches(AsyncCallback callback, object state, int clientIndex)
      {
        return send_AsyncMatch_FindMatches(callback, state, clientIndex);
      }

      public string End_AsyncMatch_FindMatches(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_FindMatches();
      }

      #endif

      /// <summary>
      /// Returns all matches that are NOT in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_FindMatches(int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_FindMatches(clientIndex);
        return recv_AsyncMatch_FindMatches();

        #else
        var asyncResult = Begin_AsyncMatch_FindMatches(null, null, clientIndex);
        return End_AsyncMatch_FindMatches(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_FindMatches(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_AsyncMatch_FindMatches(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_FindMatches", TMessageType.Call, seqid_));
        AsyncMatch_FindMatches_args args = new AsyncMatch_FindMatches_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_FindMatches()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_FindMatches_result result = new AsyncMatch_FindMatches_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_FindMatches failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_FindCompleteMatches(AsyncCallback callback, object state, int clientIndex)
      {
        return send_AsyncMatch_FindCompleteMatches(callback, state, clientIndex);
      }

      public string End_AsyncMatch_FindCompleteMatches(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_FindCompleteMatches();
      }

      #endif

      /// <summary>
      /// Returns all matches that are in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_FindCompleteMatches(int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_FindCompleteMatches(clientIndex);
        return recv_AsyncMatch_FindCompleteMatches();

        #else
        var asyncResult = Begin_AsyncMatch_FindCompleteMatches(null, null, clientIndex);
        return End_AsyncMatch_FindCompleteMatches(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_FindCompleteMatches(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_AsyncMatch_FindCompleteMatches(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_FindCompleteMatches", TMessageType.Call, seqid_));
        AsyncMatch_FindCompleteMatches_args args = new AsyncMatch_FindCompleteMatches_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_FindCompleteMatches()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_FindCompleteMatches_result result = new AsyncMatch_FindCompleteMatches_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_FindCompleteMatches failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_AbandonMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      {
        return send_AsyncMatch_AbandonMatch(callback, state, ownerId, matchId, clientIndex);
      }

      public string End_AsyncMatch_AbandonMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_AbandonMatch();
      }

      #endif

      /// <summary>
      /// Marks the given match as abandoned.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_AbandonMatch(string ownerId, string matchId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_AbandonMatch(ownerId, matchId, clientIndex);
        return recv_AsyncMatch_AbandonMatch();

        #else
        var asyncResult = Begin_AsyncMatch_AbandonMatch(null, null, ownerId, matchId, clientIndex);
        return End_AsyncMatch_AbandonMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_AbandonMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      #else
      public void send_AsyncMatch_AbandonMatch(string ownerId, string matchId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_AbandonMatch", TMessageType.Call, seqid_));
        AsyncMatch_AbandonMatch_args args = new AsyncMatch_AbandonMatch_args();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_AbandonMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_AbandonMatch_result result = new AsyncMatch_AbandonMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_AbandonMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AsyncMatch_DeleteMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      {
        return send_AsyncMatch_DeleteMatch(callback, state, ownerId, matchId, clientIndex);
      }

      public string End_AsyncMatch_DeleteMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AsyncMatch_DeleteMatch();
      }

      #endif

      /// <summary>
      /// Removes the match and match history from the server. DEBUG ONLY, in production it is recommended
      /// the user leave it as completed.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      public string AsyncMatch_DeleteMatch(string ownerId, string matchId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_AsyncMatch_DeleteMatch(ownerId, matchId, clientIndex);
        return recv_AsyncMatch_DeleteMatch();

        #else
        var asyncResult = Begin_AsyncMatch_DeleteMatch(null, null, ownerId, matchId, clientIndex);
        return End_AsyncMatch_DeleteMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AsyncMatch_DeleteMatch(AsyncCallback callback, object state, string ownerId, string matchId, int clientIndex)
      #else
      public void send_AsyncMatch_DeleteMatch(string ownerId, string matchId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AsyncMatch_DeleteMatch", TMessageType.Call, seqid_));
        AsyncMatch_DeleteMatch_args args = new AsyncMatch_DeleteMatch_args();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_AsyncMatch_DeleteMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AsyncMatch_DeleteMatch_result result = new AsyncMatch_DeleteMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_DeleteMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_GenerateAnonymousId(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Authentication_GenerateAnonymousId(callback, state, clientIndex);
      }

      public string End_Authentication_GenerateAnonymousId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Authentication_GenerateAnonymousId();
      }

      #endif

      /// <summary>
      /// Used to create the anonymous installation id for the brainCloud profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Authentication_GenerateAnonymousId(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_GenerateAnonymousId(clientIndex);
        return recv_Authentication_GenerateAnonymousId();

        #else
        var asyncResult = Begin_Authentication_GenerateAnonymousId(null, null, clientIndex);
        return End_Authentication_GenerateAnonymousId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_GenerateAnonymousId(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Authentication_GenerateAnonymousId(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_GenerateAnonymousId", TMessageType.Call, seqid_));
        Authentication_GenerateAnonymousId_args args = new Authentication_GenerateAnonymousId_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Authentication_GenerateAnonymousId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_GenerateAnonymousId_result result = new Authentication_GenerateAnonymousId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_GenerateAnonymousId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_Initialize(AsyncCallback callback, object state, string profileId, string anonymousId, int clientIndex)
      {
        return send_Authentication_Initialize(callback, state, profileId, anonymousId, clientIndex);
      }

      public void End_Authentication_Initialize(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Authentication_Initialize();
      }

      #endif

      /// <summary>
      /// Initialize - initializes the identity service with a saved
      /// anonymous installation id and most recently used profile id
      /// </summary>
      /// <param name="profileId">The id of the profile id that was most recently used by the app (on this device)</param>
      /// <param name="anonymousId">The anonymous installation id that was generated for this device</param>
      /// <param name="clientIndex"></param>
      public void Authentication_Initialize(string profileId, string anonymousId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_Initialize(profileId, anonymousId, clientIndex);
        recv_Authentication_Initialize();

        #else
        var asyncResult = Begin_Authentication_Initialize(null, null, profileId, anonymousId, clientIndex);
        End_Authentication_Initialize(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_Initialize(AsyncCallback callback, object state, string profileId, string anonymousId, int clientIndex)
      #else
      public void send_Authentication_Initialize(string profileId, string anonymousId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_Initialize", TMessageType.Call, seqid_));
        Authentication_Initialize_args args = new Authentication_Initialize_args();
        args.ProfileId = profileId;
        args.AnonymousId = anonymousId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Authentication_Initialize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_Initialize_result result = new Authentication_Initialize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_ClearSavedProfileID(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Authentication_ClearSavedProfileID(callback, state, clientIndex);
      }

      public void End_Authentication_ClearSavedProfileID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Authentication_ClearSavedProfileID();
      }

      #endif

      /// <summary>
      /// Used to clear the saved profile id - to use in cases when the user is
      /// attempting to switch to a different app profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      public void Authentication_ClearSavedProfileID(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_ClearSavedProfileID(clientIndex);
        recv_Authentication_ClearSavedProfileID();

        #else
        var asyncResult = Begin_Authentication_ClearSavedProfileID(null, null, clientIndex);
        End_Authentication_ClearSavedProfileID(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_ClearSavedProfileID(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Authentication_ClearSavedProfileID(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_ClearSavedProfileID", TMessageType.Call, seqid_));
        Authentication_ClearSavedProfileID_args args = new Authentication_ClearSavedProfileID_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Authentication_ClearSavedProfileID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_ClearSavedProfileID_result result = new Authentication_ClearSavedProfileID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_AuthenticateAnonymous(AsyncCallback callback, object state, bool forceCreate, int clientIndex)
      {
        return send_Authentication_AuthenticateAnonymous(callback, state, forceCreate, clientIndex);
      }

      public string End_Authentication_AuthenticateAnonymous(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Authentication_AuthenticateAnonymous();
      }

      #endif

      /// <summary>
      /// Authenticate a user anonymously with brainCloud - used for apps that don't want to bother
      /// the user to login, or for users who are sensitive to their privacy
      /// </summary>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      public string Authentication_AuthenticateAnonymous(bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_AuthenticateAnonymous(forceCreate, clientIndex);
        return recv_Authentication_AuthenticateAnonymous();

        #else
        var asyncResult = Begin_Authentication_AuthenticateAnonymous(null, null, forceCreate, clientIndex);
        return End_Authentication_AuthenticateAnonymous(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_AuthenticateAnonymous(AsyncCallback callback, object state, bool forceCreate, int clientIndex)
      #else
      public void send_Authentication_AuthenticateAnonymous(bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_AuthenticateAnonymous", TMessageType.Call, seqid_));
        Authentication_AuthenticateAnonymous_args args = new Authentication_AuthenticateAnonymous_args();
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Authentication_AuthenticateAnonymous()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_AuthenticateAnonymous_result result = new Authentication_AuthenticateAnonymous_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateAnonymous failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_AuthenticateEmailPassword(AsyncCallback callback, object state, string email, string password, bool forceCreate, int clientIndex)
      {
        return send_Authentication_AuthenticateEmailPassword(callback, state, email, password, forceCreate, clientIndex);
      }

      public string End_Authentication_AuthenticateEmailPassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Authentication_AuthenticateEmailPassword();
      }

      #endif

      /// <summary>
      /// Authenticate the user with a custom Email and Password.  Note that the client app
      /// is responsible for collecting (and storing) the e-mail and potentially password
      /// (for convenience) in the client data.  For the greatest security,
      /// force the user to re-enter their password at each login.
      /// (Or at least give them that option).
      /// </summary>
      /// <param name="email">The e-mail address of the user</param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      public string Authentication_AuthenticateEmailPassword(string email, string password, bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_AuthenticateEmailPassword(email, password, forceCreate, clientIndex);
        return recv_Authentication_AuthenticateEmailPassword();

        #else
        var asyncResult = Begin_Authentication_AuthenticateEmailPassword(null, null, email, password, forceCreate, clientIndex);
        return End_Authentication_AuthenticateEmailPassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_AuthenticateEmailPassword(AsyncCallback callback, object state, string email, string password, bool forceCreate, int clientIndex)
      #else
      public void send_Authentication_AuthenticateEmailPassword(string email, string password, bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_AuthenticateEmailPassword", TMessageType.Call, seqid_));
        Authentication_AuthenticateEmailPassword_args args = new Authentication_AuthenticateEmailPassword_args();
        args.Email = email;
        args.Password = password;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Authentication_AuthenticateEmailPassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_AuthenticateEmailPassword_result result = new Authentication_AuthenticateEmailPassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateEmailPassword failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_AuthenticateUniversal(AsyncCallback callback, object state, string userId, string password, bool forceCreate, int clientIndex)
      {
        return send_Authentication_AuthenticateUniversal(callback, state, userId, password, forceCreate, clientIndex);
      }

      public string End_Authentication_AuthenticateUniversal(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Authentication_AuthenticateUniversal();
      }

      #endif

      /// <summary>
      /// Authenticate the user using a userId and password (without any validation on the userId).
      /// Similar to AuthenticateEmailPassword - except that that method has additional features to
      /// allow for e-mail validation, password resets, etc.
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      public string Authentication_AuthenticateUniversal(string userId, string password, bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_AuthenticateUniversal(userId, password, forceCreate, clientIndex);
        return recv_Authentication_AuthenticateUniversal();

        #else
        var asyncResult = Begin_Authentication_AuthenticateUniversal(null, null, userId, password, forceCreate, clientIndex);
        return End_Authentication_AuthenticateUniversal(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_AuthenticateUniversal(AsyncCallback callback, object state, string userId, string password, bool forceCreate, int clientIndex)
      #else
      public void send_Authentication_AuthenticateUniversal(string userId, string password, bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_AuthenticateUniversal", TMessageType.Call, seqid_));
        Authentication_AuthenticateUniversal_args args = new Authentication_AuthenticateUniversal_args();
        args.UserId = userId;
        args.Password = password;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Authentication_AuthenticateUniversal()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_AuthenticateUniversal_result result = new Authentication_AuthenticateUniversal_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateUniversal failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_AuthenticateExternal(AsyncCallback callback, object state, string userId, string token, string externalAuthName, bool forceCreate, int clientIndex)
      {
        return send_Authentication_AuthenticateExternal(callback, state, userId, token, externalAuthName, forceCreate, clientIndex);
      }

      public string End_Authentication_AuthenticateExternal(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Authentication_AuthenticateExternal();
      }

      #endif

      /// <summary>
      /// Authenticate the user via cloud code (which in turn validates the supplied credentials against an external system).
      /// This allows the developer to extend brainCloud authentication to support other backend authentication systems.
      /// </summary>
      /// <param name="userId">The user id</param>
      /// <param name="token">The user token (password etc)</param>
      /// <param name="externalAuthName">The name of the cloud script to call for external authentication</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      public string Authentication_AuthenticateExternal(string userId, string token, string externalAuthName, bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_AuthenticateExternal(userId, token, externalAuthName, forceCreate, clientIndex);
        return recv_Authentication_AuthenticateExternal();

        #else
        var asyncResult = Begin_Authentication_AuthenticateExternal(null, null, userId, token, externalAuthName, forceCreate, clientIndex);
        return End_Authentication_AuthenticateExternal(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_AuthenticateExternal(AsyncCallback callback, object state, string userId, string token, string externalAuthName, bool forceCreate, int clientIndex)
      #else
      public void send_Authentication_AuthenticateExternal(string userId, string token, string externalAuthName, bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_AuthenticateExternal", TMessageType.Call, seqid_));
        Authentication_AuthenticateExternal_args args = new Authentication_AuthenticateExternal_args();
        args.UserId = userId;
        args.Token = token;
        args.ExternalAuthName = externalAuthName;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Authentication_AuthenticateExternal()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_AuthenticateExternal_result result = new Authentication_AuthenticateExternal_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateExternal failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authentication_ResetEmailPassword(AsyncCallback callback, object state, string externalId, int clientIndex)
      {
        return send_Authentication_ResetEmailPassword(callback, state, externalId, clientIndex);
      }

      public string End_Authentication_ResetEmailPassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Authentication_ResetEmailPassword();
      }

      #endif

      /// <summary>
      /// Reset Email password - Sends a password reset email to the specified address
      /// </summary>
      /// <param name="externalId">The email address to send the reset email to.</param>
      /// <param name="clientIndex"></param>
      public string Authentication_ResetEmailPassword(string externalId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Authentication_ResetEmailPassword(externalId, clientIndex);
        return recv_Authentication_ResetEmailPassword();

        #else
        var asyncResult = Begin_Authentication_ResetEmailPassword(null, null, externalId, clientIndex);
        return End_Authentication_ResetEmailPassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authentication_ResetEmailPassword(AsyncCallback callback, object state, string externalId, int clientIndex)
      #else
      public void send_Authentication_ResetEmailPassword(string externalId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authentication_ResetEmailPassword", TMessageType.Call, seqid_));
        Authentication_ResetEmailPassword_args args = new Authentication_ResetEmailPassword_args();
        args.ExternalId = externalId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Authentication_ResetEmailPassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authentication_ResetEmailPassword_result result = new Authentication_ResetEmailPassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_ResetEmailPassword failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_GetSessionId(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_GetSessionId(callback, state, clientIndex);
      }

      public string End_Client_GetSessionId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Client_GetSessionId();
      }

      #endif

      /// <summary>
      /// Returns the sessionId or empty string if no session present.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Client_GetSessionId(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_GetSessionId(clientIndex);
        return recv_Client_GetSessionId();

        #else
        var asyncResult = Begin_Client_GetSessionId(null, null, clientIndex);
        return End_Client_GetSessionId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_GetSessionId(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_GetSessionId(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_GetSessionId", TMessageType.Call, seqid_));
        Client_GetSessionId_args args = new Client_GetSessionId_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Client_GetSessionId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_GetSessionId_result result = new Client_GetSessionId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetSessionId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_IsAuthenticated(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_IsAuthenticated(callback, state, clientIndex);
      }

      public bool End_Client_IsAuthenticated(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Client_IsAuthenticated();
      }

      #endif

      /// <summary>
      /// Returns true if the user is currently authenticated.
      /// If a session time out or session invalidation is returned from executing a
      /// sever API call, this flag will reset back to false.
      /// </summary>
      /// <param name="clientIndex"></param>
      public bool Client_IsAuthenticated(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_IsAuthenticated(clientIndex);
        return recv_Client_IsAuthenticated();

        #else
        var asyncResult = Begin_Client_IsAuthenticated(null, null, clientIndex);
        return End_Client_IsAuthenticated(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_IsAuthenticated(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_IsAuthenticated(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_IsAuthenticated", TMessageType.Call, seqid_));
        Client_IsAuthenticated_args args = new Client_IsAuthenticated_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Client_IsAuthenticated()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_IsAuthenticated_result result = new Client_IsAuthenticated_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_IsAuthenticated failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_IsInitialized(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_IsInitialized(callback, state, clientIndex);
      }

      public bool End_Client_IsInitialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Client_IsInitialized();
      }

      #endif

      /// <summary>
      /// Returns true if brainCloud has been initialized.
      /// </summary>
      /// <param name="clientIndex"></param>
      public bool Client_IsInitialized(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_IsInitialized(clientIndex);
        return recv_Client_IsInitialized();

        #else
        var asyncResult = Begin_Client_IsInitialized(null, null, clientIndex);
        return End_Client_IsInitialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_IsInitialized(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_IsInitialized(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_IsInitialized", TMessageType.Call, seqid_));
        Client_IsInitialized_args args = new Client_IsInitialized_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Client_IsInitialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_IsInitialized_result result = new Client_IsInitialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_IsInitialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_Initialize_SSS(AsyncCallback callback, object state, string secretKey, string appId, string appVersion, int clientIndex)
      {
        return send_Client_Initialize_SSS(callback, state, secretKey, appId, appVersion, clientIndex);
      }

      public void End_Client_Initialize_SSS(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_Initialize_SSS();
      }

      #endif

      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId"></param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      public void Client_Initialize_SSS(string secretKey, string appId, string appVersion, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_Initialize_SSS(secretKey, appId, appVersion, clientIndex);
        recv_Client_Initialize_SSS();

        #else
        var asyncResult = Begin_Client_Initialize_SSS(null, null, secretKey, appId, appVersion, clientIndex);
        End_Client_Initialize_SSS(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_Initialize_SSS(AsyncCallback callback, object state, string secretKey, string appId, string appVersion, int clientIndex)
      #else
      public void send_Client_Initialize_SSS(string secretKey, string appId, string appVersion, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_Initialize_SSS", TMessageType.Call, seqid_));
        Client_Initialize_SSS_args args = new Client_Initialize_SSS_args();
        args.SecretKey = secretKey;
        args.AppId = appId;
        args.AppVersion = appVersion;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_Initialize_SSS()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_Initialize_SSS_result result = new Client_Initialize_SSS_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_Initialize_SSSS(AsyncCallback callback, object state, string serverURL, string secretKey, string appId, string appVersion, int clientIndex)
      {
        return send_Client_Initialize_SSSS(callback, state, serverURL, secretKey, appId, appVersion, clientIndex);
      }

      public void End_Client_Initialize_SSSS(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_Initialize_SSSS();
      }

      #endif

      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="serverURL">The URL to the brainCloud server</param>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId">The app id</param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      public void Client_Initialize_SSSS(string serverURL, string secretKey, string appId, string appVersion, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_Initialize_SSSS(serverURL, secretKey, appId, appVersion, clientIndex);
        recv_Client_Initialize_SSSS();

        #else
        var asyncResult = Begin_Client_Initialize_SSSS(null, null, serverURL, secretKey, appId, appVersion, clientIndex);
        End_Client_Initialize_SSSS(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_Initialize_SSSS(AsyncCallback callback, object state, string serverURL, string secretKey, string appId, string appVersion, int clientIndex)
      #else
      public void send_Client_Initialize_SSSS(string serverURL, string secretKey, string appId, string appVersion, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_Initialize_SSSS", TMessageType.Call, seqid_));
        Client_Initialize_SSSS_args args = new Client_Initialize_SSSS_args();
        args.ServerURL = serverURL;
        args.SecretKey = secretKey;
        args.AppId = appId;
        args.AppVersion = appVersion;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_Initialize_SSSS()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_Initialize_SSSS_result result = new Client_Initialize_SSSS_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_InitializeIdentity(AsyncCallback callback, object state, string profileId, string anonymousId, int clientIndex)
      {
        return send_Client_InitializeIdentity(callback, state, profileId, anonymousId, clientIndex);
      }

      public void End_Client_InitializeIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_InitializeIdentity();
      }

      #endif

      /// <summary>
      /// Initialize the identity aspects of brainCloud.
      /// </summary>
      /// <param name="profileId">The profile id</param>
      /// <param name="anonymousId">The anonymous id</param>
      /// <param name="clientIndex"></param>
      public void Client_InitializeIdentity(string profileId, string anonymousId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_InitializeIdentity(profileId, anonymousId, clientIndex);
        recv_Client_InitializeIdentity();

        #else
        var asyncResult = Begin_Client_InitializeIdentity(null, null, profileId, anonymousId, clientIndex);
        End_Client_InitializeIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_InitializeIdentity(AsyncCallback callback, object state, string profileId, string anonymousId, int clientIndex)
      #else
      public void send_Client_InitializeIdentity(string profileId, string anonymousId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_InitializeIdentity", TMessageType.Call, seqid_));
        Client_InitializeIdentity_args args = new Client_InitializeIdentity_args();
        args.ProfileId = profileId;
        args.AnonymousId = anonymousId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_InitializeIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_InitializeIdentity_result result = new Client_InitializeIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_Update(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_Update(callback, state, clientIndex);
      }

      public void End_Client_Update(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_Update();
      }

      #endif

      /// <summary>
      /// Update method needs to be called regularly in order
      /// to process incoming and outgoing messages.
      /// </summary>
      /// <param name="clientIndex"></param>
      public void Client_Update(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_Update(clientIndex);
        recv_Client_Update();

        #else
        var asyncResult = Begin_Client_Update(null, null, clientIndex);
        End_Client_Update(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_Update(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_Update(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_Update", TMessageType.Call, seqid_));
        Client_Update_args args = new Client_Update_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_Update()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_Update_result result = new Client_Update_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_EnableLogging(AsyncCallback callback, object state, bool enable, int clientIndex)
      {
        return send_Client_EnableLogging(callback, state, enable, clientIndex);
      }

      public void End_Client_EnableLogging(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_EnableLogging();
      }

      #endif

      /// <summary>
      /// Enable logging of brainCloud transactions (comms etc)
      /// </summary>
      /// <param name="enable">True if logging is to be enabled</param>
      /// <param name="clientIndex"></param>
      public void Client_EnableLogging(bool enable, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_EnableLogging(enable, clientIndex);
        recv_Client_EnableLogging();

        #else
        var asyncResult = Begin_Client_EnableLogging(null, null, enable, clientIndex);
        End_Client_EnableLogging(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_EnableLogging(AsyncCallback callback, object state, bool enable, int clientIndex)
      #else
      public void send_Client_EnableLogging(bool enable, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_EnableLogging", TMessageType.Call, seqid_));
        Client_EnableLogging_args args = new Client_EnableLogging_args();
        args.Enable = enable;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_EnableLogging()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_EnableLogging_result result = new Client_EnableLogging_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_ResetCommunication(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_ResetCommunication(callback, state, clientIndex);
      }

      public void End_Client_ResetCommunication(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_ResetCommunication();
      }

      #endif

      /// <summary>
      /// Resets all messages and calls to the server
      /// </summary>
      /// <param name="clientIndex"></param>
      public void Client_ResetCommunication(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_ResetCommunication(clientIndex);
        recv_Client_ResetCommunication();

        #else
        var asyncResult = Begin_Client_ResetCommunication(null, null, clientIndex);
        End_Client_ResetCommunication(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_ResetCommunication(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_ResetCommunication(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_ResetCommunication", TMessageType.Call, seqid_));
        Client_ResetCommunication_args args = new Client_ResetCommunication_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_ResetCommunication()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_ResetCommunication_result result = new Client_ResetCommunication_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_SetPacketTimeouts(AsyncCallback callback, object state, List<int> timeouts, int clientIndex)
      {
        return send_Client_SetPacketTimeouts(callback, state, timeouts, clientIndex);
      }

      public void End_Client_SetPacketTimeouts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_SetPacketTimeouts();
      }

      #endif

      /// <summary>
      /// Sets the packet timeouts using a list of integers that
      /// represent timeout values for each packet retry. The
      /// first item in the list represents the timeout for the first packet
      /// attempt, the second for the second packet attempt, and so on.
      /// 
      /// The number of entries in this array determines how many packet
      /// retries will occur.
      /// 
      /// By default, the packet timeout array is {10, 10, 10}
      /// 
      /// Note that this method does not change the timeout for authentication
      /// packets (use SetAuthenticationPacketTimeout method).
      /// </summary>
      /// <param name="timeouts">An array of packet timeouts.</param>
      /// <param name="clientIndex"></param>
      public void Client_SetPacketTimeouts(List<int> timeouts, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_SetPacketTimeouts(timeouts, clientIndex);
        recv_Client_SetPacketTimeouts();

        #else
        var asyncResult = Begin_Client_SetPacketTimeouts(null, null, timeouts, clientIndex);
        End_Client_SetPacketTimeouts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_SetPacketTimeouts(AsyncCallback callback, object state, List<int> timeouts, int clientIndex)
      #else
      public void send_Client_SetPacketTimeouts(List<int> timeouts, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_SetPacketTimeouts", TMessageType.Call, seqid_));
        Client_SetPacketTimeouts_args args = new Client_SetPacketTimeouts_args();
        args.Timeouts = timeouts;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_SetPacketTimeouts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_SetPacketTimeouts_result result = new Client_SetPacketTimeouts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_SetPacketTimeoutsToDefault(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_SetPacketTimeoutsToDefault(callback, state, clientIndex);
      }

      public void End_Client_SetPacketTimeoutsToDefault(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_SetPacketTimeoutsToDefault();
      }

      #endif

      /// <summary>
      /// Sets the packet timeouts back to default.
      /// </summary>
      /// <param name="clientIndex"></param>
      public void Client_SetPacketTimeoutsToDefault(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_SetPacketTimeoutsToDefault(clientIndex);
        recv_Client_SetPacketTimeoutsToDefault();

        #else
        var asyncResult = Begin_Client_SetPacketTimeoutsToDefault(null, null, clientIndex);
        End_Client_SetPacketTimeoutsToDefault(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_SetPacketTimeoutsToDefault(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_SetPacketTimeoutsToDefault(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_SetPacketTimeoutsToDefault", TMessageType.Call, seqid_));
        Client_SetPacketTimeoutsToDefault_args args = new Client_SetPacketTimeoutsToDefault_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_SetPacketTimeoutsToDefault()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_SetPacketTimeoutsToDefault_result result = new Client_SetPacketTimeoutsToDefault_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_GetPacketTimeouts(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_GetPacketTimeouts(callback, state, clientIndex);
      }

      public List<int> End_Client_GetPacketTimeouts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Client_GetPacketTimeouts();
      }

      #endif

      /// <summary>
      /// Returns the list of packet timeouts.
      /// </summary>
      /// <param name="clientIndex"></param>
      public List<int> Client_GetPacketTimeouts(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_GetPacketTimeouts(clientIndex);
        return recv_Client_GetPacketTimeouts();

        #else
        var asyncResult = Begin_Client_GetPacketTimeouts(null, null, clientIndex);
        return End_Client_GetPacketTimeouts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_GetPacketTimeouts(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_GetPacketTimeouts(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_GetPacketTimeouts", TMessageType.Call, seqid_));
        Client_GetPacketTimeouts_args args = new Client_GetPacketTimeouts_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<int> recv_Client_GetPacketTimeouts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_GetPacketTimeouts_result result = new Client_GetPacketTimeouts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetPacketTimeouts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_SetAuthenticationPacketTimeout(AsyncCallback callback, object state, int timeoutSecs, int clientIndex)
      {
        return send_Client_SetAuthenticationPacketTimeout(callback, state, timeoutSecs, clientIndex);
      }

      public void End_Client_SetAuthenticationPacketTimeout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_SetAuthenticationPacketTimeout();
      }

      #endif

      /// <summary>
      /// Sets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      public void Client_SetAuthenticationPacketTimeout(int timeoutSecs, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_SetAuthenticationPacketTimeout(timeoutSecs, clientIndex);
        recv_Client_SetAuthenticationPacketTimeout();

        #else
        var asyncResult = Begin_Client_SetAuthenticationPacketTimeout(null, null, timeoutSecs, clientIndex);
        End_Client_SetAuthenticationPacketTimeout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_SetAuthenticationPacketTimeout(AsyncCallback callback, object state, int timeoutSecs, int clientIndex)
      #else
      public void send_Client_SetAuthenticationPacketTimeout(int timeoutSecs, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_SetAuthenticationPacketTimeout", TMessageType.Call, seqid_));
        Client_SetAuthenticationPacketTimeout_args args = new Client_SetAuthenticationPacketTimeout_args();
        args.TimeoutSecs = timeoutSecs;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_SetAuthenticationPacketTimeout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_SetAuthenticationPacketTimeout_result result = new Client_SetAuthenticationPacketTimeout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_GetAuthenticationPacketTimeout(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_GetAuthenticationPacketTimeout(callback, state, clientIndex);
      }

      public int End_Client_GetAuthenticationPacketTimeout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Client_GetAuthenticationPacketTimeout();
      }

      #endif

      /// <summary>
      /// Gets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="clientIndex"></param>
      public int Client_GetAuthenticationPacketTimeout(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_GetAuthenticationPacketTimeout(clientIndex);
        return recv_Client_GetAuthenticationPacketTimeout();

        #else
        var asyncResult = Begin_Client_GetAuthenticationPacketTimeout(null, null, clientIndex);
        return End_Client_GetAuthenticationPacketTimeout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_GetAuthenticationPacketTimeout(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_GetAuthenticationPacketTimeout(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_GetAuthenticationPacketTimeout", TMessageType.Call, seqid_));
        Client_GetAuthenticationPacketTimeout_args args = new Client_GetAuthenticationPacketTimeout_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Client_GetAuthenticationPacketTimeout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_GetAuthenticationPacketTimeout_result result = new Client_GetAuthenticationPacketTimeout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetAuthenticationPacketTimeout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_GetUploadLowTransferRateTimeout(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_GetUploadLowTransferRateTimeout(callback, state, clientIndex);
      }

      public int End_Client_GetUploadLowTransferRateTimeout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Client_GetUploadLowTransferRateTimeout();
      }

      #endif

      /// <summary>
      /// Returns the low transfer rate timeout in secs
      /// </summary>
      /// <param name="clientIndex"></param>
      public int Client_GetUploadLowTransferRateTimeout(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_GetUploadLowTransferRateTimeout(clientIndex);
        return recv_Client_GetUploadLowTransferRateTimeout();

        #else
        var asyncResult = Begin_Client_GetUploadLowTransferRateTimeout(null, null, clientIndex);
        return End_Client_GetUploadLowTransferRateTimeout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_GetUploadLowTransferRateTimeout(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_GetUploadLowTransferRateTimeout(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_GetUploadLowTransferRateTimeout", TMessageType.Call, seqid_));
        Client_GetUploadLowTransferRateTimeout_args args = new Client_GetUploadLowTransferRateTimeout_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Client_GetUploadLowTransferRateTimeout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_GetUploadLowTransferRateTimeout_result result = new Client_GetUploadLowTransferRateTimeout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetUploadLowTransferRateTimeout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_SetUploadLowTransferRateTimeout(AsyncCallback callback, object state, int timeoutSecs, int clientIndex)
      {
        return send_Client_SetUploadLowTransferRateTimeout(callback, state, timeoutSecs, clientIndex);
      }

      public void End_Client_SetUploadLowTransferRateTimeout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_SetUploadLowTransferRateTimeout();
      }

      #endif

      /// <summary>
      /// Sets the timeout in seconds of a low speed upload
      /// (i.e. transfer rate which is underneath the low transfer rate threshold).
      /// By default this is set to 120 secs.Setting this value to 0 will
      /// turn off the timeout. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      public void Client_SetUploadLowTransferRateTimeout(int timeoutSecs, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_SetUploadLowTransferRateTimeout(timeoutSecs, clientIndex);
        recv_Client_SetUploadLowTransferRateTimeout();

        #else
        var asyncResult = Begin_Client_SetUploadLowTransferRateTimeout(null, null, timeoutSecs, clientIndex);
        End_Client_SetUploadLowTransferRateTimeout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_SetUploadLowTransferRateTimeout(AsyncCallback callback, object state, int timeoutSecs, int clientIndex)
      #else
      public void send_Client_SetUploadLowTransferRateTimeout(int timeoutSecs, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_SetUploadLowTransferRateTimeout", TMessageType.Call, seqid_));
        Client_SetUploadLowTransferRateTimeout_args args = new Client_SetUploadLowTransferRateTimeout_args();
        args.TimeoutSecs = timeoutSecs;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_SetUploadLowTransferRateTimeout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_SetUploadLowTransferRateTimeout_result result = new Client_SetUploadLowTransferRateTimeout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_GetUploadLowTransferRateThreshold(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_GetUploadLowTransferRateThreshold(callback, state, clientIndex);
      }

      public int End_Client_GetUploadLowTransferRateThreshold(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Client_GetUploadLowTransferRateThreshold();
      }

      #endif

      /// <summary>
      /// Returns the low transfer rate threshold in bytes/sec
      /// </summary>
      /// <param name="clientIndex"></param>
      public int Client_GetUploadLowTransferRateThreshold(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_GetUploadLowTransferRateThreshold(clientIndex);
        return recv_Client_GetUploadLowTransferRateThreshold();

        #else
        var asyncResult = Begin_Client_GetUploadLowTransferRateThreshold(null, null, clientIndex);
        return End_Client_GetUploadLowTransferRateThreshold(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_GetUploadLowTransferRateThreshold(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_GetUploadLowTransferRateThreshold(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_GetUploadLowTransferRateThreshold", TMessageType.Call, seqid_));
        Client_GetUploadLowTransferRateThreshold_args args = new Client_GetUploadLowTransferRateThreshold_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Client_GetUploadLowTransferRateThreshold()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_GetUploadLowTransferRateThreshold_result result = new Client_GetUploadLowTransferRateThreshold_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetUploadLowTransferRateThreshold failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_SetUploadLowTransferRateThreshold(AsyncCallback callback, object state, int bytesPerSec, int clientIndex)
      {
        return send_Client_SetUploadLowTransferRateThreshold(callback, state, bytesPerSec, clientIndex);
      }

      public void End_Client_SetUploadLowTransferRateThreshold(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_SetUploadLowTransferRateThreshold();
      }

      #endif

      /// <summary>
      /// Sets the low transfer rate threshold of an upload in bytes/sec.
      /// If the transfer rate dips below the given threshold longer
      /// than the specified timeout, the transfer will fail.
      /// By default this is set to 50 bytes/sec. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="bytesPerSec">The low transfer rate threshold in bytes/sec</param>
      /// <param name="clientIndex"></param>
      public void Client_SetUploadLowTransferRateThreshold(int bytesPerSec, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_SetUploadLowTransferRateThreshold(bytesPerSec, clientIndex);
        recv_Client_SetUploadLowTransferRateThreshold();

        #else
        var asyncResult = Begin_Client_SetUploadLowTransferRateThreshold(null, null, bytesPerSec, clientIndex);
        End_Client_SetUploadLowTransferRateThreshold(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_SetUploadLowTransferRateThreshold(AsyncCallback callback, object state, int bytesPerSec, int clientIndex)
      #else
      public void send_Client_SetUploadLowTransferRateThreshold(int bytesPerSec, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_SetUploadLowTransferRateThreshold", TMessageType.Call, seqid_));
        Client_SetUploadLowTransferRateThreshold_args args = new Client_SetUploadLowTransferRateThreshold_args();
        args.BytesPerSec = bytesPerSec;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_SetUploadLowTransferRateThreshold()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_SetUploadLowTransferRateThreshold_result result = new Client_SetUploadLowTransferRateThreshold_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_EnableNetworkErrorMessageCaching(AsyncCallback callback, object state, bool enabled, int clientIndex)
      {
        return send_Client_EnableNetworkErrorMessageCaching(callback, state, enabled, clientIndex);
      }

      public void End_Client_EnableNetworkErrorMessageCaching(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_EnableNetworkErrorMessageCaching();
      }

      #endif

      /// <summary>
      /// Enables the timeout message caching which is disabled by default.
      /// Once enabled, if a client side timeout is encountered
      /// (i.e. brainCloud server is unreachable presumably due to the client
      /// network being down) the SDK will do the following:
      /// 
      /// 1 - cache the currently queued messages to brainCloud
      /// 2 - call the network error callback
      /// 3 - then expect the app to call either:
      ///     a) RetryCachedMessages() to retry sending to brainCloud
      ///     b) FlushCachedMessages() to dump all messages in the queue.
      /// 
      /// Between steps 2 and 3, the app can prompt the user to retry connecting
      /// to brainCloud to determine whether to follow path 3a or 3b.
      /// 
      /// Note that if path 3a is followed, and another timeout is encountered,
      /// the process will begin all over again from step 1.
      /// 
      /// WARNING - the brainCloud SDK will cache *all* API calls sent
      /// when a timeout is encountered if this mechanism is enabled.
      /// This effectively freezes all communication with brainCloud.
      /// Apps must call either RetryCachedMessages() or FlushCachedMessages()
      /// for the brainCloud SDK to resume sending messages.
      /// ResetCommunication() will also clear the message cache.
      /// </summary>
      /// <param name="enabled">True if message should be cached on timeout</param>
      /// <param name="clientIndex"></param>
      public void Client_EnableNetworkErrorMessageCaching(bool enabled, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_EnableNetworkErrorMessageCaching(enabled, clientIndex);
        recv_Client_EnableNetworkErrorMessageCaching();

        #else
        var asyncResult = Begin_Client_EnableNetworkErrorMessageCaching(null, null, enabled, clientIndex);
        End_Client_EnableNetworkErrorMessageCaching(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_EnableNetworkErrorMessageCaching(AsyncCallback callback, object state, bool enabled, int clientIndex)
      #else
      public void send_Client_EnableNetworkErrorMessageCaching(bool enabled, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_EnableNetworkErrorMessageCaching", TMessageType.Call, seqid_));
        Client_EnableNetworkErrorMessageCaching_args args = new Client_EnableNetworkErrorMessageCaching_args();
        args.Enabled = enabled;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_EnableNetworkErrorMessageCaching()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_EnableNetworkErrorMessageCaching_result result = new Client_EnableNetworkErrorMessageCaching_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_RetryCachedMessages(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_RetryCachedMessages(callback, state, clientIndex);
      }

      public void End_Client_RetryCachedMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_RetryCachedMessages();
      }

      #endif

      /// <summary>
      /// Attempts to resend any cached messages. If no messages are in the cache,
      /// this method does nothing.
      /// </summary>
      /// <param name="clientIndex"></param>
      public void Client_RetryCachedMessages(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_RetryCachedMessages(clientIndex);
        recv_Client_RetryCachedMessages();

        #else
        var asyncResult = Begin_Client_RetryCachedMessages(null, null, clientIndex);
        End_Client_RetryCachedMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_RetryCachedMessages(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_RetryCachedMessages(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_RetryCachedMessages", TMessageType.Call, seqid_));
        Client_RetryCachedMessages_args args = new Client_RetryCachedMessages_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_RetryCachedMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_RetryCachedMessages_result result = new Client_RetryCachedMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_FlushCachedMessages(AsyncCallback callback, object state, bool sendApiErrorCallbacks, int clientIndex)
      {
        return send_Client_FlushCachedMessages(callback, state, sendApiErrorCallbacks, clientIndex);
      }

      public void End_Client_FlushCachedMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_FlushCachedMessages();
      }

      #endif

      /// <summary>
      /// Flushes the cached messages to resume API call processing. This will dump
      /// all of the cached messages in the queue.
      /// </summary>
      /// <param name="sendApiErrorCallbacks">If set to true API error callbacks willbe called for every cached message with statusCode CLIENT_NETWORK_ERROR and reasonCode CLIENT_NETWORK_ERROR_TIMEOUT.</param>
      /// <param name="clientIndex"></param>
      public void Client_FlushCachedMessages(bool sendApiErrorCallbacks, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_FlushCachedMessages(sendApiErrorCallbacks, clientIndex);
        recv_Client_FlushCachedMessages();

        #else
        var asyncResult = Begin_Client_FlushCachedMessages(null, null, sendApiErrorCallbacks, clientIndex);
        End_Client_FlushCachedMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_FlushCachedMessages(AsyncCallback callback, object state, bool sendApiErrorCallbacks, int clientIndex)
      #else
      public void send_Client_FlushCachedMessages(bool sendApiErrorCallbacks, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_FlushCachedMessages", TMessageType.Call, seqid_));
        Client_FlushCachedMessages_args args = new Client_FlushCachedMessages_args();
        args.SendApiErrorCallbacks = sendApiErrorCallbacks;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_FlushCachedMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_FlushCachedMessages_result result = new Client_FlushCachedMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_InsertEndOfMessageBundleMarker(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Client_InsertEndOfMessageBundleMarker(callback, state, clientIndex);
      }

      public void End_Client_InsertEndOfMessageBundleMarker(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_InsertEndOfMessageBundleMarker();
      }

      #endif

      /// <summary>
      /// Inserts a marker which will tell the brainCloud comms layer
      /// to close the message bundle off at this point. Any messages queued
      /// before this method was called will likely be bundled together in
      /// the next send to the server.
      /// 
      /// To ensure that only a single message is sent to the server you would
      /// do something like this:
      /// 
      /// InsertEndOfMessageBundleMarker()
      /// SomeApiCall()
      /// InsertEndOfMessageBundleMarker()
      /// </summary>
      /// <param name="clientIndex"></param>
      public void Client_InsertEndOfMessageBundleMarker(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_InsertEndOfMessageBundleMarker(clientIndex);
        recv_Client_InsertEndOfMessageBundleMarker();

        #else
        var asyncResult = Begin_Client_InsertEndOfMessageBundleMarker(null, null, clientIndex);
        End_Client_InsertEndOfMessageBundleMarker(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_InsertEndOfMessageBundleMarker(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Client_InsertEndOfMessageBundleMarker(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_InsertEndOfMessageBundleMarker", TMessageType.Call, seqid_));
        Client_InsertEndOfMessageBundleMarker_args args = new Client_InsertEndOfMessageBundleMarker_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_InsertEndOfMessageBundleMarker()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_InsertEndOfMessageBundleMarker_result result = new Client_InsertEndOfMessageBundleMarker_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_OverrideCountryCode(AsyncCallback callback, object state, string countryCode, int clientIndex)
      {
        return send_Client_OverrideCountryCode(callback, state, countryCode, clientIndex);
      }

      public void End_Client_OverrideCountryCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_OverrideCountryCode();
      }

      #endif

      /// <summary>
      /// Sets the country code sent to brainCloud when a user authenticates.
      /// Will override any auto detected country.
      /// </summary>
      /// <param name="countryCode">ISO 3166-1 two-letter country code</param>
      /// <param name="clientIndex"></param>
      public void Client_OverrideCountryCode(string countryCode, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_OverrideCountryCode(countryCode, clientIndex);
        recv_Client_OverrideCountryCode();

        #else
        var asyncResult = Begin_Client_OverrideCountryCode(null, null, countryCode, clientIndex);
        End_Client_OverrideCountryCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_OverrideCountryCode(AsyncCallback callback, object state, string countryCode, int clientIndex)
      #else
      public void send_Client_OverrideCountryCode(string countryCode, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_OverrideCountryCode", TMessageType.Call, seqid_));
        Client_OverrideCountryCode_args args = new Client_OverrideCountryCode_args();
        args.CountryCode = countryCode;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_OverrideCountryCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_OverrideCountryCode_result result = new Client_OverrideCountryCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Client_OverrideLanguageCode(AsyncCallback callback, object state, string languageCode, int clientIndex)
      {
        return send_Client_OverrideLanguageCode(callback, state, languageCode, clientIndex);
      }

      public void End_Client_OverrideLanguageCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Client_OverrideLanguageCode();
      }

      #endif

      /// <summary>
      /// Sets the language code sent to brainCloud when a user authenticates.
      /// If the language is set to a non-ISO 639-1 standard value the game default will be used instead.
      /// Will override any auto detected language.
      /// </summary>
      /// <param name="languageCode">ISO 639-1 two-letter language code</param>
      /// <param name="clientIndex"></param>
      public void Client_OverrideLanguageCode(string languageCode, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Client_OverrideLanguageCode(languageCode, clientIndex);
        recv_Client_OverrideLanguageCode();

        #else
        var asyncResult = Begin_Client_OverrideLanguageCode(null, null, languageCode, clientIndex);
        End_Client_OverrideLanguageCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Client_OverrideLanguageCode(AsyncCallback callback, object state, string languageCode, int clientIndex)
      #else
      public void send_Client_OverrideLanguageCode(string languageCode, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Client_OverrideLanguageCode", TMessageType.Call, seqid_));
        Client_OverrideLanguageCode_args args = new Client_OverrideLanguageCode_args();
        args.LanguageCode = languageCode;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Client_OverrideLanguageCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Client_OverrideLanguageCode_result result = new Client_OverrideLanguageCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DataStream_CustomPageEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex)
      {
        return send_DataStream_CustomPageEvent(callback, state, eventName, jsonEventProperties, clientIndex);
      }

      public string End_DataStream_CustomPageEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DataStream_CustomPageEvent();
      }

      #endif

      /// <summary>
      /// Creates custom data stream page event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      public string DataStream_CustomPageEvent(string eventName, string jsonEventProperties, int clientIndex)
      {
        #if !SILVERLIGHT
        send_DataStream_CustomPageEvent(eventName, jsonEventProperties, clientIndex);
        return recv_DataStream_CustomPageEvent();

        #else
        var asyncResult = Begin_DataStream_CustomPageEvent(null, null, eventName, jsonEventProperties, clientIndex);
        return End_DataStream_CustomPageEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DataStream_CustomPageEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex)
      #else
      public void send_DataStream_CustomPageEvent(string eventName, string jsonEventProperties, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DataStream_CustomPageEvent", TMessageType.Call, seqid_));
        DataStream_CustomPageEvent_args args = new DataStream_CustomPageEvent_args();
        args.EventName = eventName;
        args.JsonEventProperties = jsonEventProperties;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_DataStream_CustomPageEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DataStream_CustomPageEvent_result result = new DataStream_CustomPageEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DataStream_CustomPageEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DataStream_CustomScreenEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex)
      {
        return send_DataStream_CustomScreenEvent(callback, state, eventName, jsonEventProperties, clientIndex);
      }

      public string End_DataStream_CustomScreenEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DataStream_CustomScreenEvent();
      }

      #endif

      /// <summary>
      /// Creates custom data stream screen event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      public string DataStream_CustomScreenEvent(string eventName, string jsonEventProperties, int clientIndex)
      {
        #if !SILVERLIGHT
        send_DataStream_CustomScreenEvent(eventName, jsonEventProperties, clientIndex);
        return recv_DataStream_CustomScreenEvent();

        #else
        var asyncResult = Begin_DataStream_CustomScreenEvent(null, null, eventName, jsonEventProperties, clientIndex);
        return End_DataStream_CustomScreenEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DataStream_CustomScreenEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex)
      #else
      public void send_DataStream_CustomScreenEvent(string eventName, string jsonEventProperties, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DataStream_CustomScreenEvent", TMessageType.Call, seqid_));
        DataStream_CustomScreenEvent_args args = new DataStream_CustomScreenEvent_args();
        args.EventName = eventName;
        args.JsonEventProperties = jsonEventProperties;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_DataStream_CustomScreenEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DataStream_CustomScreenEvent_result result = new DataStream_CustomScreenEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DataStream_CustomScreenEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DataStream_CustomTrackEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex)
      {
        return send_DataStream_CustomTrackEvent(callback, state, eventName, jsonEventProperties, clientIndex);
      }

      public string End_DataStream_CustomTrackEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DataStream_CustomTrackEvent();
      }

      #endif

      /// <summary>
      /// Creates custom data stream track event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      public string DataStream_CustomTrackEvent(string eventName, string jsonEventProperties, int clientIndex)
      {
        #if !SILVERLIGHT
        send_DataStream_CustomTrackEvent(eventName, jsonEventProperties, clientIndex);
        return recv_DataStream_CustomTrackEvent();

        #else
        var asyncResult = Begin_DataStream_CustomTrackEvent(null, null, eventName, jsonEventProperties, clientIndex);
        return End_DataStream_CustomTrackEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DataStream_CustomTrackEvent(AsyncCallback callback, object state, string eventName, string jsonEventProperties, int clientIndex)
      #else
      public void send_DataStream_CustomTrackEvent(string eventName, string jsonEventProperties, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DataStream_CustomTrackEvent", TMessageType.Call, seqid_));
        DataStream_CustomTrackEvent_args args = new DataStream_CustomTrackEvent_args();
        args.EventName = eventName;
        args.JsonEventProperties = jsonEventProperties;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_DataStream_CustomTrackEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DataStream_CustomTrackEvent_result result = new DataStream_CustomTrackEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DataStream_CustomTrackEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_CreateEntity(AsyncCallback callback, object state, string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex)
      {
        return send_Entity_CreateEntity(callback, state, entityType, jsonEntityData, jsonEntityAcl, clientIndex);
      }

      public string End_Entity_CreateEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_CreateEntity();
      }

      #endif

      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="clientIndex"></param>
      public string Entity_CreateEntity(string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_CreateEntity(entityType, jsonEntityData, jsonEntityAcl, clientIndex);
        return recv_Entity_CreateEntity();

        #else
        var asyncResult = Begin_Entity_CreateEntity(null, null, entityType, jsonEntityData, jsonEntityAcl, clientIndex);
        return End_Entity_CreateEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_CreateEntity(AsyncCallback callback, object state, string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex)
      #else
      public void send_Entity_CreateEntity(string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_CreateEntity", TMessageType.Call, seqid_));
        Entity_CreateEntity_args args = new Entity_CreateEntity_args();
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.JsonEntityAcl = jsonEntityAcl;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_CreateEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_CreateEntity_result result = new Entity_CreateEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_CreateEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetEntitiesByType(AsyncCallback callback, object state, string entityType, int clientIndex)
      {
        return send_Entity_GetEntitiesByType(callback, state, entityType, clientIndex);
      }

      public string End_Entity_GetEntitiesByType(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetEntitiesByType();
      }

      #endif

      /// <summary>
      /// Method returns all user entities that match the given type.
      /// </summary>
      /// <param name="entityType">The entity type to search for</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetEntitiesByType(string entityType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetEntitiesByType(entityType, clientIndex);
        return recv_Entity_GetEntitiesByType();

        #else
        var asyncResult = Begin_Entity_GetEntitiesByType(null, null, entityType, clientIndex);
        return End_Entity_GetEntitiesByType(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetEntitiesByType(AsyncCallback callback, object state, string entityType, int clientIndex)
      #else
      public void send_Entity_GetEntitiesByType(string entityType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetEntitiesByType", TMessageType.Call, seqid_));
        Entity_GetEntitiesByType_args args = new Entity_GetEntitiesByType_args();
        args.EntityType = entityType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetEntitiesByType()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetEntitiesByType_result result = new Entity_GetEntitiesByType_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetEntitiesByType failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_UpdateEntity(AsyncCallback callback, object state, string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      {
        return send_Entity_UpdateEntity(callback, state, entityId, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
      }

      public string End_Entity_UpdateEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_UpdateEntity();
      }

      #endif

      /// <summary>
      /// Method updates a new entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      public string Entity_UpdateEntity(string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_UpdateEntity(entityId, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
        return recv_Entity_UpdateEntity();

        #else
        var asyncResult = Begin_Entity_UpdateEntity(null, null, entityId, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
        return End_Entity_UpdateEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_UpdateEntity(AsyncCallback callback, object state, string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      #else
      public void send_Entity_UpdateEntity(string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_UpdateEntity", TMessageType.Call, seqid_));
        Entity_UpdateEntity_args args = new Entity_UpdateEntity_args();
        args.EntityId = entityId;
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.JsonEntityAcl = jsonEntityAcl;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_UpdateEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_UpdateEntity_result result = new Entity_UpdateEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_UpdateEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_UpdateSharedEntity(AsyncCallback callback, object state, string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex)
      {
        return send_Entity_UpdateSharedEntity(callback, state, entityId, targetProfileId, entityType, jsonEntityData, version, clientIndex);
      }

      public string End_Entity_UpdateSharedEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_UpdateSharedEntity();
      }

      #endif

      /// <summary>
      /// Method updates a shared entity owned by another user. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="targetProfileId">The id of the entity's owner</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      public string Entity_UpdateSharedEntity(string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_UpdateSharedEntity(entityId, targetProfileId, entityType, jsonEntityData, version, clientIndex);
        return recv_Entity_UpdateSharedEntity();

        #else
        var asyncResult = Begin_Entity_UpdateSharedEntity(null, null, entityId, targetProfileId, entityType, jsonEntityData, version, clientIndex);
        return End_Entity_UpdateSharedEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_UpdateSharedEntity(AsyncCallback callback, object state, string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex)
      #else
      public void send_Entity_UpdateSharedEntity(string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_UpdateSharedEntity", TMessageType.Call, seqid_));
        Entity_UpdateSharedEntity_args args = new Entity_UpdateSharedEntity_args();
        args.EntityId = entityId;
        args.TargetProfileId = targetProfileId;
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_UpdateSharedEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_UpdateSharedEntity_result result = new Entity_UpdateSharedEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_UpdateSharedEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_DeleteEntity(AsyncCallback callback, object state, string entityId, int version, int clientIndex)
      {
        return send_Entity_DeleteEntity(callback, state, entityId, version, clientIndex);
      }

      public string End_Entity_DeleteEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_DeleteEntity();
      }

      #endif

      /// <summary>
      /// Method deletes the given entity on the server.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      public string Entity_DeleteEntity(string entityId, int version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_DeleteEntity(entityId, version, clientIndex);
        return recv_Entity_DeleteEntity();

        #else
        var asyncResult = Begin_Entity_DeleteEntity(null, null, entityId, version, clientIndex);
        return End_Entity_DeleteEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_DeleteEntity(AsyncCallback callback, object state, string entityId, int version, int clientIndex)
      #else
      public void send_Entity_DeleteEntity(string entityId, int version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_DeleteEntity", TMessageType.Call, seqid_));
        Entity_DeleteEntity_args args = new Entity_DeleteEntity_args();
        args.EntityId = entityId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_DeleteEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_DeleteEntity_result result = new Entity_DeleteEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_DeleteEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_UpdateSingleton(AsyncCallback callback, object state, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      {
        return send_Entity_UpdateSingleton(callback, state, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
      }

      public string End_Entity_UpdateSingleton(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_UpdateSingleton();
      }

      #endif

      /// <summary>
      /// Method updates a singleton entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string. If the entity doesn't exist it is created.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      public string Entity_UpdateSingleton(string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_UpdateSingleton(entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
        return recv_Entity_UpdateSingleton();

        #else
        var asyncResult = Begin_Entity_UpdateSingleton(null, null, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
        return End_Entity_UpdateSingleton(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_UpdateSingleton(AsyncCallback callback, object state, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      #else
      public void send_Entity_UpdateSingleton(string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_UpdateSingleton", TMessageType.Call, seqid_));
        Entity_UpdateSingleton_args args = new Entity_UpdateSingleton_args();
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.JsonEntityAcl = jsonEntityAcl;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_UpdateSingleton()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_UpdateSingleton_result result = new Entity_UpdateSingleton_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_UpdateSingleton failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_DeleteSingleton(AsyncCallback callback, object state, string entityType, int version, int clientIndex)
      {
        return send_Entity_DeleteSingleton(callback, state, entityType, version, clientIndex);
      }

      public string End_Entity_DeleteSingleton(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_DeleteSingleton();
      }

      #endif

      /// <summary>
      /// Method deletes the given singleton on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      public string Entity_DeleteSingleton(string entityType, int version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_DeleteSingleton(entityType, version, clientIndex);
        return recv_Entity_DeleteSingleton();

        #else
        var asyncResult = Begin_Entity_DeleteSingleton(null, null, entityType, version, clientIndex);
        return End_Entity_DeleteSingleton(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_DeleteSingleton(AsyncCallback callback, object state, string entityType, int version, int clientIndex)
      #else
      public void send_Entity_DeleteSingleton(string entityType, int version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_DeleteSingleton", TMessageType.Call, seqid_));
        Entity_DeleteSingleton_args args = new Entity_DeleteSingleton_args();
        args.EntityType = entityType;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_DeleteSingleton()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_DeleteSingleton_result result = new Entity_DeleteSingleton_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_DeleteSingleton failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetEntity(AsyncCallback callback, object state, string entityId, int clientIndex)
      {
        return send_Entity_GetEntity(callback, state, entityId, clientIndex);
      }

      public string End_Entity_GetEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetEntity();
      }

      #endif

      /// <summary>
      /// Method to get a specific entity.
      /// </summary>
      /// <param name="entityId">The id of the entity</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetEntity(string entityId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetEntity(entityId, clientIndex);
        return recv_Entity_GetEntity();

        #else
        var asyncResult = Begin_Entity_GetEntity(null, null, entityId, clientIndex);
        return End_Entity_GetEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetEntity(AsyncCallback callback, object state, string entityId, int clientIndex)
      #else
      public void send_Entity_GetEntity(string entityId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetEntity", TMessageType.Call, seqid_));
        Entity_GetEntity_args args = new Entity_GetEntity_args();
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetEntity_result result = new Entity_GetEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetSingleton(AsyncCallback callback, object state, string entityType, int clientIndex)
      {
        return send_Entity_GetSingleton(callback, state, entityType, clientIndex);
      }

      public string End_Entity_GetSingleton(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetSingleton();
      }

      #endif

      /// <summary>
      /// Method retrieves a singleton entity on the server. If the entity doesn't exist, null is returned.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetSingleton(string entityType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetSingleton(entityType, clientIndex);
        return recv_Entity_GetSingleton();

        #else
        var asyncResult = Begin_Entity_GetSingleton(null, null, entityType, clientIndex);
        return End_Entity_GetSingleton(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetSingleton(AsyncCallback callback, object state, string entityType, int clientIndex)
      #else
      public void send_Entity_GetSingleton(string entityType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetSingleton", TMessageType.Call, seqid_));
        Entity_GetSingleton_args args = new Entity_GetSingleton_args();
        args.EntityType = entityType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetSingleton()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetSingleton_result result = new Entity_GetSingleton_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSingleton failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetSharedEntityForProfileId(AsyncCallback callback, object state, string profileId, string entityId, int clientIndex)
      {
        return send_Entity_GetSharedEntityForProfileId(callback, state, profileId, entityId, clientIndex);
      }

      public string End_Entity_GetSharedEntityForProfileId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetSharedEntityForProfileId();
      }

      #endif

      /// <summary>
      /// Method returns a shared entity for the given profile and entity ID.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The the profile ID of the user who owns the entity</param>
      /// <param name="entityId">The ID of the entity that will be retrieved</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetSharedEntityForProfileId(string profileId, string entityId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetSharedEntityForProfileId(profileId, entityId, clientIndex);
        return recv_Entity_GetSharedEntityForProfileId();

        #else
        var asyncResult = Begin_Entity_GetSharedEntityForProfileId(null, null, profileId, entityId, clientIndex);
        return End_Entity_GetSharedEntityForProfileId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetSharedEntityForProfileId(AsyncCallback callback, object state, string profileId, string entityId, int clientIndex)
      #else
      public void send_Entity_GetSharedEntityForProfileId(string profileId, string entityId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetSharedEntityForProfileId", TMessageType.Call, seqid_));
        Entity_GetSharedEntityForProfileId_args args = new Entity_GetSharedEntityForProfileId_args();
        args.ProfileId = profileId;
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetSharedEntityForProfileId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetSharedEntityForProfileId_result result = new Entity_GetSharedEntityForProfileId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSharedEntityForProfileId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetSharedEntitiesForProfileId(AsyncCallback callback, object state, string profileId, int clientIndex)
      {
        return send_Entity_GetSharedEntitiesForProfileId(callback, state, profileId, clientIndex);
      }

      public string End_Entity_GetSharedEntitiesForProfileId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetSharedEntitiesForProfileId();
      }

      #endif

      /// <summary>
      /// Method returns all shared entities for the given profile id.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The profile id to retrieve shared entities for</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetSharedEntitiesForProfileId(string profileId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetSharedEntitiesForProfileId(profileId, clientIndex);
        return recv_Entity_GetSharedEntitiesForProfileId();

        #else
        var asyncResult = Begin_Entity_GetSharedEntitiesForProfileId(null, null, profileId, clientIndex);
        return End_Entity_GetSharedEntitiesForProfileId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetSharedEntitiesForProfileId(AsyncCallback callback, object state, string profileId, int clientIndex)
      #else
      public void send_Entity_GetSharedEntitiesForProfileId(string profileId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetSharedEntitiesForProfileId", TMessageType.Call, seqid_));
        Entity_GetSharedEntitiesForProfileId_args args = new Entity_GetSharedEntitiesForProfileId_args();
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetSharedEntitiesForProfileId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetSharedEntitiesForProfileId_result result = new Entity_GetSharedEntitiesForProfileId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSharedEntitiesForProfileId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetList(AsyncCallback callback, object state, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      {
        return send_Entity_GetList(callback, state, whereJson, orderByJson, maxReturn, clientIndex);
      }

      public string End_Entity_GetList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetList();
      }

      #endif

      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetList(string whereJson, string orderByJson, int maxReturn, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetList(whereJson, orderByJson, maxReturn, clientIndex);
        return recv_Entity_GetList();

        #else
        var asyncResult = Begin_Entity_GetList(null, null, whereJson, orderByJson, maxReturn, clientIndex);
        return End_Entity_GetList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetList(AsyncCallback callback, object state, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      #else
      public void send_Entity_GetList(string whereJson, string orderByJson, int maxReturn, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetList", TMessageType.Call, seqid_));
        Entity_GetList_args args = new Entity_GetList_args();
        args.WhereJson = whereJson;
        args.OrderByJson = orderByJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetList_result result = new Entity_GetList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetSharedEntitiesListForProfileId(AsyncCallback callback, object state, string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      {
        return send_Entity_GetSharedEntitiesListForProfileId(callback, state, profileId, whereJson, orderByJson, maxReturn, clientIndex);
      }

      public string End_Entity_GetSharedEntitiesListForProfileId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetSharedEntitiesListForProfileId();
      }

      #endif

      /// <summary>
      /// Method gets list of shared entities for the specified user based on type and/or where clause
      /// </summary>
      /// <param name="profileId">The profile ID to retrieve shared entities for</param>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetSharedEntitiesListForProfileId(string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetSharedEntitiesListForProfileId(profileId, whereJson, orderByJson, maxReturn, clientIndex);
        return recv_Entity_GetSharedEntitiesListForProfileId();

        #else
        var asyncResult = Begin_Entity_GetSharedEntitiesListForProfileId(null, null, profileId, whereJson, orderByJson, maxReturn, clientIndex);
        return End_Entity_GetSharedEntitiesListForProfileId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetSharedEntitiesListForProfileId(AsyncCallback callback, object state, string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      #else
      public void send_Entity_GetSharedEntitiesListForProfileId(string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetSharedEntitiesListForProfileId", TMessageType.Call, seqid_));
        Entity_GetSharedEntitiesListForProfileId_args args = new Entity_GetSharedEntitiesListForProfileId_args();
        args.ProfileId = profileId;
        args.WhereJson = whereJson;
        args.OrderByJson = orderByJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetSharedEntitiesListForProfileId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetSharedEntitiesListForProfileId_result result = new Entity_GetSharedEntitiesListForProfileId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSharedEntitiesListForProfileId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetListCount(AsyncCallback callback, object state, string whereJson, int clientIndex)
      {
        return send_Entity_GetListCount(callback, state, whereJson, clientIndex);
      }

      public string End_Entity_GetListCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetListCount();
      }

      #endif

      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetListCount(string whereJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetListCount(whereJson, clientIndex);
        return recv_Entity_GetListCount();

        #else
        var asyncResult = Begin_Entity_GetListCount(null, null, whereJson, clientIndex);
        return End_Entity_GetListCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetListCount(AsyncCallback callback, object state, string whereJson, int clientIndex)
      #else
      public void send_Entity_GetListCount(string whereJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetListCount", TMessageType.Call, seqid_));
        Entity_GetListCount_args args = new Entity_GetListCount_args();
        args.WhereJson = whereJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetListCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetListCount_result result = new Entity_GetListCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetListCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      {
        return send_Entity_GetPage(callback, state, jsonContext, clientIndex);
      }

      public string End_Entity_GetPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetPage();
      }

      #endif

      /// <summary>
      /// Method uses a paging system to iterate through user entities.
      /// After retrieving a page of entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetPage(string jsonContext, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetPage(jsonContext, clientIndex);
        return recv_Entity_GetPage();

        #else
        var asyncResult = Begin_Entity_GetPage(null, null, jsonContext, clientIndex);
        return End_Entity_GetPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      #else
      public void send_Entity_GetPage(string jsonContext, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetPage", TMessageType.Call, seqid_));
        Entity_GetPage_args args = new Entity_GetPage_args();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetPage_result result = new Entity_GetPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_GetPageOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex)
      {
        return send_Entity_GetPageOffset(callback, state, context, pageOffset, clientIndex);
      }

      public string End_Entity_GetPageOffset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_GetPageOffset();
      }

      #endif

      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      public string Entity_GetPageOffset(string context, int pageOffset, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_GetPageOffset(context, pageOffset, clientIndex);
        return recv_Entity_GetPageOffset();

        #else
        var asyncResult = Begin_Entity_GetPageOffset(null, null, context, pageOffset, clientIndex);
        return End_Entity_GetPageOffset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_GetPageOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex)
      #else
      public void send_Entity_GetPageOffset(string context, int pageOffset, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_GetPageOffset", TMessageType.Call, seqid_));
        Entity_GetPageOffset_args args = new Entity_GetPageOffset_args();
        args.Context = context;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_GetPageOffset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_GetPageOffset_result result = new Entity_GetPageOffset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetPageOffset failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_IncrementUserEntityData(AsyncCallback callback, object state, string entityId, string jsonData, int clientIndex)
      {
        return send_Entity_IncrementUserEntityData(callback, state, entityId, jsonData, clientIndex);
      }

      public string End_Entity_IncrementUserEntityData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_IncrementUserEntityData();
      }

      #endif

      /// <summary>
      /// Partial increment of entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      public string Entity_IncrementUserEntityData(string entityId, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_IncrementUserEntityData(entityId, jsonData, clientIndex);
        return recv_Entity_IncrementUserEntityData();

        #else
        var asyncResult = Begin_Entity_IncrementUserEntityData(null, null, entityId, jsonData, clientIndex);
        return End_Entity_IncrementUserEntityData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_IncrementUserEntityData(AsyncCallback callback, object state, string entityId, string jsonData, int clientIndex)
      #else
      public void send_Entity_IncrementUserEntityData(string entityId, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_IncrementUserEntityData", TMessageType.Call, seqid_));
        Entity_IncrementUserEntityData_args args = new Entity_IncrementUserEntityData_args();
        args.EntityId = entityId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_IncrementUserEntityData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_IncrementUserEntityData_result result = new Entity_IncrementUserEntityData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_IncrementUserEntityData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Entity_IncrementSharedUserEntityData(AsyncCallback callback, object state, string entityId, string targetProfileId, string jsonData, int clientIndex)
      {
        return send_Entity_IncrementSharedUserEntityData(callback, state, entityId, targetProfileId, jsonData, clientIndex);
      }

      public string End_Entity_IncrementSharedUserEntityData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Entity_IncrementSharedUserEntityData();
      }

      #endif

      /// <summary>
      /// Partial increment of shared entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="targetProfileId">Profile ID of the entity owner</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      public string Entity_IncrementSharedUserEntityData(string entityId, string targetProfileId, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Entity_IncrementSharedUserEntityData(entityId, targetProfileId, jsonData, clientIndex);
        return recv_Entity_IncrementSharedUserEntityData();

        #else
        var asyncResult = Begin_Entity_IncrementSharedUserEntityData(null, null, entityId, targetProfileId, jsonData, clientIndex);
        return End_Entity_IncrementSharedUserEntityData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Entity_IncrementSharedUserEntityData(AsyncCallback callback, object state, string entityId, string targetProfileId, string jsonData, int clientIndex)
      #else
      public void send_Entity_IncrementSharedUserEntityData(string entityId, string targetProfileId, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Entity_IncrementSharedUserEntityData", TMessageType.Call, seqid_));
        Entity_IncrementSharedUserEntityData_args args = new Entity_IncrementSharedUserEntityData_args();
        args.EntityId = entityId;
        args.TargetProfileId = targetProfileId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Entity_IncrementSharedUserEntityData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Entity_IncrementSharedUserEntityData_result result = new Entity_IncrementSharedUserEntityData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_IncrementSharedUserEntityData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Event_SendEvent(AsyncCallback callback, object state, string toProfileId, string eventType, string jsonEventData, int clientIndex)
      {
        return send_Event_SendEvent(callback, state, toProfileId, eventType, jsonEventData, clientIndex);
      }

      public string End_Event_SendEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Event_SendEvent();
      }

      #endif

      /// <summary>
      /// Sends an event to the designated profile id with the attached json data.
      /// Any events that have been sent to a user will show up in their
      /// incoming event mailbox. If the recordLocally flag is set to true,
      /// a copy of this event (with the exact same event id) will be stored
      /// in the sending user's "sent" event mailbox.
      /// </summary>
      /// <param name="toProfileId">The id of the user who is being sent the event</param>
      /// <param name="eventType">The user-defined type of the event.</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      public string Event_SendEvent(string toProfileId, string eventType, string jsonEventData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Event_SendEvent(toProfileId, eventType, jsonEventData, clientIndex);
        return recv_Event_SendEvent();

        #else
        var asyncResult = Begin_Event_SendEvent(null, null, toProfileId, eventType, jsonEventData, clientIndex);
        return End_Event_SendEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Event_SendEvent(AsyncCallback callback, object state, string toProfileId, string eventType, string jsonEventData, int clientIndex)
      #else
      public void send_Event_SendEvent(string toProfileId, string eventType, string jsonEventData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Event_SendEvent", TMessageType.Call, seqid_));
        Event_SendEvent_args args = new Event_SendEvent_args();
        args.ToProfileId = toProfileId;
        args.EventType = eventType;
        args.JsonEventData = jsonEventData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Event_SendEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Event_SendEvent_result result = new Event_SendEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_SendEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Event_UpdateIncomingEventData(AsyncCallback callback, object state, string evId, string jsonEventData, int clientIndex)
      {
        return send_Event_UpdateIncomingEventData(callback, state, evId, jsonEventData, clientIndex);
      }

      public string End_Event_UpdateIncomingEventData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Event_UpdateIncomingEventData();
      }

      #endif

      /// <summary>
      /// Updates an event in the user's incoming event mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      public string Event_UpdateIncomingEventData(string evId, string jsonEventData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Event_UpdateIncomingEventData(evId, jsonEventData, clientIndex);
        return recv_Event_UpdateIncomingEventData();

        #else
        var asyncResult = Begin_Event_UpdateIncomingEventData(null, null, evId, jsonEventData, clientIndex);
        return End_Event_UpdateIncomingEventData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Event_UpdateIncomingEventData(AsyncCallback callback, object state, string evId, string jsonEventData, int clientIndex)
      #else
      public void send_Event_UpdateIncomingEventData(string evId, string jsonEventData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Event_UpdateIncomingEventData", TMessageType.Call, seqid_));
        Event_UpdateIncomingEventData_args args = new Event_UpdateIncomingEventData_args();
        args.EvId = evId;
        args.JsonEventData = jsonEventData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Event_UpdateIncomingEventData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Event_UpdateIncomingEventData_result result = new Event_UpdateIncomingEventData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_UpdateIncomingEventData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Event_DeleteIncomingEvent(AsyncCallback callback, object state, string evId, int clientIndex)
      {
        return send_Event_DeleteIncomingEvent(callback, state, evId, clientIndex);
      }

      public string End_Event_DeleteIncomingEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Event_DeleteIncomingEvent();
      }

      #endif

      /// <summary>
      /// Delete an event out of the user's incoming mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="clientIndex"></param>
      public string Event_DeleteIncomingEvent(string evId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Event_DeleteIncomingEvent(evId, clientIndex);
        return recv_Event_DeleteIncomingEvent();

        #else
        var asyncResult = Begin_Event_DeleteIncomingEvent(null, null, evId, clientIndex);
        return End_Event_DeleteIncomingEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Event_DeleteIncomingEvent(AsyncCallback callback, object state, string evId, int clientIndex)
      #else
      public void send_Event_DeleteIncomingEvent(string evId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Event_DeleteIncomingEvent", TMessageType.Call, seqid_));
        Event_DeleteIncomingEvent_args args = new Event_DeleteIncomingEvent_args();
        args.EvId = evId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Event_DeleteIncomingEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Event_DeleteIncomingEvent_result result = new Event_DeleteIncomingEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_DeleteIncomingEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Event_GetEvents(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Event_GetEvents(callback, state, clientIndex);
      }

      public string End_Event_GetEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Event_GetEvents();
      }

      #endif

      /// <summary>
      /// Get the events currently queued for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Event_GetEvents(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Event_GetEvents(clientIndex);
        return recv_Event_GetEvents();

        #else
        var asyncResult = Begin_Event_GetEvents(null, null, clientIndex);
        return End_Event_GetEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Event_GetEvents(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Event_GetEvents(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Event_GetEvents", TMessageType.Call, seqid_));
        Event_GetEvents_args args = new Event_GetEvents_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Event_GetEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Event_GetEvents_result result = new Event_GetEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_GetEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_UploadFile(AsyncCallback callback, object state, string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex)
      {
        return send_File_UploadFile(callback, state, cloudPath, cloudFilename, shareable, replaceIfExists, localPath, clientIndex);
      }

      public string End_File_UploadFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_UploadFile();
      }

      #endif

      /// <summary>
      /// Prepares a user file upload. On success the file will begin uploading
      /// to the brainCloud server.To be informed of success/failure of the upload
      /// register an IFileUploadCallback with the BrainCloudClient class.
      /// </summary>
      /// <param name="cloudPath">The desired cloud path of the file</param>
      /// <param name="cloudFilename">The desired cloud fileName of the file</param>
      /// <param name="shareable">True if the file is shareable</param>
      /// <param name="replaceIfExists">Whether to replace file if it exists</param>
      /// <param name="localPath">The path and fileName of the local file</param>
      /// <param name="clientIndex"></param>
      public string File_UploadFile(string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_UploadFile(cloudPath, cloudFilename, shareable, replaceIfExists, localPath, clientIndex);
        return recv_File_UploadFile();

        #else
        var asyncResult = Begin_File_UploadFile(null, null, cloudPath, cloudFilename, shareable, replaceIfExists, localPath, clientIndex);
        return End_File_UploadFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_UploadFile(AsyncCallback callback, object state, string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex)
      #else
      public void send_File_UploadFile(string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_UploadFile", TMessageType.Call, seqid_));
        File_UploadFile_args args = new File_UploadFile_args();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.Shareable = shareable;
        args.ReplaceIfExists = replaceIfExists;
        args.LocalPath = localPath;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_UploadFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_UploadFile_result result = new File_UploadFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_UploadFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_CancelUpload(AsyncCallback callback, object state, string uploadId, int clientIndex)
      {
        return send_File_CancelUpload(callback, state, uploadId, clientIndex);
      }

      public void End_File_CancelUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_File_CancelUpload();
      }

      #endif

      /// <summary>
      /// Method cancels an upload. If an IFileUploadCallback has been registered with the BrainCloudClient class,
      /// the fileUploadFailed callback method will be called once the upload has been canceled.
      /// NOTE: The upload will still continue in the background on versions of Unity before 5.3
      /// and on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">Upload ID of the file to cancel</param>
      /// <param name="clientIndex"></param>
      public void File_CancelUpload(string uploadId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_CancelUpload(uploadId, clientIndex);
        recv_File_CancelUpload();

        #else
        var asyncResult = Begin_File_CancelUpload(null, null, uploadId, clientIndex);
        End_File_CancelUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_CancelUpload(AsyncCallback callback, object state, string uploadId, int clientIndex)
      #else
      public void send_File_CancelUpload(string uploadId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_CancelUpload", TMessageType.Call, seqid_));
        File_CancelUpload_args args = new File_CancelUpload_args();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_File_CancelUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_CancelUpload_result result = new File_CancelUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_GetUploadProgress(AsyncCallback callback, object state, string uploadId, int clientIndex)
      {
        return send_File_GetUploadProgress(callback, state, uploadId, clientIndex);
      }

      public double End_File_GetUploadProgress(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_GetUploadProgress();
      }

      #endif

      /// <summary>
      /// Returns the progress of the given upload from 0.0 to 1.0 or -1 if upload not found.
      /// NOTE: This will always return 1 on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      public double File_GetUploadProgress(string uploadId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_GetUploadProgress(uploadId, clientIndex);
        return recv_File_GetUploadProgress();

        #else
        var asyncResult = Begin_File_GetUploadProgress(null, null, uploadId, clientIndex);
        return End_File_GetUploadProgress(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_GetUploadProgress(AsyncCallback callback, object state, string uploadId, int clientIndex)
      #else
      public void send_File_GetUploadProgress(string uploadId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_GetUploadProgress", TMessageType.Call, seqid_));
        File_GetUploadProgress_args args = new File_GetUploadProgress_args();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_File_GetUploadProgress()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_GetUploadProgress_result result = new File_GetUploadProgress_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetUploadProgress failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_GetUploadBytesTransferred(AsyncCallback callback, object state, string uploadId, int clientIndex)
      {
        return send_File_GetUploadBytesTransferred(callback, state, uploadId, clientIndex);
      }

      public long End_File_GetUploadBytesTransferred(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_GetUploadBytesTransferred();
      }

      #endif

      /// <summary>
      /// Returns the number of bytes uploaded or -1 if upload not found.
      /// NOTE: This will always return the total bytes to transfer on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      public long File_GetUploadBytesTransferred(string uploadId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_GetUploadBytesTransferred(uploadId, clientIndex);
        return recv_File_GetUploadBytesTransferred();

        #else
        var asyncResult = Begin_File_GetUploadBytesTransferred(null, null, uploadId, clientIndex);
        return End_File_GetUploadBytesTransferred(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_GetUploadBytesTransferred(AsyncCallback callback, object state, string uploadId, int clientIndex)
      #else
      public void send_File_GetUploadBytesTransferred(string uploadId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_GetUploadBytesTransferred", TMessageType.Call, seqid_));
        File_GetUploadBytesTransferred_args args = new File_GetUploadBytesTransferred_args();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_File_GetUploadBytesTransferred()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_GetUploadBytesTransferred_result result = new File_GetUploadBytesTransferred_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetUploadBytesTransferred failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_GetUploadTotalBytesToTransfer(AsyncCallback callback, object state, string uploadId, int clientIndex)
      {
        return send_File_GetUploadTotalBytesToTransfer(callback, state, uploadId, clientIndex);
      }

      public long End_File_GetUploadTotalBytesToTransfer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_GetUploadTotalBytesToTransfer();
      }

      #endif

      /// <summary>
      /// Returns the total number of bytes that will be uploaded or -1 if upload not found.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      public long File_GetUploadTotalBytesToTransfer(string uploadId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_GetUploadTotalBytesToTransfer(uploadId, clientIndex);
        return recv_File_GetUploadTotalBytesToTransfer();

        #else
        var asyncResult = Begin_File_GetUploadTotalBytesToTransfer(null, null, uploadId, clientIndex);
        return End_File_GetUploadTotalBytesToTransfer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_GetUploadTotalBytesToTransfer(AsyncCallback callback, object state, string uploadId, int clientIndex)
      #else
      public void send_File_GetUploadTotalBytesToTransfer(string uploadId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_GetUploadTotalBytesToTransfer", TMessageType.Call, seqid_));
        File_GetUploadTotalBytesToTransfer_args args = new File_GetUploadTotalBytesToTransfer_args();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_File_GetUploadTotalBytesToTransfer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_GetUploadTotalBytesToTransfer_result result = new File_GetUploadTotalBytesToTransfer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetUploadTotalBytesToTransfer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_ListUserFiles_SFO(AsyncCallback callback, object state, int clientIndex)
      {
        return send_File_ListUserFiles_SFO(callback, state, clientIndex);
      }

      public string End_File_ListUserFiles_SFO(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_ListUserFiles_SFO();
      }

      #endif

      /// <summary>
      /// List all user files
      /// </summary>
      /// <param name="clientIndex"></param>
      public string File_ListUserFiles_SFO(int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_ListUserFiles_SFO(clientIndex);
        return recv_File_ListUserFiles_SFO();

        #else
        var asyncResult = Begin_File_ListUserFiles_SFO(null, null, clientIndex);
        return End_File_ListUserFiles_SFO(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_ListUserFiles_SFO(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_File_ListUserFiles_SFO(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_ListUserFiles_SFO", TMessageType.Call, seqid_));
        File_ListUserFiles_SFO_args args = new File_ListUserFiles_SFO_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_ListUserFiles_SFO()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_ListUserFiles_SFO_result result = new File_ListUserFiles_SFO_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_ListUserFiles_SFO failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_ListUserFiles_SNSFO(AsyncCallback callback, object state, string cloudPath, bool recurse, int clientIndex)
      {
        return send_File_ListUserFiles_SNSFO(callback, state, cloudPath, recurse, clientIndex);
      }

      public string End_File_ListUserFiles_SNSFO(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_ListUserFiles_SNSFO();
      }

      #endif

      /// <summary>
      /// List user files from the given cloud path
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      public string File_ListUserFiles_SNSFO(string cloudPath, bool recurse, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_ListUserFiles_SNSFO(cloudPath, recurse, clientIndex);
        return recv_File_ListUserFiles_SNSFO();

        #else
        var asyncResult = Begin_File_ListUserFiles_SNSFO(null, null, cloudPath, recurse, clientIndex);
        return End_File_ListUserFiles_SNSFO(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_ListUserFiles_SNSFO(AsyncCallback callback, object state, string cloudPath, bool recurse, int clientIndex)
      #else
      public void send_File_ListUserFiles_SNSFO(string cloudPath, bool recurse, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_ListUserFiles_SNSFO", TMessageType.Call, seqid_));
        File_ListUserFiles_SNSFO_args args = new File_ListUserFiles_SNSFO_args();
        args.CloudPath = cloudPath;
        args.Recurse = recurse;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_ListUserFiles_SNSFO()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_ListUserFiles_SNSFO_result result = new File_ListUserFiles_SNSFO_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_ListUserFiles_SNSFO failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_DeleteUserFile(AsyncCallback callback, object state, string cloudPath, string cloudFileName, int clientIndex)
      {
        return send_File_DeleteUserFile(callback, state, cloudPath, cloudFileName, clientIndex);
      }

      public string End_File_DeleteUserFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_DeleteUserFile();
      }

      #endif

      /// <summary>
      /// Deletes a single user file.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFileName"></param>
      /// <param name="clientIndex"></param>
      public string File_DeleteUserFile(string cloudPath, string cloudFileName, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_DeleteUserFile(cloudPath, cloudFileName, clientIndex);
        return recv_File_DeleteUserFile();

        #else
        var asyncResult = Begin_File_DeleteUserFile(null, null, cloudPath, cloudFileName, clientIndex);
        return End_File_DeleteUserFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_DeleteUserFile(AsyncCallback callback, object state, string cloudPath, string cloudFileName, int clientIndex)
      #else
      public void send_File_DeleteUserFile(string cloudPath, string cloudFileName, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_DeleteUserFile", TMessageType.Call, seqid_));
        File_DeleteUserFile_args args = new File_DeleteUserFile_args();
        args.CloudPath = cloudPath;
        args.CloudFileName = cloudFileName;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_DeleteUserFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_DeleteUserFile_result result = new File_DeleteUserFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_DeleteUserFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_DeleteUserFiles(AsyncCallback callback, object state, string cloudPath, bool recurse, int clientIndex)
      {
        return send_File_DeleteUserFiles(callback, state, cloudPath, recurse, clientIndex);
      }

      public string End_File_DeleteUserFiles(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_DeleteUserFiles();
      }

      #endif

      /// <summary>
      /// Delete multiple user files
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      public string File_DeleteUserFiles(string cloudPath, bool recurse, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_DeleteUserFiles(cloudPath, recurse, clientIndex);
        return recv_File_DeleteUserFiles();

        #else
        var asyncResult = Begin_File_DeleteUserFiles(null, null, cloudPath, recurse, clientIndex);
        return End_File_DeleteUserFiles(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_DeleteUserFiles(AsyncCallback callback, object state, string cloudPath, bool recurse, int clientIndex)
      #else
      public void send_File_DeleteUserFiles(string cloudPath, bool recurse, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_DeleteUserFiles", TMessageType.Call, seqid_));
        File_DeleteUserFiles_args args = new File_DeleteUserFiles_args();
        args.CloudPath = cloudPath;
        args.Recurse = recurse;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_DeleteUserFiles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_DeleteUserFiles_result result = new File_DeleteUserFiles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_DeleteUserFiles failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_GetCDNUrl(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex)
      {
        return send_File_GetCDNUrl(callback, state, cloudPath, cloudFilename, clientIndex);
      }

      public string End_File_GetCDNUrl(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_GetCDNUrl();
      }

      #endif

      /// <summary>
      /// Returns the CDN URL for a file object.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFilename">Name of file</param>
      /// <param name="clientIndex"></param>
      public string File_GetCDNUrl(string cloudPath, string cloudFilename, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_GetCDNUrl(cloudPath, cloudFilename, clientIndex);
        return recv_File_GetCDNUrl();

        #else
        var asyncResult = Begin_File_GetCDNUrl(null, null, cloudPath, cloudFilename, clientIndex);
        return End_File_GetCDNUrl(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_GetCDNUrl(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex)
      #else
      public void send_File_GetCDNUrl(string cloudPath, string cloudFilename, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_GetCDNUrl", TMessageType.Call, seqid_));
        File_GetCDNUrl_args args = new File_GetCDNUrl_args();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_GetCDNUrl()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_GetCDNUrl_result result = new File_GetCDNUrl_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetCDNUrl failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_FindUserByUniversalId(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex)
      {
        return send_Friend_FindUserByUniversalId(callback, state, searchText, maxResults, clientIndex);
      }

      public string End_Friend_FindUserByUniversalId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_FindUserByUniversalId();
      }

      #endif

      /// <summary>
      /// Retrieves profile information for the partial matches of the specified text.
      /// </summary>
      /// <param name="searchText">Universal ID text on which to search.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      public string Friend_FindUserByUniversalId(string searchText, int maxResults, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_FindUserByUniversalId(searchText, maxResults, clientIndex);
        return recv_Friend_FindUserByUniversalId();

        #else
        var asyncResult = Begin_Friend_FindUserByUniversalId(null, null, searchText, maxResults, clientIndex);
        return End_Friend_FindUserByUniversalId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_FindUserByUniversalId(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex)
      #else
      public void send_Friend_FindUserByUniversalId(string searchText, int maxResults, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_FindUserByUniversalId", TMessageType.Call, seqid_));
        Friend_FindUserByUniversalId_args args = new Friend_FindUserByUniversalId_args();
        args.SearchText = searchText;
        args.MaxResults = maxResults;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_FindUserByUniversalId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_FindUserByUniversalId_result result = new Friend_FindUserByUniversalId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_FindUserByUniversalId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_GetProfileInfoForCredential(AsyncCallback callback, object state, string externalId, string authenticationType, int clientIndex)
      {
        return send_Friend_GetProfileInfoForCredential(callback, state, externalId, authenticationType, clientIndex);
      }

      public string End_Friend_GetProfileInfoForCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_GetProfileInfoForCredential();
      }

      #endif

      /// <summary>
      /// Retrieves profile information of the specified user.
      /// </summary>
      /// <param name="externalId">External id of the user to find</param>
      /// <param name="authenticationType">The authentication type used for the user's ID</param>
      /// <param name="clientIndex"></param>
      public string Friend_GetProfileInfoForCredential(string externalId, string authenticationType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_GetProfileInfoForCredential(externalId, authenticationType, clientIndex);
        return recv_Friend_GetProfileInfoForCredential();

        #else
        var asyncResult = Begin_Friend_GetProfileInfoForCredential(null, null, externalId, authenticationType, clientIndex);
        return End_Friend_GetProfileInfoForCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_GetProfileInfoForCredential(AsyncCallback callback, object state, string externalId, string authenticationType, int clientIndex)
      #else
      public void send_Friend_GetProfileInfoForCredential(string externalId, string authenticationType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_GetProfileInfoForCredential", TMessageType.Call, seqid_));
        Friend_GetProfileInfoForCredential_args args = new Friend_GetProfileInfoForCredential_args();
        args.ExternalId = externalId;
        args.AuthenticationType = authenticationType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_GetProfileInfoForCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_GetProfileInfoForCredential_result result = new Friend_GetProfileInfoForCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetProfileInfoForCredential failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_GetProfileInfoForExternalAuthId(AsyncCallback callback, object state, string externalId, string externalAuthType, int clientIndex)
      {
        return send_Friend_GetProfileInfoForExternalAuthId(callback, state, externalId, externalAuthType, clientIndex);
      }

      public string End_Friend_GetProfileInfoForExternalAuthId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_GetProfileInfoForExternalAuthId();
      }

      #endif

      /// <summary>
      /// Retrieves profile information for the specified external auth user.
      /// </summary>
      /// <param name="externalId">External id of the friend to find</param>
      /// <param name="externalAuthType">The external authentication type used for this friend's external id</param>
      /// <param name="clientIndex"></param>
      public string Friend_GetProfileInfoForExternalAuthId(string externalId, string externalAuthType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_GetProfileInfoForExternalAuthId(externalId, externalAuthType, clientIndex);
        return recv_Friend_GetProfileInfoForExternalAuthId();

        #else
        var asyncResult = Begin_Friend_GetProfileInfoForExternalAuthId(null, null, externalId, externalAuthType, clientIndex);
        return End_Friend_GetProfileInfoForExternalAuthId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_GetProfileInfoForExternalAuthId(AsyncCallback callback, object state, string externalId, string externalAuthType, int clientIndex)
      #else
      public void send_Friend_GetProfileInfoForExternalAuthId(string externalId, string externalAuthType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_GetProfileInfoForExternalAuthId", TMessageType.Call, seqid_));
        Friend_GetProfileInfoForExternalAuthId_args args = new Friend_GetProfileInfoForExternalAuthId_args();
        args.ExternalId = externalId;
        args.ExternalAuthType = externalAuthType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_GetProfileInfoForExternalAuthId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_GetProfileInfoForExternalAuthId_result result = new Friend_GetProfileInfoForExternalAuthId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetProfileInfoForExternalAuthId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_GetExternalIdForProfileId(AsyncCallback callback, object state, string profileId, string authenticationType, int clientIndex)
      {
        return send_Friend_GetExternalIdForProfileId(callback, state, profileId, authenticationType, clientIndex);
      }

      public string End_Friend_GetExternalIdForProfileId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_GetExternalIdForProfileId();
      }

      #endif

      /// <summary>
      /// Retrieves the external ID for the specified user profile ID on the specified social platform.
      /// </summary>
      /// <param name="profileId">Profile (user) ID.</param>
      /// <param name="authenticationType">Associated authentication type.</param>
      /// <param name="clientIndex"></param>
      public string Friend_GetExternalIdForProfileId(string profileId, string authenticationType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_GetExternalIdForProfileId(profileId, authenticationType, clientIndex);
        return recv_Friend_GetExternalIdForProfileId();

        #else
        var asyncResult = Begin_Friend_GetExternalIdForProfileId(null, null, profileId, authenticationType, clientIndex);
        return End_Friend_GetExternalIdForProfileId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_GetExternalIdForProfileId(AsyncCallback callback, object state, string profileId, string authenticationType, int clientIndex)
      #else
      public void send_Friend_GetExternalIdForProfileId(string profileId, string authenticationType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_GetExternalIdForProfileId", TMessageType.Call, seqid_));
        Friend_GetExternalIdForProfileId_args args = new Friend_GetExternalIdForProfileId_args();
        args.ProfileId = profileId;
        args.AuthenticationType = authenticationType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_GetExternalIdForProfileId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_GetExternalIdForProfileId_result result = new Friend_GetExternalIdForProfileId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetExternalIdForProfileId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_ReadFriendEntity(AsyncCallback callback, object state, string entityId, string friendId, int clientIndex)
      {
        return send_Friend_ReadFriendEntity(callback, state, entityId, friendId, clientIndex);
      }

      public string End_Friend_ReadFriendEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_ReadFriendEntity();
      }

      #endif

      /// <summary>
      /// Returns a particular entity of a particular friend.
      /// </summary>
      /// <param name="entityId">Id of entity to retrieve.</param>
      /// <param name="friendId">Profile Id of friend who owns entity.</param>
      /// <param name="clientIndex"></param>
      public string Friend_ReadFriendEntity(string entityId, string friendId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_ReadFriendEntity(entityId, friendId, clientIndex);
        return recv_Friend_ReadFriendEntity();

        #else
        var asyncResult = Begin_Friend_ReadFriendEntity(null, null, entityId, friendId, clientIndex);
        return End_Friend_ReadFriendEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_ReadFriendEntity(AsyncCallback callback, object state, string entityId, string friendId, int clientIndex)
      #else
      public void send_Friend_ReadFriendEntity(string entityId, string friendId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_ReadFriendEntity", TMessageType.Call, seqid_));
        Friend_ReadFriendEntity_args args = new Friend_ReadFriendEntity_args();
        args.EntityId = entityId;
        args.FriendId = friendId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_ReadFriendEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_ReadFriendEntity_result result = new Friend_ReadFriendEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ReadFriendEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_ReadFriendsEntities(AsyncCallback callback, object state, string entityType, int clientIndex)
      {
        return send_Friend_ReadFriendsEntities(callback, state, entityType, clientIndex);
      }

      public string End_Friend_ReadFriendsEntities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_ReadFriendsEntities();
      }

      #endif

      /// <summary>
      /// Returns entities of all friends based on type and/or subtype.
      /// </summary>
      /// <param name="entityType">Types of entities to retrieve.</param>
      /// <param name="clientIndex"></param>
      public string Friend_ReadFriendsEntities(string entityType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_ReadFriendsEntities(entityType, clientIndex);
        return recv_Friend_ReadFriendsEntities();

        #else
        var asyncResult = Begin_Friend_ReadFriendsEntities(null, null, entityType, clientIndex);
        return End_Friend_ReadFriendsEntities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_ReadFriendsEntities(AsyncCallback callback, object state, string entityType, int clientIndex)
      #else
      public void send_Friend_ReadFriendsEntities(string entityType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_ReadFriendsEntities", TMessageType.Call, seqid_));
        Friend_ReadFriendsEntities_args args = new Friend_ReadFriendsEntities_args();
        args.EntityType = entityType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_ReadFriendsEntities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_ReadFriendsEntities_result result = new Friend_ReadFriendsEntities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ReadFriendsEntities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_ReadFriendUserState(AsyncCallback callback, object state, string friendId, int clientIndex)
      {
        return send_Friend_ReadFriendUserState(callback, state, friendId, clientIndex);
      }

      public string End_Friend_ReadFriendUserState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_ReadFriendUserState();
      }

      #endif

      /// <summary>
      /// Returns user state of a particular friend.
      /// </summary>
      /// <param name="friendId">Profile Id of friend to retrieve user state for.</param>
      /// <param name="clientIndex"></param>
      public string Friend_ReadFriendUserState(string friendId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_ReadFriendUserState(friendId, clientIndex);
        return recv_Friend_ReadFriendUserState();

        #else
        var asyncResult = Begin_Friend_ReadFriendUserState(null, null, friendId, clientIndex);
        return End_Friend_ReadFriendUserState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_ReadFriendUserState(AsyncCallback callback, object state, string friendId, int clientIndex)
      #else
      public void send_Friend_ReadFriendUserState(string friendId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_ReadFriendUserState", TMessageType.Call, seqid_));
        Friend_ReadFriendUserState_args args = new Friend_ReadFriendUserState_args();
        args.FriendId = friendId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_ReadFriendUserState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_ReadFriendUserState_result result = new Friend_ReadFriendUserState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ReadFriendUserState failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_GetSummaryDataForProfileId(AsyncCallback callback, object state, string profileId, int clientIndex)
      {
        return send_Friend_GetSummaryDataForProfileId(callback, state, profileId, clientIndex);
      }

      public string End_Friend_GetSummaryDataForProfileId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_GetSummaryDataForProfileId();
      }

      #endif

      /// <summary>
      /// Returns user state of a particular user.
      /// </summary>
      /// <param name="profileId">Profile Id of user to retrieve player state for.</param>
      /// <param name="clientIndex"></param>
      public string Friend_GetSummaryDataForProfileId(string profileId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_GetSummaryDataForProfileId(profileId, clientIndex);
        return recv_Friend_GetSummaryDataForProfileId();

        #else
        var asyncResult = Begin_Friend_GetSummaryDataForProfileId(null, null, profileId, clientIndex);
        return End_Friend_GetSummaryDataForProfileId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_GetSummaryDataForProfileId(AsyncCallback callback, object state, string profileId, int clientIndex)
      #else
      public void send_Friend_GetSummaryDataForProfileId(string profileId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_GetSummaryDataForProfileId", TMessageType.Call, seqid_));
        Friend_GetSummaryDataForProfileId_args args = new Friend_GetSummaryDataForProfileId_args();
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_GetSummaryDataForProfileId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_GetSummaryDataForProfileId_result result = new Friend_GetSummaryDataForProfileId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetSummaryDataForProfileId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_FindUsersByExactName(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex)
      {
        return send_Friend_FindUsersByExactName(callback, state, searchText, maxResults, clientIndex);
      }

      public string End_Friend_FindUsersByExactName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_FindUsersByExactName();
      }

      #endif

      /// <summary>
      /// Finds a list of users matching the search text by performing an exact
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The string to search for.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      public string Friend_FindUsersByExactName(string searchText, int maxResults, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_FindUsersByExactName(searchText, maxResults, clientIndex);
        return recv_Friend_FindUsersByExactName();

        #else
        var asyncResult = Begin_Friend_FindUsersByExactName(null, null, searchText, maxResults, clientIndex);
        return End_Friend_FindUsersByExactName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_FindUsersByExactName(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex)
      #else
      public void send_Friend_FindUsersByExactName(string searchText, int maxResults, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_FindUsersByExactName", TMessageType.Call, seqid_));
        Friend_FindUsersByExactName_args args = new Friend_FindUsersByExactName_args();
        args.SearchText = searchText;
        args.MaxResults = maxResults;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_FindUsersByExactName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_FindUsersByExactName_result result = new Friend_FindUsersByExactName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_FindUsersByExactName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_FindUsersBySubstrName(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex)
      {
        return send_Friend_FindUsersBySubstrName(callback, state, searchText, maxResults, clientIndex);
      }

      public string End_Friend_FindUsersBySubstrName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_FindUsersBySubstrName();
      }

      #endif

      /// <summary>
      /// Finds a list of users matching the search text by performing a substring
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The substring to search for. Minimum length of 3 characters.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      public string Friend_FindUsersBySubstrName(string searchText, int maxResults, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_FindUsersBySubstrName(searchText, maxResults, clientIndex);
        return recv_Friend_FindUsersBySubstrName();

        #else
        var asyncResult = Begin_Friend_FindUsersBySubstrName(null, null, searchText, maxResults, clientIndex);
        return End_Friend_FindUsersBySubstrName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_FindUsersBySubstrName(AsyncCallback callback, object state, string searchText, int maxResults, int clientIndex)
      #else
      public void send_Friend_FindUsersBySubstrName(string searchText, int maxResults, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_FindUsersBySubstrName", TMessageType.Call, seqid_));
        Friend_FindUsersBySubstrName_args args = new Friend_FindUsersBySubstrName_args();
        args.SearchText = searchText;
        args.MaxResults = maxResults;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_FindUsersBySubstrName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_FindUsersBySubstrName_result result = new Friend_FindUsersBySubstrName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_FindUsersBySubstrName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_ListFriends(AsyncCallback callback, object state, Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex)
      {
        return send_Friend_ListFriends(callback, state, friendPlatform, includeSummaryData, clientIndex);
      }

      public string End_Friend_ListFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_ListFriends();
      }

      #endif

      /// <summary>
      /// Retrieves a list of user and friend platform information for all friends of the current user.
      /// </summary>
      /// <param name="friendPlatform">Friend platform to query.</param>
      /// <param name="includeSummaryData">True if including summary data; false otherwise.</param>
      /// <param name="clientIndex"></param>
      public string Friend_ListFriends(Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_ListFriends(friendPlatform, includeSummaryData, clientIndex);
        return recv_Friend_ListFriends();

        #else
        var asyncResult = Begin_Friend_ListFriends(null, null, friendPlatform, includeSummaryData, clientIndex);
        return End_Friend_ListFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_ListFriends(AsyncCallback callback, object state, Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex)
      #else
      public void send_Friend_ListFriends(Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_ListFriends", TMessageType.Call, seqid_));
        Friend_ListFriends_args args = new Friend_ListFriends_args();
        args.FriendPlatform = friendPlatform;
        args.IncludeSummaryData = includeSummaryData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_ListFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_ListFriends_result result = new Friend_ListFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ListFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_AddFriends(AsyncCallback callback, object state, List<string> profileIds, int clientIndex)
      {
        return send_Friend_AddFriends(callback, state, profileIds, clientIndex);
      }

      public string End_Friend_AddFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_AddFriends();
      }

      #endif

      /// <summary>
      /// Links the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      public string Friend_AddFriends(List<string> profileIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_AddFriends(profileIds, clientIndex);
        return recv_Friend_AddFriends();

        #else
        var asyncResult = Begin_Friend_AddFriends(null, null, profileIds, clientIndex);
        return End_Friend_AddFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_AddFriends(AsyncCallback callback, object state, List<string> profileIds, int clientIndex)
      #else
      public void send_Friend_AddFriends(List<string> profileIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_AddFriends", TMessageType.Call, seqid_));
        Friend_AddFriends_args args = new Friend_AddFriends_args();
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_AddFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_AddFriends_result result = new Friend_AddFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_AddFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_RemoveFriends(AsyncCallback callback, object state, List<string> profileIds, int clientIndex)
      {
        return send_Friend_RemoveFriends(callback, state, profileIds, clientIndex);
      }

      public string End_Friend_RemoveFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_RemoveFriends();
      }

      #endif

      /// <summary>
      /// Unlinks the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      public string Friend_RemoveFriends(List<string> profileIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_RemoveFriends(profileIds, clientIndex);
        return recv_Friend_RemoveFriends();

        #else
        var asyncResult = Begin_Friend_RemoveFriends(null, null, profileIds, clientIndex);
        return End_Friend_RemoveFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_RemoveFriends(AsyncCallback callback, object state, List<string> profileIds, int clientIndex)
      #else
      public void send_Friend_RemoveFriends(List<string> profileIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_RemoveFriends", TMessageType.Call, seqid_));
        Friend_RemoveFriends_args args = new Friend_RemoveFriends_args();
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_RemoveFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_RemoveFriends_result result = new Friend_RemoveFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_RemoveFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Friend_GetUsersOnlineStatus(AsyncCallback callback, object state, List<string> profileIds, int clientIndex)
      {
        return send_Friend_GetUsersOnlineStatus(callback, state, profileIds, clientIndex);
      }

      public string End_Friend_GetUsersOnlineStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Friend_GetUsersOnlineStatus();
      }

      #endif

      /// <summary>
      /// Get users online status
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      public string Friend_GetUsersOnlineStatus(List<string> profileIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Friend_GetUsersOnlineStatus(profileIds, clientIndex);
        return recv_Friend_GetUsersOnlineStatus();

        #else
        var asyncResult = Begin_Friend_GetUsersOnlineStatus(null, null, profileIds, clientIndex);
        return End_Friend_GetUsersOnlineStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Friend_GetUsersOnlineStatus(AsyncCallback callback, object state, List<string> profileIds, int clientIndex)
      #else
      public void send_Friend_GetUsersOnlineStatus(List<string> profileIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Friend_GetUsersOnlineStatus", TMessageType.Call, seqid_));
        Friend_GetUsersOnlineStatus_args args = new Friend_GetUsersOnlineStatus_args();
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Friend_GetUsersOnlineStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Friend_GetUsersOnlineStatus_result result = new Friend_GetUsersOnlineStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetUsersOnlineStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadAllGamification(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadAllGamification(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadAllGamification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadAllGamification();
      }

      #endif

      /// <summary>
      /// Method retrieves all gamification data for the player.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadAllGamification(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadAllGamification(includeMetaData, clientIndex);
        return recv_Gamification_ReadAllGamification();

        #else
        var asyncResult = Begin_Gamification_ReadAllGamification(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadAllGamification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadAllGamification(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadAllGamification(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadAllGamification", TMessageType.Call, seqid_));
        Gamification_ReadAllGamification_args args = new Gamification_ReadAllGamification_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadAllGamification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadAllGamification_result result = new Gamification_ReadAllGamification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadAllGamification failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadMilestones(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadMilestones(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadMilestones();
      }

      #endif

      /// <summary>
      /// Method retrieves all milestones defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadMilestones(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadMilestones(includeMetaData, clientIndex);
        return recv_Gamification_ReadMilestones();

        #else
        var asyncResult = Begin_Gamification_ReadMilestones(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadMilestones(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadMilestones(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadMilestones", TMessageType.Call, seqid_));
        Gamification_ReadMilestones_args args = new Gamification_ReadMilestones_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadMilestones()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadMilestones_result result = new Gamification_ReadMilestones_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadMilestones failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadAchievements(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadAchievements(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadAchievements(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadAchievements();
      }

      #endif

      /// <summary>
      /// Read all of the achievements defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadAchievements(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadAchievements(includeMetaData, clientIndex);
        return recv_Gamification_ReadAchievements();

        #else
        var asyncResult = Begin_Gamification_ReadAchievements(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadAchievements(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadAchievements(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadAchievements(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadAchievements", TMessageType.Call, seqid_));
        Gamification_ReadAchievements_args args = new Gamification_ReadAchievements_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadAchievements()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadAchievements_result result = new Gamification_ReadAchievements_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadAchievements failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadXpLevelsMetaData(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Gamification_ReadXpLevelsMetaData(callback, state, clientIndex);
      }

      public string End_Gamification_ReadXpLevelsMetaData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadXpLevelsMetaData();
      }

      #endif

      /// <summary>
      /// Method returns all defined xp levels and any rewards associated
      /// with those xp levels.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadXpLevelsMetaData(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadXpLevelsMetaData(clientIndex);
        return recv_Gamification_ReadXpLevelsMetaData();

        #else
        var asyncResult = Begin_Gamification_ReadXpLevelsMetaData(null, null, clientIndex);
        return End_Gamification_ReadXpLevelsMetaData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadXpLevelsMetaData(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Gamification_ReadXpLevelsMetaData(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadXpLevelsMetaData", TMessageType.Call, seqid_));
        Gamification_ReadXpLevelsMetaData_args args = new Gamification_ReadXpLevelsMetaData_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadXpLevelsMetaData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadXpLevelsMetaData_result result = new Gamification_ReadXpLevelsMetaData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadXpLevelsMetaData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadAchievedAchievements(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadAchievedAchievements(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadAchievedAchievements(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadAchievedAchievements();
      }

      #endif

      /// <summary>
      /// Method retrives the list of achieved achievements.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadAchievedAchievements(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadAchievedAchievements(includeMetaData, clientIndex);
        return recv_Gamification_ReadAchievedAchievements();

        #else
        var asyncResult = Begin_Gamification_ReadAchievedAchievements(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadAchievedAchievements(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadAchievedAchievements(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadAchievedAchievements(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadAchievedAchievements", TMessageType.Call, seqid_));
        Gamification_ReadAchievedAchievements_args args = new Gamification_ReadAchievedAchievements_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadAchievedAchievements()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadAchievedAchievements_result result = new Gamification_ReadAchievedAchievements_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadAchievedAchievements failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadCompletedMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadCompletedMilestones(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadCompletedMilestones(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadCompletedMilestones();
      }

      #endif

      /// <summary>
      /// Method retrieves the list of completed milestones.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadCompletedMilestones(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadCompletedMilestones(includeMetaData, clientIndex);
        return recv_Gamification_ReadCompletedMilestones();

        #else
        var asyncResult = Begin_Gamification_ReadCompletedMilestones(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadCompletedMilestones(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadCompletedMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadCompletedMilestones(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadCompletedMilestones", TMessageType.Call, seqid_));
        Gamification_ReadCompletedMilestones_args args = new Gamification_ReadCompletedMilestones_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadCompletedMilestones()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadCompletedMilestones_result result = new Gamification_ReadCompletedMilestones_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadCompletedMilestones failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadInProgressMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadInProgressMilestones(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadInProgressMilestones(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadInProgressMilestones();
      }

      #endif

      /// <summary>
      /// Method retrieves the list of in progress milestones
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadInProgressMilestones(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadInProgressMilestones(includeMetaData, clientIndex);
        return recv_Gamification_ReadInProgressMilestones();

        #else
        var asyncResult = Begin_Gamification_ReadInProgressMilestones(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadInProgressMilestones(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadInProgressMilestones(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadInProgressMilestones(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadInProgressMilestones", TMessageType.Call, seqid_));
        Gamification_ReadInProgressMilestones_args args = new Gamification_ReadInProgressMilestones_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadInProgressMilestones()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadInProgressMilestones_result result = new Gamification_ReadInProgressMilestones_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadInProgressMilestones failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadMilestonesByCategory(AsyncCallback callback, object state, string category, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadMilestonesByCategory(callback, state, category, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadMilestonesByCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadMilestonesByCategory();
      }

      #endif

      /// <summary>
      /// Method retrieves milestones of the given category.
      /// </summary>
      /// <param name="category">The milestone category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadMilestonesByCategory(string category, bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadMilestonesByCategory(category, includeMetaData, clientIndex);
        return recv_Gamification_ReadMilestonesByCategory();

        #else
        var asyncResult = Begin_Gamification_ReadMilestonesByCategory(null, null, category, includeMetaData, clientIndex);
        return End_Gamification_ReadMilestonesByCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadMilestonesByCategory(AsyncCallback callback, object state, string category, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadMilestonesByCategory(string category, bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadMilestonesByCategory", TMessageType.Call, seqid_));
        Gamification_ReadMilestonesByCategory_args args = new Gamification_ReadMilestonesByCategory_args();
        args.Category = category;
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadMilestonesByCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadMilestonesByCategory_result result = new Gamification_ReadMilestonesByCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadMilestonesByCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_AwardAchievements(AsyncCallback callback, object state, List<string> achievementIds, int clientIndex)
      {
        return send_Gamification_AwardAchievements(callback, state, achievementIds, clientIndex);
      }

      public string End_Gamification_AwardAchievements(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_AwardAchievements();
      }

      #endif

      /// <summary>
      /// Method will award the achievements specified. On success, this will
      /// call AwardThirdPartyAchievement to hook into the client-side Achievement
      /// service (ie GameCentre, Facebook etc).
      /// </summary>
      /// <param name="achievementIds">A collection of achievement ids to award</param>
      /// <param name="clientIndex"></param>
      public string Gamification_AwardAchievements(List<string> achievementIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_AwardAchievements(achievementIds, clientIndex);
        return recv_Gamification_AwardAchievements();

        #else
        var asyncResult = Begin_Gamification_AwardAchievements(null, null, achievementIds, clientIndex);
        return End_Gamification_AwardAchievements(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_AwardAchievements(AsyncCallback callback, object state, List<string> achievementIds, int clientIndex)
      #else
      public void send_Gamification_AwardAchievements(List<string> achievementIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_AwardAchievements", TMessageType.Call, seqid_));
        Gamification_AwardAchievements_args args = new Gamification_AwardAchievements_args();
        args.AchievementIds = achievementIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_AwardAchievements()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_AwardAchievements_result result = new Gamification_AwardAchievements_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_AwardAchievements failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadQuests(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadQuests(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadQuests();
      }

      #endif

      /// <summary>
      /// Method retrieves all of the quests defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadQuests(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadQuests(includeMetaData, clientIndex);
        return recv_Gamification_ReadQuests();

        #else
        var asyncResult = Begin_Gamification_ReadQuests(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadQuests(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadQuests(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadQuests", TMessageType.Call, seqid_));
        Gamification_ReadQuests_args args = new Gamification_ReadQuests_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadQuests()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadQuests_result result = new Gamification_ReadQuests_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuests failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadCompletedQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadCompletedQuests(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadCompletedQuests(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadCompletedQuests();
      }

      #endif

      /// <summary>
      /// Method returns all completed quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadCompletedQuests(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadCompletedQuests(includeMetaData, clientIndex);
        return recv_Gamification_ReadCompletedQuests();

        #else
        var asyncResult = Begin_Gamification_ReadCompletedQuests(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadCompletedQuests(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadCompletedQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadCompletedQuests(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadCompletedQuests", TMessageType.Call, seqid_));
        Gamification_ReadCompletedQuests_args args = new Gamification_ReadCompletedQuests_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadCompletedQuests()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadCompletedQuests_result result = new Gamification_ReadCompletedQuests_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadCompletedQuests failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadInProgressQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadInProgressQuests(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadInProgressQuests(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadInProgressQuests();
      }

      #endif

      /// <summary>
      /// Method returns all in progress quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadInProgressQuests(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadInProgressQuests(includeMetaData, clientIndex);
        return recv_Gamification_ReadInProgressQuests();

        #else
        var asyncResult = Begin_Gamification_ReadInProgressQuests(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadInProgressQuests(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadInProgressQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadInProgressQuests(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadInProgressQuests", TMessageType.Call, seqid_));
        Gamification_ReadInProgressQuests_args args = new Gamification_ReadInProgressQuests_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadInProgressQuests()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadInProgressQuests_result result = new Gamification_ReadInProgressQuests_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadInProgressQuests failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadNotStartedQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadNotStartedQuests(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadNotStartedQuests(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadNotStartedQuests();
      }

      #endif

      /// <summary>
      /// Method returns all quests that haven't been started.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadNotStartedQuests(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadNotStartedQuests(includeMetaData, clientIndex);
        return recv_Gamification_ReadNotStartedQuests();

        #else
        var asyncResult = Begin_Gamification_ReadNotStartedQuests(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadNotStartedQuests(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadNotStartedQuests(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadNotStartedQuests(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadNotStartedQuests", TMessageType.Call, seqid_));
        Gamification_ReadNotStartedQuests_args args = new Gamification_ReadNotStartedQuests_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadNotStartedQuests()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadNotStartedQuests_result result = new Gamification_ReadNotStartedQuests_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadNotStartedQuests failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadQuestsWithStatus(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadQuestsWithStatus(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadQuestsWithStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadQuestsWithStatus();
      }

      #endif

      /// <summary>
      /// Method returns all quests with status.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadQuestsWithStatus(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadQuestsWithStatus(includeMetaData, clientIndex);
        return recv_Gamification_ReadQuestsWithStatus();

        #else
        var asyncResult = Begin_Gamification_ReadQuestsWithStatus(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadQuestsWithStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadQuestsWithStatus(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadQuestsWithStatus(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithStatus", TMessageType.Call, seqid_));
        Gamification_ReadQuestsWithStatus_args args = new Gamification_ReadQuestsWithStatus_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadQuestsWithStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadQuestsWithStatus_result result = new Gamification_ReadQuestsWithStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsWithStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadQuestsWithBasicPercentage(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadQuestsWithBasicPercentage(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadQuestsWithBasicPercentage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadQuestsWithBasicPercentage();
      }

      #endif

      /// <summary>
      /// Method returns all quests with a basic percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadQuestsWithBasicPercentage(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadQuestsWithBasicPercentage(includeMetaData, clientIndex);
        return recv_Gamification_ReadQuestsWithBasicPercentage();

        #else
        var asyncResult = Begin_Gamification_ReadQuestsWithBasicPercentage(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadQuestsWithBasicPercentage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadQuestsWithBasicPercentage(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadQuestsWithBasicPercentage(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithBasicPercentage", TMessageType.Call, seqid_));
        Gamification_ReadQuestsWithBasicPercentage_args args = new Gamification_ReadQuestsWithBasicPercentage_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadQuestsWithBasicPercentage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadQuestsWithBasicPercentage_result result = new Gamification_ReadQuestsWithBasicPercentage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsWithBasicPercentage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadQuestsWithComplexPercentage(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadQuestsWithComplexPercentage(callback, state, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadQuestsWithComplexPercentage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadQuestsWithComplexPercentage();
      }

      #endif

      /// <summary>
      /// Method returns all quests with a complex percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadQuestsWithComplexPercentage(bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadQuestsWithComplexPercentage(includeMetaData, clientIndex);
        return recv_Gamification_ReadQuestsWithComplexPercentage();

        #else
        var asyncResult = Begin_Gamification_ReadQuestsWithComplexPercentage(null, null, includeMetaData, clientIndex);
        return End_Gamification_ReadQuestsWithComplexPercentage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadQuestsWithComplexPercentage(AsyncCallback callback, object state, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadQuestsWithComplexPercentage(bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithComplexPercentage", TMessageType.Call, seqid_));
        Gamification_ReadQuestsWithComplexPercentage_args args = new Gamification_ReadQuestsWithComplexPercentage_args();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadQuestsWithComplexPercentage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadQuestsWithComplexPercentage_result result = new Gamification_ReadQuestsWithComplexPercentage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsWithComplexPercentage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ReadQuestsByCategory(AsyncCallback callback, object state, string category, bool includeMetaData, int clientIndex)
      {
        return send_Gamification_ReadQuestsByCategory(callback, state, category, includeMetaData, clientIndex);
      }

      public string End_Gamification_ReadQuestsByCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ReadQuestsByCategory();
      }

      #endif

      /// <summary>
      /// Method returns all quests for the given category.
      /// </summary>
      /// <param name="category">The quest category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      public string Gamification_ReadQuestsByCategory(string category, bool includeMetaData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ReadQuestsByCategory(category, includeMetaData, clientIndex);
        return recv_Gamification_ReadQuestsByCategory();

        #else
        var asyncResult = Begin_Gamification_ReadQuestsByCategory(null, null, category, includeMetaData, clientIndex);
        return End_Gamification_ReadQuestsByCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ReadQuestsByCategory(AsyncCallback callback, object state, string category, bool includeMetaData, int clientIndex)
      #else
      public void send_Gamification_ReadQuestsByCategory(string category, bool includeMetaData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ReadQuestsByCategory", TMessageType.Call, seqid_));
        Gamification_ReadQuestsByCategory_args args = new Gamification_ReadQuestsByCategory_args();
        args.Category = category;
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ReadQuestsByCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ReadQuestsByCategory_result result = new Gamification_ReadQuestsByCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsByCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Gamification_ResetMilestones(AsyncCallback callback, object state, List<string> milestoneIds, int clientIndex)
      {
        return send_Gamification_ResetMilestones(callback, state, milestoneIds, clientIndex);
      }

      public string End_Gamification_ResetMilestones(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Gamification_ResetMilestones();
      }

      #endif

      /// <summary>
      /// Sets the specified milestones' statuses to LOCKED.
      /// </summary>
      /// <param name="milestoneIds">List of milestones to reset</param>
      /// <param name="clientIndex"></param>
      public string Gamification_ResetMilestones(List<string> milestoneIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Gamification_ResetMilestones(milestoneIds, clientIndex);
        return recv_Gamification_ResetMilestones();

        #else
        var asyncResult = Begin_Gamification_ResetMilestones(null, null, milestoneIds, clientIndex);
        return End_Gamification_ResetMilestones(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Gamification_ResetMilestones(AsyncCallback callback, object state, List<string> milestoneIds, int clientIndex)
      #else
      public void send_Gamification_ResetMilestones(List<string> milestoneIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Gamification_ResetMilestones", TMessageType.Call, seqid_));
        Gamification_ResetMilestones_args args = new Gamification_ResetMilestones_args();
        args.MilestoneIds = milestoneIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Gamification_ResetMilestones()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Gamification_ResetMilestones_result result = new Gamification_ResetMilestones_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ResetMilestones failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalApp_ReadProperties(AsyncCallback callback, object state, int clientIndex)
      {
        return send_GlobalApp_ReadProperties(callback, state, clientIndex);
      }

      public string End_GlobalApp_ReadProperties(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalApp_ReadProperties();
      }

      #endif

      /// <summary>
      /// Method reads all the global properties of the game
      /// </summary>
      /// <param name="clientIndex"></param>
      public string GlobalApp_ReadProperties(int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalApp_ReadProperties(clientIndex);
        return recv_GlobalApp_ReadProperties();

        #else
        var asyncResult = Begin_GlobalApp_ReadProperties(null, null, clientIndex);
        return End_GlobalApp_ReadProperties(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalApp_ReadProperties(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_GlobalApp_ReadProperties(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalApp_ReadProperties", TMessageType.Call, seqid_));
        GlobalApp_ReadProperties_args args = new GlobalApp_ReadProperties_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalApp_ReadProperties()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalApp_ReadProperties_result result = new GlobalApp_ReadProperties_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalApp_ReadProperties failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_CreateEntity(AsyncCallback callback, object state, string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      {
        return send_GlobalEntity_CreateEntity(callback, state, entityType, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
      }

      public string End_GlobalEntity_CreateEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_CreateEntity();
      }

      #endif

      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_CreateEntity(string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_CreateEntity(entityType, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
        return recv_GlobalEntity_CreateEntity();

        #else
        var asyncResult = Begin_GlobalEntity_CreateEntity(null, null, entityType, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
        return End_GlobalEntity_CreateEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_CreateEntity(AsyncCallback callback, object state, string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      #else
      public void send_GlobalEntity_CreateEntity(string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_CreateEntity", TMessageType.Call, seqid_));
        GlobalEntity_CreateEntity_args args = new GlobalEntity_CreateEntity_args();
        args.EntityType = entityType;
        args.TimeToLive = timeToLive;
        args.JsonEntityAcl = jsonEntityAcl;
        args.JsonEntityData = jsonEntityData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_CreateEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_CreateEntity_result result = new GlobalEntity_CreateEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_CreateEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_CreateEntityWithIndexedId(AsyncCallback callback, object state, string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      {
        return send_GlobalEntity_CreateEntityWithIndexedId(callback, state, entityType, indexedId, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
      }

      public string End_GlobalEntity_CreateEntityWithIndexedId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_CreateEntityWithIndexedId();
      }

      #endif

      /// <summary>
      /// Method creates a new entity on the server with an indexed id.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="indexedId">A secondary ID that will be indexed</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_CreateEntityWithIndexedId(string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_CreateEntityWithIndexedId(entityType, indexedId, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
        return recv_GlobalEntity_CreateEntityWithIndexedId();

        #else
        var asyncResult = Begin_GlobalEntity_CreateEntityWithIndexedId(null, null, entityType, indexedId, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
        return End_GlobalEntity_CreateEntityWithIndexedId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_CreateEntityWithIndexedId(AsyncCallback callback, object state, string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      #else
      public void send_GlobalEntity_CreateEntityWithIndexedId(string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_CreateEntityWithIndexedId", TMessageType.Call, seqid_));
        GlobalEntity_CreateEntityWithIndexedId_args args = new GlobalEntity_CreateEntityWithIndexedId_args();
        args.EntityType = entityType;
        args.IndexedId = indexedId;
        args.TimeToLive = timeToLive;
        args.JsonEntityAcl = jsonEntityAcl;
        args.JsonEntityData = jsonEntityData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_CreateEntityWithIndexedId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_CreateEntityWithIndexedId_result result = new GlobalEntity_CreateEntityWithIndexedId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_CreateEntityWithIndexedId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_UpdateEntity(AsyncCallback callback, object state, string entityId, int version, string jsonEntityData, int clientIndex)
      {
        return send_GlobalEntity_UpdateEntity(callback, state, entityId, version, jsonEntityData, clientIndex);
      }

      public string End_GlobalEntity_UpdateEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_UpdateEntity();
      }

      #endif

      /// <summary>
      /// Method updates an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_UpdateEntity(string entityId, int version, string jsonEntityData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_UpdateEntity(entityId, version, jsonEntityData, clientIndex);
        return recv_GlobalEntity_UpdateEntity();

        #else
        var asyncResult = Begin_GlobalEntity_UpdateEntity(null, null, entityId, version, jsonEntityData, clientIndex);
        return End_GlobalEntity_UpdateEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_UpdateEntity(AsyncCallback callback, object state, string entityId, int version, string jsonEntityData, int clientIndex)
      #else
      public void send_GlobalEntity_UpdateEntity(string entityId, int version, string jsonEntityData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntity", TMessageType.Call, seqid_));
        GlobalEntity_UpdateEntity_args args = new GlobalEntity_UpdateEntity_args();
        args.EntityId = entityId;
        args.Version = version;
        args.JsonEntityData = jsonEntityData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_UpdateEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_UpdateEntity_result result = new GlobalEntity_UpdateEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_UpdateEntityAcl(AsyncCallback callback, object state, string entityId, int version, string jsonEntityAcl, int clientIndex)
      {
        return send_GlobalEntity_UpdateEntityAcl(callback, state, entityId, version, jsonEntityAcl, clientIndex);
      }

      public string End_GlobalEntity_UpdateEntityAcl(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_UpdateEntityAcl();
      }

      #endif

      /// <summary>
      /// Method updates an existing entity's Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json.</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_UpdateEntityAcl(string entityId, int version, string jsonEntityAcl, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_UpdateEntityAcl(entityId, version, jsonEntityAcl, clientIndex);
        return recv_GlobalEntity_UpdateEntityAcl();

        #else
        var asyncResult = Begin_GlobalEntity_UpdateEntityAcl(null, null, entityId, version, jsonEntityAcl, clientIndex);
        return End_GlobalEntity_UpdateEntityAcl(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_UpdateEntityAcl(AsyncCallback callback, object state, string entityId, int version, string jsonEntityAcl, int clientIndex)
      #else
      public void send_GlobalEntity_UpdateEntityAcl(string entityId, int version, string jsonEntityAcl, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityAcl", TMessageType.Call, seqid_));
        GlobalEntity_UpdateEntityAcl_args args = new GlobalEntity_UpdateEntityAcl_args();
        args.EntityId = entityId;
        args.Version = version;
        args.JsonEntityAcl = jsonEntityAcl;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_UpdateEntityAcl()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_UpdateEntityAcl_result result = new GlobalEntity_UpdateEntityAcl_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntityAcl failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_UpdateEntityTimeToLive(AsyncCallback callback, object state, string entityId, int version, long timeToLive, int clientIndex)
      {
        return send_GlobalEntity_UpdateEntityTimeToLive(callback, state, entityId, version, timeToLive, clientIndex);
      }

      public string End_GlobalEntity_UpdateEntityTimeToLive(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_UpdateEntityTimeToLive();
      }

      #endif

      /// <summary>
      /// Method updates an existing entity's time to live on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_UpdateEntityTimeToLive(string entityId, int version, long timeToLive, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_UpdateEntityTimeToLive(entityId, version, timeToLive, clientIndex);
        return recv_GlobalEntity_UpdateEntityTimeToLive();

        #else
        var asyncResult = Begin_GlobalEntity_UpdateEntityTimeToLive(null, null, entityId, version, timeToLive, clientIndex);
        return End_GlobalEntity_UpdateEntityTimeToLive(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_UpdateEntityTimeToLive(AsyncCallback callback, object state, string entityId, int version, long timeToLive, int clientIndex)
      #else
      public void send_GlobalEntity_UpdateEntityTimeToLive(string entityId, int version, long timeToLive, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityTimeToLive", TMessageType.Call, seqid_));
        GlobalEntity_UpdateEntityTimeToLive_args args = new GlobalEntity_UpdateEntityTimeToLive_args();
        args.EntityId = entityId;
        args.Version = version;
        args.TimeToLive = timeToLive;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_UpdateEntityTimeToLive()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_UpdateEntityTimeToLive_result result = new GlobalEntity_UpdateEntityTimeToLive_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntityTimeToLive failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_DeleteEntity(AsyncCallback callback, object state, string entityId, int version, int clientIndex)
      {
        return send_GlobalEntity_DeleteEntity(callback, state, entityId, version, clientIndex);
      }

      public string End_GlobalEntity_DeleteEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_DeleteEntity();
      }

      #endif

      /// <summary>
      /// Method deletes an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to delete</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_DeleteEntity(string entityId, int version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_DeleteEntity(entityId, version, clientIndex);
        return recv_GlobalEntity_DeleteEntity();

        #else
        var asyncResult = Begin_GlobalEntity_DeleteEntity(null, null, entityId, version, clientIndex);
        return End_GlobalEntity_DeleteEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_DeleteEntity(AsyncCallback callback, object state, string entityId, int version, int clientIndex)
      #else
      public void send_GlobalEntity_DeleteEntity(string entityId, int version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_DeleteEntity", TMessageType.Call, seqid_));
        GlobalEntity_DeleteEntity_args args = new GlobalEntity_DeleteEntity_args();
        args.EntityId = entityId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_DeleteEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_DeleteEntity_result result = new GlobalEntity_DeleteEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_DeleteEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_ReadEntity(AsyncCallback callback, object state, string entityId, int clientIndex)
      {
        return send_GlobalEntity_ReadEntity(callback, state, entityId, clientIndex);
      }

      public string End_GlobalEntity_ReadEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_ReadEntity();
      }

      #endif

      /// <summary>
      /// Method reads an existing entity from the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_ReadEntity(string entityId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_ReadEntity(entityId, clientIndex);
        return recv_GlobalEntity_ReadEntity();

        #else
        var asyncResult = Begin_GlobalEntity_ReadEntity(null, null, entityId, clientIndex);
        return End_GlobalEntity_ReadEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_ReadEntity(AsyncCallback callback, object state, string entityId, int clientIndex)
      #else
      public void send_GlobalEntity_ReadEntity(string entityId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_ReadEntity", TMessageType.Call, seqid_));
        GlobalEntity_ReadEntity_args args = new GlobalEntity_ReadEntity_args();
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_ReadEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_ReadEntity_result result = new GlobalEntity_ReadEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_ReadEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_GetList(AsyncCallback callback, object state, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      {
        return send_GlobalEntity_GetList(callback, state, whereJson, orderByJson, maxReturn, clientIndex);
      }

      public string End_GlobalEntity_GetList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_GetList();
      }

      #endif

      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_GetList(string whereJson, string orderByJson, int maxReturn, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_GetList(whereJson, orderByJson, maxReturn, clientIndex);
        return recv_GlobalEntity_GetList();

        #else
        var asyncResult = Begin_GlobalEntity_GetList(null, null, whereJson, orderByJson, maxReturn, clientIndex);
        return End_GlobalEntity_GetList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_GetList(AsyncCallback callback, object state, string whereJson, string orderByJson, int maxReturn, int clientIndex)
      #else
      public void send_GlobalEntity_GetList(string whereJson, string orderByJson, int maxReturn, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_GetList", TMessageType.Call, seqid_));
        GlobalEntity_GetList_args args = new GlobalEntity_GetList_args();
        args.WhereJson = whereJson;
        args.OrderByJson = orderByJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_GetList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_GetList_result result = new GlobalEntity_GetList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_GetListByIndexedId(AsyncCallback callback, object state, string entityIndexedId, int maxReturn, int clientIndex)
      {
        return send_GlobalEntity_GetListByIndexedId(callback, state, entityIndexedId, maxReturn, clientIndex);
      }

      public string End_GlobalEntity_GetListByIndexedId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_GetListByIndexedId();
      }

      #endif

      /// <summary>
      /// Method gets list of entities from the server base on indexed id
      /// </summary>
      /// <param name="entityIndexedId">The entity indexed Id</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_GetListByIndexedId(string entityIndexedId, int maxReturn, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_GetListByIndexedId(entityIndexedId, maxReturn, clientIndex);
        return recv_GlobalEntity_GetListByIndexedId();

        #else
        var asyncResult = Begin_GlobalEntity_GetListByIndexedId(null, null, entityIndexedId, maxReturn, clientIndex);
        return End_GlobalEntity_GetListByIndexedId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_GetListByIndexedId(AsyncCallback callback, object state, string entityIndexedId, int maxReturn, int clientIndex)
      #else
      public void send_GlobalEntity_GetListByIndexedId(string entityIndexedId, int maxReturn, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_GetListByIndexedId", TMessageType.Call, seqid_));
        GlobalEntity_GetListByIndexedId_args args = new GlobalEntity_GetListByIndexedId_args();
        args.EntityIndexedId = entityIndexedId;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_GetListByIndexedId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_GetListByIndexedId_result result = new GlobalEntity_GetListByIndexedId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetListByIndexedId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_GetListCount(AsyncCallback callback, object state, string whereJson, int clientIndex)
      {
        return send_GlobalEntity_GetListCount(callback, state, whereJson, clientIndex);
      }

      public string End_GlobalEntity_GetListCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_GetListCount();
      }

      #endif

      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_GetListCount(string whereJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_GetListCount(whereJson, clientIndex);
        return recv_GlobalEntity_GetListCount();

        #else
        var asyncResult = Begin_GlobalEntity_GetListCount(null, null, whereJson, clientIndex);
        return End_GlobalEntity_GetListCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_GetListCount(AsyncCallback callback, object state, string whereJson, int clientIndex)
      #else
      public void send_GlobalEntity_GetListCount(string whereJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_GetListCount", TMessageType.Call, seqid_));
        GlobalEntity_GetListCount_args args = new GlobalEntity_GetListCount_args();
        args.WhereJson = whereJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_GetListCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_GetListCount_result result = new GlobalEntity_GetListCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetListCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_GetPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      {
        return send_GlobalEntity_GetPage(callback, state, jsonContext, clientIndex);
      }

      public string End_GlobalEntity_GetPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_GetPage();
      }

      #endif

      /// <summary>
      /// Method uses a paging system to iterate through Global Entities.
      /// After retrieving a page of Global Entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_GetPage(string jsonContext, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_GetPage(jsonContext, clientIndex);
        return recv_GlobalEntity_GetPage();

        #else
        var asyncResult = Begin_GlobalEntity_GetPage(null, null, jsonContext, clientIndex);
        return End_GlobalEntity_GetPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_GetPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      #else
      public void send_GlobalEntity_GetPage(string jsonContext, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_GetPage", TMessageType.Call, seqid_));
        GlobalEntity_GetPage_args args = new GlobalEntity_GetPage_args();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_GetPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_GetPage_result result = new GlobalEntity_GetPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_GetPageOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex)
      {
        return send_GlobalEntity_GetPageOffset(callback, state, context, pageOffset, clientIndex);
      }

      public string End_GlobalEntity_GetPageOffset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_GetPageOffset();
      }

      #endif

      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_GetPageOffset(string context, int pageOffset, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_GetPageOffset(context, pageOffset, clientIndex);
        return recv_GlobalEntity_GetPageOffset();

        #else
        var asyncResult = Begin_GlobalEntity_GetPageOffset(null, null, context, pageOffset, clientIndex);
        return End_GlobalEntity_GetPageOffset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_GetPageOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex)
      #else
      public void send_GlobalEntity_GetPageOffset(string context, int pageOffset, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_GetPageOffset", TMessageType.Call, seqid_));
        GlobalEntity_GetPageOffset_args args = new GlobalEntity_GetPageOffset_args();
        args.Context = context;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_GetPageOffset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_GetPageOffset_result result = new GlobalEntity_GetPageOffset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetPageOffset failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_IncrementGlobalEntityData(AsyncCallback callback, object state, string entityId, string jsonData, int clientIndex)
      {
        return send_GlobalEntity_IncrementGlobalEntityData(callback, state, entityId, jsonData, clientIndex);
      }

      public string End_GlobalEntity_IncrementGlobalEntityData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_IncrementGlobalEntityData();
      }

      #endif

      /// <summary>
      /// Partial increment of global entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_IncrementGlobalEntityData(string entityId, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_IncrementGlobalEntityData(entityId, jsonData, clientIndex);
        return recv_GlobalEntity_IncrementGlobalEntityData();

        #else
        var asyncResult = Begin_GlobalEntity_IncrementGlobalEntityData(null, null, entityId, jsonData, clientIndex);
        return End_GlobalEntity_IncrementGlobalEntityData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_IncrementGlobalEntityData(AsyncCallback callback, object state, string entityId, string jsonData, int clientIndex)
      #else
      public void send_GlobalEntity_IncrementGlobalEntityData(string entityId, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_IncrementGlobalEntityData", TMessageType.Call, seqid_));
        GlobalEntity_IncrementGlobalEntityData_args args = new GlobalEntity_IncrementGlobalEntityData_args();
        args.EntityId = entityId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_IncrementGlobalEntityData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_IncrementGlobalEntityData_result result = new GlobalEntity_IncrementGlobalEntityData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_IncrementGlobalEntityData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_GetRandomEntitiesMatching(AsyncCallback callback, object state, string whereJson, int maxReturn, int clientIndex)
      {
        return send_GlobalEntity_GetRandomEntitiesMatching(callback, state, whereJson, maxReturn, clientIndex);
      }

      public string End_GlobalEntity_GetRandomEntitiesMatching(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_GetRandomEntitiesMatching();
      }

      #endif

      /// <summary>
      /// Gets a list of up to randomCount randomly selected entities from the server based on the where condition and specified maximum return count.
      /// </summary>
      /// <param name="whereJson"></param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_GetRandomEntitiesMatching(string whereJson, int maxReturn, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_GetRandomEntitiesMatching(whereJson, maxReturn, clientIndex);
        return recv_GlobalEntity_GetRandomEntitiesMatching();

        #else
        var asyncResult = Begin_GlobalEntity_GetRandomEntitiesMatching(null, null, whereJson, maxReturn, clientIndex);
        return End_GlobalEntity_GetRandomEntitiesMatching(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_GetRandomEntitiesMatching(AsyncCallback callback, object state, string whereJson, int maxReturn, int clientIndex)
      #else
      public void send_GlobalEntity_GetRandomEntitiesMatching(string whereJson, int maxReturn, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_GetRandomEntitiesMatching", TMessageType.Call, seqid_));
        GlobalEntity_GetRandomEntitiesMatching_args args = new GlobalEntity_GetRandomEntitiesMatching_args();
        args.WhereJson = whereJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_GetRandomEntitiesMatching()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_GetRandomEntitiesMatching_result result = new GlobalEntity_GetRandomEntitiesMatching_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetRandomEntitiesMatching failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_UpdateEntityOwnerAndAcl(AsyncCallback callback, object state, string entityId, long version, string ownerId, string acl, int clientIndex)
      {
        return send_GlobalEntity_UpdateEntityOwnerAndAcl(callback, state, entityId, version, ownerId, acl, clientIndex);
      }

      public string End_GlobalEntity_UpdateEntityOwnerAndAcl(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_UpdateEntityOwnerAndAcl();
      }

      #endif

      /// <summary>
      /// Method updates an existing entity's Owner and Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="ownerId">The owner ID</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_UpdateEntityOwnerAndAcl(string entityId, long version, string ownerId, string acl, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_UpdateEntityOwnerAndAcl(entityId, version, ownerId, acl, clientIndex);
        return recv_GlobalEntity_UpdateEntityOwnerAndAcl();

        #else
        var asyncResult = Begin_GlobalEntity_UpdateEntityOwnerAndAcl(null, null, entityId, version, ownerId, acl, clientIndex);
        return End_GlobalEntity_UpdateEntityOwnerAndAcl(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_UpdateEntityOwnerAndAcl(AsyncCallback callback, object state, string entityId, long version, string ownerId, string acl, int clientIndex)
      #else
      public void send_GlobalEntity_UpdateEntityOwnerAndAcl(string entityId, long version, string ownerId, string acl, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityOwnerAndAcl", TMessageType.Call, seqid_));
        GlobalEntity_UpdateEntityOwnerAndAcl_args args = new GlobalEntity_UpdateEntityOwnerAndAcl_args();
        args.EntityId = entityId;
        args.Version = version;
        args.OwnerId = ownerId;
        args.Acl = acl;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_UpdateEntityOwnerAndAcl()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_UpdateEntityOwnerAndAcl_result result = new GlobalEntity_UpdateEntityOwnerAndAcl_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntityOwnerAndAcl failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalEntity_MakeSystemEntity(AsyncCallback callback, object state, string entityId, long version, string acl, int clientIndex)
      {
        return send_GlobalEntity_MakeSystemEntity(callback, state, entityId, version, acl, clientIndex);
      }

      public string End_GlobalEntity_MakeSystemEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalEntity_MakeSystemEntity();
      }

      #endif

      /// <summary>
      /// Method clears the owner id of an existing entity and sets the Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      public string GlobalEntity_MakeSystemEntity(string entityId, long version, string acl, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalEntity_MakeSystemEntity(entityId, version, acl, clientIndex);
        return recv_GlobalEntity_MakeSystemEntity();

        #else
        var asyncResult = Begin_GlobalEntity_MakeSystemEntity(null, null, entityId, version, acl, clientIndex);
        return End_GlobalEntity_MakeSystemEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalEntity_MakeSystemEntity(AsyncCallback callback, object state, string entityId, long version, string acl, int clientIndex)
      #else
      public void send_GlobalEntity_MakeSystemEntity(string entityId, long version, string acl, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalEntity_MakeSystemEntity", TMessageType.Call, seqid_));
        GlobalEntity_MakeSystemEntity_args args = new GlobalEntity_MakeSystemEntity_args();
        args.EntityId = entityId;
        args.Version = version;
        args.Acl = acl;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalEntity_MakeSystemEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalEntity_MakeSystemEntity_result result = new GlobalEntity_MakeSystemEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_MakeSystemEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalStatistics_ReadAllGlobalStats(AsyncCallback callback, object state, int clientIndex)
      {
        return send_GlobalStatistics_ReadAllGlobalStats(callback, state, clientIndex);
      }

      public string End_GlobalStatistics_ReadAllGlobalStats(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalStatistics_ReadAllGlobalStats();
      }

      #endif

      /// <summary>
      /// Method returns all of the global statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string GlobalStatistics_ReadAllGlobalStats(int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalStatistics_ReadAllGlobalStats(clientIndex);
        return recv_GlobalStatistics_ReadAllGlobalStats();

        #else
        var asyncResult = Begin_GlobalStatistics_ReadAllGlobalStats(null, null, clientIndex);
        return End_GlobalStatistics_ReadAllGlobalStats(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalStatistics_ReadAllGlobalStats(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_GlobalStatistics_ReadAllGlobalStats(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalStatistics_ReadAllGlobalStats", TMessageType.Call, seqid_));
        GlobalStatistics_ReadAllGlobalStats_args args = new GlobalStatistics_ReadAllGlobalStats_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalStatistics_ReadAllGlobalStats()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalStatistics_ReadAllGlobalStats_result result = new GlobalStatistics_ReadAllGlobalStats_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ReadAllGlobalStats failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalStatistics_ReadGlobalStatsSubset(AsyncCallback callback, object state, List<string> globalStats, int clientIndex)
      {
        return send_GlobalStatistics_ReadGlobalStatsSubset(callback, state, globalStats, clientIndex);
      }

      public string End_GlobalStatistics_ReadGlobalStatsSubset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalStatistics_ReadGlobalStatsSubset();
      }

      #endif

      /// <summary>
      /// Reads a subset of global statistics as defined by the input JSON.
      /// </summary>
      /// <param name="globalStats">A list containing the statistics to read</param>
      /// <param name="clientIndex"></param>
      public string GlobalStatistics_ReadGlobalStatsSubset(List<string> globalStats, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalStatistics_ReadGlobalStatsSubset(globalStats, clientIndex);
        return recv_GlobalStatistics_ReadGlobalStatsSubset();

        #else
        var asyncResult = Begin_GlobalStatistics_ReadGlobalStatsSubset(null, null, globalStats, clientIndex);
        return End_GlobalStatistics_ReadGlobalStatsSubset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalStatistics_ReadGlobalStatsSubset(AsyncCallback callback, object state, List<string> globalStats, int clientIndex)
      #else
      public void send_GlobalStatistics_ReadGlobalStatsSubset(List<string> globalStats, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalStatistics_ReadGlobalStatsSubset", TMessageType.Call, seqid_));
        GlobalStatistics_ReadGlobalStatsSubset_args args = new GlobalStatistics_ReadGlobalStatsSubset_args();
        args.GlobalStats = globalStats;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalStatistics_ReadGlobalStatsSubset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalStatistics_ReadGlobalStatsSubset_result result = new GlobalStatistics_ReadGlobalStatsSubset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ReadGlobalStatsSubset failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalStatistics_ReadGlobalStatsForCategory(AsyncCallback callback, object state, string category, int clientIndex)
      {
        return send_GlobalStatistics_ReadGlobalStatsForCategory(callback, state, category, clientIndex);
      }

      public string End_GlobalStatistics_ReadGlobalStatsForCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalStatistics_ReadGlobalStatsForCategory();
      }

      #endif

      /// <summary>
      /// Method retrieves the global statistics for the given category.
      /// </summary>
      /// <param name="category">The global statistics category</param>
      /// <param name="clientIndex"></param>
      public string GlobalStatistics_ReadGlobalStatsForCategory(string category, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalStatistics_ReadGlobalStatsForCategory(category, clientIndex);
        return recv_GlobalStatistics_ReadGlobalStatsForCategory();

        #else
        var asyncResult = Begin_GlobalStatistics_ReadGlobalStatsForCategory(null, null, category, clientIndex);
        return End_GlobalStatistics_ReadGlobalStatsForCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalStatistics_ReadGlobalStatsForCategory(AsyncCallback callback, object state, string category, int clientIndex)
      #else
      public void send_GlobalStatistics_ReadGlobalStatsForCategory(string category, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalStatistics_ReadGlobalStatsForCategory", TMessageType.Call, seqid_));
        GlobalStatistics_ReadGlobalStatsForCategory_args args = new GlobalStatistics_ReadGlobalStatsForCategory_args();
        args.Category = category;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalStatistics_ReadGlobalStatsForCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalStatistics_ReadGlobalStatsForCategory_result result = new GlobalStatistics_ReadGlobalStatsForCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ReadGlobalStatsForCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalStatistics_IncrementGlobalStats(AsyncCallback callback, object state, string jsonData, int clientIndex)
      {
        return send_GlobalStatistics_IncrementGlobalStats(callback, state, jsonData, clientIndex);
      }

      public string End_GlobalStatistics_IncrementGlobalStats(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalStatistics_IncrementGlobalStats();
      }

      #endif

      /// <summary>
      /// Atomically increment (or decrement) global statistics.
      /// Global statistics are defined through the brainCloud portal.
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      public string GlobalStatistics_IncrementGlobalStats(string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalStatistics_IncrementGlobalStats(jsonData, clientIndex);
        return recv_GlobalStatistics_IncrementGlobalStats();

        #else
        var asyncResult = Begin_GlobalStatistics_IncrementGlobalStats(null, null, jsonData, clientIndex);
        return End_GlobalStatistics_IncrementGlobalStats(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalStatistics_IncrementGlobalStats(AsyncCallback callback, object state, string jsonData, int clientIndex)
      #else
      public void send_GlobalStatistics_IncrementGlobalStats(string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalStatistics_IncrementGlobalStats", TMessageType.Call, seqid_));
        GlobalStatistics_IncrementGlobalStats_args args = new GlobalStatistics_IncrementGlobalStats_args();
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalStatistics_IncrementGlobalStats()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalStatistics_IncrementGlobalStats_result result = new GlobalStatistics_IncrementGlobalStats_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_IncrementGlobalStats failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GlobalStatistics_ProcessStatistics(AsyncCallback callback, object state, Dictionary<string, string> statisticsData, int clientIndex)
      {
        return send_GlobalStatistics_ProcessStatistics(callback, state, statisticsData, clientIndex);
      }

      public string End_GlobalStatistics_ProcessStatistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GlobalStatistics_ProcessStatistics();
      }

      #endif

      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      public string GlobalStatistics_ProcessStatistics(Dictionary<string, string> statisticsData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_GlobalStatistics_ProcessStatistics(statisticsData, clientIndex);
        return recv_GlobalStatistics_ProcessStatistics();

        #else
        var asyncResult = Begin_GlobalStatistics_ProcessStatistics(null, null, statisticsData, clientIndex);
        return End_GlobalStatistics_ProcessStatistics(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GlobalStatistics_ProcessStatistics(AsyncCallback callback, object state, Dictionary<string, string> statisticsData, int clientIndex)
      #else
      public void send_GlobalStatistics_ProcessStatistics(Dictionary<string, string> statisticsData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GlobalStatistics_ProcessStatistics", TMessageType.Call, seqid_));
        GlobalStatistics_ProcessStatistics_args args = new GlobalStatistics_ProcessStatistics_args();
        args.StatisticsData = statisticsData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GlobalStatistics_ProcessStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GlobalStatistics_ProcessStatistics_result result = new GlobalStatistics_ProcessStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ProcessStatistics failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_AcceptGroupInvitation(AsyncCallback callback, object state, string groupId, int clientIndex)
      {
        return send_Group_AcceptGroupInvitation(callback, state, groupId, clientIndex);
      }

      public string End_Group_AcceptGroupInvitation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_AcceptGroupInvitation();
      }

      #endif

      /// <summary>
      /// Accept an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      public string Group_AcceptGroupInvitation(string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_AcceptGroupInvitation(groupId, clientIndex);
        return recv_Group_AcceptGroupInvitation();

        #else
        var asyncResult = Begin_Group_AcceptGroupInvitation(null, null, groupId, clientIndex);
        return End_Group_AcceptGroupInvitation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_AcceptGroupInvitation(AsyncCallback callback, object state, string groupId, int clientIndex)
      #else
      public void send_Group_AcceptGroupInvitation(string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_AcceptGroupInvitation", TMessageType.Call, seqid_));
        Group_AcceptGroupInvitation_args args = new Group_AcceptGroupInvitation_args();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_AcceptGroupInvitation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_AcceptGroupInvitation_result result = new Group_AcceptGroupInvitation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_AcceptGroupInvitation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_AddGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        return send_Group_AddGroupMember(callback, state, groupId, profileId, role, jsonAttributes, clientIndex);
      }

      public string End_Group_AddGroupMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_AddGroupMember();
      }

      #endif

      /// <summary>
      /// Add a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being added.</param>
      /// <param name="role">Role of the member being added.</param>
      /// <param name="jsonAttributes">Attributes of the member being added.</param>
      /// <param name="clientIndex"></param>
      public string Group_AddGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_AddGroupMember(groupId, profileId, role, jsonAttributes, clientIndex);
        return recv_Group_AddGroupMember();

        #else
        var asyncResult = Begin_Group_AddGroupMember(null, null, groupId, profileId, role, jsonAttributes, clientIndex);
        return End_Group_AddGroupMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_AddGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #else
      public void send_Group_AddGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_AddGroupMember", TMessageType.Call, seqid_));
        Group_AddGroupMember_args args = new Group_AddGroupMember_args();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_AddGroupMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_AddGroupMember_result result = new Group_AddGroupMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_AddGroupMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ApproveGroupJoinRequest(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        return send_Group_ApproveGroupJoinRequest(callback, state, groupId, profileId, role, jsonAttributes, clientIndex);
      }

      public string End_Group_ApproveGroupJoinRequest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ApproveGroupJoinRequest();
      }

      #endif

      /// <summary>
      /// Approve an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      public string Group_ApproveGroupJoinRequest(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ApproveGroupJoinRequest(groupId, profileId, role, jsonAttributes, clientIndex);
        return recv_Group_ApproveGroupJoinRequest();

        #else
        var asyncResult = Begin_Group_ApproveGroupJoinRequest(null, null, groupId, profileId, role, jsonAttributes, clientIndex);
        return End_Group_ApproveGroupJoinRequest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ApproveGroupJoinRequest(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #else
      public void send_Group_ApproveGroupJoinRequest(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ApproveGroupJoinRequest", TMessageType.Call, seqid_));
        Group_ApproveGroupJoinRequest_args args = new Group_ApproveGroupJoinRequest_args();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ApproveGroupJoinRequest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ApproveGroupJoinRequest_result result = new Group_ApproveGroupJoinRequest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ApproveGroupJoinRequest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_AutoJoinGroup(AsyncCallback callback, object state, string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex)
      {
        return send_Group_AutoJoinGroup(callback, state, groupType, autoJoinStrategy, dataQueryJson, clientIndex);
      }

      public string End_Group_AutoJoinGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_AutoJoinGroup();
      }

      #endif

      /// <summary>
      /// Automatically join an open group that matches the search criteria and has space available.
      /// </summary>
      /// <param name="groupType">Name of the associated group type.</param>
      /// <param name="autoJoinStrategy">Selection strategy to employ when there are multiple matches</param>
      /// <param name="dataQueryJson">Query parameters (optional)</param>
      /// <param name="clientIndex"></param>
      public string Group_AutoJoinGroup(string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_AutoJoinGroup(groupType, autoJoinStrategy, dataQueryJson, clientIndex);
        return recv_Group_AutoJoinGroup();

        #else
        var asyncResult = Begin_Group_AutoJoinGroup(null, null, groupType, autoJoinStrategy, dataQueryJson, clientIndex);
        return End_Group_AutoJoinGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_AutoJoinGroup(AsyncCallback callback, object state, string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex)
      #else
      public void send_Group_AutoJoinGroup(string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_AutoJoinGroup", TMessageType.Call, seqid_));
        Group_AutoJoinGroup_args args = new Group_AutoJoinGroup_args();
        args.GroupType = groupType;
        args.AutoJoinStrategy = autoJoinStrategy;
        args.DataQueryJson = dataQueryJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_AutoJoinGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_AutoJoinGroup_result result = new Group_AutoJoinGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_AutoJoinGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_CancelGroupInvitation(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex)
      {
        return send_Group_CancelGroupInvitation(callback, state, groupId, profileId, clientIndex);
      }

      public string End_Group_CancelGroupInvitation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_CancelGroupInvitation();
      }

      #endif

      /// <summary>
      /// Cancel an outstanding invitation to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      public string Group_CancelGroupInvitation(string groupId, string profileId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_CancelGroupInvitation(groupId, profileId, clientIndex);
        return recv_Group_CancelGroupInvitation();

        #else
        var asyncResult = Begin_Group_CancelGroupInvitation(null, null, groupId, profileId, clientIndex);
        return End_Group_CancelGroupInvitation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_CancelGroupInvitation(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex)
      #else
      public void send_Group_CancelGroupInvitation(string groupId, string profileId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_CancelGroupInvitation", TMessageType.Call, seqid_));
        Group_CancelGroupInvitation_args args = new Group_CancelGroupInvitation_args();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_CancelGroupInvitation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_CancelGroupInvitation_result result = new Group_CancelGroupInvitation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_CancelGroupInvitation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_CreateGroup(AsyncCallback callback, object state, string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex)
      {
        return send_Group_CreateGroup(callback, state, name, groupType, isOpenGroup, acl, jsonData, jsonOwnerAttributes, jsonDefaultMemberAttributes, clientIndex);
      }

      public string End_Group_CreateGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_CreateGroup();
      }

      #endif

      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="name">Name of the group.</param>
      /// <param name="groupType">Name of the type of group.</param>
      /// <param name="isOpenGroup">true if group is open; false if closed.</param>
      /// <param name="acl">The group's access control list. A null ACL implies default.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="jsonOwnerAttributes">Attributes for the group owner (current user).</param>
      /// <param name="jsonDefaultMemberAttributes">Default attributes for group members.</param>
      /// <param name="clientIndex"></param>
      public string Group_CreateGroup(string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_CreateGroup(name, groupType, isOpenGroup, acl, jsonData, jsonOwnerAttributes, jsonDefaultMemberAttributes, clientIndex);
        return recv_Group_CreateGroup();

        #else
        var asyncResult = Begin_Group_CreateGroup(null, null, name, groupType, isOpenGroup, acl, jsonData, jsonOwnerAttributes, jsonDefaultMemberAttributes, clientIndex);
        return End_Group_CreateGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_CreateGroup(AsyncCallback callback, object state, string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex)
      #else
      public void send_Group_CreateGroup(string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_CreateGroup", TMessageType.Call, seqid_));
        Group_CreateGroup_args args = new Group_CreateGroup_args();
        args.Name = name;
        args.GroupType = groupType;
        args.IsOpenGroup = isOpenGroup;
        args.Acl = acl;
        args.JsonData = jsonData;
        args.JsonOwnerAttributes = jsonOwnerAttributes;
        args.JsonDefaultMemberAttributes = jsonDefaultMemberAttributes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_CreateGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_CreateGroup_result result = new Group_CreateGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_CreateGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_CreateGroupEntity(AsyncCallback callback, object state, string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex)
      {
        return send_Group_CreateGroupEntity(callback, state, groupId, entityType, isOwnedByGroupMember, acl, jsonData, clientIndex);
      }

      public string End_Group_CreateGroupEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_CreateGroupEntity();
      }

      #endif

      /// <summary>
      /// Create a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityType"></param>
      /// <param name="isOwnedByGroupMember">true if entity is owned by a member; false if owned by the entire group.</param>
      /// <param name="acl">Access control list for the group entity.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      public string Group_CreateGroupEntity(string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_CreateGroupEntity(groupId, entityType, isOwnedByGroupMember, acl, jsonData, clientIndex);
        return recv_Group_CreateGroupEntity();

        #else
        var asyncResult = Begin_Group_CreateGroupEntity(null, null, groupId, entityType, isOwnedByGroupMember, acl, jsonData, clientIndex);
        return End_Group_CreateGroupEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_CreateGroupEntity(AsyncCallback callback, object state, string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex)
      #else
      public void send_Group_CreateGroupEntity(string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_CreateGroupEntity", TMessageType.Call, seqid_));
        Group_CreateGroupEntity_args args = new Group_CreateGroupEntity_args();
        args.GroupId = groupId;
        args.EntityType = entityType;
        args.IsOwnedByGroupMember = isOwnedByGroupMember;
        args.Acl = acl;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_CreateGroupEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_CreateGroupEntity_result result = new Group_CreateGroupEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_CreateGroupEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_DeleteGroup(AsyncCallback callback, object state, string groupId, long version, int clientIndex)
      {
        return send_Group_DeleteGroup(callback, state, groupId, version, clientIndex);
      }

      public string End_Group_DeleteGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_DeleteGroup();
      }

      #endif

      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Current version of the group</param>
      /// <param name="clientIndex"></param>
      public string Group_DeleteGroup(string groupId, long version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_DeleteGroup(groupId, version, clientIndex);
        return recv_Group_DeleteGroup();

        #else
        var asyncResult = Begin_Group_DeleteGroup(null, null, groupId, version, clientIndex);
        return End_Group_DeleteGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_DeleteGroup(AsyncCallback callback, object state, string groupId, long version, int clientIndex)
      #else
      public void send_Group_DeleteGroup(string groupId, long version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_DeleteGroup", TMessageType.Call, seqid_));
        Group_DeleteGroup_args args = new Group_DeleteGroup_args();
        args.GroupId = groupId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_DeleteGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_DeleteGroup_result result = new Group_DeleteGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_DeleteGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_DeleteGroupEntity(AsyncCallback callback, object state, string groupId, string entityId, long version, int clientIndex)
      {
        return send_Group_DeleteGroupEntity(callback, state, groupId, entityId, version, clientIndex);
      }

      public string End_Group_DeleteGroupEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_DeleteGroupEntity();
      }

      #endif

      /// <summary>
      /// Delete a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="clientIndex"></param>
      public string Group_DeleteGroupEntity(string groupId, string entityId, long version, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_DeleteGroupEntity(groupId, entityId, version, clientIndex);
        return recv_Group_DeleteGroupEntity();

        #else
        var asyncResult = Begin_Group_DeleteGroupEntity(null, null, groupId, entityId, version, clientIndex);
        return End_Group_DeleteGroupEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_DeleteGroupEntity(AsyncCallback callback, object state, string groupId, string entityId, long version, int clientIndex)
      #else
      public void send_Group_DeleteGroupEntity(string groupId, string entityId, long version, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_DeleteGroupEntity", TMessageType.Call, seqid_));
        Group_DeleteGroupEntity_args args = new Group_DeleteGroupEntity_args();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_DeleteGroupEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_DeleteGroupEntity_result result = new Group_DeleteGroupEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_DeleteGroupEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_GetMyGroups(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Group_GetMyGroups(callback, state, clientIndex);
      }

      public string End_Group_GetMyGroups(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_GetMyGroups();
      }

      #endif

      /// <summary>
      /// Read information on groups to which the current user belongs.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Group_GetMyGroups(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_GetMyGroups(clientIndex);
        return recv_Group_GetMyGroups();

        #else
        var asyncResult = Begin_Group_GetMyGroups(null, null, clientIndex);
        return End_Group_GetMyGroups(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_GetMyGroups(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Group_GetMyGroups(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_GetMyGroups", TMessageType.Call, seqid_));
        Group_GetMyGroups_args args = new Group_GetMyGroups_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_GetMyGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_GetMyGroups_result result = new Group_GetMyGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_GetMyGroups failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_IncrementGroupData(AsyncCallback callback, object state, string groupId, string jsonData, int clientIndex)
      {
        return send_Group_IncrementGroupData(callback, state, groupId, jsonData, clientIndex);
      }

      public string End_Group_IncrementGroupData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_IncrementGroupData();
      }

      #endif

      /// <summary>
      /// Increment elements for the group's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      public string Group_IncrementGroupData(string groupId, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_IncrementGroupData(groupId, jsonData, clientIndex);
        return recv_Group_IncrementGroupData();

        #else
        var asyncResult = Begin_Group_IncrementGroupData(null, null, groupId, jsonData, clientIndex);
        return End_Group_IncrementGroupData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_IncrementGroupData(AsyncCallback callback, object state, string groupId, string jsonData, int clientIndex)
      #else
      public void send_Group_IncrementGroupData(string groupId, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_IncrementGroupData", TMessageType.Call, seqid_));
        Group_IncrementGroupData_args args = new Group_IncrementGroupData_args();
        args.GroupId = groupId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_IncrementGroupData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_IncrementGroupData_result result = new Group_IncrementGroupData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_IncrementGroupData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_IncrementGroupEntityData(AsyncCallback callback, object state, string groupId, string entityId, string jsonData, int clientIndex)
      {
        return send_Group_IncrementGroupEntityData(callback, state, groupId, entityId, jsonData, clientIndex);
      }

      public string End_Group_IncrementGroupEntityData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_IncrementGroupEntityData();
      }

      #endif

      /// <summary>
      /// Increment elements for the group entity's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      public string Group_IncrementGroupEntityData(string groupId, string entityId, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_IncrementGroupEntityData(groupId, entityId, jsonData, clientIndex);
        return recv_Group_IncrementGroupEntityData();

        #else
        var asyncResult = Begin_Group_IncrementGroupEntityData(null, null, groupId, entityId, jsonData, clientIndex);
        return End_Group_IncrementGroupEntityData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_IncrementGroupEntityData(AsyncCallback callback, object state, string groupId, string entityId, string jsonData, int clientIndex)
      #else
      public void send_Group_IncrementGroupEntityData(string groupId, string entityId, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_IncrementGroupEntityData", TMessageType.Call, seqid_));
        Group_IncrementGroupEntityData_args args = new Group_IncrementGroupEntityData_args();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_IncrementGroupEntityData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_IncrementGroupEntityData_result result = new Group_IncrementGroupEntityData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_IncrementGroupEntityData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_InviteGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        return send_Group_InviteGroupMember(callback, state, groupId, profileId, role, jsonAttributes, clientIndex);
      }

      public string End_Group_InviteGroupMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_InviteGroupMember();
      }

      #endif

      /// <summary>
      /// Invite a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being invited.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      public string Group_InviteGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_InviteGroupMember(groupId, profileId, role, jsonAttributes, clientIndex);
        return recv_Group_InviteGroupMember();

        #else
        var asyncResult = Begin_Group_InviteGroupMember(null, null, groupId, profileId, role, jsonAttributes, clientIndex);
        return End_Group_InviteGroupMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_InviteGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #else
      public void send_Group_InviteGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_InviteGroupMember", TMessageType.Call, seqid_));
        Group_InviteGroupMember_args args = new Group_InviteGroupMember_args();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_InviteGroupMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_InviteGroupMember_result result = new Group_InviteGroupMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_InviteGroupMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_JoinGroup(AsyncCallback callback, object state, string groupId, int clientIndex)
      {
        return send_Group_JoinGroup(callback, state, groupId, clientIndex);
      }

      public string End_Group_JoinGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_JoinGroup();
      }

      #endif

      /// <summary>
      /// Join an open group or request to join a closed group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      public string Group_JoinGroup(string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_JoinGroup(groupId, clientIndex);
        return recv_Group_JoinGroup();

        #else
        var asyncResult = Begin_Group_JoinGroup(null, null, groupId, clientIndex);
        return End_Group_JoinGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_JoinGroup(AsyncCallback callback, object state, string groupId, int clientIndex)
      #else
      public void send_Group_JoinGroup(string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_JoinGroup", TMessageType.Call, seqid_));
        Group_JoinGroup_args args = new Group_JoinGroup_args();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_JoinGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_JoinGroup_result result = new Group_JoinGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_JoinGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_LeaveGroup(AsyncCallback callback, object state, string groupId, int clientIndex)
      {
        return send_Group_LeaveGroup(callback, state, groupId, clientIndex);
      }

      public string End_Group_LeaveGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_LeaveGroup();
      }

      #endif

      /// <summary>
      /// Leave a group in which the user is a member.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      public string Group_LeaveGroup(string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_LeaveGroup(groupId, clientIndex);
        return recv_Group_LeaveGroup();

        #else
        var asyncResult = Begin_Group_LeaveGroup(null, null, groupId, clientIndex);
        return End_Group_LeaveGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_LeaveGroup(AsyncCallback callback, object state, string groupId, int clientIndex)
      #else
      public void send_Group_LeaveGroup(string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_LeaveGroup", TMessageType.Call, seqid_));
        Group_LeaveGroup_args args = new Group_LeaveGroup_args();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_LeaveGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_LeaveGroup_result result = new Group_LeaveGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_LeaveGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ListGroupsPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      {
        return send_Group_ListGroupsPage(callback, state, jsonContext, clientIndex);
      }

      public string End_Group_ListGroupsPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ListGroupsPage();
      }

      #endif

      /// <summary>
      /// Retrieve a page of group summary information based on the specified context.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      public string Group_ListGroupsPage(string jsonContext, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ListGroupsPage(jsonContext, clientIndex);
        return recv_Group_ListGroupsPage();

        #else
        var asyncResult = Begin_Group_ListGroupsPage(null, null, jsonContext, clientIndex);
        return End_Group_ListGroupsPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ListGroupsPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      #else
      public void send_Group_ListGroupsPage(string jsonContext, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ListGroupsPage", TMessageType.Call, seqid_));
        Group_ListGroupsPage_args args = new Group_ListGroupsPage_args();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ListGroupsPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ListGroupsPage_result result = new Group_ListGroupsPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ListGroupsPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ListGroupsPageByOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex)
      {
        return send_Group_ListGroupsPageByOffset(callback, state, context, pageOffset, clientIndex);
      }

      public string End_Group_ListGroupsPageByOffset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ListGroupsPageByOffset();
      }

      #endif

      /// <summary>
      /// Retrieve a page of group summary information based on the encoded context
      /// and specified page offset.
      /// </summary>
      /// <param name="context">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      public string Group_ListGroupsPageByOffset(string context, int pageOffset, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ListGroupsPageByOffset(context, pageOffset, clientIndex);
        return recv_Group_ListGroupsPageByOffset();

        #else
        var asyncResult = Begin_Group_ListGroupsPageByOffset(null, null, context, pageOffset, clientIndex);
        return End_Group_ListGroupsPageByOffset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ListGroupsPageByOffset(AsyncCallback callback, object state, string context, int pageOffset, int clientIndex)
      #else
      public void send_Group_ListGroupsPageByOffset(string context, int pageOffset, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ListGroupsPageByOffset", TMessageType.Call, seqid_));
        Group_ListGroupsPageByOffset_args args = new Group_ListGroupsPageByOffset_args();
        args.Context = context;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ListGroupsPageByOffset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ListGroupsPageByOffset_result result = new Group_ListGroupsPageByOffset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ListGroupsPageByOffset failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ListGroupsWithMember(AsyncCallback callback, object state, string profileId, int clientIndex)
      {
        return send_Group_ListGroupsWithMember(callback, state, profileId, clientIndex);
      }

      public string End_Group_ListGroupsWithMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ListGroupsWithMember();
      }

      #endif

      /// <summary>
      /// Read information on groups to which the specified user belongs.  Access is subject to restrictions.
      /// </summary>
      /// <param name="profileId">User to read groups for</param>
      /// <param name="clientIndex"></param>
      public string Group_ListGroupsWithMember(string profileId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ListGroupsWithMember(profileId, clientIndex);
        return recv_Group_ListGroupsWithMember();

        #else
        var asyncResult = Begin_Group_ListGroupsWithMember(null, null, profileId, clientIndex);
        return End_Group_ListGroupsWithMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ListGroupsWithMember(AsyncCallback callback, object state, string profileId, int clientIndex)
      #else
      public void send_Group_ListGroupsWithMember(string profileId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ListGroupsWithMember", TMessageType.Call, seqid_));
        Group_ListGroupsWithMember_args args = new Group_ListGroupsWithMember_args();
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ListGroupsWithMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ListGroupsWithMember_result result = new Group_ListGroupsWithMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ListGroupsWithMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ReadGroup(AsyncCallback callback, object state, string groupId, int clientIndex)
      {
        return send_Group_ReadGroup(callback, state, groupId, clientIndex);
      }

      public string End_Group_ReadGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ReadGroup();
      }

      #endif

      /// <summary>
      /// Read the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      public string Group_ReadGroup(string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ReadGroup(groupId, clientIndex);
        return recv_Group_ReadGroup();

        #else
        var asyncResult = Begin_Group_ReadGroup(null, null, groupId, clientIndex);
        return End_Group_ReadGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ReadGroup(AsyncCallback callback, object state, string groupId, int clientIndex)
      #else
      public void send_Group_ReadGroup(string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ReadGroup", TMessageType.Call, seqid_));
        Group_ReadGroup_args args = new Group_ReadGroup_args();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ReadGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ReadGroup_result result = new Group_ReadGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ReadGroupData(AsyncCallback callback, object state, string groupId, int clientIndex)
      {
        return send_Group_ReadGroupData(callback, state, groupId, clientIndex);
      }

      public string End_Group_ReadGroupData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ReadGroupData();
      }

      #endif

      /// <summary>
      /// Read the data of the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      public string Group_ReadGroupData(string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ReadGroupData(groupId, clientIndex);
        return recv_Group_ReadGroupData();

        #else
        var asyncResult = Begin_Group_ReadGroupData(null, null, groupId, clientIndex);
        return End_Group_ReadGroupData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ReadGroupData(AsyncCallback callback, object state, string groupId, int clientIndex)
      #else
      public void send_Group_ReadGroupData(string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ReadGroupData", TMessageType.Call, seqid_));
        Group_ReadGroupData_args args = new Group_ReadGroupData_args();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ReadGroupData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ReadGroupData_result result = new Group_ReadGroupData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ReadGroupEntitiesPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      {
        return send_Group_ReadGroupEntitiesPage(callback, state, jsonContext, clientIndex);
      }

      public string End_Group_ReadGroupEntitiesPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ReadGroupEntitiesPage();
      }

      #endif

      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      public string Group_ReadGroupEntitiesPage(string jsonContext, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ReadGroupEntitiesPage(jsonContext, clientIndex);
        return recv_Group_ReadGroupEntitiesPage();

        #else
        var asyncResult = Begin_Group_ReadGroupEntitiesPage(null, null, jsonContext, clientIndex);
        return End_Group_ReadGroupEntitiesPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ReadGroupEntitiesPage(AsyncCallback callback, object state, string jsonContext, int clientIndex)
      #else
      public void send_Group_ReadGroupEntitiesPage(string jsonContext, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ReadGroupEntitiesPage", TMessageType.Call, seqid_));
        Group_ReadGroupEntitiesPage_args args = new Group_ReadGroupEntitiesPage_args();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ReadGroupEntitiesPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ReadGroupEntitiesPage_result result = new Group_ReadGroupEntitiesPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupEntitiesPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ReadGroupEntitiesPageByOffset(AsyncCallback callback, object state, string encodedContext, int pageOffset, int clientIndex)
      {
        return send_Group_ReadGroupEntitiesPageByOffset(callback, state, encodedContext, pageOffset, clientIndex);
      }

      public string End_Group_ReadGroupEntitiesPageByOffset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ReadGroupEntitiesPageByOffset();
      }

      #endif

      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="encodedContext">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      public string Group_ReadGroupEntitiesPageByOffset(string encodedContext, int pageOffset, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ReadGroupEntitiesPageByOffset(encodedContext, pageOffset, clientIndex);
        return recv_Group_ReadGroupEntitiesPageByOffset();

        #else
        var asyncResult = Begin_Group_ReadGroupEntitiesPageByOffset(null, null, encodedContext, pageOffset, clientIndex);
        return End_Group_ReadGroupEntitiesPageByOffset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ReadGroupEntitiesPageByOffset(AsyncCallback callback, object state, string encodedContext, int pageOffset, int clientIndex)
      #else
      public void send_Group_ReadGroupEntitiesPageByOffset(string encodedContext, int pageOffset, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ReadGroupEntitiesPageByOffset", TMessageType.Call, seqid_));
        Group_ReadGroupEntitiesPageByOffset_args args = new Group_ReadGroupEntitiesPageByOffset_args();
        args.EncodedContext = encodedContext;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ReadGroupEntitiesPageByOffset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ReadGroupEntitiesPageByOffset_result result = new Group_ReadGroupEntitiesPageByOffset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupEntitiesPageByOffset failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ReadGroupEntity(AsyncCallback callback, object state, string groupId, string entityId, int clientIndex)
      {
        return send_Group_ReadGroupEntity(callback, state, groupId, entityId, clientIndex);
      }

      public string End_Group_ReadGroupEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ReadGroupEntity();
      }

      #endif

      /// <summary>
      /// Read the specified group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="clientIndex"></param>
      public string Group_ReadGroupEntity(string groupId, string entityId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ReadGroupEntity(groupId, entityId, clientIndex);
        return recv_Group_ReadGroupEntity();

        #else
        var asyncResult = Begin_Group_ReadGroupEntity(null, null, groupId, entityId, clientIndex);
        return End_Group_ReadGroupEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ReadGroupEntity(AsyncCallback callback, object state, string groupId, string entityId, int clientIndex)
      #else
      public void send_Group_ReadGroupEntity(string groupId, string entityId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ReadGroupEntity", TMessageType.Call, seqid_));
        Group_ReadGroupEntity_args args = new Group_ReadGroupEntity_args();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ReadGroupEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ReadGroupEntity_result result = new Group_ReadGroupEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_ReadGroupMembers(AsyncCallback callback, object state, string groupId, int clientIndex)
      {
        return send_Group_ReadGroupMembers(callback, state, groupId, clientIndex);
      }

      public string End_Group_ReadGroupMembers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_ReadGroupMembers();
      }

      #endif

      /// <summary>
      /// Read the members of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      public string Group_ReadGroupMembers(string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_ReadGroupMembers(groupId, clientIndex);
        return recv_Group_ReadGroupMembers();

        #else
        var asyncResult = Begin_Group_ReadGroupMembers(null, null, groupId, clientIndex);
        return End_Group_ReadGroupMembers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_ReadGroupMembers(AsyncCallback callback, object state, string groupId, int clientIndex)
      #else
      public void send_Group_ReadGroupMembers(string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_ReadGroupMembers", TMessageType.Call, seqid_));
        Group_ReadGroupMembers_args args = new Group_ReadGroupMembers_args();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_ReadGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_ReadGroupMembers_result result = new Group_ReadGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupMembers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_RejectGroupInvitation(AsyncCallback callback, object state, string groupId, int clientIndex)
      {
        return send_Group_RejectGroupInvitation(callback, state, groupId, clientIndex);
      }

      public string End_Group_RejectGroupInvitation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_RejectGroupInvitation();
      }

      #endif

      /// <summary>
      /// Reject an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      public string Group_RejectGroupInvitation(string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_RejectGroupInvitation(groupId, clientIndex);
        return recv_Group_RejectGroupInvitation();

        #else
        var asyncResult = Begin_Group_RejectGroupInvitation(null, null, groupId, clientIndex);
        return End_Group_RejectGroupInvitation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_RejectGroupInvitation(AsyncCallback callback, object state, string groupId, int clientIndex)
      #else
      public void send_Group_RejectGroupInvitation(string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_RejectGroupInvitation", TMessageType.Call, seqid_));
        Group_RejectGroupInvitation_args args = new Group_RejectGroupInvitation_args();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_RejectGroupInvitation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_RejectGroupInvitation_result result = new Group_RejectGroupInvitation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_RejectGroupInvitation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_RejectGroupJoinRequest(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex)
      {
        return send_Group_RejectGroupJoinRequest(callback, state, groupId, profileId, clientIndex);
      }

      public string End_Group_RejectGroupJoinRequest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_RejectGroupJoinRequest();
      }

      #endif

      /// <summary>
      /// Reject an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      public string Group_RejectGroupJoinRequest(string groupId, string profileId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_RejectGroupJoinRequest(groupId, profileId, clientIndex);
        return recv_Group_RejectGroupJoinRequest();

        #else
        var asyncResult = Begin_Group_RejectGroupJoinRequest(null, null, groupId, profileId, clientIndex);
        return End_Group_RejectGroupJoinRequest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_RejectGroupJoinRequest(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex)
      #else
      public void send_Group_RejectGroupJoinRequest(string groupId, string profileId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_RejectGroupJoinRequest", TMessageType.Call, seqid_));
        Group_RejectGroupJoinRequest_args args = new Group_RejectGroupJoinRequest_args();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_RejectGroupJoinRequest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_RejectGroupJoinRequest_result result = new Group_RejectGroupJoinRequest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_RejectGroupJoinRequest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_RemoveGroupMember(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex)
      {
        return send_Group_RemoveGroupMember(callback, state, groupId, profileId, clientIndex);
      }

      public string End_Group_RemoveGroupMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_RemoveGroupMember();
      }

      #endif

      /// <summary>
      /// Remove a member from the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being deleted.</param>
      /// <param name="clientIndex"></param>
      public string Group_RemoveGroupMember(string groupId, string profileId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_RemoveGroupMember(groupId, profileId, clientIndex);
        return recv_Group_RemoveGroupMember();

        #else
        var asyncResult = Begin_Group_RemoveGroupMember(null, null, groupId, profileId, clientIndex);
        return End_Group_RemoveGroupMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_RemoveGroupMember(AsyncCallback callback, object state, string groupId, string profileId, int clientIndex)
      #else
      public void send_Group_RemoveGroupMember(string groupId, string profileId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_RemoveGroupMember", TMessageType.Call, seqid_));
        Group_RemoveGroupMember_args args = new Group_RemoveGroupMember_args();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_RemoveGroupMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_RemoveGroupMember_result result = new Group_RemoveGroupMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_RemoveGroupMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_UpdateGroupData(AsyncCallback callback, object state, string groupId, long version, string jsonData, int clientIndex)
      {
        return send_Group_UpdateGroupData(callback, state, groupId, version, jsonData, clientIndex);
      }

      public string End_Group_UpdateGroupData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_UpdateGroupData();
      }

      #endif

      /// <summary>
      /// Updates a group's data.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Version to verify.</param>
      /// <param name="jsonData">Data to apply.</param>
      /// <param name="clientIndex"></param>
      public string Group_UpdateGroupData(string groupId, long version, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_UpdateGroupData(groupId, version, jsonData, clientIndex);
        return recv_Group_UpdateGroupData();

        #else
        var asyncResult = Begin_Group_UpdateGroupData(null, null, groupId, version, jsonData, clientIndex);
        return End_Group_UpdateGroupData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_UpdateGroupData(AsyncCallback callback, object state, string groupId, long version, string jsonData, int clientIndex)
      #else
      public void send_Group_UpdateGroupData(string groupId, long version, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_UpdateGroupData", TMessageType.Call, seqid_));
        Group_UpdateGroupData_args args = new Group_UpdateGroupData_args();
        args.GroupId = groupId;
        args.Version = version;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_UpdateGroupData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_UpdateGroupData_result result = new Group_UpdateGroupData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_UpdateGroupEntityData(AsyncCallback callback, object state, string groupId, string entityId, long version, string jsonData, int clientIndex)
      {
        return send_Group_UpdateGroupEntityData(callback, state, groupId, entityId, version, jsonData, clientIndex);
      }

      public string End_Group_UpdateGroupEntityData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_UpdateGroupEntityData();
      }

      #endif

      /// <summary>
      /// Update a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      public string Group_UpdateGroupEntityData(string groupId, string entityId, long version, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_UpdateGroupEntityData(groupId, entityId, version, jsonData, clientIndex);
        return recv_Group_UpdateGroupEntityData();

        #else
        var asyncResult = Begin_Group_UpdateGroupEntityData(null, null, groupId, entityId, version, jsonData, clientIndex);
        return End_Group_UpdateGroupEntityData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_UpdateGroupEntityData(AsyncCallback callback, object state, string groupId, string entityId, long version, string jsonData, int clientIndex)
      #else
      public void send_Group_UpdateGroupEntityData(string groupId, string entityId, long version, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_UpdateGroupEntityData", TMessageType.Call, seqid_));
        Group_UpdateGroupEntityData_args args = new Group_UpdateGroupEntityData_args();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.Version = version;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_UpdateGroupEntityData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_UpdateGroupEntityData_result result = new Group_UpdateGroupEntityData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupEntityData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_UpdateGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        return send_Group_UpdateGroupMember(callback, state, groupId, profileId, role, jsonAttributes, clientIndex);
      }

      public string End_Group_UpdateGroupMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_UpdateGroupMember();
      }

      #endif

      /// <summary>
      /// Update a member of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being updated.</param>
      /// <param name="role">Role of the member being updated (optional).</param>
      /// <param name="jsonAttributes">Attributes of the member being updated (optional).</param>
      /// <param name="clientIndex"></param>
      public string Group_UpdateGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_UpdateGroupMember(groupId, profileId, role, jsonAttributes, clientIndex);
        return recv_Group_UpdateGroupMember();

        #else
        var asyncResult = Begin_Group_UpdateGroupMember(null, null, groupId, profileId, role, jsonAttributes, clientIndex);
        return End_Group_UpdateGroupMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_UpdateGroupMember(AsyncCallback callback, object state, string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #else
      public void send_Group_UpdateGroupMember(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_UpdateGroupMember", TMessageType.Call, seqid_));
        Group_UpdateGroupMember_args args = new Group_UpdateGroupMember_args();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_UpdateGroupMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_UpdateGroupMember_result result = new Group_UpdateGroupMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Group_UpdateGroupName(AsyncCallback callback, object state, string groupId, string name, int clientIndex)
      {
        return send_Group_UpdateGroupName(callback, state, groupId, name, clientIndex);
      }

      public string End_Group_UpdateGroupName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Group_UpdateGroupName();
      }

      #endif

      /// <summary>
      /// Updates a group's name.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="name">Name to apply.</param>
      /// <param name="clientIndex"></param>
      public string Group_UpdateGroupName(string groupId, string name, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Group_UpdateGroupName(groupId, name, clientIndex);
        return recv_Group_UpdateGroupName();

        #else
        var asyncResult = Begin_Group_UpdateGroupName(null, null, groupId, name, clientIndex);
        return End_Group_UpdateGroupName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Group_UpdateGroupName(AsyncCallback callback, object state, string groupId, string name, int clientIndex)
      #else
      public void send_Group_UpdateGroupName(string groupId, string name, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Group_UpdateGroupName", TMessageType.Call, seqid_));
        Group_UpdateGroupName_args args = new Group_UpdateGroupName_args();
        args.GroupId = groupId;
        args.Name = name;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Group_UpdateGroupName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Group_UpdateGroupName_result result = new Group_UpdateGroupName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_AttachEmailIdentity(AsyncCallback callback, object state, string email, string password, int clientIndex)
      {
        return send_Identity_AttachEmailIdentity(callback, state, email, password, clientIndex);
      }

      public string End_Identity_AttachEmailIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_AttachEmailIdentity();
      }

      #endif

      /// <summary>
      /// Attach a Email and Password identity to the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      public string Identity_AttachEmailIdentity(string email, string password, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_AttachEmailIdentity(email, password, clientIndex);
        return recv_Identity_AttachEmailIdentity();

        #else
        var asyncResult = Begin_Identity_AttachEmailIdentity(null, null, email, password, clientIndex);
        return End_Identity_AttachEmailIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_AttachEmailIdentity(AsyncCallback callback, object state, string email, string password, int clientIndex)
      #else
      public void send_Identity_AttachEmailIdentity(string email, string password, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_AttachEmailIdentity", TMessageType.Call, seqid_));
        Identity_AttachEmailIdentity_args args = new Identity_AttachEmailIdentity_args();
        args.Email = email;
        args.Password = password;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_AttachEmailIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_AttachEmailIdentity_result result = new Identity_AttachEmailIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachEmailIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_MergeEmailIdentity(AsyncCallback callback, object state, string email, string password, int clientIndex)
      {
        return send_Identity_MergeEmailIdentity(callback, state, email, password, clientIndex);
      }

      public string End_Identity_MergeEmailIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_MergeEmailIdentity();
      }

      #endif

      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      public string Identity_MergeEmailIdentity(string email, string password, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_MergeEmailIdentity(email, password, clientIndex);
        return recv_Identity_MergeEmailIdentity();

        #else
        var asyncResult = Begin_Identity_MergeEmailIdentity(null, null, email, password, clientIndex);
        return End_Identity_MergeEmailIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_MergeEmailIdentity(AsyncCallback callback, object state, string email, string password, int clientIndex)
      #else
      public void send_Identity_MergeEmailIdentity(string email, string password, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_MergeEmailIdentity", TMessageType.Call, seqid_));
        Identity_MergeEmailIdentity_args args = new Identity_MergeEmailIdentity_args();
        args.Email = email;
        args.Password = password;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_MergeEmailIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_MergeEmailIdentity_result result = new Identity_MergeEmailIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_MergeEmailIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_DetachEmailIdentity(AsyncCallback callback, object state, string email, bool continueAnon, int clientIndex)
      {
        return send_Identity_DetachEmailIdentity(callback, state, email, continueAnon, clientIndex);
      }

      public string End_Identity_DetachEmailIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_DetachEmailIdentity();
      }

      #endif

      /// <summary>
      /// Detach the e-mail identity from the current profile
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      public string Identity_DetachEmailIdentity(string email, bool continueAnon, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_DetachEmailIdentity(email, continueAnon, clientIndex);
        return recv_Identity_DetachEmailIdentity();

        #else
        var asyncResult = Begin_Identity_DetachEmailIdentity(null, null, email, continueAnon, clientIndex);
        return End_Identity_DetachEmailIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_DetachEmailIdentity(AsyncCallback callback, object state, string email, bool continueAnon, int clientIndex)
      #else
      public void send_Identity_DetachEmailIdentity(string email, bool continueAnon, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_DetachEmailIdentity", TMessageType.Call, seqid_));
        Identity_DetachEmailIdentity_args args = new Identity_DetachEmailIdentity_args();
        args.Email = email;
        args.ContinueAnon = continueAnon;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_DetachEmailIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_DetachEmailIdentity_result result = new Identity_DetachEmailIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachEmailIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_AttachUniversalIdentity(AsyncCallback callback, object state, string userId, string password, int clientIndex)
      {
        return send_Identity_AttachUniversalIdentity(callback, state, userId, password, clientIndex);
      }

      public string End_Identity_AttachUniversalIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_AttachUniversalIdentity();
      }

      #endif

      /// <summary>
      /// Attach a Universal (userId + password) identity to the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      public string Identity_AttachUniversalIdentity(string userId, string password, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_AttachUniversalIdentity(userId, password, clientIndex);
        return recv_Identity_AttachUniversalIdentity();

        #else
        var asyncResult = Begin_Identity_AttachUniversalIdentity(null, null, userId, password, clientIndex);
        return End_Identity_AttachUniversalIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_AttachUniversalIdentity(AsyncCallback callback, object state, string userId, string password, int clientIndex)
      #else
      public void send_Identity_AttachUniversalIdentity(string userId, string password, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_AttachUniversalIdentity", TMessageType.Call, seqid_));
        Identity_AttachUniversalIdentity_args args = new Identity_AttachUniversalIdentity_args();
        args.UserId = userId;
        args.Password = password;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_AttachUniversalIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_AttachUniversalIdentity_result result = new Identity_AttachUniversalIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachUniversalIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_MergeUniversalIdentity(AsyncCallback callback, object state, string userId, string password, int clientIndex)
      {
        return send_Identity_MergeUniversalIdentity(callback, state, userId, password, clientIndex);
      }

      public string End_Identity_MergeUniversalIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_MergeUniversalIdentity();
      }

      #endif

      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      public string Identity_MergeUniversalIdentity(string userId, string password, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_MergeUniversalIdentity(userId, password, clientIndex);
        return recv_Identity_MergeUniversalIdentity();

        #else
        var asyncResult = Begin_Identity_MergeUniversalIdentity(null, null, userId, password, clientIndex);
        return End_Identity_MergeUniversalIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_MergeUniversalIdentity(AsyncCallback callback, object state, string userId, string password, int clientIndex)
      #else
      public void send_Identity_MergeUniversalIdentity(string userId, string password, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_MergeUniversalIdentity", TMessageType.Call, seqid_));
        Identity_MergeUniversalIdentity_args args = new Identity_MergeUniversalIdentity_args();
        args.UserId = userId;
        args.Password = password;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_MergeUniversalIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_MergeUniversalIdentity_result result = new Identity_MergeUniversalIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_MergeUniversalIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_DetachUniversalIdentity(AsyncCallback callback, object state, string userId, bool continueAnon, int clientIndex)
      {
        return send_Identity_DetachUniversalIdentity(callback, state, userId, continueAnon, clientIndex);
      }

      public string End_Identity_DetachUniversalIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_DetachUniversalIdentity();
      }

      #endif

      /// <summary>
      /// Detach the universal identity from the current profile
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      public string Identity_DetachUniversalIdentity(string userId, bool continueAnon, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_DetachUniversalIdentity(userId, continueAnon, clientIndex);
        return recv_Identity_DetachUniversalIdentity();

        #else
        var asyncResult = Begin_Identity_DetachUniversalIdentity(null, null, userId, continueAnon, clientIndex);
        return End_Identity_DetachUniversalIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_DetachUniversalIdentity(AsyncCallback callback, object state, string userId, bool continueAnon, int clientIndex)
      #else
      public void send_Identity_DetachUniversalIdentity(string userId, bool continueAnon, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_DetachUniversalIdentity", TMessageType.Call, seqid_));
        Identity_DetachUniversalIdentity_args args = new Identity_DetachUniversalIdentity_args();
        args.UserId = userId;
        args.ContinueAnon = continueAnon;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_DetachUniversalIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_DetachUniversalIdentity_result result = new Identity_DetachUniversalIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachUniversalIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_SwitchToChildProfile(AsyncCallback callback, object state, string childProfileId, string childAppId, bool forceCreate, int clientIndex)
      {
        return send_Identity_SwitchToChildProfile(callback, state, childProfileId, childAppId, forceCreate, clientIndex);
      }

      public string End_Identity_SwitchToChildProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_SwitchToChildProfile();
      }

      #endif

      /// <summary>
      /// Switch to a Child Profile
      /// </summary>
      /// <param name="childProfileId">The profileId of the child profile to switch toIf null and forceCreate is true a new profile will be created</param>
      /// <param name="childAppId">The appId of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      public string Identity_SwitchToChildProfile(string childProfileId, string childAppId, bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_SwitchToChildProfile(childProfileId, childAppId, forceCreate, clientIndex);
        return recv_Identity_SwitchToChildProfile();

        #else
        var asyncResult = Begin_Identity_SwitchToChildProfile(null, null, childProfileId, childAppId, forceCreate, clientIndex);
        return End_Identity_SwitchToChildProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_SwitchToChildProfile(AsyncCallback callback, object state, string childProfileId, string childAppId, bool forceCreate, int clientIndex)
      #else
      public void send_Identity_SwitchToChildProfile(string childProfileId, string childAppId, bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_SwitchToChildProfile", TMessageType.Call, seqid_));
        Identity_SwitchToChildProfile_args args = new Identity_SwitchToChildProfile_args();
        args.ChildProfileId = childProfileId;
        args.ChildAppId = childAppId;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_SwitchToChildProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_SwitchToChildProfile_result result = new Identity_SwitchToChildProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_SwitchToChildProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_SwitchToSingletonChildProfile(AsyncCallback callback, object state, string childAppId, bool forceCreate, int clientIndex)
      {
        return send_Identity_SwitchToSingletonChildProfile(callback, state, childAppId, forceCreate, clientIndex);
      }

      public string End_Identity_SwitchToSingletonChildProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_SwitchToSingletonChildProfile();
      }

      #endif

      /// <summary>
      /// Switches to the child profile of an app when only one profile exists
      /// If multiple profiles exist this returns an error
      /// </summary>
      /// <param name="childAppId">The App ID of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if one does not exist?</param>
      /// <param name="clientIndex"></param>
      public string Identity_SwitchToSingletonChildProfile(string childAppId, bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_SwitchToSingletonChildProfile(childAppId, forceCreate, clientIndex);
        return recv_Identity_SwitchToSingletonChildProfile();

        #else
        var asyncResult = Begin_Identity_SwitchToSingletonChildProfile(null, null, childAppId, forceCreate, clientIndex);
        return End_Identity_SwitchToSingletonChildProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_SwitchToSingletonChildProfile(AsyncCallback callback, object state, string childAppId, bool forceCreate, int clientIndex)
      #else
      public void send_Identity_SwitchToSingletonChildProfile(string childAppId, bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_SwitchToSingletonChildProfile", TMessageType.Call, seqid_));
        Identity_SwitchToSingletonChildProfile_args args = new Identity_SwitchToSingletonChildProfile_args();
        args.ChildAppId = childAppId;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_SwitchToSingletonChildProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_SwitchToSingletonChildProfile_result result = new Identity_SwitchToSingletonChildProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_SwitchToSingletonChildProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_AttachParentWithIdentity(AsyncCallback callback, object state, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      {
        return send_Identity_AttachParentWithIdentity(callback, state, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
      }

      public string End_Identity_AttachParentWithIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_AttachParentWithIdentity();
      }

      #endif

      /// <summary>
      /// Attach a new identity to a parent app
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      public string Identity_AttachParentWithIdentity(string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_AttachParentWithIdentity(externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
        return recv_Identity_AttachParentWithIdentity();

        #else
        var asyncResult = Begin_Identity_AttachParentWithIdentity(null, null, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
        return End_Identity_AttachParentWithIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_AttachParentWithIdentity(AsyncCallback callback, object state, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      #else
      public void send_Identity_AttachParentWithIdentity(string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_AttachParentWithIdentity", TMessageType.Call, seqid_));
        Identity_AttachParentWithIdentity_args args = new Identity_AttachParentWithIdentity_args();
        args.ExternalId = externalId;
        args.AuthenticationToken = authenticationToken;
        args.AuthenticationType = authenticationType;
        args.ExternalAuthName = externalAuthName;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_AttachParentWithIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_AttachParentWithIdentity_result result = new Identity_AttachParentWithIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachParentWithIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_SwitchToParentProfile(AsyncCallback callback, object state, string parentLevelName, int clientIndex)
      {
        return send_Identity_SwitchToParentProfile(callback, state, parentLevelName, clientIndex);
      }

      public string End_Identity_SwitchToParentProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_SwitchToParentProfile();
      }

      #endif

      /// <summary>
      /// Switch to a Parent Profile
      /// </summary>
      /// <param name="parentLevelName">The level of the parent to switch to</param>
      /// <param name="clientIndex"></param>
      public string Identity_SwitchToParentProfile(string parentLevelName, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_SwitchToParentProfile(parentLevelName, clientIndex);
        return recv_Identity_SwitchToParentProfile();

        #else
        var asyncResult = Begin_Identity_SwitchToParentProfile(null, null, parentLevelName, clientIndex);
        return End_Identity_SwitchToParentProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_SwitchToParentProfile(AsyncCallback callback, object state, string parentLevelName, int clientIndex)
      #else
      public void send_Identity_SwitchToParentProfile(string parentLevelName, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_SwitchToParentProfile", TMessageType.Call, seqid_));
        Identity_SwitchToParentProfile_args args = new Identity_SwitchToParentProfile_args();
        args.ParentLevelName = parentLevelName;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_SwitchToParentProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_SwitchToParentProfile_result result = new Identity_SwitchToParentProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_SwitchToParentProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_DetachParent(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Identity_DetachParent(callback, state, clientIndex);
      }

      public string End_Identity_DetachParent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_DetachParent();
      }

      #endif

      /// <summary>
      /// Detaches parent from this user's profile
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Identity_DetachParent(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_DetachParent(clientIndex);
        return recv_Identity_DetachParent();

        #else
        var asyncResult = Begin_Identity_DetachParent(null, null, clientIndex);
        return End_Identity_DetachParent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_DetachParent(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Identity_DetachParent(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_DetachParent", TMessageType.Call, seqid_));
        Identity_DetachParent_args args = new Identity_DetachParent_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_DetachParent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_DetachParent_result result = new Identity_DetachParent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachParent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_GetChildProfiles(AsyncCallback callback, object state, bool includeSummaryData, int clientIndex)
      {
        return send_Identity_GetChildProfiles(callback, state, includeSummaryData, clientIndex);
      }

      public string End_Identity_GetChildProfiles(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_GetChildProfiles();
      }

      #endif

      /// <summary>
      /// Returns a list of all child profiles in child Apps
      /// </summary>
      /// <param name="includeSummaryData">Whether to return the summary friend data along with this call</param>
      /// <param name="clientIndex"></param>
      public string Identity_GetChildProfiles(bool includeSummaryData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_GetChildProfiles(includeSummaryData, clientIndex);
        return recv_Identity_GetChildProfiles();

        #else
        var asyncResult = Begin_Identity_GetChildProfiles(null, null, includeSummaryData, clientIndex);
        return End_Identity_GetChildProfiles(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_GetChildProfiles(AsyncCallback callback, object state, bool includeSummaryData, int clientIndex)
      #else
      public void send_Identity_GetChildProfiles(bool includeSummaryData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_GetChildProfiles", TMessageType.Call, seqid_));
        Identity_GetChildProfiles_args args = new Identity_GetChildProfiles_args();
        args.IncludeSummaryData = includeSummaryData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_GetChildProfiles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_GetChildProfiles_result result = new Identity_GetChildProfiles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetChildProfiles failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_GetIdentities(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Identity_GetIdentities(callback, state, clientIndex);
      }

      public string End_Identity_GetIdentities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_GetIdentities();
      }

      #endif

      /// <summary>
      /// Retrieve list of identities
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Identity_GetIdentities(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_GetIdentities(clientIndex);
        return recv_Identity_GetIdentities();

        #else
        var asyncResult = Begin_Identity_GetIdentities(null, null, clientIndex);
        return End_Identity_GetIdentities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_GetIdentities(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Identity_GetIdentities(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_GetIdentities", TMessageType.Call, seqid_));
        Identity_GetIdentities_args args = new Identity_GetIdentities_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_GetIdentities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_GetIdentities_result result = new Identity_GetIdentities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetIdentities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_GetExpiredIdentities(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Identity_GetExpiredIdentities(callback, state, clientIndex);
      }

      public string End_Identity_GetExpiredIdentities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_GetExpiredIdentities();
      }

      #endif

      /// <summary>
      /// Retrieve list of expired identities
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Identity_GetExpiredIdentities(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_GetExpiredIdentities(clientIndex);
        return recv_Identity_GetExpiredIdentities();

        #else
        var asyncResult = Begin_Identity_GetExpiredIdentities(null, null, clientIndex);
        return End_Identity_GetExpiredIdentities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_GetExpiredIdentities(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Identity_GetExpiredIdentities(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_GetExpiredIdentities", TMessageType.Call, seqid_));
        Identity_GetExpiredIdentities_args args = new Identity_GetExpiredIdentities_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_GetExpiredIdentities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_GetExpiredIdentities_result result = new Identity_GetExpiredIdentities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetExpiredIdentities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_RefreshIdentity(AsyncCallback callback, object state, string externalId, string authenticationToken, string authenticationType, int clientIndex)
      {
        return send_Identity_RefreshIdentity(callback, state, externalId, authenticationToken, authenticationType, clientIndex);
      }

      public string End_Identity_RefreshIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_RefreshIdentity();
      }

      #endif

      /// <summary>
      /// Refreshes an identity for this user
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="clientIndex"></param>
      public string Identity_RefreshIdentity(string externalId, string authenticationToken, string authenticationType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_RefreshIdentity(externalId, authenticationToken, authenticationType, clientIndex);
        return recv_Identity_RefreshIdentity();

        #else
        var asyncResult = Begin_Identity_RefreshIdentity(null, null, externalId, authenticationToken, authenticationType, clientIndex);
        return End_Identity_RefreshIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_RefreshIdentity(AsyncCallback callback, object state, string externalId, string authenticationToken, string authenticationType, int clientIndex)
      #else
      public void send_Identity_RefreshIdentity(string externalId, string authenticationToken, string authenticationType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_RefreshIdentity", TMessageType.Call, seqid_));
        Identity_RefreshIdentity_args args = new Identity_RefreshIdentity_args();
        args.ExternalId = externalId;
        args.AuthenticationToken = authenticationToken;
        args.AuthenticationType = authenticationType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_RefreshIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_RefreshIdentity_result result = new Identity_RefreshIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_RefreshIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_ChangeEmailIdentity(AsyncCallback callback, object state, string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex)
      {
        return send_Identity_ChangeEmailIdentity(callback, state, oldEmailAddress, password, newEmailAddress, updateContactEmail, clientIndex);
      }

      public string End_Identity_ChangeEmailIdentity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_ChangeEmailIdentity();
      }

      #endif

      /// <summary>
      /// Allows email identity email address to be changed
      /// </summary>
      /// <param name="oldEmailAddress">Old email address</param>
      /// <param name="password">Password for identity</param>
      /// <param name="newEmailAddress">New email address</param>
      /// <param name="updateContactEmail">Whether to update contact email in profile</param>
      /// <param name="clientIndex"></param>
      public string Identity_ChangeEmailIdentity(string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_ChangeEmailIdentity(oldEmailAddress, password, newEmailAddress, updateContactEmail, clientIndex);
        return recv_Identity_ChangeEmailIdentity();

        #else
        var asyncResult = Begin_Identity_ChangeEmailIdentity(null, null, oldEmailAddress, password, newEmailAddress, updateContactEmail, clientIndex);
        return End_Identity_ChangeEmailIdentity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_ChangeEmailIdentity(AsyncCallback callback, object state, string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex)
      #else
      public void send_Identity_ChangeEmailIdentity(string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_ChangeEmailIdentity", TMessageType.Call, seqid_));
        Identity_ChangeEmailIdentity_args args = new Identity_ChangeEmailIdentity_args();
        args.OldEmailAddress = oldEmailAddress;
        args.Password = password;
        args.NewEmailAddress = newEmailAddress;
        args.UpdateContactEmail = updateContactEmail;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_ChangeEmailIdentity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_ChangeEmailIdentity_result result = new Identity_ChangeEmailIdentity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_ChangeEmailIdentity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_AttachPeerProfile(AsyncCallback callback, object state, string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      {
        return send_Identity_AttachPeerProfile(callback, state, peer, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
      }

      public string End_Identity_AttachPeerProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_AttachPeerProfile();
      }

      #endif

      /// <summary>
      /// Attaches a peer identity to this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      public string Identity_AttachPeerProfile(string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_AttachPeerProfile(peer, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
        return recv_Identity_AttachPeerProfile();

        #else
        var asyncResult = Begin_Identity_AttachPeerProfile(null, null, peer, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
        return End_Identity_AttachPeerProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_AttachPeerProfile(AsyncCallback callback, object state, string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      #else
      public void send_Identity_AttachPeerProfile(string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_AttachPeerProfile", TMessageType.Call, seqid_));
        Identity_AttachPeerProfile_args args = new Identity_AttachPeerProfile_args();
        args.Peer = peer;
        args.ExternalId = externalId;
        args.AuthenticationToken = authenticationToken;
        args.AuthenticationType = authenticationType;
        args.ExternalAuthName = externalAuthName;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_AttachPeerProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_AttachPeerProfile_result result = new Identity_AttachPeerProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachPeerProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_DetachPeer(AsyncCallback callback, object state, string peer, int clientIndex)
      {
        return send_Identity_DetachPeer(callback, state, peer, clientIndex);
      }

      public string End_Identity_DetachPeer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_DetachPeer();
      }

      #endif

      /// <summary>
      /// Detaches a peer identity from this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="clientIndex"></param>
      public string Identity_DetachPeer(string peer, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_DetachPeer(peer, clientIndex);
        return recv_Identity_DetachPeer();

        #else
        var asyncResult = Begin_Identity_DetachPeer(null, null, peer, clientIndex);
        return End_Identity_DetachPeer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_DetachPeer(AsyncCallback callback, object state, string peer, int clientIndex)
      #else
      public void send_Identity_DetachPeer(string peer, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_DetachPeer", TMessageType.Call, seqid_));
        Identity_DetachPeer_args args = new Identity_DetachPeer_args();
        args.Peer = peer;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_DetachPeer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_DetachPeer_result result = new Identity_DetachPeer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachPeer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Identity_GetPeerProfiles(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Identity_GetPeerProfiles(callback, state, clientIndex);
      }

      public string End_Identity_GetPeerProfiles(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Identity_GetPeerProfiles();
      }

      #endif

      /// <summary>
      /// Retrieves a list of attached peer profiles
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Identity_GetPeerProfiles(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Identity_GetPeerProfiles(clientIndex);
        return recv_Identity_GetPeerProfiles();

        #else
        var asyncResult = Begin_Identity_GetPeerProfiles(null, null, clientIndex);
        return End_Identity_GetPeerProfiles(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Identity_GetPeerProfiles(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Identity_GetPeerProfiles(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Identity_GetPeerProfiles", TMessageType.Call, seqid_));
        Identity_GetPeerProfiles_args args = new Identity_GetPeerProfiles_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Identity_GetPeerProfiles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Identity_GetPeerProfiles_result result = new Identity_GetPeerProfiles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetPeerProfiles failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Mail_SendBasicEmail(AsyncCallback callback, object state, string profileId, string subject, string body, int clientIndex)
      {
        return send_Mail_SendBasicEmail(callback, state, profileId, subject, body, clientIndex);
      }

      public string End_Mail_SendBasicEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Mail_SendBasicEmail();
      }

      #endif

      /// <summary>
      /// Sends a simple text email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="subject">The email subject</param>
      /// <param name="body">The email body</param>
      /// <param name="clientIndex"></param>
      public string Mail_SendBasicEmail(string profileId, string subject, string body, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Mail_SendBasicEmail(profileId, subject, body, clientIndex);
        return recv_Mail_SendBasicEmail();

        #else
        var asyncResult = Begin_Mail_SendBasicEmail(null, null, profileId, subject, body, clientIndex);
        return End_Mail_SendBasicEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Mail_SendBasicEmail(AsyncCallback callback, object state, string profileId, string subject, string body, int clientIndex)
      #else
      public void send_Mail_SendBasicEmail(string profileId, string subject, string body, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Mail_SendBasicEmail", TMessageType.Call, seqid_));
        Mail_SendBasicEmail_args args = new Mail_SendBasicEmail_args();
        args.ProfileId = profileId;
        args.Subject = subject;
        args.Body = body;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Mail_SendBasicEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Mail_SendBasicEmail_result result = new Mail_SendBasicEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Mail_SendBasicEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Mail_SendAdvancedEmail(AsyncCallback callback, object state, string profileId, string jsonServiceParams, int clientIndex)
      {
        return send_Mail_SendAdvancedEmail(callback, state, profileId, jsonServiceParams, clientIndex);
      }

      public string End_Mail_SendAdvancedEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Mail_SendAdvancedEmail();
      }

      #endif

      /// <summary>
      /// Sends an advanced email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      public string Mail_SendAdvancedEmail(string profileId, string jsonServiceParams, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Mail_SendAdvancedEmail(profileId, jsonServiceParams, clientIndex);
        return recv_Mail_SendAdvancedEmail();

        #else
        var asyncResult = Begin_Mail_SendAdvancedEmail(null, null, profileId, jsonServiceParams, clientIndex);
        return End_Mail_SendAdvancedEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Mail_SendAdvancedEmail(AsyncCallback callback, object state, string profileId, string jsonServiceParams, int clientIndex)
      #else
      public void send_Mail_SendAdvancedEmail(string profileId, string jsonServiceParams, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Mail_SendAdvancedEmail", TMessageType.Call, seqid_));
        Mail_SendAdvancedEmail_args args = new Mail_SendAdvancedEmail_args();
        args.ProfileId = profileId;
        args.JsonServiceParams = jsonServiceParams;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Mail_SendAdvancedEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Mail_SendAdvancedEmail_result result = new Mail_SendAdvancedEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Mail_SendAdvancedEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Mail_SendAdvancedEmailByAddress(AsyncCallback callback, object state, string emailAddress, string jsonServiceParams, int clientIndex)
      {
        return send_Mail_SendAdvancedEmailByAddress(callback, state, emailAddress, jsonServiceParams, clientIndex);
      }

      public string End_Mail_SendAdvancedEmailByAddress(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Mail_SendAdvancedEmailByAddress();
      }

      #endif

      /// <summary>
      /// Sends an advanced email to the specified email address
      /// </summary>
      /// <param name="emailAddress">The address to send the email to</param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      public string Mail_SendAdvancedEmailByAddress(string emailAddress, string jsonServiceParams, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Mail_SendAdvancedEmailByAddress(emailAddress, jsonServiceParams, clientIndex);
        return recv_Mail_SendAdvancedEmailByAddress();

        #else
        var asyncResult = Begin_Mail_SendAdvancedEmailByAddress(null, null, emailAddress, jsonServiceParams, clientIndex);
        return End_Mail_SendAdvancedEmailByAddress(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Mail_SendAdvancedEmailByAddress(AsyncCallback callback, object state, string emailAddress, string jsonServiceParams, int clientIndex)
      #else
      public void send_Mail_SendAdvancedEmailByAddress(string emailAddress, string jsonServiceParams, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Mail_SendAdvancedEmailByAddress", TMessageType.Call, seqid_));
        Mail_SendAdvancedEmailByAddress_args args = new Mail_SendAdvancedEmailByAddress_args();
        args.EmailAddress = emailAddress;
        args.JsonServiceParams = jsonServiceParams;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Mail_SendAdvancedEmailByAddress()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Mail_SendAdvancedEmailByAddress_result result = new Mail_SendAdvancedEmailByAddress_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Mail_SendAdvancedEmailByAddress failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_Read(AsyncCallback callback, object state, int clientIndex)
      {
        return send_MatchMaking_Read(callback, state, clientIndex);
      }

      public string End_MatchMaking_Read(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_Read();
      }

      #endif

      /// <summary>
      /// Read match making record
      /// </summary>
      /// <param name="clientIndex"></param>
      public string MatchMaking_Read(int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_Read(clientIndex);
        return recv_MatchMaking_Read();

        #else
        var asyncResult = Begin_MatchMaking_Read(null, null, clientIndex);
        return End_MatchMaking_Read(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_Read(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_MatchMaking_Read(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_Read", TMessageType.Call, seqid_));
        MatchMaking_Read_args args = new MatchMaking_Read_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_Read()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_Read_result result = new MatchMaking_Read_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_Read failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_SetPlayerRating(AsyncCallback callback, object state, long playerRating, int clientIndex)
      {
        return send_MatchMaking_SetPlayerRating(callback, state, playerRating, clientIndex);
      }

      public string End_MatchMaking_SetPlayerRating(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_SetPlayerRating();
      }

      #endif

      /// <summary>
      /// Sets player rating
      /// </summary>
      /// <param name="playerRating">The new player rating.</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_SetPlayerRating(long playerRating, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_SetPlayerRating(playerRating, clientIndex);
        return recv_MatchMaking_SetPlayerRating();

        #else
        var asyncResult = Begin_MatchMaking_SetPlayerRating(null, null, playerRating, clientIndex);
        return End_MatchMaking_SetPlayerRating(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_SetPlayerRating(AsyncCallback callback, object state, long playerRating, int clientIndex)
      #else
      public void send_MatchMaking_SetPlayerRating(long playerRating, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_SetPlayerRating", TMessageType.Call, seqid_));
        MatchMaking_SetPlayerRating_args args = new MatchMaking_SetPlayerRating_args();
        args.PlayerRating = playerRating;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_SetPlayerRating()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_SetPlayerRating_result result = new MatchMaking_SetPlayerRating_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_SetPlayerRating failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_ResetPlayerRating(AsyncCallback callback, object state, int clientIndex)
      {
        return send_MatchMaking_ResetPlayerRating(callback, state, clientIndex);
      }

      public string End_MatchMaking_ResetPlayerRating(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_ResetPlayerRating();
      }

      #endif

      /// <summary>
      /// Resets player rating
      /// </summary>
      /// <param name="clientIndex"></param>
      public string MatchMaking_ResetPlayerRating(int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_ResetPlayerRating(clientIndex);
        return recv_MatchMaking_ResetPlayerRating();

        #else
        var asyncResult = Begin_MatchMaking_ResetPlayerRating(null, null, clientIndex);
        return End_MatchMaking_ResetPlayerRating(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_ResetPlayerRating(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_MatchMaking_ResetPlayerRating(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_ResetPlayerRating", TMessageType.Call, seqid_));
        MatchMaking_ResetPlayerRating_args args = new MatchMaking_ResetPlayerRating_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_ResetPlayerRating()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_ResetPlayerRating_result result = new MatchMaking_ResetPlayerRating_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_ResetPlayerRating failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_IncrementPlayerRating(AsyncCallback callback, object state, long increment, int clientIndex)
      {
        return send_MatchMaking_IncrementPlayerRating(callback, state, increment, clientIndex);
      }

      public string End_MatchMaking_IncrementPlayerRating(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_IncrementPlayerRating();
      }

      #endif

      /// <summary>
      /// Increments player rating
      /// </summary>
      /// <param name="increment">The increment amount</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_IncrementPlayerRating(long increment, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_IncrementPlayerRating(increment, clientIndex);
        return recv_MatchMaking_IncrementPlayerRating();

        #else
        var asyncResult = Begin_MatchMaking_IncrementPlayerRating(null, null, increment, clientIndex);
        return End_MatchMaking_IncrementPlayerRating(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_IncrementPlayerRating(AsyncCallback callback, object state, long increment, int clientIndex)
      #else
      public void send_MatchMaking_IncrementPlayerRating(long increment, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_IncrementPlayerRating", TMessageType.Call, seqid_));
        MatchMaking_IncrementPlayerRating_args args = new MatchMaking_IncrementPlayerRating_args();
        args.Increment = increment;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_IncrementPlayerRating()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_IncrementPlayerRating_result result = new MatchMaking_IncrementPlayerRating_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_IncrementPlayerRating failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_DecrementPlayerRating(AsyncCallback callback, object state, long decrement, int clientIndex)
      {
        return send_MatchMaking_DecrementPlayerRating(callback, state, decrement, clientIndex);
      }

      public string End_MatchMaking_DecrementPlayerRating(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_DecrementPlayerRating();
      }

      #endif

      /// <summary>
      /// Decrements player rating
      /// </summary>
      /// <param name="decrement">The decrement amount</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_DecrementPlayerRating(long decrement, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_DecrementPlayerRating(decrement, clientIndex);
        return recv_MatchMaking_DecrementPlayerRating();

        #else
        var asyncResult = Begin_MatchMaking_DecrementPlayerRating(null, null, decrement, clientIndex);
        return End_MatchMaking_DecrementPlayerRating(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_DecrementPlayerRating(AsyncCallback callback, object state, long decrement, int clientIndex)
      #else
      public void send_MatchMaking_DecrementPlayerRating(long decrement, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_DecrementPlayerRating", TMessageType.Call, seqid_));
        MatchMaking_DecrementPlayerRating_args args = new MatchMaking_DecrementPlayerRating_args();
        args.Decrement = decrement;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_DecrementPlayerRating()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_DecrementPlayerRating_result result = new MatchMaking_DecrementPlayerRating_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_DecrementPlayerRating failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_TurnShieldOn(AsyncCallback callback, object state, int clientIndex)
      {
        return send_MatchMaking_TurnShieldOn(callback, state, clientIndex);
      }

      public string End_MatchMaking_TurnShieldOn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_TurnShieldOn();
      }

      #endif

      /// <summary>
      /// Turns shield on
      /// </summary>
      /// <param name="clientIndex"></param>
      public string MatchMaking_TurnShieldOn(int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_TurnShieldOn(clientIndex);
        return recv_MatchMaking_TurnShieldOn();

        #else
        var asyncResult = Begin_MatchMaking_TurnShieldOn(null, null, clientIndex);
        return End_MatchMaking_TurnShieldOn(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_TurnShieldOn(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_MatchMaking_TurnShieldOn(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOn", TMessageType.Call, seqid_));
        MatchMaking_TurnShieldOn_args args = new MatchMaking_TurnShieldOn_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_TurnShieldOn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_TurnShieldOn_result result = new MatchMaking_TurnShieldOn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_TurnShieldOn failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_TurnShieldOnFor(AsyncCallback callback, object state, int minutes, int clientIndex)
      {
        return send_MatchMaking_TurnShieldOnFor(callback, state, minutes, clientIndex);
      }

      public string End_MatchMaking_TurnShieldOnFor(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_TurnShieldOnFor();
      }

      #endif

      /// <summary>
      /// Turns shield on for the specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to turn the shield on for</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_TurnShieldOnFor(int minutes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_TurnShieldOnFor(minutes, clientIndex);
        return recv_MatchMaking_TurnShieldOnFor();

        #else
        var asyncResult = Begin_MatchMaking_TurnShieldOnFor(null, null, minutes, clientIndex);
        return End_MatchMaking_TurnShieldOnFor(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_TurnShieldOnFor(AsyncCallback callback, object state, int minutes, int clientIndex)
      #else
      public void send_MatchMaking_TurnShieldOnFor(int minutes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOnFor", TMessageType.Call, seqid_));
        MatchMaking_TurnShieldOnFor_args args = new MatchMaking_TurnShieldOnFor_args();
        args.Minutes = minutes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_TurnShieldOnFor()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_TurnShieldOnFor_result result = new MatchMaking_TurnShieldOnFor_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_TurnShieldOnFor failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_TurnShieldOff(AsyncCallback callback, object state, int clientIndex)
      {
        return send_MatchMaking_TurnShieldOff(callback, state, clientIndex);
      }

      public string End_MatchMaking_TurnShieldOff(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_TurnShieldOff();
      }

      #endif

      /// <summary>
      /// Turns shield off
      /// </summary>
      /// <param name="clientIndex"></param>
      public string MatchMaking_TurnShieldOff(int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_TurnShieldOff(clientIndex);
        return recv_MatchMaking_TurnShieldOff();

        #else
        var asyncResult = Begin_MatchMaking_TurnShieldOff(null, null, clientIndex);
        return End_MatchMaking_TurnShieldOff(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_TurnShieldOff(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_MatchMaking_TurnShieldOff(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOff", TMessageType.Call, seqid_));
        MatchMaking_TurnShieldOff_args args = new MatchMaking_TurnShieldOff_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_TurnShieldOff()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_TurnShieldOff_result result = new MatchMaking_TurnShieldOff_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_TurnShieldOff failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_IncrementShieldOnFor(AsyncCallback callback, object state, int minutes, int clientIndex)
      {
        return send_MatchMaking_IncrementShieldOnFor(callback, state, minutes, clientIndex);
      }

      public string End_MatchMaking_IncrementShieldOnFor(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_IncrementShieldOnFor();
      }

      #endif

      /// <summary>
      /// Increases the shield on time by specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to increase the shield time for</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_IncrementShieldOnFor(int minutes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_IncrementShieldOnFor(minutes, clientIndex);
        return recv_MatchMaking_IncrementShieldOnFor();

        #else
        var asyncResult = Begin_MatchMaking_IncrementShieldOnFor(null, null, minutes, clientIndex);
        return End_MatchMaking_IncrementShieldOnFor(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_IncrementShieldOnFor(AsyncCallback callback, object state, int minutes, int clientIndex)
      #else
      public void send_MatchMaking_IncrementShieldOnFor(int minutes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_IncrementShieldOnFor", TMessageType.Call, seqid_));
        MatchMaking_IncrementShieldOnFor_args args = new MatchMaking_IncrementShieldOnFor_args();
        args.Minutes = minutes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_IncrementShieldOnFor()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_IncrementShieldOnFor_result result = new MatchMaking_IncrementShieldOnFor_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_IncrementShieldOnFor failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_GetShieldExpiry(AsyncCallback callback, object state, string playerId, int clientIndex)
      {
        return send_MatchMaking_GetShieldExpiry(callback, state, playerId, clientIndex);
      }

      public string End_MatchMaking_GetShieldExpiry(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_GetShieldExpiry();
      }

      #endif

      /// <summary>
      /// Gets the shield expiry for the given player id. Passing in a null player id
      /// will return the shield expiry for the current player. The value returned is
      /// the time in UTC millis when the shield will expire.
      /// </summary>
      /// <param name="playerId">The player id or use null to retrieve for the current player</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_GetShieldExpiry(string playerId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_GetShieldExpiry(playerId, clientIndex);
        return recv_MatchMaking_GetShieldExpiry();

        #else
        var asyncResult = Begin_MatchMaking_GetShieldExpiry(null, null, playerId, clientIndex);
        return End_MatchMaking_GetShieldExpiry(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_GetShieldExpiry(AsyncCallback callback, object state, string playerId, int clientIndex)
      #else
      public void send_MatchMaking_GetShieldExpiry(string playerId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_GetShieldExpiry", TMessageType.Call, seqid_));
        MatchMaking_GetShieldExpiry_args args = new MatchMaking_GetShieldExpiry_args();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_GetShieldExpiry()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_GetShieldExpiry_result result = new MatchMaking_GetShieldExpiry_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_GetShieldExpiry failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_FindPlayers(AsyncCallback callback, object state, long rangeDelta, long numMatches, int clientIndex)
      {
        return send_MatchMaking_FindPlayers(callback, state, rangeDelta, numMatches, clientIndex);
      }

      public string End_MatchMaking_FindPlayers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_FindPlayers();
      }

      #endif

      /// <summary>
      /// Finds matchmaking enabled players
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_FindPlayers(long rangeDelta, long numMatches, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_FindPlayers(rangeDelta, numMatches, clientIndex);
        return recv_MatchMaking_FindPlayers();

        #else
        var asyncResult = Begin_MatchMaking_FindPlayers(null, null, rangeDelta, numMatches, clientIndex);
        return End_MatchMaking_FindPlayers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_FindPlayers(AsyncCallback callback, object state, long rangeDelta, long numMatches, int clientIndex)
      #else
      public void send_MatchMaking_FindPlayers(long rangeDelta, long numMatches, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_FindPlayers", TMessageType.Call, seqid_));
        MatchMaking_FindPlayers_args args = new MatchMaking_FindPlayers_args();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_FindPlayers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_FindPlayers_result result = new MatchMaking_FindPlayers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_FindPlayersWithAttributes(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonAttributes, int clientIndex)
      {
        return send_MatchMaking_FindPlayersWithAttributes(callback, state, rangeDelta, numMatches, jsonAttributes, clientIndex);
      }

      public string End_MatchMaking_FindPlayersWithAttributes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_FindPlayersWithAttributes();
      }

      #endif

      /// <summary>
      /// Finds matchmaking enabled players with additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_FindPlayersWithAttributes(long rangeDelta, long numMatches, string jsonAttributes, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_FindPlayersWithAttributes(rangeDelta, numMatches, jsonAttributes, clientIndex);
        return recv_MatchMaking_FindPlayersWithAttributes();

        #else
        var asyncResult = Begin_MatchMaking_FindPlayersWithAttributes(null, null, rangeDelta, numMatches, jsonAttributes, clientIndex);
        return End_MatchMaking_FindPlayersWithAttributes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_FindPlayersWithAttributes(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonAttributes, int clientIndex)
      #else
      public void send_MatchMaking_FindPlayersWithAttributes(long rangeDelta, long numMatches, string jsonAttributes, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersWithAttributes", TMessageType.Call, seqid_));
        MatchMaking_FindPlayersWithAttributes_args args = new MatchMaking_FindPlayersWithAttributes_args();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_FindPlayersWithAttributes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_FindPlayersWithAttributes_result result = new MatchMaking_FindPlayersWithAttributes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayersWithAttributes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_FindPlayersUsingFilter(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex)
      {
        return send_MatchMaking_FindPlayersUsingFilter(callback, state, rangeDelta, numMatches, jsonExtraParms, clientIndex);
      }

      public string End_MatchMaking_FindPlayersUsingFilter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_FindPlayersUsingFilter();
      }

      #endif

      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_FindPlayersUsingFilter(long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_FindPlayersUsingFilter(rangeDelta, numMatches, jsonExtraParms, clientIndex);
        return recv_MatchMaking_FindPlayersUsingFilter();

        #else
        var asyncResult = Begin_MatchMaking_FindPlayersUsingFilter(null, null, rangeDelta, numMatches, jsonExtraParms, clientIndex);
        return End_MatchMaking_FindPlayersUsingFilter(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_FindPlayersUsingFilter(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex)
      #else
      public void send_MatchMaking_FindPlayersUsingFilter(long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersUsingFilter", TMessageType.Call, seqid_));
        MatchMaking_FindPlayersUsingFilter_args args = new MatchMaking_FindPlayersUsingFilter_args();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.JsonExtraParms = jsonExtraParms;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_FindPlayersUsingFilter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_FindPlayersUsingFilter_result result = new MatchMaking_FindPlayersUsingFilter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayersUsingFilter failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_FindPlayersWithAttributesUsingFilter(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex)
      {
        return send_MatchMaking_FindPlayersWithAttributesUsingFilter(callback, state, rangeDelta, numMatches, jsonAttributes, jsonExtraParms, clientIndex);
      }

      public string End_MatchMaking_FindPlayersWithAttributesUsingFilter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_FindPlayersWithAttributesUsingFilter();
      }

      #endif

      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// and additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      public string MatchMaking_FindPlayersWithAttributesUsingFilter(long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_FindPlayersWithAttributesUsingFilter(rangeDelta, numMatches, jsonAttributes, jsonExtraParms, clientIndex);
        return recv_MatchMaking_FindPlayersWithAttributesUsingFilter();

        #else
        var asyncResult = Begin_MatchMaking_FindPlayersWithAttributesUsingFilter(null, null, rangeDelta, numMatches, jsonAttributes, jsonExtraParms, clientIndex);
        return End_MatchMaking_FindPlayersWithAttributesUsingFilter(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_FindPlayersWithAttributesUsingFilter(AsyncCallback callback, object state, long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex)
      #else
      public void send_MatchMaking_FindPlayersWithAttributesUsingFilter(long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersWithAttributesUsingFilter", TMessageType.Call, seqid_));
        MatchMaking_FindPlayersWithAttributesUsingFilter_args args = new MatchMaking_FindPlayersWithAttributesUsingFilter_args();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.JsonAttributes = jsonAttributes;
        args.JsonExtraParms = jsonExtraParms;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_FindPlayersWithAttributesUsingFilter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_FindPlayersWithAttributesUsingFilter_result result = new MatchMaking_FindPlayersWithAttributesUsingFilter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayersWithAttributesUsingFilter failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_EnableMatchMaking(AsyncCallback callback, object state, int clientIndex)
      {
        return send_MatchMaking_EnableMatchMaking(callback, state, clientIndex);
      }

      public string End_MatchMaking_EnableMatchMaking(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_EnableMatchMaking();
      }

      #endif

      /// <summary>
      /// Enables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      public string MatchMaking_EnableMatchMaking(int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_EnableMatchMaking(clientIndex);
        return recv_MatchMaking_EnableMatchMaking();

        #else
        var asyncResult = Begin_MatchMaking_EnableMatchMaking(null, null, clientIndex);
        return End_MatchMaking_EnableMatchMaking(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_EnableMatchMaking(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_MatchMaking_EnableMatchMaking(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_EnableMatchMaking", TMessageType.Call, seqid_));
        MatchMaking_EnableMatchMaking_args args = new MatchMaking_EnableMatchMaking_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_EnableMatchMaking()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_EnableMatchMaking_result result = new MatchMaking_EnableMatchMaking_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_EnableMatchMaking failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MatchMaking_DisableMatchMaking(AsyncCallback callback, object state, int clientIndex)
      {
        return send_MatchMaking_DisableMatchMaking(callback, state, clientIndex);
      }

      public string End_MatchMaking_DisableMatchMaking(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MatchMaking_DisableMatchMaking();
      }

      #endif

      /// <summary>
      /// Disables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      public string MatchMaking_DisableMatchMaking(int clientIndex)
      {
        #if !SILVERLIGHT
        send_MatchMaking_DisableMatchMaking(clientIndex);
        return recv_MatchMaking_DisableMatchMaking();

        #else
        var asyncResult = Begin_MatchMaking_DisableMatchMaking(null, null, clientIndex);
        return End_MatchMaking_DisableMatchMaking(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MatchMaking_DisableMatchMaking(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_MatchMaking_DisableMatchMaking(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MatchMaking_DisableMatchMaking", TMessageType.Call, seqid_));
        MatchMaking_DisableMatchMaking_args args = new MatchMaking_DisableMatchMaking_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_MatchMaking_DisableMatchMaking()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MatchMaking_DisableMatchMaking_result result = new MatchMaking_DisableMatchMaking_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_DisableMatchMaking failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_OneWayMatch_StartMatch(AsyncCallback callback, object state, string otherPlayerId, long rangeDelta, int clientIndex)
      {
        return send_OneWayMatch_StartMatch(callback, state, otherPlayerId, rangeDelta, clientIndex);
      }

      public string End_OneWayMatch_StartMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_OneWayMatch_StartMatch();
      }

      #endif

      /// <summary>
      /// Starts a match
      /// </summary>
      /// <param name="otherPlayerId">The player to start a match with</param>
      /// <param name="rangeDelta">The range delta used for the initial match search</param>
      /// <param name="clientIndex"></param>
      public string OneWayMatch_StartMatch(string otherPlayerId, long rangeDelta, int clientIndex)
      {
        #if !SILVERLIGHT
        send_OneWayMatch_StartMatch(otherPlayerId, rangeDelta, clientIndex);
        return recv_OneWayMatch_StartMatch();

        #else
        var asyncResult = Begin_OneWayMatch_StartMatch(null, null, otherPlayerId, rangeDelta, clientIndex);
        return End_OneWayMatch_StartMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_OneWayMatch_StartMatch(AsyncCallback callback, object state, string otherPlayerId, long rangeDelta, int clientIndex)
      #else
      public void send_OneWayMatch_StartMatch(string otherPlayerId, long rangeDelta, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("OneWayMatch_StartMatch", TMessageType.Call, seqid_));
        OneWayMatch_StartMatch_args args = new OneWayMatch_StartMatch_args();
        args.OtherPlayerId = otherPlayerId;
        args.RangeDelta = rangeDelta;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_OneWayMatch_StartMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        OneWayMatch_StartMatch_result result = new OneWayMatch_StartMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OneWayMatch_StartMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_OneWayMatch_CancelMatch(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      {
        return send_OneWayMatch_CancelMatch(callback, state, playbackStreamId, clientIndex);
      }

      public string End_OneWayMatch_CancelMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_OneWayMatch_CancelMatch();
      }

      #endif

      /// <summary>
      /// Cancels a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the start match</param>
      /// <param name="clientIndex"></param>
      public string OneWayMatch_CancelMatch(string playbackStreamId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_OneWayMatch_CancelMatch(playbackStreamId, clientIndex);
        return recv_OneWayMatch_CancelMatch();

        #else
        var asyncResult = Begin_OneWayMatch_CancelMatch(null, null, playbackStreamId, clientIndex);
        return End_OneWayMatch_CancelMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_OneWayMatch_CancelMatch(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      #else
      public void send_OneWayMatch_CancelMatch(string playbackStreamId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("OneWayMatch_CancelMatch", TMessageType.Call, seqid_));
        OneWayMatch_CancelMatch_args args = new OneWayMatch_CancelMatch_args();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_OneWayMatch_CancelMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        OneWayMatch_CancelMatch_result result = new OneWayMatch_CancelMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OneWayMatch_CancelMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_OneWayMatch_CompleteMatch(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      {
        return send_OneWayMatch_CompleteMatch(callback, state, playbackStreamId, clientIndex);
      }

      public string End_OneWayMatch_CompleteMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_OneWayMatch_CompleteMatch();
      }

      #endif

      /// <summary>
      /// Completes a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the initial start match</param>
      /// <param name="clientIndex"></param>
      public string OneWayMatch_CompleteMatch(string playbackStreamId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_OneWayMatch_CompleteMatch(playbackStreamId, clientIndex);
        return recv_OneWayMatch_CompleteMatch();

        #else
        var asyncResult = Begin_OneWayMatch_CompleteMatch(null, null, playbackStreamId, clientIndex);
        return End_OneWayMatch_CompleteMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_OneWayMatch_CompleteMatch(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      #else
      public void send_OneWayMatch_CompleteMatch(string playbackStreamId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("OneWayMatch_CompleteMatch", TMessageType.Call, seqid_));
        OneWayMatch_CompleteMatch_args args = new OneWayMatch_CompleteMatch_args();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_OneWayMatch_CompleteMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        OneWayMatch_CompleteMatch_result result = new OneWayMatch_CompleteMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OneWayMatch_CompleteMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaybackStream_StartStream(AsyncCallback callback, object state, string targetPlayerId, bool includeSharedData, int clientIndex)
      {
        return send_PlaybackStream_StartStream(callback, state, targetPlayerId, includeSharedData, clientIndex);
      }

      public string End_PlaybackStream_StartStream(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaybackStream_StartStream();
      }

      #endif

      /// <summary>
      /// Starts a stream
      /// </summary>
      /// <param name="targetPlayerId">The player to start a stream with</param>
      /// <param name="includeSharedData">Whether to include shared data in the stream</param>
      /// <param name="clientIndex"></param>
      public string PlaybackStream_StartStream(string targetPlayerId, bool includeSharedData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlaybackStream_StartStream(targetPlayerId, includeSharedData, clientIndex);
        return recv_PlaybackStream_StartStream();

        #else
        var asyncResult = Begin_PlaybackStream_StartStream(null, null, targetPlayerId, includeSharedData, clientIndex);
        return End_PlaybackStream_StartStream(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaybackStream_StartStream(AsyncCallback callback, object state, string targetPlayerId, bool includeSharedData, int clientIndex)
      #else
      public void send_PlaybackStream_StartStream(string targetPlayerId, bool includeSharedData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaybackStream_StartStream", TMessageType.Call, seqid_));
        PlaybackStream_StartStream_args args = new PlaybackStream_StartStream_args();
        args.TargetPlayerId = targetPlayerId;
        args.IncludeSharedData = includeSharedData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaybackStream_StartStream()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaybackStream_StartStream_result result = new PlaybackStream_StartStream_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_StartStream failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaybackStream_ReadStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      {
        return send_PlaybackStream_ReadStream(callback, state, playbackStreamId, clientIndex);
      }

      public string End_PlaybackStream_ReadStream(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaybackStream_ReadStream();
      }

      #endif

      /// <summary>
      /// Reads a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      public string PlaybackStream_ReadStream(string playbackStreamId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlaybackStream_ReadStream(playbackStreamId, clientIndex);
        return recv_PlaybackStream_ReadStream();

        #else
        var asyncResult = Begin_PlaybackStream_ReadStream(null, null, playbackStreamId, clientIndex);
        return End_PlaybackStream_ReadStream(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaybackStream_ReadStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      #else
      public void send_PlaybackStream_ReadStream(string playbackStreamId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaybackStream_ReadStream", TMessageType.Call, seqid_));
        PlaybackStream_ReadStream_args args = new PlaybackStream_ReadStream_args();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaybackStream_ReadStream()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaybackStream_ReadStream_result result = new PlaybackStream_ReadStream_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_ReadStream failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaybackStream_EndStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      {
        return send_PlaybackStream_EndStream(callback, state, playbackStreamId, clientIndex);
      }

      public string End_PlaybackStream_EndStream(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaybackStream_EndStream();
      }

      #endif

      /// <summary>
      /// Ends a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      public string PlaybackStream_EndStream(string playbackStreamId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlaybackStream_EndStream(playbackStreamId, clientIndex);
        return recv_PlaybackStream_EndStream();

        #else
        var asyncResult = Begin_PlaybackStream_EndStream(null, null, playbackStreamId, clientIndex);
        return End_PlaybackStream_EndStream(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaybackStream_EndStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      #else
      public void send_PlaybackStream_EndStream(string playbackStreamId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaybackStream_EndStream", TMessageType.Call, seqid_));
        PlaybackStream_EndStream_args args = new PlaybackStream_EndStream_args();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaybackStream_EndStream()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaybackStream_EndStream_result result = new PlaybackStream_EndStream_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_EndStream failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaybackStream_DeleteStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      {
        return send_PlaybackStream_DeleteStream(callback, state, playbackStreamId, clientIndex);
      }

      public string End_PlaybackStream_DeleteStream(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaybackStream_DeleteStream();
      }

      #endif

      /// <summary>
      /// Deletes a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      public string PlaybackStream_DeleteStream(string playbackStreamId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlaybackStream_DeleteStream(playbackStreamId, clientIndex);
        return recv_PlaybackStream_DeleteStream();

        #else
        var asyncResult = Begin_PlaybackStream_DeleteStream(null, null, playbackStreamId, clientIndex);
        return End_PlaybackStream_DeleteStream(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaybackStream_DeleteStream(AsyncCallback callback, object state, string playbackStreamId, int clientIndex)
      #else
      public void send_PlaybackStream_DeleteStream(string playbackStreamId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaybackStream_DeleteStream", TMessageType.Call, seqid_));
        PlaybackStream_DeleteStream_args args = new PlaybackStream_DeleteStream_args();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaybackStream_DeleteStream()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaybackStream_DeleteStream_result result = new PlaybackStream_DeleteStream_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_DeleteStream failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaybackStream_AddEvent(AsyncCallback callback, object state, string playbackStreamId, string eventData, string summary, int clientIndex)
      {
        return send_PlaybackStream_AddEvent(callback, state, playbackStreamId, eventData, summary, clientIndex);
      }

      public string End_PlaybackStream_AddEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaybackStream_AddEvent();
      }

      #endif

      /// <summary>
      /// Adds a stream event
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="eventData">Describes the event</param>
      /// <param name="summary">Current summary data as of this event</param>
      /// <param name="clientIndex"></param>
      public string PlaybackStream_AddEvent(string playbackStreamId, string eventData, string summary, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlaybackStream_AddEvent(playbackStreamId, eventData, summary, clientIndex);
        return recv_PlaybackStream_AddEvent();

        #else
        var asyncResult = Begin_PlaybackStream_AddEvent(null, null, playbackStreamId, eventData, summary, clientIndex);
        return End_PlaybackStream_AddEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaybackStream_AddEvent(AsyncCallback callback, object state, string playbackStreamId, string eventData, string summary, int clientIndex)
      #else
      public void send_PlaybackStream_AddEvent(string playbackStreamId, string eventData, string summary, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaybackStream_AddEvent", TMessageType.Call, seqid_));
        PlaybackStream_AddEvent_args args = new PlaybackStream_AddEvent_args();
        args.PlaybackStreamId = playbackStreamId;
        args.EventData = eventData;
        args.Summary = summary;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaybackStream_AddEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaybackStream_AddEvent_result result = new PlaybackStream_AddEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_AddEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaybackStream_GetRecentStreamsForInitiatingPlayer(AsyncCallback callback, object state, string initiatingPlayerId, int maxNumStreams, int clientIndex)
      {
        return send_PlaybackStream_GetRecentStreamsForInitiatingPlayer(callback, state, initiatingPlayerId, maxNumStreams, clientIndex);
      }

      public string End_PlaybackStream_GetRecentStreamsForInitiatingPlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaybackStream_GetRecentStreamsForInitiatingPlayer();
      }

      #endif

      /// <summary>
      /// Gets recent streams for initiating player
      /// </summary>
      /// <param name="initiatingPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      public string PlaybackStream_GetRecentStreamsForInitiatingPlayer(string initiatingPlayerId, int maxNumStreams, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlaybackStream_GetRecentStreamsForInitiatingPlayer(initiatingPlayerId, maxNumStreams, clientIndex);
        return recv_PlaybackStream_GetRecentStreamsForInitiatingPlayer();

        #else
        var asyncResult = Begin_PlaybackStream_GetRecentStreamsForInitiatingPlayer(null, null, initiatingPlayerId, maxNumStreams, clientIndex);
        return End_PlaybackStream_GetRecentStreamsForInitiatingPlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaybackStream_GetRecentStreamsForInitiatingPlayer(AsyncCallback callback, object state, string initiatingPlayerId, int maxNumStreams, int clientIndex)
      #else
      public void send_PlaybackStream_GetRecentStreamsForInitiatingPlayer(string initiatingPlayerId, int maxNumStreams, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaybackStream_GetRecentStreamsForInitiatingPlayer", TMessageType.Call, seqid_));
        PlaybackStream_GetRecentStreamsForInitiatingPlayer_args args = new PlaybackStream_GetRecentStreamsForInitiatingPlayer_args();
        args.InitiatingPlayerId = initiatingPlayerId;
        args.MaxNumStreams = maxNumStreams;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaybackStream_GetRecentStreamsForInitiatingPlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaybackStream_GetRecentStreamsForInitiatingPlayer_result result = new PlaybackStream_GetRecentStreamsForInitiatingPlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_GetRecentStreamsForInitiatingPlayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaybackStream_GetRecentStreamsForTargetPlayer(AsyncCallback callback, object state, string targetPlayerId, int maxNumStreams, int clientIndex)
      {
        return send_PlaybackStream_GetRecentStreamsForTargetPlayer(callback, state, targetPlayerId, maxNumStreams, clientIndex);
      }

      public string End_PlaybackStream_GetRecentStreamsForTargetPlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaybackStream_GetRecentStreamsForTargetPlayer();
      }

      #endif

      /// <summary>
      /// Gets recent streams for target player
      /// </summary>
      /// <param name="targetPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      public string PlaybackStream_GetRecentStreamsForTargetPlayer(string targetPlayerId, int maxNumStreams, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlaybackStream_GetRecentStreamsForTargetPlayer(targetPlayerId, maxNumStreams, clientIndex);
        return recv_PlaybackStream_GetRecentStreamsForTargetPlayer();

        #else
        var asyncResult = Begin_PlaybackStream_GetRecentStreamsForTargetPlayer(null, null, targetPlayerId, maxNumStreams, clientIndex);
        return End_PlaybackStream_GetRecentStreamsForTargetPlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaybackStream_GetRecentStreamsForTargetPlayer(AsyncCallback callback, object state, string targetPlayerId, int maxNumStreams, int clientIndex)
      #else
      public void send_PlaybackStream_GetRecentStreamsForTargetPlayer(string targetPlayerId, int maxNumStreams, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaybackStream_GetRecentStreamsForTargetPlayer", TMessageType.Call, seqid_));
        PlaybackStream_GetRecentStreamsForTargetPlayer_args args = new PlaybackStream_GetRecentStreamsForTargetPlayer_args();
        args.TargetPlayerId = targetPlayerId;
        args.MaxNumStreams = maxNumStreams;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaybackStream_GetRecentStreamsForTargetPlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaybackStream_GetRecentStreamsForTargetPlayer_result result = new PlaybackStream_GetRecentStreamsForTargetPlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_GetRecentStreamsForTargetPlayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_ReadUserState(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerState_ReadUserState(callback, state, clientIndex);
      }

      public string End_PlayerState_ReadUserState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_ReadUserState();
      }

      #endif

      /// <summary>
      /// Read the state of the currently logged in user.
      /// This method returns a JSON object describing most of the
      /// player's data: entities, statistics, level, currency.
      /// Apps will typically call this method after authenticating to get an
      /// up-to-date view of the user's data.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerState_ReadUserState(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_ReadUserState(clientIndex);
        return recv_PlayerState_ReadUserState();

        #else
        var asyncResult = Begin_PlayerState_ReadUserState(null, null, clientIndex);
        return End_PlayerState_ReadUserState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_ReadUserState(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerState_ReadUserState(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_ReadUserState", TMessageType.Call, seqid_));
        PlayerState_ReadUserState_args args = new PlayerState_ReadUserState_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_ReadUserState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_ReadUserState_result result = new PlayerState_ReadUserState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_ReadUserState failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_DeleteUser(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerState_DeleteUser(callback, state, clientIndex);
      }

      public string End_PlayerState_DeleteUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_DeleteUser();
      }

      #endif

      /// <summary>
      /// Completely deletes the user record and all data fully owned
      /// by the user. After calling this method, the user will need
      /// to re-authenticate and create a new profile.
      /// This is mostly used for debugging/qa.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerState_DeleteUser(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_DeleteUser(clientIndex);
        return recv_PlayerState_DeleteUser();

        #else
        var asyncResult = Begin_PlayerState_DeleteUser(null, null, clientIndex);
        return End_PlayerState_DeleteUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_DeleteUser(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerState_DeleteUser(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_DeleteUser", TMessageType.Call, seqid_));
        PlayerState_DeleteUser_args args = new PlayerState_DeleteUser_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_DeleteUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_DeleteUser_result result = new PlayerState_DeleteUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_DeleteUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_ResetUser(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerState_ResetUser(callback, state, clientIndex);
      }

      public string End_PlayerState_ResetUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_ResetUser();
      }

      #endif

      /// <summary>
      /// This method will delete *most* data for the currently logged in user.
      /// Data which is not deleted includes: currency, credentials, and
      /// purchase transactions. ResetUser is different from DeleteUser in that
      /// the player record will continue to exist after the reset (so the user
      /// does not need to re-authenticate).
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerState_ResetUser(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_ResetUser(clientIndex);
        return recv_PlayerState_ResetUser();

        #else
        var asyncResult = Begin_PlayerState_ResetUser(null, null, clientIndex);
        return End_PlayerState_ResetUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_ResetUser(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerState_ResetUser(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_ResetUser", TMessageType.Call, seqid_));
        PlayerState_ResetUser_args args = new PlayerState_ResetUser_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_ResetUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_ResetUser_result result = new PlayerState_ResetUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_ResetUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_Logout(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerState_Logout(callback, state, clientIndex);
      }

      public string End_PlayerState_Logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_Logout();
      }

      #endif

      /// <summary>
      /// Logs user out of server.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerState_Logout(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_Logout(clientIndex);
        return recv_PlayerState_Logout();

        #else
        var asyncResult = Begin_PlayerState_Logout(null, null, clientIndex);
        return End_PlayerState_Logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_Logout(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerState_Logout(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_Logout", TMessageType.Call, seqid_));
        PlayerState_Logout_args args = new PlayerState_Logout_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_Logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_Logout_result result = new PlayerState_Logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_Logout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_UpdateUserName(AsyncCallback callback, object state, string userName, int clientIndex)
      {
        return send_PlayerState_UpdateUserName(callback, state, userName, clientIndex);
      }

      public string End_PlayerState_UpdateUserName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_UpdateUserName();
      }

      #endif

      /// <summary>
      /// Sets the user name.
      /// </summary>
      /// <param name="userName">The name of the user</param>
      /// <param name="clientIndex"></param>
      public string PlayerState_UpdateUserName(string userName, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_UpdateUserName(userName, clientIndex);
        return recv_PlayerState_UpdateUserName();

        #else
        var asyncResult = Begin_PlayerState_UpdateUserName(null, null, userName, clientIndex);
        return End_PlayerState_UpdateUserName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_UpdateUserName(AsyncCallback callback, object state, string userName, int clientIndex)
      #else
      public void send_PlayerState_UpdateUserName(string userName, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_UpdateUserName", TMessageType.Call, seqid_));
        PlayerState_UpdateUserName_args args = new PlayerState_UpdateUserName_args();
        args.UserName = userName;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_UpdateUserName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_UpdateUserName_result result = new PlayerState_UpdateUserName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateUserName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_UpdateSummaryFriendData(AsyncCallback callback, object state, string jsonSummaryData, int clientIndex)
      {
        return send_PlayerState_UpdateSummaryFriendData(callback, state, jsonSummaryData, clientIndex);
      }

      public string End_PlayerState_UpdateSummaryFriendData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_UpdateSummaryFriendData();
      }

      #endif

      /// <summary>
      /// Updates the "friend summary data" associated with the logged in user.
      /// Some operations will return this summary data. For instance the social
      /// leaderboards will return the player's score in the leaderboard along
      /// with the friend summary data. Generally this data is used to provide
      /// a quick overview of the player without requiring a separate API call
      /// to read their public stats or entity data.
      /// </summary>
      /// <param name="jsonSummaryData">A JSON string defining the summary data.For example:{  "xp":123,  "level":12,  "highScore":45123}</param>
      /// <param name="clientIndex"></param>
      public string PlayerState_UpdateSummaryFriendData(string jsonSummaryData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_UpdateSummaryFriendData(jsonSummaryData, clientIndex);
        return recv_PlayerState_UpdateSummaryFriendData();

        #else
        var asyncResult = Begin_PlayerState_UpdateSummaryFriendData(null, null, jsonSummaryData, clientIndex);
        return End_PlayerState_UpdateSummaryFriendData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_UpdateSummaryFriendData(AsyncCallback callback, object state, string jsonSummaryData, int clientIndex)
      #else
      public void send_PlayerState_UpdateSummaryFriendData(string jsonSummaryData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_UpdateSummaryFriendData", TMessageType.Call, seqid_));
        PlayerState_UpdateSummaryFriendData_args args = new PlayerState_UpdateSummaryFriendData_args();
        args.JsonSummaryData = jsonSummaryData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_UpdateSummaryFriendData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_UpdateSummaryFriendData_result result = new PlayerState_UpdateSummaryFriendData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateSummaryFriendData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_GetAttributes(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerState_GetAttributes(callback, state, clientIndex);
      }

      public string End_PlayerState_GetAttributes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_GetAttributes();
      }

      #endif

      /// <summary>
      /// Retrieve the user's attributes.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerState_GetAttributes(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_GetAttributes(clientIndex);
        return recv_PlayerState_GetAttributes();

        #else
        var asyncResult = Begin_PlayerState_GetAttributes(null, null, clientIndex);
        return End_PlayerState_GetAttributes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_GetAttributes(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerState_GetAttributes(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_GetAttributes", TMessageType.Call, seqid_));
        PlayerState_GetAttributes_args args = new PlayerState_GetAttributes_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_GetAttributes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_GetAttributes_result result = new PlayerState_GetAttributes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_GetAttributes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_UpdateAttributes(AsyncCallback callback, object state, string jsonAttributes, bool wipeExisting, int clientIndex)
      {
        return send_PlayerState_UpdateAttributes(callback, state, jsonAttributes, wipeExisting, clientIndex);
      }

      public string End_PlayerState_UpdateAttributes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_UpdateAttributes();
      }

      #endif

      /// <summary>
      /// Update user's attributes.
      /// </summary>
      /// <param name="jsonAttributes">Single layer json string that is a set of key-value pairs</param>
      /// <param name="wipeExisting">Whether to wipe existing attributes prior to update.</param>
      /// <param name="clientIndex"></param>
      public string PlayerState_UpdateAttributes(string jsonAttributes, bool wipeExisting, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_UpdateAttributes(jsonAttributes, wipeExisting, clientIndex);
        return recv_PlayerState_UpdateAttributes();

        #else
        var asyncResult = Begin_PlayerState_UpdateAttributes(null, null, jsonAttributes, wipeExisting, clientIndex);
        return End_PlayerState_UpdateAttributes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_UpdateAttributes(AsyncCallback callback, object state, string jsonAttributes, bool wipeExisting, int clientIndex)
      #else
      public void send_PlayerState_UpdateAttributes(string jsonAttributes, bool wipeExisting, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_UpdateAttributes", TMessageType.Call, seqid_));
        PlayerState_UpdateAttributes_args args = new PlayerState_UpdateAttributes_args();
        args.JsonAttributes = jsonAttributes;
        args.WipeExisting = wipeExisting;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_UpdateAttributes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_UpdateAttributes_result result = new PlayerState_UpdateAttributes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateAttributes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_RemoveAttributes(AsyncCallback callback, object state, List<string> attributeNames, int clientIndex)
      {
        return send_PlayerState_RemoveAttributes(callback, state, attributeNames, clientIndex);
      }

      public string End_PlayerState_RemoveAttributes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_RemoveAttributes();
      }

      #endif

      /// <summary>
      /// Remove user's attributes.
      /// </summary>
      /// <param name="attributeNames">List of attribute names.</param>
      /// <param name="clientIndex"></param>
      public string PlayerState_RemoveAttributes(List<string> attributeNames, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_RemoveAttributes(attributeNames, clientIndex);
        return recv_PlayerState_RemoveAttributes();

        #else
        var asyncResult = Begin_PlayerState_RemoveAttributes(null, null, attributeNames, clientIndex);
        return End_PlayerState_RemoveAttributes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_RemoveAttributes(AsyncCallback callback, object state, List<string> attributeNames, int clientIndex)
      #else
      public void send_PlayerState_RemoveAttributes(List<string> attributeNames, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_RemoveAttributes", TMessageType.Call, seqid_));
        PlayerState_RemoveAttributes_args args = new PlayerState_RemoveAttributes_args();
        args.AttributeNames = attributeNames;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_RemoveAttributes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_RemoveAttributes_result result = new PlayerState_RemoveAttributes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_RemoveAttributes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_UpdateUserPictureUrl(AsyncCallback callback, object state, string pictureUrl, int clientIndex)
      {
        return send_PlayerState_UpdateUserPictureUrl(callback, state, pictureUrl, clientIndex);
      }

      public string End_PlayerState_UpdateUserPictureUrl(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_UpdateUserPictureUrl();
      }

      #endif

      /// <summary>
      /// Updates player's picture URL.
      /// </summary>
      /// <param name="pictureUrl">URL to apply.</param>
      /// <param name="clientIndex"></param>
      public string PlayerState_UpdateUserPictureUrl(string pictureUrl, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_UpdateUserPictureUrl(pictureUrl, clientIndex);
        return recv_PlayerState_UpdateUserPictureUrl();

        #else
        var asyncResult = Begin_PlayerState_UpdateUserPictureUrl(null, null, pictureUrl, clientIndex);
        return End_PlayerState_UpdateUserPictureUrl(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_UpdateUserPictureUrl(AsyncCallback callback, object state, string pictureUrl, int clientIndex)
      #else
      public void send_PlayerState_UpdateUserPictureUrl(string pictureUrl, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_UpdateUserPictureUrl", TMessageType.Call, seqid_));
        PlayerState_UpdateUserPictureUrl_args args = new PlayerState_UpdateUserPictureUrl_args();
        args.PictureUrl = pictureUrl;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_UpdateUserPictureUrl()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_UpdateUserPictureUrl_result result = new PlayerState_UpdateUserPictureUrl_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateUserPictureUrl failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerState_UpdateContactEmail(AsyncCallback callback, object state, string contactEmail, int clientIndex)
      {
        return send_PlayerState_UpdateContactEmail(callback, state, contactEmail, clientIndex);
      }

      public string End_PlayerState_UpdateContactEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerState_UpdateContactEmail();
      }

      #endif

      /// <summary>
      /// Update the user's contact email.
      /// Note this is unrelated to email authentication.
      /// </summary>
      /// <param name="contactEmail">Updated email</param>
      /// <param name="clientIndex"></param>
      public string PlayerState_UpdateContactEmail(string contactEmail, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerState_UpdateContactEmail(contactEmail, clientIndex);
        return recv_PlayerState_UpdateContactEmail();

        #else
        var asyncResult = Begin_PlayerState_UpdateContactEmail(null, null, contactEmail, clientIndex);
        return End_PlayerState_UpdateContactEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerState_UpdateContactEmail(AsyncCallback callback, object state, string contactEmail, int clientIndex)
      #else
      public void send_PlayerState_UpdateContactEmail(string contactEmail, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerState_UpdateContactEmail", TMessageType.Call, seqid_));
        PlayerState_UpdateContactEmail_args args = new PlayerState_UpdateContactEmail_args();
        args.ContactEmail = contactEmail;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerState_UpdateContactEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerState_UpdateContactEmail_result result = new PlayerState_UpdateContactEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateContactEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_ReadAllUserStats(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerStatistics_ReadAllUserStats(callback, state, clientIndex);
      }

      public string End_PlayerStatistics_ReadAllUserStats(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_ReadAllUserStats();
      }

      #endif

      /// <summary>
      /// Read all available user statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_ReadAllUserStats(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_ReadAllUserStats(clientIndex);
        return recv_PlayerStatistics_ReadAllUserStats();

        #else
        var asyncResult = Begin_PlayerStatistics_ReadAllUserStats(null, null, clientIndex);
        return End_PlayerStatistics_ReadAllUserStats(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_ReadAllUserStats(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerStatistics_ReadAllUserStats(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_ReadAllUserStats", TMessageType.Call, seqid_));
        PlayerStatistics_ReadAllUserStats_args args = new PlayerStatistics_ReadAllUserStats_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_ReadAllUserStats()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_ReadAllUserStats_result result = new PlayerStatistics_ReadAllUserStats_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ReadAllUserStats failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_ReadUserStatsSubset(AsyncCallback callback, object state, List<string> playerStats, int clientIndex)
      {
        return send_PlayerStatistics_ReadUserStatsSubset(callback, state, playerStats, clientIndex);
      }

      public string End_PlayerStatistics_ReadUserStatsSubset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_ReadUserStatsSubset();
      }

      #endif

      /// <summary>
      /// Reads a subset of user statistics as defined by the input JSON.
      /// </summary>
      /// <param name="playerStats"></param>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_ReadUserStatsSubset(List<string> playerStats, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_ReadUserStatsSubset(playerStats, clientIndex);
        return recv_PlayerStatistics_ReadUserStatsSubset();

        #else
        var asyncResult = Begin_PlayerStatistics_ReadUserStatsSubset(null, null, playerStats, clientIndex);
        return End_PlayerStatistics_ReadUserStatsSubset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_ReadUserStatsSubset(AsyncCallback callback, object state, List<string> playerStats, int clientIndex)
      #else
      public void send_PlayerStatistics_ReadUserStatsSubset(List<string> playerStats, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_ReadUserStatsSubset", TMessageType.Call, seqid_));
        PlayerStatistics_ReadUserStatsSubset_args args = new PlayerStatistics_ReadUserStatsSubset_args();
        args.PlayerStats = playerStats;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_ReadUserStatsSubset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_ReadUserStatsSubset_result result = new PlayerStatistics_ReadUserStatsSubset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ReadUserStatsSubset failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_ReadUserStatsForCategory(AsyncCallback callback, object state, string category, int clientIndex)
      {
        return send_PlayerStatistics_ReadUserStatsForCategory(callback, state, category, clientIndex);
      }

      public string End_PlayerStatistics_ReadUserStatsForCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_ReadUserStatsForCategory();
      }

      #endif

      /// <summary>
      /// Method retrieves the user statistics for the given category.
      /// </summary>
      /// <param name="category">The user statistics category</param>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_ReadUserStatsForCategory(string category, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_ReadUserStatsForCategory(category, clientIndex);
        return recv_PlayerStatistics_ReadUserStatsForCategory();

        #else
        var asyncResult = Begin_PlayerStatistics_ReadUserStatsForCategory(null, null, category, clientIndex);
        return End_PlayerStatistics_ReadUserStatsForCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_ReadUserStatsForCategory(AsyncCallback callback, object state, string category, int clientIndex)
      #else
      public void send_PlayerStatistics_ReadUserStatsForCategory(string category, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_ReadUserStatsForCategory", TMessageType.Call, seqid_));
        PlayerStatistics_ReadUserStatsForCategory_args args = new PlayerStatistics_ReadUserStatsForCategory_args();
        args.Category = category;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_ReadUserStatsForCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_ReadUserStatsForCategory_result result = new PlayerStatistics_ReadUserStatsForCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ReadUserStatsForCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_ResetAllUserStats(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerStatistics_ResetAllUserStats(callback, state, clientIndex);
      }

      public string End_PlayerStatistics_ResetAllUserStats(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_ResetAllUserStats();
      }

      #endif

      /// <summary>
      /// Reset all of the statistics for this user back to their initial value.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_ResetAllUserStats(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_ResetAllUserStats(clientIndex);
        return recv_PlayerStatistics_ResetAllUserStats();

        #else
        var asyncResult = Begin_PlayerStatistics_ResetAllUserStats(null, null, clientIndex);
        return End_PlayerStatistics_ResetAllUserStats(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_ResetAllUserStats(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerStatistics_ResetAllUserStats(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_ResetAllUserStats", TMessageType.Call, seqid_));
        PlayerStatistics_ResetAllUserStats_args args = new PlayerStatistics_ResetAllUserStats_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_ResetAllUserStats()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_ResetAllUserStats_result result = new PlayerStatistics_ResetAllUserStats_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ResetAllUserStats failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_IncrementUserStats_SSFO(AsyncCallback callback, object state, string jsonData, int clientIndex)
      {
        return send_PlayerStatistics_IncrementUserStats_SSFO(callback, state, jsonData, clientIndex);
      }

      public string End_PlayerStatistics_IncrementUserStats_SSFO(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_IncrementUserStats_SSFO();
      }

      #endif

      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_IncrementUserStats_SSFO(string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_IncrementUserStats_SSFO(jsonData, clientIndex);
        return recv_PlayerStatistics_IncrementUserStats_SSFO();

        #else
        var asyncResult = Begin_PlayerStatistics_IncrementUserStats_SSFO(null, null, jsonData, clientIndex);
        return End_PlayerStatistics_IncrementUserStats_SSFO(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_IncrementUserStats_SSFO(AsyncCallback callback, object state, string jsonData, int clientIndex)
      #else
      public void send_PlayerStatistics_IncrementUserStats_SSFO(string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementUserStats_SSFO", TMessageType.Call, seqid_));
        PlayerStatistics_IncrementUserStats_SSFO_args args = new PlayerStatistics_IncrementUserStats_SSFO_args();
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_IncrementUserStats_SSFO()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_IncrementUserStats_SSFO_result result = new PlayerStatistics_IncrementUserStats_SSFO_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_IncrementUserStats_SSFO failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_IncrementUserStats_DSFO(AsyncCallback callback, object state, Dictionary<string, string> dictData, int clientIndex)
      {
        return send_PlayerStatistics_IncrementUserStats_DSFO(callback, state, dictData, clientIndex);
      }

      public string End_PlayerStatistics_IncrementUserStats_DSFO(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_IncrementUserStats_DSFO();
      }

      #endif

      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="dictData">Stats name and their increments:{ {"stat1", 10}, {"stat1", -5}}would increment stat1 by 10 and decrement stat2 by 5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_IncrementUserStats_DSFO(Dictionary<string, string> dictData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_IncrementUserStats_DSFO(dictData, clientIndex);
        return recv_PlayerStatistics_IncrementUserStats_DSFO();

        #else
        var asyncResult = Begin_PlayerStatistics_IncrementUserStats_DSFO(null, null, dictData, clientIndex);
        return End_PlayerStatistics_IncrementUserStats_DSFO(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_IncrementUserStats_DSFO(AsyncCallback callback, object state, Dictionary<string, string> dictData, int clientIndex)
      #else
      public void send_PlayerStatistics_IncrementUserStats_DSFO(Dictionary<string, string> dictData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementUserStats_DSFO", TMessageType.Call, seqid_));
        PlayerStatistics_IncrementUserStats_DSFO_args args = new PlayerStatistics_IncrementUserStats_DSFO_args();
        args.DictData = dictData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_IncrementUserStats_DSFO()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_IncrementUserStats_DSFO_result result = new PlayerStatistics_IncrementUserStats_DSFO_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_IncrementUserStats_DSFO failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_ProcessStatistics(AsyncCallback callback, object state, Dictionary<string, string> statisticsData, int clientIndex)
      {
        return send_PlayerStatistics_ProcessStatistics(callback, state, statisticsData, clientIndex);
      }

      public string End_PlayerStatistics_ProcessStatistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_ProcessStatistics();
      }

      #endif

      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_ProcessStatistics(Dictionary<string, string> statisticsData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_ProcessStatistics(statisticsData, clientIndex);
        return recv_PlayerStatistics_ProcessStatistics();

        #else
        var asyncResult = Begin_PlayerStatistics_ProcessStatistics(null, null, statisticsData, clientIndex);
        return End_PlayerStatistics_ProcessStatistics(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_ProcessStatistics(AsyncCallback callback, object state, Dictionary<string, string> statisticsData, int clientIndex)
      #else
      public void send_PlayerStatistics_ProcessStatistics(Dictionary<string, string> statisticsData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_ProcessStatistics", TMessageType.Call, seqid_));
        PlayerStatistics_ProcessStatistics_args args = new PlayerStatistics_ProcessStatistics_args();
        args.StatisticsData = statisticsData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_ProcessStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_ProcessStatistics_result result = new PlayerStatistics_ProcessStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ProcessStatistics failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_GetNextExperienceLevel(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PlayerStatistics_GetNextExperienceLevel(callback, state, clientIndex);
      }

      public string End_PlayerStatistics_GetNextExperienceLevel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_GetNextExperienceLevel();
      }

      #endif

      /// <summary>
      /// Returns JSON representing the next experience level for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_GetNextExperienceLevel(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_GetNextExperienceLevel(clientIndex);
        return recv_PlayerStatistics_GetNextExperienceLevel();

        #else
        var asyncResult = Begin_PlayerStatistics_GetNextExperienceLevel(null, null, clientIndex);
        return End_PlayerStatistics_GetNextExperienceLevel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_GetNextExperienceLevel(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PlayerStatistics_GetNextExperienceLevel(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_GetNextExperienceLevel", TMessageType.Call, seqid_));
        PlayerStatistics_GetNextExperienceLevel_args args = new PlayerStatistics_GetNextExperienceLevel_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_GetNextExperienceLevel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_GetNextExperienceLevel_result result = new PlayerStatistics_GetNextExperienceLevel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_GetNextExperienceLevel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_IncrementExperiencePoints(AsyncCallback callback, object state, int xpValue, int clientIndex)
      {
        return send_PlayerStatistics_IncrementExperiencePoints(callback, state, xpValue, clientIndex);
      }

      public string End_PlayerStatistics_IncrementExperiencePoints(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_IncrementExperiencePoints();
      }

      #endif

      /// <summary>
      /// Increments the user's experience. If the user goes up a level,
      /// the new level details will be returned along with a list of rewards.
      /// </summary>
      /// <param name="xpValue">The amount to increase the user's experience by</param>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_IncrementExperiencePoints(int xpValue, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_IncrementExperiencePoints(xpValue, clientIndex);
        return recv_PlayerStatistics_IncrementExperiencePoints();

        #else
        var asyncResult = Begin_PlayerStatistics_IncrementExperiencePoints(null, null, xpValue, clientIndex);
        return End_PlayerStatistics_IncrementExperiencePoints(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_IncrementExperiencePoints(AsyncCallback callback, object state, int xpValue, int clientIndex)
      #else
      public void send_PlayerStatistics_IncrementExperiencePoints(int xpValue, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementExperiencePoints", TMessageType.Call, seqid_));
        PlayerStatistics_IncrementExperiencePoints_args args = new PlayerStatistics_IncrementExperiencePoints_args();
        args.XpValue = xpValue;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_IncrementExperiencePoints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_IncrementExperiencePoints_result result = new PlayerStatistics_IncrementExperiencePoints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_IncrementExperiencePoints failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatistics_SetExperiencePoints(AsyncCallback callback, object state, int xpValue, int clientIndex)
      {
        return send_PlayerStatistics_SetExperiencePoints(callback, state, xpValue, clientIndex);
      }

      public string End_PlayerStatistics_SetExperiencePoints(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatistics_SetExperiencePoints();
      }

      #endif

      /// <summary>
      /// Sets the user's experience to an absolute value. Note that this
      /// is simply a set and will not reward the user if their level changes
      /// as a result.
      /// </summary>
      /// <param name="xpValue">The amount to set the the player's experience to</param>
      /// <param name="clientIndex"></param>
      public string PlayerStatistics_SetExperiencePoints(int xpValue, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatistics_SetExperiencePoints(xpValue, clientIndex);
        return recv_PlayerStatistics_SetExperiencePoints();

        #else
        var asyncResult = Begin_PlayerStatistics_SetExperiencePoints(null, null, xpValue, clientIndex);
        return End_PlayerStatistics_SetExperiencePoints(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatistics_SetExperiencePoints(AsyncCallback callback, object state, int xpValue, int clientIndex)
      #else
      public void send_PlayerStatistics_SetExperiencePoints(int xpValue, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatistics_SetExperiencePoints", TMessageType.Call, seqid_));
        PlayerStatistics_SetExperiencePoints_args args = new PlayerStatistics_SetExperiencePoints_args();
        args.XpValue = xpValue;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatistics_SetExperiencePoints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatistics_SetExperiencePoints_result result = new PlayerStatistics_SetExperiencePoints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_SetExperiencePoints failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatisticsEvent_TriggerStatsEvent(AsyncCallback callback, object state, string eventName, int eventMultiplier, int clientIndex)
      {
        return send_PlayerStatisticsEvent_TriggerStatsEvent(callback, state, eventName, eventMultiplier, clientIndex);
      }

      public string End_PlayerStatisticsEvent_TriggerStatsEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatisticsEvent_TriggerStatsEvent();
      }

      #endif

      /// <summary>
      /// Trigger an event server side that will increase the user statistics.
      /// This may cause one or more awards to be sent back to the user -
      /// could be achievements, experience, etc. Achievements will be sent by this
      /// client library to the appropriate awards service (Apple Game Center, etc).
      /// 
      /// This mechanism supercedes the PlayerStatisticsService API methods, since
      /// PlayerStatisticsService API method only update the raw statistics without
      /// triggering the rewards.
      /// </summary>
      /// <param name="eventName"></param>
      /// <param name="eventMultiplier"></param>
      /// <param name="clientIndex"></param>
      public string PlayerStatisticsEvent_TriggerStatsEvent(string eventName, int eventMultiplier, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatisticsEvent_TriggerStatsEvent(eventName, eventMultiplier, clientIndex);
        return recv_PlayerStatisticsEvent_TriggerStatsEvent();

        #else
        var asyncResult = Begin_PlayerStatisticsEvent_TriggerStatsEvent(null, null, eventName, eventMultiplier, clientIndex);
        return End_PlayerStatisticsEvent_TriggerStatsEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatisticsEvent_TriggerStatsEvent(AsyncCallback callback, object state, string eventName, int eventMultiplier, int clientIndex)
      #else
      public void send_PlayerStatisticsEvent_TriggerStatsEvent(string eventName, int eventMultiplier, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatisticsEvent_TriggerStatsEvent", TMessageType.Call, seqid_));
        PlayerStatisticsEvent_TriggerStatsEvent_args args = new PlayerStatisticsEvent_TriggerStatsEvent_args();
        args.EventName = eventName;
        args.EventMultiplier = eventMultiplier;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatisticsEvent_TriggerStatsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatisticsEvent_TriggerStatsEvent_result result = new PlayerStatisticsEvent_TriggerStatsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatisticsEvent_TriggerStatsEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerStatisticsEvent_TriggerStatsEvents(AsyncCallback callback, object state, string jsonData, int clientIndex)
      {
        return send_PlayerStatisticsEvent_TriggerStatsEvents(callback, state, jsonData, clientIndex);
      }

      public string End_PlayerStatisticsEvent_TriggerStatsEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerStatisticsEvent_TriggerStatsEvents();
      }

      #endif

      /// <summary>
      /// See documentation for TriggerStatsEvent for more
      /// documentation.
      /// </summary>
      /// <param name="jsonData">jsonData[  {    "eventName": "event1",    "eventMultiplier": 1  },  {    "eventName": "event2",    "eventMultiplier": 1  }]</param>
      /// <param name="clientIndex"></param>
      public string PlayerStatisticsEvent_TriggerStatsEvents(string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PlayerStatisticsEvent_TriggerStatsEvents(jsonData, clientIndex);
        return recv_PlayerStatisticsEvent_TriggerStatsEvents();

        #else
        var asyncResult = Begin_PlayerStatisticsEvent_TriggerStatsEvents(null, null, jsonData, clientIndex);
        return End_PlayerStatisticsEvent_TriggerStatsEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerStatisticsEvent_TriggerStatsEvents(AsyncCallback callback, object state, string jsonData, int clientIndex)
      #else
      public void send_PlayerStatisticsEvent_TriggerStatsEvents(string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerStatisticsEvent_TriggerStatsEvents", TMessageType.Call, seqid_));
        PlayerStatisticsEvent_TriggerStatsEvents_args args = new PlayerStatisticsEvent_TriggerStatsEvents_args();
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlayerStatisticsEvent_TriggerStatsEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerStatisticsEvent_TriggerStatsEvents_result result = new PlayerStatisticsEvent_TriggerStatsEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatisticsEvent_TriggerStatsEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Product_GetCurrency(AsyncCallback callback, object state, string currencyType, int clientIndex)
      {
        return send_Product_GetCurrency(callback, state, currencyType, clientIndex);
      }

      public string End_Product_GetCurrency(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Product_GetCurrency();
      }

      #endif

      /// <summary>
      /// Gets the player's currency for the given currency type
      /// or all currency types if null passed in.
      /// </summary>
      /// <param name="currencyType">The currency type to retrieve or nullif all currency types are being requested.</param>
      /// <param name="clientIndex"></param>
      public string Product_GetCurrency(string currencyType, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Product_GetCurrency(currencyType, clientIndex);
        return recv_Product_GetCurrency();

        #else
        var asyncResult = Begin_Product_GetCurrency(null, null, currencyType, clientIndex);
        return End_Product_GetCurrency(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Product_GetCurrency(AsyncCallback callback, object state, string currencyType, int clientIndex)
      #else
      public void send_Product_GetCurrency(string currencyType, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Product_GetCurrency", TMessageType.Call, seqid_));
        Product_GetCurrency_args args = new Product_GetCurrency_args();
        args.CurrencyType = currencyType;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Product_GetCurrency()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Product_GetCurrency_result result = new Product_GetCurrency_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetCurrency failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Product_GetSalesInventory(AsyncCallback callback, object state, string platform, string userCurrency, int clientIndex)
      {
        return send_Product_GetSalesInventory(callback, state, platform, userCurrency, clientIndex);
      }

      public string End_Product_GetSalesInventory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Product_GetSalesInventory();
      }

      #endif

      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="clientIndex"></param>
      public string Product_GetSalesInventory(string platform, string userCurrency, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Product_GetSalesInventory(platform, userCurrency, clientIndex);
        return recv_Product_GetSalesInventory();

        #else
        var asyncResult = Begin_Product_GetSalesInventory(null, null, platform, userCurrency, clientIndex);
        return End_Product_GetSalesInventory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Product_GetSalesInventory(AsyncCallback callback, object state, string platform, string userCurrency, int clientIndex)
      #else
      public void send_Product_GetSalesInventory(string platform, string userCurrency, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Product_GetSalesInventory", TMessageType.Call, seqid_));
        Product_GetSalesInventory_args args = new Product_GetSalesInventory_args();
        args.Platform = platform;
        args.UserCurrency = userCurrency;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Product_GetSalesInventory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Product_GetSalesInventory_result result = new Product_GetSalesInventory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetSalesInventory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Product_GetSalesInventoryByCategory(AsyncCallback callback, object state, string platform, string userCurrency, string category, int clientIndex)
      {
        return send_Product_GetSalesInventoryByCategory(callback, state, platform, userCurrency, category, clientIndex);
      }

      public string End_Product_GetSalesInventoryByCategory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Product_GetSalesInventoryByCategory();
      }

      #endif

      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type and category.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="category">The product category</param>
      /// <param name="clientIndex"></param>
      public string Product_GetSalesInventoryByCategory(string platform, string userCurrency, string category, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Product_GetSalesInventoryByCategory(platform, userCurrency, category, clientIndex);
        return recv_Product_GetSalesInventoryByCategory();

        #else
        var asyncResult = Begin_Product_GetSalesInventoryByCategory(null, null, platform, userCurrency, category, clientIndex);
        return End_Product_GetSalesInventoryByCategory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Product_GetSalesInventoryByCategory(AsyncCallback callback, object state, string platform, string userCurrency, string category, int clientIndex)
      #else
      public void send_Product_GetSalesInventoryByCategory(string platform, string userCurrency, string category, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Product_GetSalesInventoryByCategory", TMessageType.Call, seqid_));
        Product_GetSalesInventoryByCategory_args args = new Product_GetSalesInventoryByCategory_args();
        args.Platform = platform;
        args.UserCurrency = userCurrency;
        args.Category = category;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Product_GetSalesInventoryByCategory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Product_GetSalesInventoryByCategory_result result = new Product_GetSalesInventoryByCategory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetSalesInventoryByCategory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Product_VerifyMicrosoftReceipt(AsyncCallback callback, object state, string receipt, int clientIndex)
      {
        return send_Product_VerifyMicrosoftReceipt(callback, state, receipt, clientIndex);
      }

      public string End_Product_VerifyMicrosoftReceipt(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Product_VerifyMicrosoftReceipt();
      }

      #endif

      /// <summary>
      /// Verify Microsoft Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="receipt">Receipt XML</param>
      /// <param name="clientIndex"></param>
      public string Product_VerifyMicrosoftReceipt(string receipt, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Product_VerifyMicrosoftReceipt(receipt, clientIndex);
        return recv_Product_VerifyMicrosoftReceipt();

        #else
        var asyncResult = Begin_Product_VerifyMicrosoftReceipt(null, null, receipt, clientIndex);
        return End_Product_VerifyMicrosoftReceipt(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Product_VerifyMicrosoftReceipt(AsyncCallback callback, object state, string receipt, int clientIndex)
      #else
      public void send_Product_VerifyMicrosoftReceipt(string receipt, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Product_VerifyMicrosoftReceipt", TMessageType.Call, seqid_));
        Product_VerifyMicrosoftReceipt_args args = new Product_VerifyMicrosoftReceipt_args();
        args.Receipt = receipt;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Product_VerifyMicrosoftReceipt()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Product_VerifyMicrosoftReceipt_result result = new Product_VerifyMicrosoftReceipt_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_VerifyMicrosoftReceipt failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Product_GetEligiblePromotions(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Product_GetEligiblePromotions(callback, state, clientIndex);
      }

      public string End_Product_GetEligiblePromotions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Product_GetEligiblePromotions();
      }

      #endif

      /// <summary>
      /// Returns the eligible promotions for the player.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Product_GetEligiblePromotions(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Product_GetEligiblePromotions(clientIndex);
        return recv_Product_GetEligiblePromotions();

        #else
        var asyncResult = Begin_Product_GetEligiblePromotions(null, null, clientIndex);
        return End_Product_GetEligiblePromotions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Product_GetEligiblePromotions(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Product_GetEligiblePromotions(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Product_GetEligiblePromotions", TMessageType.Call, seqid_));
        Product_GetEligiblePromotions_args args = new Product_GetEligiblePromotions_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Product_GetEligiblePromotions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Product_GetEligiblePromotions_result result = new Product_GetEligiblePromotions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetEligiblePromotions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Product_VerifyItunesReceipt(AsyncCallback callback, object state, string base64EncReceiptData, int clientIndex)
      {
        return send_Product_VerifyItunesReceipt(callback, state, base64EncReceiptData, clientIndex);
      }

      public string End_Product_VerifyItunesReceipt(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Product_VerifyItunesReceipt();
      }

      #endif

      /// <summary>
      /// Verify ITunes Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="base64EncReceiptData">Base64 encoded receipt data</param>
      /// <param name="clientIndex"></param>
      public string Product_VerifyItunesReceipt(string base64EncReceiptData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Product_VerifyItunesReceipt(base64EncReceiptData, clientIndex);
        return recv_Product_VerifyItunesReceipt();

        #else
        var asyncResult = Begin_Product_VerifyItunesReceipt(null, null, base64EncReceiptData, clientIndex);
        return End_Product_VerifyItunesReceipt(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Product_VerifyItunesReceipt(AsyncCallback callback, object state, string base64EncReceiptData, int clientIndex)
      #else
      public void send_Product_VerifyItunesReceipt(string base64EncReceiptData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Product_VerifyItunesReceipt", TMessageType.Call, seqid_));
        Product_VerifyItunesReceipt_args args = new Product_VerifyItunesReceipt_args();
        args.Base64EncReceiptData = base64EncReceiptData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Product_VerifyItunesReceipt()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Product_VerifyItunesReceipt_result result = new Product_VerifyItunesReceipt_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_VerifyItunesReceipt failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Profanity_ProfanityCheck(AsyncCallback callback, object state, string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      {
        return send_Profanity_ProfanityCheck(callback, state, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
      }

      public string End_Profanity_ProfanityCheck(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Profanity_ProfanityCheck();
      }

      #endif

      /// <summary>
      /// Checks supplied text for profanity.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      public string Profanity_ProfanityCheck(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Profanity_ProfanityCheck(text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
        return recv_Profanity_ProfanityCheck();

        #else
        var asyncResult = Begin_Profanity_ProfanityCheck(null, null, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
        return End_Profanity_ProfanityCheck(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Profanity_ProfanityCheck(AsyncCallback callback, object state, string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      #else
      public void send_Profanity_ProfanityCheck(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Profanity_ProfanityCheck", TMessageType.Call, seqid_));
        Profanity_ProfanityCheck_args args = new Profanity_ProfanityCheck_args();
        args.Text = text;
        args.Languages = languages;
        args.FlagEmail = flagEmail;
        args.FlagPhone = flagPhone;
        args.FlagUrls = flagUrls;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Profanity_ProfanityCheck()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Profanity_ProfanityCheck_result result = new Profanity_ProfanityCheck_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Profanity_ProfanityCheck failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Profanity_ProfanityReplaceText(AsyncCallback callback, object state, string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      {
        return send_Profanity_ProfanityReplaceText(callback, state, text, replaceSymbol, languages, flagEmail, flagPhone, flagUrls, clientIndex);
      }

      public string End_Profanity_ProfanityReplaceText(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Profanity_ProfanityReplaceText();
      }

      #endif

      /// <summary>
      /// Replaces the characters of profanity text with a passed character(s).
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="replaceSymbol">The text to replace individual characters of profanity text with</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      public string Profanity_ProfanityReplaceText(string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Profanity_ProfanityReplaceText(text, replaceSymbol, languages, flagEmail, flagPhone, flagUrls, clientIndex);
        return recv_Profanity_ProfanityReplaceText();

        #else
        var asyncResult = Begin_Profanity_ProfanityReplaceText(null, null, text, replaceSymbol, languages, flagEmail, flagPhone, flagUrls, clientIndex);
        return End_Profanity_ProfanityReplaceText(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Profanity_ProfanityReplaceText(AsyncCallback callback, object state, string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      #else
      public void send_Profanity_ProfanityReplaceText(string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Profanity_ProfanityReplaceText", TMessageType.Call, seqid_));
        Profanity_ProfanityReplaceText_args args = new Profanity_ProfanityReplaceText_args();
        args.Text = text;
        args.ReplaceSymbol = replaceSymbol;
        args.Languages = languages;
        args.FlagEmail = flagEmail;
        args.FlagPhone = flagPhone;
        args.FlagUrls = flagUrls;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Profanity_ProfanityReplaceText()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Profanity_ProfanityReplaceText_result result = new Profanity_ProfanityReplaceText_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Profanity_ProfanityReplaceText failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Profanity_ProfanityIdentifyBadWords(AsyncCallback callback, object state, string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      {
        return send_Profanity_ProfanityIdentifyBadWords(callback, state, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
      }

      public string End_Profanity_ProfanityIdentifyBadWords(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Profanity_ProfanityIdentifyBadWords();
      }

      #endif

      /// <summary>
      /// Checks supplied text for profanity and returns a list of bad wors.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      public string Profanity_ProfanityIdentifyBadWords(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Profanity_ProfanityIdentifyBadWords(text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
        return recv_Profanity_ProfanityIdentifyBadWords();

        #else
        var asyncResult = Begin_Profanity_ProfanityIdentifyBadWords(null, null, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
        return End_Profanity_ProfanityIdentifyBadWords(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Profanity_ProfanityIdentifyBadWords(AsyncCallback callback, object state, string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      #else
      public void send_Profanity_ProfanityIdentifyBadWords(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Profanity_ProfanityIdentifyBadWords", TMessageType.Call, seqid_));
        Profanity_ProfanityIdentifyBadWords_args args = new Profanity_ProfanityIdentifyBadWords_args();
        args.Text = text;
        args.Languages = languages;
        args.FlagEmail = flagEmail;
        args.FlagPhone = flagPhone;
        args.FlagUrls = flagUrls;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Profanity_ProfanityIdentifyBadWords()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Profanity_ProfanityIdentifyBadWords_result result = new Profanity_ProfanityIdentifyBadWords_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Profanity_ProfanityIdentifyBadWords failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_DeregisterAllPushNotificationDeviceTokens(AsyncCallback callback, object state, int clientIndex)
      {
        return send_PushNotification_DeregisterAllPushNotificationDeviceTokens(callback, state, clientIndex);
      }

      public string End_PushNotification_DeregisterAllPushNotificationDeviceTokens(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_DeregisterAllPushNotificationDeviceTokens();
      }

      #endif

      /// <summary>
      /// Deregisters all device tokens currently registered to the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string PushNotification_DeregisterAllPushNotificationDeviceTokens(int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_DeregisterAllPushNotificationDeviceTokens(clientIndex);
        return recv_PushNotification_DeregisterAllPushNotificationDeviceTokens();

        #else
        var asyncResult = Begin_PushNotification_DeregisterAllPushNotificationDeviceTokens(null, null, clientIndex);
        return End_PushNotification_DeregisterAllPushNotificationDeviceTokens(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_DeregisterAllPushNotificationDeviceTokens(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_PushNotification_DeregisterAllPushNotificationDeviceTokens(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_DeregisterAllPushNotificationDeviceTokens", TMessageType.Call, seqid_));
        PushNotification_DeregisterAllPushNotificationDeviceTokens_args args = new PushNotification_DeregisterAllPushNotificationDeviceTokens_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_DeregisterAllPushNotificationDeviceTokens()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_DeregisterAllPushNotificationDeviceTokens_result result = new PushNotification_DeregisterAllPushNotificationDeviceTokens_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_DeregisterAllPushNotificationDeviceTokens failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_DeregisterPushNotificationDeviceToken(AsyncCallback callback, object state, string platform, string token, int clientIndex)
      {
        return send_PushNotification_DeregisterPushNotificationDeviceToken(callback, state, platform, token, clientIndex);
      }

      public string End_PushNotification_DeregisterPushNotificationDeviceToken(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_DeregisterPushNotificationDeviceToken();
      }

      #endif

      /// <summary>
      /// Deregisters the given device token from the server to disable this device
      /// from receiving push notifications.
      /// </summary>
      /// <param name="platform">The device platform being registered.</param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_DeregisterPushNotificationDeviceToken(string platform, string token, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_DeregisterPushNotificationDeviceToken(platform, token, clientIndex);
        return recv_PushNotification_DeregisterPushNotificationDeviceToken();

        #else
        var asyncResult = Begin_PushNotification_DeregisterPushNotificationDeviceToken(null, null, platform, token, clientIndex);
        return End_PushNotification_DeregisterPushNotificationDeviceToken(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_DeregisterPushNotificationDeviceToken(AsyncCallback callback, object state, string platform, string token, int clientIndex)
      #else
      public void send_PushNotification_DeregisterPushNotificationDeviceToken(string platform, string token, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_DeregisterPushNotificationDeviceToken", TMessageType.Call, seqid_));
        PushNotification_DeregisterPushNotificationDeviceToken_args args = new PushNotification_DeregisterPushNotificationDeviceToken_args();
        args.Platform = platform;
        args.Token = token;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_DeregisterPushNotificationDeviceToken()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_DeregisterPushNotificationDeviceToken_result result = new PushNotification_DeregisterPushNotificationDeviceToken_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_DeregisterPushNotificationDeviceToken failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_RegisterPushNotificationDeviceToken(AsyncCallback callback, object state, string platform, string token, int clientIndex)
      {
        return send_PushNotification_RegisterPushNotificationDeviceToken(callback, state, platform, token, clientIndex);
      }

      public string End_PushNotification_RegisterPushNotificationDeviceToken(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_RegisterPushNotificationDeviceToken();
      }

      #endif

      /// <summary>
      /// Registers the given device token with the server to enable this device
      /// to receive push notifications.
      /// </summary>
      /// <param name="platform"></param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_RegisterPushNotificationDeviceToken(string platform, string token, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_RegisterPushNotificationDeviceToken(platform, token, clientIndex);
        return recv_PushNotification_RegisterPushNotificationDeviceToken();

        #else
        var asyncResult = Begin_PushNotification_RegisterPushNotificationDeviceToken(null, null, platform, token, clientIndex);
        return End_PushNotification_RegisterPushNotificationDeviceToken(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_RegisterPushNotificationDeviceToken(AsyncCallback callback, object state, string platform, string token, int clientIndex)
      #else
      public void send_PushNotification_RegisterPushNotificationDeviceToken(string platform, string token, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_RegisterPushNotificationDeviceToken", TMessageType.Call, seqid_));
        PushNotification_RegisterPushNotificationDeviceToken_args args = new PushNotification_RegisterPushNotificationDeviceToken_args();
        args.Platform = platform;
        args.Token = token;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_RegisterPushNotificationDeviceToken()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_RegisterPushNotificationDeviceToken_result result = new PushNotification_RegisterPushNotificationDeviceToken_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_RegisterPushNotificationDeviceToken failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendSimplePushNotification(AsyncCallback callback, object state, string toProfileId, string message, int clientIndex)
      {
        return send_PushNotification_SendSimplePushNotification(callback, state, toProfileId, message, clientIndex);
      }

      public string End_PushNotification_SendSimplePushNotification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendSimplePushNotification();
      }

      #endif

      /// <summary>
      /// Sends a simple push notification based on the passed in message.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="message">Text of the push notification</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendSimplePushNotification(string toProfileId, string message, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendSimplePushNotification(toProfileId, message, clientIndex);
        return recv_PushNotification_SendSimplePushNotification();

        #else
        var asyncResult = Begin_PushNotification_SendSimplePushNotification(null, null, toProfileId, message, clientIndex);
        return End_PushNotification_SendSimplePushNotification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendSimplePushNotification(AsyncCallback callback, object state, string toProfileId, string message, int clientIndex)
      #else
      public void send_PushNotification_SendSimplePushNotification(string toProfileId, string message, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendSimplePushNotification", TMessageType.Call, seqid_));
        PushNotification_SendSimplePushNotification_args args = new PushNotification_SendSimplePushNotification_args();
        args.ToProfileId = toProfileId;
        args.Message = message;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendSimplePushNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendSimplePushNotification_result result = new PushNotification_SendSimplePushNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendSimplePushNotification failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendRichPushNotification(AsyncCallback callback, object state, string toProfileId, int notificationTemplateId, int clientIndex)
      {
        return send_PushNotification_SendRichPushNotification(callback, state, toProfileId, notificationTemplateId, clientIndex);
      }

      public string End_PushNotification_SendRichPushNotification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendRichPushNotification();
      }

      #endif

      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendRichPushNotification(string toProfileId, int notificationTemplateId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendRichPushNotification(toProfileId, notificationTemplateId, clientIndex);
        return recv_PushNotification_SendRichPushNotification();

        #else
        var asyncResult = Begin_PushNotification_SendRichPushNotification(null, null, toProfileId, notificationTemplateId, clientIndex);
        return End_PushNotification_SendRichPushNotification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendRichPushNotification(AsyncCallback callback, object state, string toProfileId, int notificationTemplateId, int clientIndex)
      #else
      public void send_PushNotification_SendRichPushNotification(string toProfileId, int notificationTemplateId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendRichPushNotification", TMessageType.Call, seqid_));
        PushNotification_SendRichPushNotification_args args = new PushNotification_SendRichPushNotification_args();
        args.ToProfileId = toProfileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendRichPushNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendRichPushNotification_result result = new PushNotification_SendRichPushNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRichPushNotification failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendRichPushNotificationWithParams(AsyncCallback callback, object state, string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex)
      {
        return send_PushNotification_SendRichPushNotificationWithParams(callback, state, toProfileId, notificationTemplateId, substitutionJson, clientIndex);
      }

      public string End_PushNotification_SendRichPushNotificationWithParams(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendRichPushNotificationWithParams();
      }

      #endif

      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendRichPushNotificationWithParams(string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendRichPushNotificationWithParams(toProfileId, notificationTemplateId, substitutionJson, clientIndex);
        return recv_PushNotification_SendRichPushNotificationWithParams();

        #else
        var asyncResult = Begin_PushNotification_SendRichPushNotificationWithParams(null, null, toProfileId, notificationTemplateId, substitutionJson, clientIndex);
        return End_PushNotification_SendRichPushNotificationWithParams(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendRichPushNotificationWithParams(AsyncCallback callback, object state, string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex)
      #else
      public void send_PushNotification_SendRichPushNotificationWithParams(string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendRichPushNotificationWithParams", TMessageType.Call, seqid_));
        PushNotification_SendRichPushNotificationWithParams_args args = new PushNotification_SendRichPushNotificationWithParams_args();
        args.ToProfileId = toProfileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionJson = substitutionJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendRichPushNotificationWithParams()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendRichPushNotificationWithParams_result result = new PushNotification_SendRichPushNotificationWithParams_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRichPushNotificationWithParams failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendTemplatedPushNotificationToGroup(AsyncCallback callback, object state, string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex)
      {
        return send_PushNotification_SendTemplatedPushNotificationToGroup(callback, state, groupId, notificationTemplateId, substitutionsJson, clientIndex);
      }

      public string End_PushNotification_SendTemplatedPushNotificationToGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendTemplatedPushNotificationToGroup();
      }

      #endif

      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionsJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendTemplatedPushNotificationToGroup(string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendTemplatedPushNotificationToGroup(groupId, notificationTemplateId, substitutionsJson, clientIndex);
        return recv_PushNotification_SendTemplatedPushNotificationToGroup();

        #else
        var asyncResult = Begin_PushNotification_SendTemplatedPushNotificationToGroup(null, null, groupId, notificationTemplateId, substitutionsJson, clientIndex);
        return End_PushNotification_SendTemplatedPushNotificationToGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendTemplatedPushNotificationToGroup(AsyncCallback callback, object state, string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex)
      #else
      public void send_PushNotification_SendTemplatedPushNotificationToGroup(string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendTemplatedPushNotificationToGroup", TMessageType.Call, seqid_));
        PushNotification_SendTemplatedPushNotificationToGroup_args args = new PushNotification_SendTemplatedPushNotificationToGroup_args();
        args.GroupId = groupId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionsJson = substitutionsJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendTemplatedPushNotificationToGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendTemplatedPushNotificationToGroup_result result = new PushNotification_SendTemplatedPushNotificationToGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendTemplatedPushNotificationToGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendNormalizedPushNotificationToGroup(AsyncCallback callback, object state, string groupId, string alertContentJson, string customDataJson, int clientIndex)
      {
        return send_PushNotification_SendNormalizedPushNotificationToGroup(callback, state, groupId, alertContentJson, customDataJson, clientIndex);
      }

      public string End_PushNotification_SendNormalizedPushNotificationToGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendNormalizedPushNotificationToGroup();
      }

      #endif

      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendNormalizedPushNotificationToGroup(string groupId, string alertContentJson, string customDataJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendNormalizedPushNotificationToGroup(groupId, alertContentJson, customDataJson, clientIndex);
        return recv_PushNotification_SendNormalizedPushNotificationToGroup();

        #else
        var asyncResult = Begin_PushNotification_SendNormalizedPushNotificationToGroup(null, null, groupId, alertContentJson, customDataJson, clientIndex);
        return End_PushNotification_SendNormalizedPushNotificationToGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendNormalizedPushNotificationToGroup(AsyncCallback callback, object state, string groupId, string alertContentJson, string customDataJson, int clientIndex)
      #else
      public void send_PushNotification_SendNormalizedPushNotificationToGroup(string groupId, string alertContentJson, string customDataJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotificationToGroup", TMessageType.Call, seqid_));
        PushNotification_SendNormalizedPushNotificationToGroup_args args = new PushNotification_SendNormalizedPushNotificationToGroup_args();
        args.GroupId = groupId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendNormalizedPushNotificationToGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendNormalizedPushNotificationToGroup_result result = new PushNotification_SendNormalizedPushNotificationToGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendNormalizedPushNotificationToGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_ScheduleRawPushNotificationUTC(AsyncCallback callback, object state, string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex)
      {
        return send_PushNotification_ScheduleRawPushNotificationUTC(callback, state, profileId, fcmContent, iosContent, facebookContent, startTime, clientIndex);
      }

      public string End_PushNotification_ScheduleRawPushNotificationUTC(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_ScheduleRawPushNotificationUTC();
      }

      #endif

      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_ScheduleRawPushNotificationUTC(string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_ScheduleRawPushNotificationUTC(profileId, fcmContent, iosContent, facebookContent, startTime, clientIndex);
        return recv_PushNotification_ScheduleRawPushNotificationUTC();

        #else
        var asyncResult = Begin_PushNotification_ScheduleRawPushNotificationUTC(null, null, profileId, fcmContent, iosContent, facebookContent, startTime, clientIndex);
        return End_PushNotification_ScheduleRawPushNotificationUTC(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_ScheduleRawPushNotificationUTC(AsyncCallback callback, object state, string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex)
      #else
      public void send_PushNotification_ScheduleRawPushNotificationUTC(string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_ScheduleRawPushNotificationUTC", TMessageType.Call, seqid_));
        PushNotification_ScheduleRawPushNotificationUTC_args args = new PushNotification_ScheduleRawPushNotificationUTC_args();
        args.ProfileId = profileId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.StartTime = startTime;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_ScheduleRawPushNotificationUTC()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_ScheduleRawPushNotificationUTC_result result = new PushNotification_ScheduleRawPushNotificationUTC_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRawPushNotificationUTC failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_ScheduleRawPushNotificationMinutes(AsyncCallback callback, object state, string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex)
      {
        return send_PushNotification_ScheduleRawPushNotificationMinutes(callback, state, profileId, fcmContent, iosContent, facebookContent, minutesFromNow, clientIndex);
      }

      public string End_PushNotification_ScheduleRawPushNotificationMinutes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_ScheduleRawPushNotificationMinutes();
      }

      #endif

      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_ScheduleRawPushNotificationMinutes(string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_ScheduleRawPushNotificationMinutes(profileId, fcmContent, iosContent, facebookContent, minutesFromNow, clientIndex);
        return recv_PushNotification_ScheduleRawPushNotificationMinutes();

        #else
        var asyncResult = Begin_PushNotification_ScheduleRawPushNotificationMinutes(null, null, profileId, fcmContent, iosContent, facebookContent, minutesFromNow, clientIndex);
        return End_PushNotification_ScheduleRawPushNotificationMinutes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_ScheduleRawPushNotificationMinutes(AsyncCallback callback, object state, string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex)
      #else
      public void send_PushNotification_ScheduleRawPushNotificationMinutes(string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_ScheduleRawPushNotificationMinutes", TMessageType.Call, seqid_));
        PushNotification_ScheduleRawPushNotificationMinutes_args args = new PushNotification_ScheduleRawPushNotificationMinutes_args();
        args.ProfileId = profileId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_ScheduleRawPushNotificationMinutes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_ScheduleRawPushNotificationMinutes_result result = new PushNotification_ScheduleRawPushNotificationMinutes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRawPushNotificationMinutes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendRawPushNotification(AsyncCallback callback, object state, string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      {
        return send_PushNotification_SendRawPushNotification(callback, state, toProfileId, fcmContent, iosContent, facebookContent, clientIndex);
      }

      public string End_PushNotification_SendRawPushNotification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendRawPushNotification();
      }

      #endif

      /// <summary>
      /// Sends a raw push notification to a target user.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendRawPushNotification(string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendRawPushNotification(toProfileId, fcmContent, iosContent, facebookContent, clientIndex);
        return recv_PushNotification_SendRawPushNotification();

        #else
        var asyncResult = Begin_PushNotification_SendRawPushNotification(null, null, toProfileId, fcmContent, iosContent, facebookContent, clientIndex);
        return End_PushNotification_SendRawPushNotification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendRawPushNotification(AsyncCallback callback, object state, string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      #else
      public void send_PushNotification_SendRawPushNotification(string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotification", TMessageType.Call, seqid_));
        PushNotification_SendRawPushNotification_args args = new PushNotification_SendRawPushNotification_args();
        args.ToProfileId = toProfileId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendRawPushNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendRawPushNotification_result result = new PushNotification_SendRawPushNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRawPushNotification failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendRawPushNotificationBatch(AsyncCallback callback, object state, List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      {
        return send_PushNotification_SendRawPushNotificationBatch(callback, state, profileIds, fcmContent, iosContent, facebookContent, clientIndex);
      }

      public string End_PushNotification_SendRawPushNotificationBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendRawPushNotificationBatch();
      }

      #endif

      /// <summary>
      /// Sends a raw push notification to a target list of users.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendRawPushNotificationBatch(List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendRawPushNotificationBatch(profileIds, fcmContent, iosContent, facebookContent, clientIndex);
        return recv_PushNotification_SendRawPushNotificationBatch();

        #else
        var asyncResult = Begin_PushNotification_SendRawPushNotificationBatch(null, null, profileIds, fcmContent, iosContent, facebookContent, clientIndex);
        return End_PushNotification_SendRawPushNotificationBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendRawPushNotificationBatch(AsyncCallback callback, object state, List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      #else
      public void send_PushNotification_SendRawPushNotificationBatch(List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotificationBatch", TMessageType.Call, seqid_));
        PushNotification_SendRawPushNotificationBatch_args args = new PushNotification_SendRawPushNotificationBatch_args();
        args.ProfileIds = profileIds;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendRawPushNotificationBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendRawPushNotificationBatch_result result = new PushNotification_SendRawPushNotificationBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRawPushNotificationBatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendRawPushNotificationToGroup(AsyncCallback callback, object state, string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      {
        return send_PushNotification_SendRawPushNotificationToGroup(callback, state, groupId, fcmContent, iosContent, facebookContent, clientIndex);
      }

      public string End_PushNotification_SendRawPushNotificationToGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendRawPushNotificationToGroup();
      }

      #endif

      /// <summary>
      /// Sends a raw push notification to a target group.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendRawPushNotificationToGroup(string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendRawPushNotificationToGroup(groupId, fcmContent, iosContent, facebookContent, clientIndex);
        return recv_PushNotification_SendRawPushNotificationToGroup();

        #else
        var asyncResult = Begin_PushNotification_SendRawPushNotificationToGroup(null, null, groupId, fcmContent, iosContent, facebookContent, clientIndex);
        return End_PushNotification_SendRawPushNotificationToGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendRawPushNotificationToGroup(AsyncCallback callback, object state, string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      #else
      public void send_PushNotification_SendRawPushNotificationToGroup(string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotificationToGroup", TMessageType.Call, seqid_));
        PushNotification_SendRawPushNotificationToGroup_args args = new PushNotification_SendRawPushNotificationToGroup_args();
        args.GroupId = groupId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendRawPushNotificationToGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendRawPushNotificationToGroup_result result = new PushNotification_SendRawPushNotificationToGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRawPushNotificationToGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_ScheduleNormalizedPushNotificationUTC(AsyncCallback callback, object state, string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex)
      {
        return send_PushNotification_ScheduleNormalizedPushNotificationUTC(callback, state, profileId, alertContentJson, customDataJson, startTime, clientIndex);
      }

      public string End_PushNotification_ScheduleNormalizedPushNotificationUTC(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_ScheduleNormalizedPushNotificationUTC();
      }

      #endif

      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_ScheduleNormalizedPushNotificationUTC(string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_ScheduleNormalizedPushNotificationUTC(profileId, alertContentJson, customDataJson, startTime, clientIndex);
        return recv_PushNotification_ScheduleNormalizedPushNotificationUTC();

        #else
        var asyncResult = Begin_PushNotification_ScheduleNormalizedPushNotificationUTC(null, null, profileId, alertContentJson, customDataJson, startTime, clientIndex);
        return End_PushNotification_ScheduleNormalizedPushNotificationUTC(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_ScheduleNormalizedPushNotificationUTC(AsyncCallback callback, object state, string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex)
      #else
      public void send_PushNotification_ScheduleNormalizedPushNotificationUTC(string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_ScheduleNormalizedPushNotificationUTC", TMessageType.Call, seqid_));
        PushNotification_ScheduleNormalizedPushNotificationUTC_args args = new PushNotification_ScheduleNormalizedPushNotificationUTC_args();
        args.ProfileId = profileId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.StartTime = startTime;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_ScheduleNormalizedPushNotificationUTC()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_ScheduleNormalizedPushNotificationUTC_result result = new PushNotification_ScheduleNormalizedPushNotificationUTC_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleNormalizedPushNotificationUTC failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_ScheduleNormalizedPushNotificationMinutes(AsyncCallback callback, object state, string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex)
      {
        return send_PushNotification_ScheduleNormalizedPushNotificationMinutes(callback, state, profileId, alertContentJson, customDataJson, minutesFromNow, clientIndex);
      }

      public string End_PushNotification_ScheduleNormalizedPushNotificationMinutes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_ScheduleNormalizedPushNotificationMinutes();
      }

      #endif

      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_ScheduleNormalizedPushNotificationMinutes(string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_ScheduleNormalizedPushNotificationMinutes(profileId, alertContentJson, customDataJson, minutesFromNow, clientIndex);
        return recv_PushNotification_ScheduleNormalizedPushNotificationMinutes();

        #else
        var asyncResult = Begin_PushNotification_ScheduleNormalizedPushNotificationMinutes(null, null, profileId, alertContentJson, customDataJson, minutesFromNow, clientIndex);
        return End_PushNotification_ScheduleNormalizedPushNotificationMinutes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_ScheduleNormalizedPushNotificationMinutes(AsyncCallback callback, object state, string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex)
      #else
      public void send_PushNotification_ScheduleNormalizedPushNotificationMinutes(string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_ScheduleNormalizedPushNotificationMinutes", TMessageType.Call, seqid_));
        PushNotification_ScheduleNormalizedPushNotificationMinutes_args args = new PushNotification_ScheduleNormalizedPushNotificationMinutes_args();
        args.ProfileId = profileId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_ScheduleNormalizedPushNotificationMinutes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_ScheduleNormalizedPushNotificationMinutes_result result = new PushNotification_ScheduleNormalizedPushNotificationMinutes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleNormalizedPushNotificationMinutes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_ScheduleRichPushNotificationUTC(AsyncCallback callback, object state, string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex)
      {
        return send_PushNotification_ScheduleRichPushNotificationUTC(callback, state, profileId, notificationTemplateId, substitutionsJson, startTime, clientIndex);
      }

      public string End_PushNotification_ScheduleRichPushNotificationUTC(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_ScheduleRichPushNotificationUTC();
      }

      #endif

      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_ScheduleRichPushNotificationUTC(string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_ScheduleRichPushNotificationUTC(profileId, notificationTemplateId, substitutionsJson, startTime, clientIndex);
        return recv_PushNotification_ScheduleRichPushNotificationUTC();

        #else
        var asyncResult = Begin_PushNotification_ScheduleRichPushNotificationUTC(null, null, profileId, notificationTemplateId, substitutionsJson, startTime, clientIndex);
        return End_PushNotification_ScheduleRichPushNotificationUTC(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_ScheduleRichPushNotificationUTC(AsyncCallback callback, object state, string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex)
      #else
      public void send_PushNotification_ScheduleRichPushNotificationUTC(string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_ScheduleRichPushNotificationUTC", TMessageType.Call, seqid_));
        PushNotification_ScheduleRichPushNotificationUTC_args args = new PushNotification_ScheduleRichPushNotificationUTC_args();
        args.ProfileId = profileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionsJson = substitutionsJson;
        args.StartTime = startTime;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_ScheduleRichPushNotificationUTC()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_ScheduleRichPushNotificationUTC_result result = new PushNotification_ScheduleRichPushNotificationUTC_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRichPushNotificationUTC failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_ScheduleRichPushNotificationMinutes(AsyncCallback callback, object state, string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex)
      {
        return send_PushNotification_ScheduleRichPushNotificationMinutes(callback, state, profileId, notificationTemplateId, substitutionsJson, minutesFromNow, clientIndex);
      }

      public string End_PushNotification_ScheduleRichPushNotificationMinutes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_ScheduleRichPushNotificationMinutes();
      }

      #endif

      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_ScheduleRichPushNotificationMinutes(string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_ScheduleRichPushNotificationMinutes(profileId, notificationTemplateId, substitutionsJson, minutesFromNow, clientIndex);
        return recv_PushNotification_ScheduleRichPushNotificationMinutes();

        #else
        var asyncResult = Begin_PushNotification_ScheduleRichPushNotificationMinutes(null, null, profileId, notificationTemplateId, substitutionsJson, minutesFromNow, clientIndex);
        return End_PushNotification_ScheduleRichPushNotificationMinutes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_ScheduleRichPushNotificationMinutes(AsyncCallback callback, object state, string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex)
      #else
      public void send_PushNotification_ScheduleRichPushNotificationMinutes(string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_ScheduleRichPushNotificationMinutes", TMessageType.Call, seqid_));
        PushNotification_ScheduleRichPushNotificationMinutes_args args = new PushNotification_ScheduleRichPushNotificationMinutes_args();
        args.ProfileId = profileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionsJson = substitutionsJson;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_ScheduleRichPushNotificationMinutes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_ScheduleRichPushNotificationMinutes_result result = new PushNotification_ScheduleRichPushNotificationMinutes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRichPushNotificationMinutes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendNormalizedPushNotification(AsyncCallback callback, object state, string toProfileId, string alertContentJson, string customDataJson, int clientIndex)
      {
        return send_PushNotification_SendNormalizedPushNotification(callback, state, toProfileId, alertContentJson, customDataJson, clientIndex);
      }

      public string End_PushNotification_SendNormalizedPushNotification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendNormalizedPushNotification();
      }

      #endif

      /// <summary>
      /// Sends a notification to a user consisting of alert content and custom data.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendNormalizedPushNotification(string toProfileId, string alertContentJson, string customDataJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendNormalizedPushNotification(toProfileId, alertContentJson, customDataJson, clientIndex);
        return recv_PushNotification_SendNormalizedPushNotification();

        #else
        var asyncResult = Begin_PushNotification_SendNormalizedPushNotification(null, null, toProfileId, alertContentJson, customDataJson, clientIndex);
        return End_PushNotification_SendNormalizedPushNotification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendNormalizedPushNotification(AsyncCallback callback, object state, string toProfileId, string alertContentJson, string customDataJson, int clientIndex)
      #else
      public void send_PushNotification_SendNormalizedPushNotification(string toProfileId, string alertContentJson, string customDataJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotification", TMessageType.Call, seqid_));
        PushNotification_SendNormalizedPushNotification_args args = new PushNotification_SendNormalizedPushNotification_args();
        args.ToProfileId = toProfileId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendNormalizedPushNotification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendNormalizedPushNotification_result result = new PushNotification_SendNormalizedPushNotification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendNormalizedPushNotification failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PushNotification_SendNormalizedPushNotificationBatch(AsyncCallback callback, object state, List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex)
      {
        return send_PushNotification_SendNormalizedPushNotificationBatch(callback, state, profileIds, alertContentJson, customDataJson, clientIndex);
      }

      public string End_PushNotification_SendNormalizedPushNotificationBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushNotification_SendNormalizedPushNotificationBatch();
      }

      #endif

      /// <summary>
      /// Sends a notification to multiple users consisting of alert content and custom data.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      public string PushNotification_SendNormalizedPushNotificationBatch(List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex)
      {
        #if !SILVERLIGHT
        send_PushNotification_SendNormalizedPushNotificationBatch(profileIds, alertContentJson, customDataJson, clientIndex);
        return recv_PushNotification_SendNormalizedPushNotificationBatch();

        #else
        var asyncResult = Begin_PushNotification_SendNormalizedPushNotificationBatch(null, null, profileIds, alertContentJson, customDataJson, clientIndex);
        return End_PushNotification_SendNormalizedPushNotificationBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushNotification_SendNormalizedPushNotificationBatch(AsyncCallback callback, object state, List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex)
      #else
      public void send_PushNotification_SendNormalizedPushNotificationBatch(List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotificationBatch", TMessageType.Call, seqid_));
        PushNotification_SendNormalizedPushNotificationBatch_args args = new PushNotification_SendNormalizedPushNotificationBatch_args();
        args.ProfileIds = profileIds;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PushNotification_SendNormalizedPushNotificationBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushNotification_SendNormalizedPushNotificationBatch_result result = new PushNotification_SendNormalizedPushNotificationBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendNormalizedPushNotificationBatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Script_RunScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, int clientIndex)
      {
        return send_Script_RunScript(callback, state, scriptName, jsonScriptData, clientIndex);
      }

      public string End_Script_RunScript(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Script_RunScript();
      }

      #endif

      /// <summary>
      /// Executes a script on the server.
      /// </summary>
      /// <param name="scriptName">The name of the script to be run</param>
      /// <param name="jsonScriptData">Data to be sent to the script in json format</param>
      /// <param name="clientIndex"></param>
      public string Script_RunScript(string scriptName, string jsonScriptData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Script_RunScript(scriptName, jsonScriptData, clientIndex);
        return recv_Script_RunScript();

        #else
        var asyncResult = Begin_Script_RunScript(null, null, scriptName, jsonScriptData, clientIndex);
        return End_Script_RunScript(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Script_RunScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, int clientIndex)
      #else
      public void send_Script_RunScript(string scriptName, string jsonScriptData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Script_RunScript", TMessageType.Call, seqid_));
        Script_RunScript_args args = new Script_RunScript_args();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Script_RunScript()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Script_RunScript_result result = new Script_RunScript_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunScript failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Script_ScheduleRunScriptUTC(AsyncCallback callback, object state, string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex)
      {
        return send_Script_ScheduleRunScriptUTC(callback, state, scriptName, jsonScriptData, startDateInUTC, clientIndex);
      }

      public string End_Script_ScheduleRunScriptUTC(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Script_ScheduleRunScriptUTC();
      }

      #endif

      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="startDateInUTC">The start date as a DateTime object</param>
      /// <param name="clientIndex"></param>
      public string Script_ScheduleRunScriptUTC(string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Script_ScheduleRunScriptUTC(scriptName, jsonScriptData, startDateInUTC, clientIndex);
        return recv_Script_ScheduleRunScriptUTC();

        #else
        var asyncResult = Begin_Script_ScheduleRunScriptUTC(null, null, scriptName, jsonScriptData, startDateInUTC, clientIndex);
        return End_Script_ScheduleRunScriptUTC(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Script_ScheduleRunScriptUTC(AsyncCallback callback, object state, string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex)
      #else
      public void send_Script_ScheduleRunScriptUTC(string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Script_ScheduleRunScriptUTC", TMessageType.Call, seqid_));
        Script_ScheduleRunScriptUTC_args args = new Script_ScheduleRunScriptUTC_args();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.StartDateInUTC = startDateInUTC;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Script_ScheduleRunScriptUTC()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Script_ScheduleRunScriptUTC_result result = new Script_ScheduleRunScriptUTC_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_ScheduleRunScriptUTC failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Script_ScheduleRunScriptMinutes(AsyncCallback callback, object state, string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex)
      {
        return send_Script_ScheduleRunScriptMinutes(callback, state, scriptName, jsonScriptData, minutesFromNow, clientIndex);
      }

      public string End_Script_ScheduleRunScriptMinutes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Script_ScheduleRunScriptMinutes();
      }

      #endif

      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="minutesFromNow">Number of minutes from now to run script</param>
      /// <param name="clientIndex"></param>
      public string Script_ScheduleRunScriptMinutes(string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Script_ScheduleRunScriptMinutes(scriptName, jsonScriptData, minutesFromNow, clientIndex);
        return recv_Script_ScheduleRunScriptMinutes();

        #else
        var asyncResult = Begin_Script_ScheduleRunScriptMinutes(null, null, scriptName, jsonScriptData, minutesFromNow, clientIndex);
        return End_Script_ScheduleRunScriptMinutes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Script_ScheduleRunScriptMinutes(AsyncCallback callback, object state, string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex)
      #else
      public void send_Script_ScheduleRunScriptMinutes(string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Script_ScheduleRunScriptMinutes", TMessageType.Call, seqid_));
        Script_ScheduleRunScriptMinutes_args args = new Script_ScheduleRunScriptMinutes_args();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Script_ScheduleRunScriptMinutes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Script_ScheduleRunScriptMinutes_result result = new Script_ScheduleRunScriptMinutes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_ScheduleRunScriptMinutes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Script_RunParentScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string parentLevel, int clientIndex)
      {
        return send_Script_RunParentScript(callback, state, scriptName, jsonScriptData, parentLevel, clientIndex);
      }

      public string End_Script_RunParentScript(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Script_RunParentScript();
      }

      #endif

      /// <summary>
      /// Run a cloud script in a parent app
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="parentLevel">The level name of the parent to run the script from</param>
      /// <param name="clientIndex"></param>
      public string Script_RunParentScript(string scriptName, string jsonScriptData, string parentLevel, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Script_RunParentScript(scriptName, jsonScriptData, parentLevel, clientIndex);
        return recv_Script_RunParentScript();

        #else
        var asyncResult = Begin_Script_RunParentScript(null, null, scriptName, jsonScriptData, parentLevel, clientIndex);
        return End_Script_RunParentScript(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Script_RunParentScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string parentLevel, int clientIndex)
      #else
      public void send_Script_RunParentScript(string scriptName, string jsonScriptData, string parentLevel, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Script_RunParentScript", TMessageType.Call, seqid_));
        Script_RunParentScript_args args = new Script_RunParentScript_args();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.ParentLevel = parentLevel;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Script_RunParentScript()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Script_RunParentScript_result result = new Script_RunParentScript_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunParentScript failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Script_CancelScheduledScript(AsyncCallback callback, object state, string jobId, int clientIndex)
      {
        return send_Script_CancelScheduledScript(callback, state, jobId, clientIndex);
      }

      public string End_Script_CancelScheduledScript(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Script_CancelScheduledScript();
      }

      #endif

      /// <summary>
      /// Cancels a scheduled cloud code script
      /// </summary>
      /// <param name="jobId">ID of script job to cancel</param>
      /// <param name="clientIndex"></param>
      public string Script_CancelScheduledScript(string jobId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Script_CancelScheduledScript(jobId, clientIndex);
        return recv_Script_CancelScheduledScript();

        #else
        var asyncResult = Begin_Script_CancelScheduledScript(null, null, jobId, clientIndex);
        return End_Script_CancelScheduledScript(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Script_CancelScheduledScript(AsyncCallback callback, object state, string jobId, int clientIndex)
      #else
      public void send_Script_CancelScheduledScript(string jobId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Script_CancelScheduledScript", TMessageType.Call, seqid_));
        Script_CancelScheduledScript_args args = new Script_CancelScheduledScript_args();
        args.JobId = jobId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Script_CancelScheduledScript()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Script_CancelScheduledScript_result result = new Script_CancelScheduledScript_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_CancelScheduledScript failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Script_RunPeerScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string peer, int clientIndex)
      {
        return send_Script_RunPeerScript(callback, state, scriptName, jsonScriptData, peer, clientIndex);
      }

      public string End_Script_RunPeerScript(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Script_RunPeerScript();
      }

      #endif

      /// <summary>
      /// Runs a script from the context of a peer
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      public string Script_RunPeerScript(string scriptName, string jsonScriptData, string peer, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Script_RunPeerScript(scriptName, jsonScriptData, peer, clientIndex);
        return recv_Script_RunPeerScript();

        #else
        var asyncResult = Begin_Script_RunPeerScript(null, null, scriptName, jsonScriptData, peer, clientIndex);
        return End_Script_RunPeerScript(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Script_RunPeerScript(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string peer, int clientIndex)
      #else
      public void send_Script_RunPeerScript(string scriptName, string jsonScriptData, string peer, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Script_RunPeerScript", TMessageType.Call, seqid_));
        Script_RunPeerScript_args args = new Script_RunPeerScript_args();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.Peer = peer;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Script_RunPeerScript()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Script_RunPeerScript_result result = new Script_RunPeerScript_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunPeerScript failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Script_RunPeerScriptAsynch(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string peer, int clientIndex)
      {
        return send_Script_RunPeerScriptAsynch(callback, state, scriptName, jsonScriptData, peer, clientIndex);
      }

      public string End_Script_RunPeerScriptAsynch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Script_RunPeerScriptAsynch();
      }

      #endif

      /// <summary>
      /// Runs a script asynchronously from the context of a peer
      /// This operation does not wait for the script to complete before returning
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      public string Script_RunPeerScriptAsynch(string scriptName, string jsonScriptData, string peer, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Script_RunPeerScriptAsynch(scriptName, jsonScriptData, peer, clientIndex);
        return recv_Script_RunPeerScriptAsynch();

        #else
        var asyncResult = Begin_Script_RunPeerScriptAsynch(null, null, scriptName, jsonScriptData, peer, clientIndex);
        return End_Script_RunPeerScriptAsynch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Script_RunPeerScriptAsynch(AsyncCallback callback, object state, string scriptName, string jsonScriptData, string peer, int clientIndex)
      #else
      public void send_Script_RunPeerScriptAsynch(string scriptName, string jsonScriptData, string peer, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Script_RunPeerScriptAsynch", TMessageType.Call, seqid_));
        Script_RunPeerScriptAsynch_args args = new Script_RunPeerScriptAsynch_args();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.Peer = peer;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Script_RunPeerScriptAsynch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Script_RunPeerScriptAsynch_result result = new Script_RunPeerScriptAsynch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunPeerScriptAsynch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, bool replaceName, int clientIndex)
      {
        return send_SocialLeaderboard_GetSocialLeaderboard(callback, state, leaderboardId, replaceName, clientIndex);
      }

      public string End_SocialLeaderboard_GetSocialLeaderboard(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetSocialLeaderboard();
      }

      #endif

      /// <summary>
      /// Method returns the social leaderboard. A player's social leaderboard is
      /// comprised of players who are recognized as being your friend.
      /// For now, this applies solely to Facebook connected players who are
      /// friends with the logged in player (who also must be Facebook connected).
      /// In the future this will expand to other identification means (such as
      /// Game Centre, Google circles etc).
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score. The currently logged in player will also
      /// be returned in the social leaderboard.
      /// 
      /// Note: If no friends have played the game, the bestScore, createdAt, updatedAt
      /// will contain NULL.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetSocialLeaderboard(string leaderboardId, bool replaceName, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetSocialLeaderboard(leaderboardId, replaceName, clientIndex);
        return recv_SocialLeaderboard_GetSocialLeaderboard();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetSocialLeaderboard(null, null, leaderboardId, replaceName, clientIndex);
        return End_SocialLeaderboard_GetSocialLeaderboard(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, bool replaceName, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetSocialLeaderboard(string leaderboardId, bool replaceName, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetSocialLeaderboard", TMessageType.Call, seqid_));
        SocialLeaderboard_GetSocialLeaderboard_args args = new SocialLeaderboard_GetSocialLeaderboard_args();
        args.LeaderboardId = leaderboardId;
        args.ReplaceName = replaceName;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetSocialLeaderboard()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetSocialLeaderboard_result result = new SocialLeaderboard_GetSocialLeaderboard_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetSocialLeaderboard failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetMultiSocialLeaderboard(AsyncCallback callback, object state, List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex)
      {
        return send_SocialLeaderboard_GetMultiSocialLeaderboard(callback, state, leaderboardIds, leaderboardResultCount, replaceName, clientIndex);
      }

      public string End_SocialLeaderboard_GetMultiSocialLeaderboard(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetMultiSocialLeaderboard();
      }

      #endif

      /// <summary>
      /// Reads multiple social leaderboards.
      /// </summary>
      /// <param name="leaderboardIds">Array of leaderboard id strings</param>
      /// <param name="leaderboardResultCount">Maximum count of entries to return for each leaderboard.</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetMultiSocialLeaderboard(List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetMultiSocialLeaderboard(leaderboardIds, leaderboardResultCount, replaceName, clientIndex);
        return recv_SocialLeaderboard_GetMultiSocialLeaderboard();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetMultiSocialLeaderboard(null, null, leaderboardIds, leaderboardResultCount, replaceName, clientIndex);
        return End_SocialLeaderboard_GetMultiSocialLeaderboard(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetMultiSocialLeaderboard(AsyncCallback callback, object state, List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetMultiSocialLeaderboard(List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetMultiSocialLeaderboard", TMessageType.Call, seqid_));
        SocialLeaderboard_GetMultiSocialLeaderboard_args args = new SocialLeaderboard_GetMultiSocialLeaderboard_args();
        args.LeaderboardIds = leaderboardIds;
        args.LeaderboardResultCount = leaderboardResultCount;
        args.ReplaceName = replaceName;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetMultiSocialLeaderboard()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetMultiSocialLeaderboard_result result = new SocialLeaderboard_GetMultiSocialLeaderboard_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetMultiSocialLeaderboard failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardPage(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex)
      {
        return send_SocialLeaderboard_GetGlobalLeaderboardPage(callback, state, leaderboardId, sort, startIndex, endIndex, clientIndex);
      }

      public string End_SocialLeaderboard_GetGlobalLeaderboardPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGlobalLeaderboardPage();
      }

      #endif

      /// <summary>
      /// Method returns a page of global leaderboard results.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// 
      /// Note: This method allows the client to retrieve pages from within the global leaderboard list
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGlobalLeaderboardPage(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGlobalLeaderboardPage(leaderboardId, sort, startIndex, endIndex, clientIndex);
        return recv_SocialLeaderboard_GetGlobalLeaderboardPage();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGlobalLeaderboardPage(null, null, leaderboardId, sort, startIndex, endIndex, clientIndex);
        return End_SocialLeaderboard_GetGlobalLeaderboardPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGlobalLeaderboardPage(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGlobalLeaderboardPage(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPage", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGlobalLeaderboardPage_args args = new SocialLeaderboard_GetGlobalLeaderboardPage_args();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.StartIndex = startIndex;
        args.EndIndex = endIndex;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGlobalLeaderboardPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGlobalLeaderboardPage_result result = new SocialLeaderboard_GetGlobalLeaderboardPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex)
      {
        return send_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(callback, state, leaderboardId, sort, startIndex, endIndex, versionId, clientIndex);
      }

      public string End_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGlobalLeaderboardPageByVersion();
      }

      #endif

      /// <summary>
      /// Method returns a page of global leaderboard results. By using a non-current version id,
      /// the user can retrieve a historical leaderboard. See GetGlobalLeaderboardVersions method
      /// to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="versionId">The historical version to retrieve.</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGlobalLeaderboardPageByVersion(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(leaderboardId, sort, startIndex, endIndex, versionId, clientIndex);
        return recv_SocialLeaderboard_GetGlobalLeaderboardPageByVersion();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(null, null, leaderboardId, sort, startIndex, endIndex, versionId, clientIndex);
        return End_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPageByVersion", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args args = new SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.StartIndex = startIndex;
        args.EndIndex = endIndex;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGlobalLeaderboardPageByVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result result = new SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardPageByVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardView(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex)
      {
        return send_SocialLeaderboard_GetGlobalLeaderboardView(callback, state, leaderboardId, sort, beforeCount, afterCount, clientIndex);
      }

      public string End_SocialLeaderboard_GetGlobalLeaderboardView(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGlobalLeaderboardView();
      }

      #endif

      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGlobalLeaderboardView(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGlobalLeaderboardView(leaderboardId, sort, beforeCount, afterCount, clientIndex);
        return recv_SocialLeaderboard_GetGlobalLeaderboardView();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGlobalLeaderboardView(null, null, leaderboardId, sort, beforeCount, afterCount, clientIndex);
        return End_SocialLeaderboard_GetGlobalLeaderboardView(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGlobalLeaderboardView(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGlobalLeaderboardView(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardView", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGlobalLeaderboardView_args args = new SocialLeaderboard_GetGlobalLeaderboardView_args();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.BeforeCount = beforeCount;
        args.AfterCount = afterCount;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGlobalLeaderboardView()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGlobalLeaderboardView_result result = new SocialLeaderboard_GetGlobalLeaderboardView_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardView failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex)
      {
        return send_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(callback, state, leaderboardId, sort, beforeCount, afterCount, versionId, clientIndex);
      }

      public string End_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGlobalLeaderboardViewByVersion();
      }

      #endif

      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// By using a non-current version id, the user can retrieve a historical leaderboard.
      /// See GetGlobalLeaderboardVersions method to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="versionId">The historial version to retrieve. Use -1 for current leaderboard.</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGlobalLeaderboardViewByVersion(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(leaderboardId, sort, beforeCount, afterCount, versionId, clientIndex);
        return recv_SocialLeaderboard_GetGlobalLeaderboardViewByVersion();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(null, null, leaderboardId, sort, beforeCount, afterCount, versionId, clientIndex);
        return End_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(AsyncCallback callback, object state, string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardViewByVersion", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args args = new SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.BeforeCount = beforeCount;
        args.AfterCount = afterCount;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGlobalLeaderboardViewByVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result result = new SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardViewByVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardVersions(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      {
        return send_SocialLeaderboard_GetGlobalLeaderboardVersions(callback, state, leaderboardId, clientIndex);
      }

      public string End_SocialLeaderboard_GetGlobalLeaderboardVersions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGlobalLeaderboardVersions();
      }

      #endif

      /// <summary>
      /// Gets the global leaderboard versions.
      /// </summary>
      /// <param name="leaderboardId">In_leaderboard identifier.</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGlobalLeaderboardVersions(string leaderboardId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGlobalLeaderboardVersions(leaderboardId, clientIndex);
        return recv_SocialLeaderboard_GetGlobalLeaderboardVersions();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGlobalLeaderboardVersions(null, null, leaderboardId, clientIndex);
        return End_SocialLeaderboard_GetGlobalLeaderboardVersions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGlobalLeaderboardVersions(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGlobalLeaderboardVersions(string leaderboardId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardVersions", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGlobalLeaderboardVersions_args args = new SocialLeaderboard_GetGlobalLeaderboardVersions_args();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGlobalLeaderboardVersions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGlobalLeaderboardVersions_result result = new SocialLeaderboard_GetGlobalLeaderboardVersions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardVersions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGroupSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, string groupId, int clientIndex)
      {
        return send_SocialLeaderboard_GetGroupSocialLeaderboard(callback, state, leaderboardId, groupId, clientIndex);
      }

      public string End_SocialLeaderboard_GetGroupSocialLeaderboard(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGroupSocialLeaderboard();
      }

      #endif

      /// <summary>
      /// Retrieve the social leaderboard for a group.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to read</param>
      /// <param name="groupId">The group ID</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGroupSocialLeaderboard(string leaderboardId, string groupId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGroupSocialLeaderboard(leaderboardId, groupId, clientIndex);
        return recv_SocialLeaderboard_GetGroupSocialLeaderboard();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGroupSocialLeaderboard(null, null, leaderboardId, groupId, clientIndex);
        return End_SocialLeaderboard_GetGroupSocialLeaderboard(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGroupSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, string groupId, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGroupSocialLeaderboard(string leaderboardId, string groupId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGroupSocialLeaderboard", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGroupSocialLeaderboard_args args = new SocialLeaderboard_GetGroupSocialLeaderboard_args();
        args.LeaderboardId = leaderboardId;
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGroupSocialLeaderboard()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGroupSocialLeaderboard_result result = new SocialLeaderboard_GetGroupSocialLeaderboard_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGroupSocialLeaderboard failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_PostScoreToLeaderboard(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, int clientIndex)
      {
        return send_SocialLeaderboard_PostScoreToLeaderboard(callback, state, leaderboardId, score, jsonData, clientIndex);
      }

      public string End_SocialLeaderboard_PostScoreToLeaderboard(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_PostScoreToLeaderboard();
      }

      #endif

      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// 
      /// Note that the behaviour of posting a score can be modified in
      /// the brainCloud portal. By default, the server will only keep
      /// the player's best score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_PostScoreToLeaderboard(string leaderboardId, long score, string jsonData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_PostScoreToLeaderboard(leaderboardId, score, jsonData, clientIndex);
        return recv_SocialLeaderboard_PostScoreToLeaderboard();

        #else
        var asyncResult = Begin_SocialLeaderboard_PostScoreToLeaderboard(null, null, leaderboardId, score, jsonData, clientIndex);
        return End_SocialLeaderboard_PostScoreToLeaderboard(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_PostScoreToLeaderboard(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, int clientIndex)
      #else
      public void send_SocialLeaderboard_PostScoreToLeaderboard(string leaderboardId, long score, string jsonData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToLeaderboard", TMessageType.Call, seqid_));
        SocialLeaderboard_PostScoreToLeaderboard_args args = new SocialLeaderboard_PostScoreToLeaderboard_args();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_PostScoreToLeaderboard()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_PostScoreToLeaderboard_result result = new SocialLeaderboard_PostScoreToLeaderboard_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_PostScoreToLeaderboard failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_RemovePlayerScore(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      {
        return send_SocialLeaderboard_RemovePlayerScore(callback, state, leaderboardId, versionId, clientIndex);
      }

      public string End_SocialLeaderboard_RemovePlayerScore(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_RemovePlayerScore();
      }

      #endif

      /// <summary>
      /// Removes a player's score from the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_RemovePlayerScore(string leaderboardId, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_RemovePlayerScore(leaderboardId, versionId, clientIndex);
        return recv_SocialLeaderboard_RemovePlayerScore();

        #else
        var asyncResult = Begin_SocialLeaderboard_RemovePlayerScore(null, null, leaderboardId, versionId, clientIndex);
        return End_SocialLeaderboard_RemovePlayerScore(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_RemovePlayerScore(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      #else
      public void send_SocialLeaderboard_RemovePlayerScore(string leaderboardId, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_RemovePlayerScore", TMessageType.Call, seqid_));
        SocialLeaderboard_RemovePlayerScore_args args = new SocialLeaderboard_RemovePlayerScore_args();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_RemovePlayerScore()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_RemovePlayerScore_result result = new SocialLeaderboard_RemovePlayerScore_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_RemovePlayerScore failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_PostScoreToDynamicLeaderboard(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex)
      {
        return send_SocialLeaderboard_PostScoreToDynamicLeaderboard(callback, state, leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, clientIndex);
      }

      public string End_SocialLeaderboard_PostScoreToDynamicLeaderboard(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_PostScoreToDynamicLeaderboard();
      }

      #endif

      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationType">Type of rotation</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_PostScoreToDynamicLeaderboard(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_PostScoreToDynamicLeaderboard(leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, clientIndex);
        return recv_SocialLeaderboard_PostScoreToDynamicLeaderboard();

        #else
        var asyncResult = Begin_SocialLeaderboard_PostScoreToDynamicLeaderboard(null, null, leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, clientIndex);
        return End_SocialLeaderboard_PostScoreToDynamicLeaderboard(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_PostScoreToDynamicLeaderboard(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex)
      #else
      public void send_SocialLeaderboard_PostScoreToDynamicLeaderboard(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboard", TMessageType.Call, seqid_));
        SocialLeaderboard_PostScoreToDynamicLeaderboard_args args = new SocialLeaderboard_PostScoreToDynamicLeaderboard_args();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.LeaderboardType = leaderboardType;
        args.RotationType = rotationType;
        args.RotationReset = rotationReset;
        args.RetainedCount = retainedCount;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_PostScoreToDynamicLeaderboard()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_PostScoreToDynamicLeaderboard_result result = new SocialLeaderboard_PostScoreToDynamicLeaderboard_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_PostScoreToDynamicLeaderboard failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex)
      {
        return send_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(callback, state, leaderboardId, score, jsonData, leaderboardType, rotationReset, retainedCount, numDaysToRotate, clientIndex);
      }

      public string End_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_PostScoreToDynamicLeaderboardDays();
      }

      #endif

      /// <summary>
      /// Post the players score to the given social leaderboard with a rotation type of DAYS.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="numDaysToRotate">How many days between each rotation</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_PostScoreToDynamicLeaderboardDays(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(leaderboardId, score, jsonData, leaderboardType, rotationReset, retainedCount, numDaysToRotate, clientIndex);
        return recv_SocialLeaderboard_PostScoreToDynamicLeaderboardDays();

        #else
        var asyncResult = Begin_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(null, null, leaderboardId, score, jsonData, leaderboardType, rotationReset, retainedCount, numDaysToRotate, clientIndex);
        return End_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex)
      #else
      public void send_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboardDays", TMessageType.Call, seqid_));
        SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args args = new SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.LeaderboardType = leaderboardType;
        args.RotationReset = rotationReset;
        args.RetainedCount = retainedCount;
        args.NumDaysToRotate = numDaysToRotate;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_PostScoreToDynamicLeaderboardDays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result result = new SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_PostScoreToDynamicLeaderboardDays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetPlayersSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, List<string> profileIds, int clientIndex)
      {
        return send_SocialLeaderboard_GetPlayersSocialLeaderboard(callback, state, leaderboardId, profileIds, clientIndex);
      }

      public string End_SocialLeaderboard_GetPlayersSocialLeaderboard(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetPlayersSocialLeaderboard();
      }

      #endif

      /// <summary>
      /// Retrieve the social leaderboard for a list of players.
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="profileIds">The IDs of the players</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetPlayersSocialLeaderboard(string leaderboardId, List<string> profileIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetPlayersSocialLeaderboard(leaderboardId, profileIds, clientIndex);
        return recv_SocialLeaderboard_GetPlayersSocialLeaderboard();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetPlayersSocialLeaderboard(null, null, leaderboardId, profileIds, clientIndex);
        return End_SocialLeaderboard_GetPlayersSocialLeaderboard(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetPlayersSocialLeaderboard(AsyncCallback callback, object state, string leaderboardId, List<string> profileIds, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetPlayersSocialLeaderboard(string leaderboardId, List<string> profileIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayersSocialLeaderboard", TMessageType.Call, seqid_));
        SocialLeaderboard_GetPlayersSocialLeaderboard_args args = new SocialLeaderboard_GetPlayersSocialLeaderboard_args();
        args.LeaderboardId = leaderboardId;
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetPlayersSocialLeaderboard()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetPlayersSocialLeaderboard_result result = new SocialLeaderboard_GetPlayersSocialLeaderboard_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetPlayersSocialLeaderboard failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_ListLeaderboards(AsyncCallback callback, object state, int clientIndex)
      {
        return send_SocialLeaderboard_ListLeaderboards(callback, state, clientIndex);
      }

      public string End_SocialLeaderboard_ListLeaderboards(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_ListLeaderboards();
      }

      #endif

      /// <summary>
      /// Retrieve a list of all leaderboards
      /// </summary>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_ListLeaderboards(int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_ListLeaderboards(clientIndex);
        return recv_SocialLeaderboard_ListLeaderboards();

        #else
        var asyncResult = Begin_SocialLeaderboard_ListLeaderboards(null, null, clientIndex);
        return End_SocialLeaderboard_ListLeaderboards(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_ListLeaderboards(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_SocialLeaderboard_ListLeaderboards(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_ListLeaderboards", TMessageType.Call, seqid_));
        SocialLeaderboard_ListLeaderboards_args args = new SocialLeaderboard_ListLeaderboards_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_ListLeaderboards()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_ListLeaderboards_result result = new SocialLeaderboard_ListLeaderboards_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_ListLeaderboards failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardEntryCount(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      {
        return send_SocialLeaderboard_GetGlobalLeaderboardEntryCount(callback, state, leaderboardId, clientIndex);
      }

      public string End_SocialLeaderboard_GetGlobalLeaderboardEntryCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGlobalLeaderboardEntryCount();
      }

      #endif

      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGlobalLeaderboardEntryCount(string leaderboardId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGlobalLeaderboardEntryCount(leaderboardId, clientIndex);
        return recv_SocialLeaderboard_GetGlobalLeaderboardEntryCount();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGlobalLeaderboardEntryCount(null, null, leaderboardId, clientIndex);
        return End_SocialLeaderboard_GetGlobalLeaderboardEntryCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGlobalLeaderboardEntryCount(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGlobalLeaderboardEntryCount(string leaderboardId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCount", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGlobalLeaderboardEntryCount_args args = new SocialLeaderboard_GetGlobalLeaderboardEntryCount_args();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGlobalLeaderboardEntryCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGlobalLeaderboardEntryCount_result result = new SocialLeaderboard_GetGlobalLeaderboardEntryCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardEntryCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      {
        return send_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(callback, state, leaderboardId, versionId, clientIndex);
      }

      public string End_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion();
      }

      #endif

      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(string leaderboardId, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(leaderboardId, versionId, clientIndex);
        return recv_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(null, null, leaderboardId, versionId, clientIndex);
        return End_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(string leaderboardId, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion", TMessageType.Call, seqid_));
        SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args args = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result result = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetPlayerScore(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      {
        return send_SocialLeaderboard_GetPlayerScore(callback, state, leaderboardId, versionId, clientIndex);
      }

      public string End_SocialLeaderboard_GetPlayerScore(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetPlayerScore();
      }

      #endif

      /// <summary>
      /// Gets a player's score from a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard. Use -1 for current.</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetPlayerScore(string leaderboardId, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetPlayerScore(leaderboardId, versionId, clientIndex);
        return recv_SocialLeaderboard_GetPlayerScore();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetPlayerScore(null, null, leaderboardId, versionId, clientIndex);
        return End_SocialLeaderboard_GetPlayerScore(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetPlayerScore(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetPlayerScore(string leaderboardId, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayerScore", TMessageType.Call, seqid_));
        SocialLeaderboard_GetPlayerScore_args args = new SocialLeaderboard_GetPlayerScore_args();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetPlayerScore()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetPlayerScore_result result = new SocialLeaderboard_GetPlayerScore_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetPlayerScore failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialLeaderboard_GetPlayerScoresFromLeaderboards(AsyncCallback callback, object state, List<string> leaderboardIds, int clientIndex)
      {
        return send_SocialLeaderboard_GetPlayerScoresFromLeaderboards(callback, state, leaderboardIds, clientIndex);
      }

      public string End_SocialLeaderboard_GetPlayerScoresFromLeaderboards(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialLeaderboard_GetPlayerScoresFromLeaderboards();
      }

      #endif

      /// <summary>
      /// Gets a player's score from multiple leaderboards
      /// </summary>
      /// <param name="leaderboardIds">A collection of leaderboardIds to retrieve scores from</param>
      /// <param name="clientIndex"></param>
      public string SocialLeaderboard_GetPlayerScoresFromLeaderboards(List<string> leaderboardIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialLeaderboard_GetPlayerScoresFromLeaderboards(leaderboardIds, clientIndex);
        return recv_SocialLeaderboard_GetPlayerScoresFromLeaderboards();

        #else
        var asyncResult = Begin_SocialLeaderboard_GetPlayerScoresFromLeaderboards(null, null, leaderboardIds, clientIndex);
        return End_SocialLeaderboard_GetPlayerScoresFromLeaderboards(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialLeaderboard_GetPlayerScoresFromLeaderboards(AsyncCallback callback, object state, List<string> leaderboardIds, int clientIndex)
      #else
      public void send_SocialLeaderboard_GetPlayerScoresFromLeaderboards(List<string> leaderboardIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayerScoresFromLeaderboards", TMessageType.Call, seqid_));
        SocialLeaderboard_GetPlayerScoresFromLeaderboards_args args = new SocialLeaderboard_GetPlayerScoresFromLeaderboards_args();
        args.LeaderboardIds = leaderboardIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialLeaderboard_GetPlayerScoresFromLeaderboards()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialLeaderboard_GetPlayerScoresFromLeaderboards_result result = new SocialLeaderboard_GetPlayerScoresFromLeaderboards_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetPlayerScoresFromLeaderboards failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Time_ReadServerTime(AsyncCallback callback, object state, int clientIndex)
      {
        return send_Time_ReadServerTime(callback, state, clientIndex);
      }

      public string End_Time_ReadServerTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Time_ReadServerTime();
      }

      #endif

      /// <summary>
      /// Method returns the server time in UTC. This is in UNIX millis time format.
      /// For instance 1396378241893 represents 2014-04-01 2:50:41.893 in GMT-4.
      /// </summary>
      /// <param name="clientIndex"></param>
      public string Time_ReadServerTime(int clientIndex)
      {
        #if !SILVERLIGHT
        send_Time_ReadServerTime(clientIndex);
        return recv_Time_ReadServerTime();

        #else
        var asyncResult = Begin_Time_ReadServerTime(null, null, clientIndex);
        return End_Time_ReadServerTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Time_ReadServerTime(AsyncCallback callback, object state, int clientIndex)
      #else
      public void send_Time_ReadServerTime(int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Time_ReadServerTime", TMessageType.Call, seqid_));
        Time_ReadServerTime_args args = new Time_ReadServerTime_args();
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Time_ReadServerTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Time_ReadServerTime_result result = new Time_ReadServerTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Time_ReadServerTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_ClaimTournamentReward(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      {
        return send_Tournament_ClaimTournamentReward(callback, state, leaderboardId, versionId, clientIndex);
      }

      public string End_Tournament_ClaimTournamentReward(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_ClaimTournamentReward();
      }

      #endif

      /// <summary>
      /// Processes any outstanding rewards for the given player
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament to claim rewards for.Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      public string Tournament_ClaimTournamentReward(string leaderboardId, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_ClaimTournamentReward(leaderboardId, versionId, clientIndex);
        return recv_Tournament_ClaimTournamentReward();

        #else
        var asyncResult = Begin_Tournament_ClaimTournamentReward(null, null, leaderboardId, versionId, clientIndex);
        return End_Tournament_ClaimTournamentReward(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_ClaimTournamentReward(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      #else
      public void send_Tournament_ClaimTournamentReward(string leaderboardId, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_ClaimTournamentReward", TMessageType.Call, seqid_));
        Tournament_ClaimTournamentReward_args args = new Tournament_ClaimTournamentReward_args();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_ClaimTournamentReward()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_ClaimTournamentReward_result result = new Tournament_ClaimTournamentReward_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_ClaimTournamentReward failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_GetTournamentStatus(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      {
        return send_Tournament_GetTournamentStatus(callback, state, leaderboardId, versionId, clientIndex);
      }

      public string End_Tournament_GetTournamentStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_GetTournamentStatus();
      }

      #endif

      /// <summary>
      /// Get tournament status associated with a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      public string Tournament_GetTournamentStatus(string leaderboardId, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_GetTournamentStatus(leaderboardId, versionId, clientIndex);
        return recv_Tournament_GetTournamentStatus();

        #else
        var asyncResult = Begin_Tournament_GetTournamentStatus(null, null, leaderboardId, versionId, clientIndex);
        return End_Tournament_GetTournamentStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_GetTournamentStatus(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      #else
      public void send_Tournament_GetTournamentStatus(string leaderboardId, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_GetTournamentStatus", TMessageType.Call, seqid_));
        Tournament_GetTournamentStatus_args args = new Tournament_GetTournamentStatus_args();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_GetTournamentStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_GetTournamentStatus_result result = new Tournament_GetTournamentStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_GetTournamentStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_JoinTournament(AsyncCallback callback, object state, string leaderboardId, string tournamentCode, long initialScore, int clientIndex)
      {
        return send_Tournament_JoinTournament(callback, state, leaderboardId, tournamentCode, initialScore, clientIndex);
      }

      public string End_Tournament_JoinTournament(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_JoinTournament();
      }

      #endif

      /// <summary>
      /// Join the specified tournament.
      /// Any entry fees will be automatically collected.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="tournamentCode">Tournament to join</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      public string Tournament_JoinTournament(string leaderboardId, string tournamentCode, long initialScore, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_JoinTournament(leaderboardId, tournamentCode, initialScore, clientIndex);
        return recv_Tournament_JoinTournament();

        #else
        var asyncResult = Begin_Tournament_JoinTournament(null, null, leaderboardId, tournamentCode, initialScore, clientIndex);
        return End_Tournament_JoinTournament(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_JoinTournament(AsyncCallback callback, object state, string leaderboardId, string tournamentCode, long initialScore, int clientIndex)
      #else
      public void send_Tournament_JoinTournament(string leaderboardId, string tournamentCode, long initialScore, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_JoinTournament", TMessageType.Call, seqid_));
        Tournament_JoinTournament_args args = new Tournament_JoinTournament_args();
        args.LeaderboardId = leaderboardId;
        args.TournamentCode = tournamentCode;
        args.InitialScore = initialScore;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_JoinTournament()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_JoinTournament_result result = new Tournament_JoinTournament_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_JoinTournament failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_LeaveTournament(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      {
        return send_Tournament_LeaveTournament(callback, state, leaderboardId, clientIndex);
      }

      public string End_Tournament_LeaveTournament(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_LeaveTournament();
      }

      #endif

      /// <summary>
      /// Removes player's score from tournament leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      public string Tournament_LeaveTournament(string leaderboardId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_LeaveTournament(leaderboardId, clientIndex);
        return recv_Tournament_LeaveTournament();

        #else
        var asyncResult = Begin_Tournament_LeaveTournament(null, null, leaderboardId, clientIndex);
        return End_Tournament_LeaveTournament(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_LeaveTournament(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      #else
      public void send_Tournament_LeaveTournament(string leaderboardId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_LeaveTournament", TMessageType.Call, seqid_));
        Tournament_LeaveTournament_args args = new Tournament_LeaveTournament_args();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_LeaveTournament()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_LeaveTournament_result result = new Tournament_LeaveTournament_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_LeaveTournament failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_PostTournamentScore(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex)
      {
        return send_Tournament_PostTournamentScore(callback, state, leaderboardId, score, jsonData, roundStartedTime, clientIndex);
      }

      public string End_Tournament_PostTournamentScore(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_PostTournamentScore();
      }

      #endif

      /// <summary>
      /// Post the users score to the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="clientIndex"></param>
      public string Tournament_PostTournamentScore(string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_PostTournamentScore(leaderboardId, score, jsonData, roundStartedTime, clientIndex);
        return recv_Tournament_PostTournamentScore();

        #else
        var asyncResult = Begin_Tournament_PostTournamentScore(null, null, leaderboardId, score, jsonData, roundStartedTime, clientIndex);
        return End_Tournament_PostTournamentScore(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_PostTournamentScore(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex)
      #else
      public void send_Tournament_PostTournamentScore(string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_PostTournamentScore", TMessageType.Call, seqid_));
        Tournament_PostTournamentScore_args args = new Tournament_PostTournamentScore_args();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.RoundStartedTime = roundStartedTime;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_PostTournamentScore()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_PostTournamentScore_result result = new Tournament_PostTournamentScore_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_PostTournamentScore failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_PostTournamentScoreWithResults(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex)
      {
        return send_Tournament_PostTournamentScoreWithResults(callback, state, leaderboardId, score, jsonData, roundStartedTime, sort, beforeCount, afterCount, initialScore, clientIndex);
      }

      public string End_Tournament_PostTournamentScoreWithResults(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_PostTournamentScoreWithResults();
      }

      #endif

      /// <summary>
      /// Post the users score to the leaderboard and returns the results
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      public string Tournament_PostTournamentScoreWithResults(string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_PostTournamentScoreWithResults(leaderboardId, score, jsonData, roundStartedTime, sort, beforeCount, afterCount, initialScore, clientIndex);
        return recv_Tournament_PostTournamentScoreWithResults();

        #else
        var asyncResult = Begin_Tournament_PostTournamentScoreWithResults(null, null, leaderboardId, score, jsonData, roundStartedTime, sort, beforeCount, afterCount, initialScore, clientIndex);
        return End_Tournament_PostTournamentScoreWithResults(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_PostTournamentScoreWithResults(AsyncCallback callback, object state, string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex)
      #else
      public void send_Tournament_PostTournamentScoreWithResults(string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_PostTournamentScoreWithResults", TMessageType.Call, seqid_));
        Tournament_PostTournamentScoreWithResults_args args = new Tournament_PostTournamentScoreWithResults_args();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.RoundStartedTime = roundStartedTime;
        args.Sort = sort;
        args.BeforeCount = beforeCount;
        args.AfterCount = afterCount;
        args.InitialScore = initialScore;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_PostTournamentScoreWithResults()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_PostTournamentScoreWithResults_result result = new Tournament_PostTournamentScoreWithResults_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_PostTournamentScoreWithResults failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_ViewCurrentReward(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      {
        return send_Tournament_ViewCurrentReward(callback, state, leaderboardId, clientIndex);
      }

      public string End_Tournament_ViewCurrentReward(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_ViewCurrentReward();
      }

      #endif

      /// <summary>
      /// Returns the user's expected reward based on the current scores
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      public string Tournament_ViewCurrentReward(string leaderboardId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_ViewCurrentReward(leaderboardId, clientIndex);
        return recv_Tournament_ViewCurrentReward();

        #else
        var asyncResult = Begin_Tournament_ViewCurrentReward(null, null, leaderboardId, clientIndex);
        return End_Tournament_ViewCurrentReward(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_ViewCurrentReward(AsyncCallback callback, object state, string leaderboardId, int clientIndex)
      #else
      public void send_Tournament_ViewCurrentReward(string leaderboardId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_ViewCurrentReward", TMessageType.Call, seqid_));
        Tournament_ViewCurrentReward_args args = new Tournament_ViewCurrentReward_args();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_ViewCurrentReward()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_ViewCurrentReward_result result = new Tournament_ViewCurrentReward_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_ViewCurrentReward failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Tournament_ViewReward(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      {
        return send_Tournament_ViewReward(callback, state, leaderboardId, versionId, clientIndex);
      }

      public string End_Tournament_ViewReward(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Tournament_ViewReward();
      }

      #endif

      /// <summary>
      /// Returns the user's reward from a finished tournament
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      public string Tournament_ViewReward(string leaderboardId, int versionId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Tournament_ViewReward(leaderboardId, versionId, clientIndex);
        return recv_Tournament_ViewReward();

        #else
        var asyncResult = Begin_Tournament_ViewReward(null, null, leaderboardId, versionId, clientIndex);
        return End_Tournament_ViewReward(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Tournament_ViewReward(AsyncCallback callback, object state, string leaderboardId, int versionId, int clientIndex)
      #else
      public void send_Tournament_ViewReward(string leaderboardId, int versionId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Tournament_ViewReward", TMessageType.Call, seqid_));
        Tournament_ViewReward_args args = new Tournament_ViewReward_args();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Tournament_ViewReward()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Tournament_ViewReward_result result = new Tournament_ViewReward_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_ViewReward failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Patch_GetGameManifest(AsyncCallback callback, object state, string gameId, int clientIndex)
      {
        return send_Patch_GetGameManifest(callback, state, gameId, clientIndex);
      }

      public string End_Patch_GetGameManifest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Patch_GetGameManifest();
      }

      #endif

      public string Patch_GetGameManifest(string gameId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Patch_GetGameManifest(gameId, clientIndex);
        return recv_Patch_GetGameManifest();

        #else
        var asyncResult = Begin_Patch_GetGameManifest(null, null, gameId, clientIndex);
        return End_Patch_GetGameManifest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Patch_GetGameManifest(AsyncCallback callback, object state, string gameId, int clientIndex)
      #else
      public void send_Patch_GetGameManifest(string gameId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Patch_GetGameManifest", TMessageType.Call, seqid_));
        Patch_GetGameManifest_args args = new Patch_GetGameManifest_args();
        args.GameId = gameId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Patch_GetGameManifest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Patch_GetGameManifest_result result = new Patch_GetGameManifest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Patch_GetGameManifest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ShareVideo(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        return send_SocialFeed_ShareVideo(callback, state, timestamp, resource, tagged, show, block, clientIndex);
      }

      public string End_SocialFeed_ShareVideo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ShareVideo();
      }

      #endif

      public string SocialFeed_ShareVideo(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ShareVideo(timestamp, resource, tagged, show, block, clientIndex);
        return recv_SocialFeed_ShareVideo();

        #else
        var asyncResult = Begin_SocialFeed_ShareVideo(null, null, timestamp, resource, tagged, show, block, clientIndex);
        return End_SocialFeed_ShareVideo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ShareVideo(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #else
      public void send_SocialFeed_ShareVideo(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ShareVideo", TMessageType.Call, seqid_));
        SocialFeed_ShareVideo_args args = new SocialFeed_ShareVideo_args();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ShareVideo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ShareVideo_result result = new SocialFeed_ShareVideo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareVideo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ShareScreenshot(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        return send_SocialFeed_ShareScreenshot(callback, state, timestamp, resource, tagged, show, block, clientIndex);
      }

      public string End_SocialFeed_ShareScreenshot(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ShareScreenshot();
      }

      #endif

      public string SocialFeed_ShareScreenshot(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ShareScreenshot(timestamp, resource, tagged, show, block, clientIndex);
        return recv_SocialFeed_ShareScreenshot();

        #else
        var asyncResult = Begin_SocialFeed_ShareScreenshot(null, null, timestamp, resource, tagged, show, block, clientIndex);
        return End_SocialFeed_ShareScreenshot(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ShareScreenshot(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #else
      public void send_SocialFeed_ShareScreenshot(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ShareScreenshot", TMessageType.Call, seqid_));
        SocialFeed_ShareScreenshot_args args = new SocialFeed_ShareScreenshot_args();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ShareScreenshot()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ShareScreenshot_result result = new SocialFeed_ShareScreenshot_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareScreenshot failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ShareAchievement(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        return send_SocialFeed_ShareAchievement(callback, state, timestamp, resource, tagged, show, block, clientIndex);
      }

      public string End_SocialFeed_ShareAchievement(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ShareAchievement();
      }

      #endif

      public string SocialFeed_ShareAchievement(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ShareAchievement(timestamp, resource, tagged, show, block, clientIndex);
        return recv_SocialFeed_ShareAchievement();

        #else
        var asyncResult = Begin_SocialFeed_ShareAchievement(null, null, timestamp, resource, tagged, show, block, clientIndex);
        return End_SocialFeed_ShareAchievement(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ShareAchievement(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #else
      public void send_SocialFeed_ShareAchievement(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ShareAchievement", TMessageType.Call, seqid_));
        SocialFeed_ShareAchievement_args args = new SocialFeed_ShareAchievement_args();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ShareAchievement()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ShareAchievement_result result = new SocialFeed_ShareAchievement_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareAchievement failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ShareApp(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        return send_SocialFeed_ShareApp(callback, state, timestamp, resource, tagged, show, block, clientIndex);
      }

      public string End_SocialFeed_ShareApp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ShareApp();
      }

      #endif

      public string SocialFeed_ShareApp(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ShareApp(timestamp, resource, tagged, show, block, clientIndex);
        return recv_SocialFeed_ShareApp();

        #else
        var asyncResult = Begin_SocialFeed_ShareApp(null, null, timestamp, resource, tagged, show, block, clientIndex);
        return End_SocialFeed_ShareApp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ShareApp(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #else
      public void send_SocialFeed_ShareApp(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ShareApp", TMessageType.Call, seqid_));
        SocialFeed_ShareApp_args args = new SocialFeed_ShareApp_args();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ShareApp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ShareApp_result result = new SocialFeed_ShareApp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareApp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ShareChannel(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        return send_SocialFeed_ShareChannel(callback, state, timestamp, resource, tagged, show, block, clientIndex);
      }

      public string End_SocialFeed_ShareChannel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ShareChannel();
      }

      #endif

      public string SocialFeed_ShareChannel(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ShareChannel(timestamp, resource, tagged, show, block, clientIndex);
        return recv_SocialFeed_ShareChannel();

        #else
        var asyncResult = Begin_SocialFeed_ShareChannel(null, null, timestamp, resource, tagged, show, block, clientIndex);
        return End_SocialFeed_ShareChannel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ShareChannel(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #else
      public void send_SocialFeed_ShareChannel(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ShareChannel", TMessageType.Call, seqid_));
        SocialFeed_ShareChannel_args args = new SocialFeed_ShareChannel_args();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ShareChannel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ShareChannel_result result = new SocialFeed_ShareChannel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareChannel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ShareLink(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        return send_SocialFeed_ShareLink(callback, state, timestamp, resource, tagged, show, block, clientIndex);
      }

      public string End_SocialFeed_ShareLink(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ShareLink();
      }

      #endif

      public string SocialFeed_ShareLink(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ShareLink(timestamp, resource, tagged, show, block, clientIndex);
        return recv_SocialFeed_ShareLink();

        #else
        var asyncResult = Begin_SocialFeed_ShareLink(null, null, timestamp, resource, tagged, show, block, clientIndex);
        return End_SocialFeed_ShareLink(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ShareLink(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #else
      public void send_SocialFeed_ShareLink(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ShareLink", TMessageType.Call, seqid_));
        SocialFeed_ShareLink_args args = new SocialFeed_ShareLink_args();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ShareLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ShareLink_result result = new SocialFeed_ShareLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareLink failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ShareGameGuide(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        return send_SocialFeed_ShareGameGuide(callback, state, timestamp, resource, tagged, show, block, clientIndex);
      }

      public string End_SocialFeed_ShareGameGuide(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ShareGameGuide();
      }

      #endif

      public string SocialFeed_ShareGameGuide(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ShareGameGuide(timestamp, resource, tagged, show, block, clientIndex);
        return recv_SocialFeed_ShareGameGuide();

        #else
        var asyncResult = Begin_SocialFeed_ShareGameGuide(null, null, timestamp, resource, tagged, show, block, clientIndex);
        return End_SocialFeed_ShareGameGuide(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ShareGameGuide(AsyncCallback callback, object state, int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #else
      public void send_SocialFeed_ShareGameGuide(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ShareGameGuide", TMessageType.Call, seqid_));
        SocialFeed_ShareGameGuide_args args = new SocialFeed_ShareGameGuide_args();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ShareGameGuide()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ShareGameGuide_result result = new SocialFeed_ShareGameGuide_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareGameGuide failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ReadSocialFeed(AsyncCallback callback, object state, int skip, int limit, int clientIndex)
      {
        return send_SocialFeed_ReadSocialFeed(callback, state, skip, limit, clientIndex);
      }

      public string End_SocialFeed_ReadSocialFeed(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ReadSocialFeed();
      }

      #endif

      public string SocialFeed_ReadSocialFeed(int skip, int limit, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ReadSocialFeed(skip, limit, clientIndex);
        return recv_SocialFeed_ReadSocialFeed();

        #else
        var asyncResult = Begin_SocialFeed_ReadSocialFeed(null, null, skip, limit, clientIndex);
        return End_SocialFeed_ReadSocialFeed(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ReadSocialFeed(AsyncCallback callback, object state, int skip, int limit, int clientIndex)
      #else
      public void send_SocialFeed_ReadSocialFeed(int skip, int limit, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ReadSocialFeed", TMessageType.Call, seqid_));
        SocialFeed_ReadSocialFeed_args args = new SocialFeed_ReadSocialFeed_args();
        args.Skip = skip;
        args.Limit = limit;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ReadSocialFeed()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ReadSocialFeed_result result = new SocialFeed_ReadSocialFeed_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadSocialFeed failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ReadFilteredSocialFeed(AsyncCallback callback, object state, int skip, int limit, List<string> playerIds, int clientIndex)
      {
        return send_SocialFeed_ReadFilteredSocialFeed(callback, state, skip, limit, playerIds, clientIndex);
      }

      public string End_SocialFeed_ReadFilteredSocialFeed(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ReadFilteredSocialFeed();
      }

      #endif

      public string SocialFeed_ReadFilteredSocialFeed(int skip, int limit, List<string> playerIds, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ReadFilteredSocialFeed(skip, limit, playerIds, clientIndex);
        return recv_SocialFeed_ReadFilteredSocialFeed();

        #else
        var asyncResult = Begin_SocialFeed_ReadFilteredSocialFeed(null, null, skip, limit, playerIds, clientIndex);
        return End_SocialFeed_ReadFilteredSocialFeed(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ReadFilteredSocialFeed(AsyncCallback callback, object state, int skip, int limit, List<string> playerIds, int clientIndex)
      #else
      public void send_SocialFeed_ReadFilteredSocialFeed(int skip, int limit, List<string> playerIds, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ReadFilteredSocialFeed", TMessageType.Call, seqid_));
        SocialFeed_ReadFilteredSocialFeed_args args = new SocialFeed_ReadFilteredSocialFeed_args();
        args.Skip = skip;
        args.Limit = limit;
        args.PlayerIds = playerIds;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ReadFilteredSocialFeed()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ReadFilteredSocialFeed_result result = new SocialFeed_ReadFilteredSocialFeed_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadFilteredSocialFeed failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ReadFriendsSocialFeed(AsyncCallback callback, object state, int skip, int limit, int clientIndex)
      {
        return send_SocialFeed_ReadFriendsSocialFeed(callback, state, skip, limit, clientIndex);
      }

      public string End_SocialFeed_ReadFriendsSocialFeed(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ReadFriendsSocialFeed();
      }

      #endif

      public string SocialFeed_ReadFriendsSocialFeed(int skip, int limit, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ReadFriendsSocialFeed(skip, limit, clientIndex);
        return recv_SocialFeed_ReadFriendsSocialFeed();

        #else
        var asyncResult = Begin_SocialFeed_ReadFriendsSocialFeed(null, null, skip, limit, clientIndex);
        return End_SocialFeed_ReadFriendsSocialFeed(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ReadFriendsSocialFeed(AsyncCallback callback, object state, int skip, int limit, int clientIndex)
      #else
      public void send_SocialFeed_ReadFriendsSocialFeed(int skip, int limit, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ReadFriendsSocialFeed", TMessageType.Call, seqid_));
        SocialFeed_ReadFriendsSocialFeed_args args = new SocialFeed_ReadFriendsSocialFeed_args();
        args.Skip = skip;
        args.Limit = limit;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ReadFriendsSocialFeed()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ReadFriendsSocialFeed_result result = new SocialFeed_ReadFriendsSocialFeed_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadFriendsSocialFeed failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_PostComment(AsyncCallback callback, object state, int timestamp, string parentId, string content, int clientIndex)
      {
        return send_SocialFeed_PostComment(callback, state, timestamp, parentId, content, clientIndex);
      }

      public string End_SocialFeed_PostComment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_PostComment();
      }

      #endif

      public string SocialFeed_PostComment(int timestamp, string parentId, string content, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_PostComment(timestamp, parentId, content, clientIndex);
        return recv_SocialFeed_PostComment();

        #else
        var asyncResult = Begin_SocialFeed_PostComment(null, null, timestamp, parentId, content, clientIndex);
        return End_SocialFeed_PostComment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_PostComment(AsyncCallback callback, object state, int timestamp, string parentId, string content, int clientIndex)
      #else
      public void send_SocialFeed_PostComment(int timestamp, string parentId, string content, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_PostComment", TMessageType.Call, seqid_));
        SocialFeed_PostComment_args args = new SocialFeed_PostComment_args();
        args.Timestamp = timestamp;
        args.ParentId = parentId;
        args.Content = content;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_PostComment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_PostComment_result result = new SocialFeed_PostComment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_PostComment failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_PostCommentReply(AsyncCallback callback, object state, int timestamp, string parentId, string content, int clientIndex)
      {
        return send_SocialFeed_PostCommentReply(callback, state, timestamp, parentId, content, clientIndex);
      }

      public string End_SocialFeed_PostCommentReply(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_PostCommentReply();
      }

      #endif

      public string SocialFeed_PostCommentReply(int timestamp, string parentId, string content, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_PostCommentReply(timestamp, parentId, content, clientIndex);
        return recv_SocialFeed_PostCommentReply();

        #else
        var asyncResult = Begin_SocialFeed_PostCommentReply(null, null, timestamp, parentId, content, clientIndex);
        return End_SocialFeed_PostCommentReply(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_PostCommentReply(AsyncCallback callback, object state, int timestamp, string parentId, string content, int clientIndex)
      #else
      public void send_SocialFeed_PostCommentReply(int timestamp, string parentId, string content, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_PostCommentReply", TMessageType.Call, seqid_));
        SocialFeed_PostCommentReply_args args = new SocialFeed_PostCommentReply_args();
        args.Timestamp = timestamp;
        args.ParentId = parentId;
        args.Content = content;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_PostCommentReply()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_PostCommentReply_result result = new SocialFeed_PostCommentReply_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_PostCommentReply failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ReadComments(AsyncCallback callback, object state, int skip, int limit, string parentId, int clientIndex)
      {
        return send_SocialFeed_ReadComments(callback, state, skip, limit, parentId, clientIndex);
      }

      public string End_SocialFeed_ReadComments(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ReadComments();
      }

      #endif

      public string SocialFeed_ReadComments(int skip, int limit, string parentId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ReadComments(skip, limit, parentId, clientIndex);
        return recv_SocialFeed_ReadComments();

        #else
        var asyncResult = Begin_SocialFeed_ReadComments(null, null, skip, limit, parentId, clientIndex);
        return End_SocialFeed_ReadComments(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ReadComments(AsyncCallback callback, object state, int skip, int limit, string parentId, int clientIndex)
      #else
      public void send_SocialFeed_ReadComments(int skip, int limit, string parentId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ReadComments", TMessageType.Call, seqid_));
        SocialFeed_ReadComments_args args = new SocialFeed_ReadComments_args();
        args.Skip = skip;
        args.Limit = limit;
        args.ParentId = parentId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ReadComments()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ReadComments_result result = new SocialFeed_ReadComments_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadComments failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_ReadCommentReplies(AsyncCallback callback, object state, int skip, int limit, string parentId, int clientIndex)
      {
        return send_SocialFeed_ReadCommentReplies(callback, state, skip, limit, parentId, clientIndex);
      }

      public string End_SocialFeed_ReadCommentReplies(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_ReadCommentReplies();
      }

      #endif

      public string SocialFeed_ReadCommentReplies(int skip, int limit, string parentId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_ReadCommentReplies(skip, limit, parentId, clientIndex);
        return recv_SocialFeed_ReadCommentReplies();

        #else
        var asyncResult = Begin_SocialFeed_ReadCommentReplies(null, null, skip, limit, parentId, clientIndex);
        return End_SocialFeed_ReadCommentReplies(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_ReadCommentReplies(AsyncCallback callback, object state, int skip, int limit, string parentId, int clientIndex)
      #else
      public void send_SocialFeed_ReadCommentReplies(int skip, int limit, string parentId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_ReadCommentReplies", TMessageType.Call, seqid_));
        SocialFeed_ReadCommentReplies_args args = new SocialFeed_ReadCommentReplies_args();
        args.Skip = skip;
        args.Limit = limit;
        args.ParentId = parentId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_ReadCommentReplies()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_ReadCommentReplies_result result = new SocialFeed_ReadCommentReplies_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadCommentReplies failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_LikeComment(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      {
        return send_SocialFeed_LikeComment(callback, state, socialFeedId, clientIndex);
      }

      public string End_SocialFeed_LikeComment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_LikeComment();
      }

      #endif

      public string SocialFeed_LikeComment(string socialFeedId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_LikeComment(socialFeedId, clientIndex);
        return recv_SocialFeed_LikeComment();

        #else
        var asyncResult = Begin_SocialFeed_LikeComment(null, null, socialFeedId, clientIndex);
        return End_SocialFeed_LikeComment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_LikeComment(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      #else
      public void send_SocialFeed_LikeComment(string socialFeedId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_LikeComment", TMessageType.Call, seqid_));
        SocialFeed_LikeComment_args args = new SocialFeed_LikeComment_args();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_LikeComment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_LikeComment_result result = new SocialFeed_LikeComment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_LikeComment failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_LikeActivity(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      {
        return send_SocialFeed_LikeActivity(callback, state, socialFeedId, clientIndex);
      }

      public string End_SocialFeed_LikeActivity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_LikeActivity();
      }

      #endif

      public string SocialFeed_LikeActivity(string socialFeedId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_LikeActivity(socialFeedId, clientIndex);
        return recv_SocialFeed_LikeActivity();

        #else
        var asyncResult = Begin_SocialFeed_LikeActivity(null, null, socialFeedId, clientIndex);
        return End_SocialFeed_LikeActivity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_LikeActivity(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      #else
      public void send_SocialFeed_LikeActivity(string socialFeedId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_LikeActivity", TMessageType.Call, seqid_));
        SocialFeed_LikeActivity_args args = new SocialFeed_LikeActivity_args();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_LikeActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_LikeActivity_result result = new SocialFeed_LikeActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_LikeActivity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_UnlikeComment(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      {
        return send_SocialFeed_UnlikeComment(callback, state, socialFeedId, clientIndex);
      }

      public string End_SocialFeed_UnlikeComment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_UnlikeComment();
      }

      #endif

      public string SocialFeed_UnlikeComment(string socialFeedId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_UnlikeComment(socialFeedId, clientIndex);
        return recv_SocialFeed_UnlikeComment();

        #else
        var asyncResult = Begin_SocialFeed_UnlikeComment(null, null, socialFeedId, clientIndex);
        return End_SocialFeed_UnlikeComment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_UnlikeComment(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      #else
      public void send_SocialFeed_UnlikeComment(string socialFeedId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_UnlikeComment", TMessageType.Call, seqid_));
        SocialFeed_UnlikeComment_args args = new SocialFeed_UnlikeComment_args();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_UnlikeComment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_UnlikeComment_result result = new SocialFeed_UnlikeComment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnlikeComment failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_UnlikeActivity(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      {
        return send_SocialFeed_UnlikeActivity(callback, state, socialFeedId, clientIndex);
      }

      public string End_SocialFeed_UnlikeActivity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_UnlikeActivity();
      }

      #endif

      public string SocialFeed_UnlikeActivity(string socialFeedId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_UnlikeActivity(socialFeedId, clientIndex);
        return recv_SocialFeed_UnlikeActivity();

        #else
        var asyncResult = Begin_SocialFeed_UnlikeActivity(null, null, socialFeedId, clientIndex);
        return End_SocialFeed_UnlikeActivity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_UnlikeActivity(AsyncCallback callback, object state, string socialFeedId, int clientIndex)
      #else
      public void send_SocialFeed_UnlikeActivity(string socialFeedId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_UnlikeActivity", TMessageType.Call, seqid_));
        SocialFeed_UnlikeActivity_args args = new SocialFeed_UnlikeActivity_args();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_UnlikeActivity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_UnlikeActivity_result result = new SocialFeed_UnlikeActivity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnlikeActivity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_SetFeedVisibility(AsyncCallback callback, object state, string visibility, int clientIndex)
      {
        return send_SocialFeed_SetFeedVisibility(callback, state, visibility, clientIndex);
      }

      public string End_SocialFeed_SetFeedVisibility(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_SetFeedVisibility();
      }

      #endif

      public string SocialFeed_SetFeedVisibility(string visibility, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_SetFeedVisibility(visibility, clientIndex);
        return recv_SocialFeed_SetFeedVisibility();

        #else
        var asyncResult = Begin_SocialFeed_SetFeedVisibility(null, null, visibility, clientIndex);
        return End_SocialFeed_SetFeedVisibility(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_SetFeedVisibility(AsyncCallback callback, object state, string visibility, int clientIndex)
      #else
      public void send_SocialFeed_SetFeedVisibility(string visibility, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_SetFeedVisibility", TMessageType.Call, seqid_));
        SocialFeed_SetFeedVisibility_args args = new SocialFeed_SetFeedVisibility_args();
        args.Visibility = visibility;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_SetFeedVisibility()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_SetFeedVisibility_result result = new SocialFeed_SetFeedVisibility_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_SetFeedVisibility failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_BlockPlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      {
        return send_SocialFeed_BlockPlayer(callback, state, playerId, clientIndex);
      }

      public string End_SocialFeed_BlockPlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_BlockPlayer();
      }

      #endif

      public string SocialFeed_BlockPlayer(string playerId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_BlockPlayer(playerId, clientIndex);
        return recv_SocialFeed_BlockPlayer();

        #else
        var asyncResult = Begin_SocialFeed_BlockPlayer(null, null, playerId, clientIndex);
        return End_SocialFeed_BlockPlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_BlockPlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      #else
      public void send_SocialFeed_BlockPlayer(string playerId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_BlockPlayer", TMessageType.Call, seqid_));
        SocialFeed_BlockPlayer_args args = new SocialFeed_BlockPlayer_args();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_BlockPlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_BlockPlayer_result result = new SocialFeed_BlockPlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_BlockPlayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_HidePlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      {
        return send_SocialFeed_HidePlayer(callback, state, playerId, clientIndex);
      }

      public string End_SocialFeed_HidePlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_HidePlayer();
      }

      #endif

      public string SocialFeed_HidePlayer(string playerId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_HidePlayer(playerId, clientIndex);
        return recv_SocialFeed_HidePlayer();

        #else
        var asyncResult = Begin_SocialFeed_HidePlayer(null, null, playerId, clientIndex);
        return End_SocialFeed_HidePlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_HidePlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      #else
      public void send_SocialFeed_HidePlayer(string playerId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_HidePlayer", TMessageType.Call, seqid_));
        SocialFeed_HidePlayer_args args = new SocialFeed_HidePlayer_args();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_HidePlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_HidePlayer_result result = new SocialFeed_HidePlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_HidePlayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_UnblockPlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      {
        return send_SocialFeed_UnblockPlayer(callback, state, playerId, clientIndex);
      }

      public string End_SocialFeed_UnblockPlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_UnblockPlayer();
      }

      #endif

      public string SocialFeed_UnblockPlayer(string playerId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_UnblockPlayer(playerId, clientIndex);
        return recv_SocialFeed_UnblockPlayer();

        #else
        var asyncResult = Begin_SocialFeed_UnblockPlayer(null, null, playerId, clientIndex);
        return End_SocialFeed_UnblockPlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_UnblockPlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      #else
      public void send_SocialFeed_UnblockPlayer(string playerId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_UnblockPlayer", TMessageType.Call, seqid_));
        SocialFeed_UnblockPlayer_args args = new SocialFeed_UnblockPlayer_args();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_UnblockPlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_UnblockPlayer_result result = new SocialFeed_UnblockPlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnblockPlayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialFeed_UnhidePlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      {
        return send_SocialFeed_UnhidePlayer(callback, state, playerId, clientIndex);
      }

      public string End_SocialFeed_UnhidePlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SocialFeed_UnhidePlayer();
      }

      #endif

      public string SocialFeed_UnhidePlayer(string playerId, int clientIndex)
      {
        #if !SILVERLIGHT
        send_SocialFeed_UnhidePlayer(playerId, clientIndex);
        return recv_SocialFeed_UnhidePlayer();

        #else
        var asyncResult = Begin_SocialFeed_UnhidePlayer(null, null, playerId, clientIndex);
        return End_SocialFeed_UnhidePlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialFeed_UnhidePlayer(AsyncCallback callback, object state, string playerId, int clientIndex)
      #else
      public void send_SocialFeed_UnhidePlayer(string playerId, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialFeed_UnhidePlayer", TMessageType.Call, seqid_));
        SocialFeed_UnhidePlayer_args args = new SocialFeed_UnhidePlayer_args();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SocialFeed_UnhidePlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialFeed_UnhidePlayer_result result = new SocialFeed_UnhidePlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnhidePlayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Telemetry_StartTelemetrySession(AsyncCallback callback, object state, int timestamp, int clientIndex)
      {
        return send_Telemetry_StartTelemetrySession(callback, state, timestamp, clientIndex);
      }

      public string End_Telemetry_StartTelemetrySession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Telemetry_StartTelemetrySession();
      }

      #endif

      public string Telemetry_StartTelemetrySession(int timestamp, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Telemetry_StartTelemetrySession(timestamp, clientIndex);
        return recv_Telemetry_StartTelemetrySession();

        #else
        var asyncResult = Begin_Telemetry_StartTelemetrySession(null, null, timestamp, clientIndex);
        return End_Telemetry_StartTelemetrySession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Telemetry_StartTelemetrySession(AsyncCallback callback, object state, int timestamp, int clientIndex)
      #else
      public void send_Telemetry_StartTelemetrySession(int timestamp, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Telemetry_StartTelemetrySession", TMessageType.Call, seqid_));
        Telemetry_StartTelemetrySession_args args = new Telemetry_StartTelemetrySession_args();
        args.Timestamp = timestamp;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Telemetry_StartTelemetrySession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Telemetry_StartTelemetrySession_result result = new Telemetry_StartTelemetrySession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_StartTelemetrySession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Telemetry_EndTelemetrySession(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, int clientIndex)
      {
        return send_Telemetry_EndTelemetrySession(callback, state, telemetrySessionId, timestamp, clientIndex);
      }

      public string End_Telemetry_EndTelemetrySession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Telemetry_EndTelemetrySession();
      }

      #endif

      public string Telemetry_EndTelemetrySession(string telemetrySessionId, int timestamp, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Telemetry_EndTelemetrySession(telemetrySessionId, timestamp, clientIndex);
        return recv_Telemetry_EndTelemetrySession();

        #else
        var asyncResult = Begin_Telemetry_EndTelemetrySession(null, null, telemetrySessionId, timestamp, clientIndex);
        return End_Telemetry_EndTelemetrySession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Telemetry_EndTelemetrySession(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, int clientIndex)
      #else
      public void send_Telemetry_EndTelemetrySession(string telemetrySessionId, int timestamp, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Telemetry_EndTelemetrySession", TMessageType.Call, seqid_));
        Telemetry_EndTelemetrySession_args args = new Telemetry_EndTelemetrySession_args();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Telemetry_EndTelemetrySession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Telemetry_EndTelemetrySession_result result = new Telemetry_EndTelemetrySession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_EndTelemetrySession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Telemetry_LogTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      {
        return send_Telemetry_LogTelemetryEvent(callback, state, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
      }

      public string End_Telemetry_LogTelemetryEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Telemetry_LogTelemetryEvent();
      }

      #endif

      public string Telemetry_LogTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Telemetry_LogTelemetryEvent(telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
        return recv_Telemetry_LogTelemetryEvent();

        #else
        var asyncResult = Begin_Telemetry_LogTelemetryEvent(null, null, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
        return End_Telemetry_LogTelemetryEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Telemetry_LogTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      #else
      public void send_Telemetry_LogTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Telemetry_LogTelemetryEvent", TMessageType.Call, seqid_));
        Telemetry_LogTelemetryEvent_args args = new Telemetry_LogTelemetryEvent_args();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.EventType = eventType;
        args.ParticipantId = participantId;
        args.CustomData = customData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Telemetry_LogTelemetryEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Telemetry_LogTelemetryEvent_result result = new Telemetry_LogTelemetryEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_LogTelemetryEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Telemetry_StartTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      {
        return send_Telemetry_StartTelemetryEvent(callback, state, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
      }

      public string End_Telemetry_StartTelemetryEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Telemetry_StartTelemetryEvent();
      }

      #endif

      public string Telemetry_StartTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Telemetry_StartTelemetryEvent(telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
        return recv_Telemetry_StartTelemetryEvent();

        #else
        var asyncResult = Begin_Telemetry_StartTelemetryEvent(null, null, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
        return End_Telemetry_StartTelemetryEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Telemetry_StartTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      #else
      public void send_Telemetry_StartTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Telemetry_StartTelemetryEvent", TMessageType.Call, seqid_));
        Telemetry_StartTelemetryEvent_args args = new Telemetry_StartTelemetryEvent_args();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.EventType = eventType;
        args.ParticipantId = participantId;
        args.CustomData = customData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Telemetry_StartTelemetryEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Telemetry_StartTelemetryEvent_result result = new Telemetry_StartTelemetryEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_StartTelemetryEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Telemetry_EndTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      {
        return send_Telemetry_EndTelemetryEvent(callback, state, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
      }

      public string End_Telemetry_EndTelemetryEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Telemetry_EndTelemetryEvent();
      }

      #endif

      public string Telemetry_EndTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      {
        #if !SILVERLIGHT
        send_Telemetry_EndTelemetryEvent(telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
        return recv_Telemetry_EndTelemetryEvent();

        #else
        var asyncResult = Begin_Telemetry_EndTelemetryEvent(null, null, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
        return End_Telemetry_EndTelemetryEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Telemetry_EndTelemetryEvent(AsyncCallback callback, object state, string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      #else
      public void send_Telemetry_EndTelemetryEvent(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Telemetry_EndTelemetryEvent", TMessageType.Call, seqid_));
        Telemetry_EndTelemetryEvent_args args = new Telemetry_EndTelemetryEvent_args();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.EventType = eventType;
        args.ParticipantId = participantId;
        args.CustomData = customData;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Telemetry_EndTelemetryEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Telemetry_EndTelemetryEvent_result result = new Telemetry_EndTelemetryEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_EndTelemetryEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_DownloadFile(AsyncCallback callback, object state, string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex)
      {
        return send_File_DownloadFile(callback, state, cloudPath, cloudFilename, replaceIfExists, clientIndex);
      }

      public string End_File_DownloadFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_DownloadFile();
      }

      #endif

      public string File_DownloadFile(string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_DownloadFile(cloudPath, cloudFilename, replaceIfExists, clientIndex);
        return recv_File_DownloadFile();

        #else
        var asyncResult = Begin_File_DownloadFile(null, null, cloudPath, cloudFilename, replaceIfExists, clientIndex);
        return End_File_DownloadFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_DownloadFile(AsyncCallback callback, object state, string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex)
      #else
      public void send_File_DownloadFile(string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_DownloadFile", TMessageType.Call, seqid_));
        File_DownloadFile_args args = new File_DownloadFile_args();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ReplaceIfExists = replaceIfExists;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_DownloadFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_DownloadFile_result result = new File_DownloadFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_DownloadFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_GetDownloadInfo(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex)
      {
        return send_File_GetDownloadInfo(callback, state, cloudPath, cloudFilename, clientIndex);
      }

      public string End_File_GetDownloadInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_GetDownloadInfo();
      }

      #endif

      public string File_GetDownloadInfo(string cloudPath, string cloudFilename, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_GetDownloadInfo(cloudPath, cloudFilename, clientIndex);
        return recv_File_GetDownloadInfo();

        #else
        var asyncResult = Begin_File_GetDownloadInfo(null, null, cloudPath, cloudFilename, clientIndex);
        return End_File_GetDownloadInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_GetDownloadInfo(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex)
      #else
      public void send_File_GetDownloadInfo(string cloudPath, string cloudFilename, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_GetDownloadInfo", TMessageType.Call, seqid_));
        File_GetDownloadInfo_args args = new File_GetDownloadInfo_args();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_GetDownloadInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_GetDownloadInfo_result result = new File_GetDownloadInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetDownloadInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_File_CancelDownload(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex)
      {
        return send_File_CancelDownload(callback, state, cloudPath, cloudFilename, clientIndex);
      }

      public string End_File_CancelDownload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_File_CancelDownload();
      }

      #endif

      public string File_CancelDownload(string cloudPath, string cloudFilename, int clientIndex)
      {
        #if !SILVERLIGHT
        send_File_CancelDownload(cloudPath, cloudFilename, clientIndex);
        return recv_File_CancelDownload();

        #else
        var asyncResult = Begin_File_CancelDownload(null, null, cloudPath, cloudFilename, clientIndex);
        return End_File_CancelDownload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_File_CancelDownload(AsyncCallback callback, object state, string cloudPath, string cloudFilename, int clientIndex)
      #else
      public void send_File_CancelDownload(string cloudPath, string cloudFilename, int clientIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("File_CancelDownload", TMessageType.Call, seqid_));
        File_CancelDownload_args args = new File_CancelDownload_args();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ClientIndex = clientIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_File_CancelDownload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        File_CancelDownload_result result = new File_CancelDownload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_CancelDownload failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["AsyncMatch_CreateMatch"] = AsyncMatch_CreateMatch_Process;
        processMap_["AsyncMatch_CreateMatchWithInitialTurn"] = AsyncMatch_CreateMatchWithInitialTurn_Process;
        processMap_["AsyncMatch_SubmitTurn"] = AsyncMatch_SubmitTurn_Process;
        processMap_["AsyncMatch_UpdateMatchSummaryData"] = AsyncMatch_UpdateMatchSummaryData_Process;
        processMap_["AsyncMatch_CompleteMatch"] = AsyncMatch_CompleteMatch_Process;
        processMap_["AsyncMatch_ReadMatch"] = AsyncMatch_ReadMatch_Process;
        processMap_["AsyncMatch_ReadMatchHistory"] = AsyncMatch_ReadMatchHistory_Process;
        processMap_["AsyncMatch_FindMatches"] = AsyncMatch_FindMatches_Process;
        processMap_["AsyncMatch_FindCompleteMatches"] = AsyncMatch_FindCompleteMatches_Process;
        processMap_["AsyncMatch_AbandonMatch"] = AsyncMatch_AbandonMatch_Process;
        processMap_["AsyncMatch_DeleteMatch"] = AsyncMatch_DeleteMatch_Process;
        processMap_["Authentication_GenerateAnonymousId"] = Authentication_GenerateAnonymousId_Process;
        processMap_["Authentication_Initialize"] = Authentication_Initialize_Process;
        processMap_["Authentication_ClearSavedProfileID"] = Authentication_ClearSavedProfileID_Process;
        processMap_["Authentication_AuthenticateAnonymous"] = Authentication_AuthenticateAnonymous_Process;
        processMap_["Authentication_AuthenticateEmailPassword"] = Authentication_AuthenticateEmailPassword_Process;
        processMap_["Authentication_AuthenticateUniversal"] = Authentication_AuthenticateUniversal_Process;
        processMap_["Authentication_AuthenticateExternal"] = Authentication_AuthenticateExternal_Process;
        processMap_["Authentication_ResetEmailPassword"] = Authentication_ResetEmailPassword_Process;
        processMap_["Client_GetSessionId"] = Client_GetSessionId_Process;
        processMap_["Client_IsAuthenticated"] = Client_IsAuthenticated_Process;
        processMap_["Client_IsInitialized"] = Client_IsInitialized_Process;
        processMap_["Client_Initialize_SSS"] = Client_Initialize_SSS_Process;
        processMap_["Client_Initialize_SSSS"] = Client_Initialize_SSSS_Process;
        processMap_["Client_InitializeIdentity"] = Client_InitializeIdentity_Process;
        processMap_["Client_Update"] = Client_Update_Process;
        processMap_["Client_EnableLogging"] = Client_EnableLogging_Process;
        processMap_["Client_ResetCommunication"] = Client_ResetCommunication_Process;
        processMap_["Client_SetPacketTimeouts"] = Client_SetPacketTimeouts_Process;
        processMap_["Client_SetPacketTimeoutsToDefault"] = Client_SetPacketTimeoutsToDefault_Process;
        processMap_["Client_GetPacketTimeouts"] = Client_GetPacketTimeouts_Process;
        processMap_["Client_SetAuthenticationPacketTimeout"] = Client_SetAuthenticationPacketTimeout_Process;
        processMap_["Client_GetAuthenticationPacketTimeout"] = Client_GetAuthenticationPacketTimeout_Process;
        processMap_["Client_GetUploadLowTransferRateTimeout"] = Client_GetUploadLowTransferRateTimeout_Process;
        processMap_["Client_SetUploadLowTransferRateTimeout"] = Client_SetUploadLowTransferRateTimeout_Process;
        processMap_["Client_GetUploadLowTransferRateThreshold"] = Client_GetUploadLowTransferRateThreshold_Process;
        processMap_["Client_SetUploadLowTransferRateThreshold"] = Client_SetUploadLowTransferRateThreshold_Process;
        processMap_["Client_EnableNetworkErrorMessageCaching"] = Client_EnableNetworkErrorMessageCaching_Process;
        processMap_["Client_RetryCachedMessages"] = Client_RetryCachedMessages_Process;
        processMap_["Client_FlushCachedMessages"] = Client_FlushCachedMessages_Process;
        processMap_["Client_InsertEndOfMessageBundleMarker"] = Client_InsertEndOfMessageBundleMarker_Process;
        processMap_["Client_OverrideCountryCode"] = Client_OverrideCountryCode_Process;
        processMap_["Client_OverrideLanguageCode"] = Client_OverrideLanguageCode_Process;
        processMap_["DataStream_CustomPageEvent"] = DataStream_CustomPageEvent_Process;
        processMap_["DataStream_CustomScreenEvent"] = DataStream_CustomScreenEvent_Process;
        processMap_["DataStream_CustomTrackEvent"] = DataStream_CustomTrackEvent_Process;
        processMap_["Entity_CreateEntity"] = Entity_CreateEntity_Process;
        processMap_["Entity_GetEntitiesByType"] = Entity_GetEntitiesByType_Process;
        processMap_["Entity_UpdateEntity"] = Entity_UpdateEntity_Process;
        processMap_["Entity_UpdateSharedEntity"] = Entity_UpdateSharedEntity_Process;
        processMap_["Entity_DeleteEntity"] = Entity_DeleteEntity_Process;
        processMap_["Entity_UpdateSingleton"] = Entity_UpdateSingleton_Process;
        processMap_["Entity_DeleteSingleton"] = Entity_DeleteSingleton_Process;
        processMap_["Entity_GetEntity"] = Entity_GetEntity_Process;
        processMap_["Entity_GetSingleton"] = Entity_GetSingleton_Process;
        processMap_["Entity_GetSharedEntityForProfileId"] = Entity_GetSharedEntityForProfileId_Process;
        processMap_["Entity_GetSharedEntitiesForProfileId"] = Entity_GetSharedEntitiesForProfileId_Process;
        processMap_["Entity_GetList"] = Entity_GetList_Process;
        processMap_["Entity_GetSharedEntitiesListForProfileId"] = Entity_GetSharedEntitiesListForProfileId_Process;
        processMap_["Entity_GetListCount"] = Entity_GetListCount_Process;
        processMap_["Entity_GetPage"] = Entity_GetPage_Process;
        processMap_["Entity_GetPageOffset"] = Entity_GetPageOffset_Process;
        processMap_["Entity_IncrementUserEntityData"] = Entity_IncrementUserEntityData_Process;
        processMap_["Entity_IncrementSharedUserEntityData"] = Entity_IncrementSharedUserEntityData_Process;
        processMap_["Event_SendEvent"] = Event_SendEvent_Process;
        processMap_["Event_UpdateIncomingEventData"] = Event_UpdateIncomingEventData_Process;
        processMap_["Event_DeleteIncomingEvent"] = Event_DeleteIncomingEvent_Process;
        processMap_["Event_GetEvents"] = Event_GetEvents_Process;
        processMap_["File_UploadFile"] = File_UploadFile_Process;
        processMap_["File_CancelUpload"] = File_CancelUpload_Process;
        processMap_["File_GetUploadProgress"] = File_GetUploadProgress_Process;
        processMap_["File_GetUploadBytesTransferred"] = File_GetUploadBytesTransferred_Process;
        processMap_["File_GetUploadTotalBytesToTransfer"] = File_GetUploadTotalBytesToTransfer_Process;
        processMap_["File_ListUserFiles_SFO"] = File_ListUserFiles_SFO_Process;
        processMap_["File_ListUserFiles_SNSFO"] = File_ListUserFiles_SNSFO_Process;
        processMap_["File_DeleteUserFile"] = File_DeleteUserFile_Process;
        processMap_["File_DeleteUserFiles"] = File_DeleteUserFiles_Process;
        processMap_["File_GetCDNUrl"] = File_GetCDNUrl_Process;
        processMap_["Friend_FindUserByUniversalId"] = Friend_FindUserByUniversalId_Process;
        processMap_["Friend_GetProfileInfoForCredential"] = Friend_GetProfileInfoForCredential_Process;
        processMap_["Friend_GetProfileInfoForExternalAuthId"] = Friend_GetProfileInfoForExternalAuthId_Process;
        processMap_["Friend_GetExternalIdForProfileId"] = Friend_GetExternalIdForProfileId_Process;
        processMap_["Friend_ReadFriendEntity"] = Friend_ReadFriendEntity_Process;
        processMap_["Friend_ReadFriendsEntities"] = Friend_ReadFriendsEntities_Process;
        processMap_["Friend_ReadFriendUserState"] = Friend_ReadFriendUserState_Process;
        processMap_["Friend_GetSummaryDataForProfileId"] = Friend_GetSummaryDataForProfileId_Process;
        processMap_["Friend_FindUsersByExactName"] = Friend_FindUsersByExactName_Process;
        processMap_["Friend_FindUsersBySubstrName"] = Friend_FindUsersBySubstrName_Process;
        processMap_["Friend_ListFriends"] = Friend_ListFriends_Process;
        processMap_["Friend_AddFriends"] = Friend_AddFriends_Process;
        processMap_["Friend_RemoveFriends"] = Friend_RemoveFriends_Process;
        processMap_["Friend_GetUsersOnlineStatus"] = Friend_GetUsersOnlineStatus_Process;
        processMap_["Gamification_ReadAllGamification"] = Gamification_ReadAllGamification_Process;
        processMap_["Gamification_ReadMilestones"] = Gamification_ReadMilestones_Process;
        processMap_["Gamification_ReadAchievements"] = Gamification_ReadAchievements_Process;
        processMap_["Gamification_ReadXpLevelsMetaData"] = Gamification_ReadXpLevelsMetaData_Process;
        processMap_["Gamification_ReadAchievedAchievements"] = Gamification_ReadAchievedAchievements_Process;
        processMap_["Gamification_ReadCompletedMilestones"] = Gamification_ReadCompletedMilestones_Process;
        processMap_["Gamification_ReadInProgressMilestones"] = Gamification_ReadInProgressMilestones_Process;
        processMap_["Gamification_ReadMilestonesByCategory"] = Gamification_ReadMilestonesByCategory_Process;
        processMap_["Gamification_AwardAchievements"] = Gamification_AwardAchievements_Process;
        processMap_["Gamification_ReadQuests"] = Gamification_ReadQuests_Process;
        processMap_["Gamification_ReadCompletedQuests"] = Gamification_ReadCompletedQuests_Process;
        processMap_["Gamification_ReadInProgressQuests"] = Gamification_ReadInProgressQuests_Process;
        processMap_["Gamification_ReadNotStartedQuests"] = Gamification_ReadNotStartedQuests_Process;
        processMap_["Gamification_ReadQuestsWithStatus"] = Gamification_ReadQuestsWithStatus_Process;
        processMap_["Gamification_ReadQuestsWithBasicPercentage"] = Gamification_ReadQuestsWithBasicPercentage_Process;
        processMap_["Gamification_ReadQuestsWithComplexPercentage"] = Gamification_ReadQuestsWithComplexPercentage_Process;
        processMap_["Gamification_ReadQuestsByCategory"] = Gamification_ReadQuestsByCategory_Process;
        processMap_["Gamification_ResetMilestones"] = Gamification_ResetMilestones_Process;
        processMap_["GlobalApp_ReadProperties"] = GlobalApp_ReadProperties_Process;
        processMap_["GlobalEntity_CreateEntity"] = GlobalEntity_CreateEntity_Process;
        processMap_["GlobalEntity_CreateEntityWithIndexedId"] = GlobalEntity_CreateEntityWithIndexedId_Process;
        processMap_["GlobalEntity_UpdateEntity"] = GlobalEntity_UpdateEntity_Process;
        processMap_["GlobalEntity_UpdateEntityAcl"] = GlobalEntity_UpdateEntityAcl_Process;
        processMap_["GlobalEntity_UpdateEntityTimeToLive"] = GlobalEntity_UpdateEntityTimeToLive_Process;
        processMap_["GlobalEntity_DeleteEntity"] = GlobalEntity_DeleteEntity_Process;
        processMap_["GlobalEntity_ReadEntity"] = GlobalEntity_ReadEntity_Process;
        processMap_["GlobalEntity_GetList"] = GlobalEntity_GetList_Process;
        processMap_["GlobalEntity_GetListByIndexedId"] = GlobalEntity_GetListByIndexedId_Process;
        processMap_["GlobalEntity_GetListCount"] = GlobalEntity_GetListCount_Process;
        processMap_["GlobalEntity_GetPage"] = GlobalEntity_GetPage_Process;
        processMap_["GlobalEntity_GetPageOffset"] = GlobalEntity_GetPageOffset_Process;
        processMap_["GlobalEntity_IncrementGlobalEntityData"] = GlobalEntity_IncrementGlobalEntityData_Process;
        processMap_["GlobalEntity_GetRandomEntitiesMatching"] = GlobalEntity_GetRandomEntitiesMatching_Process;
        processMap_["GlobalEntity_UpdateEntityOwnerAndAcl"] = GlobalEntity_UpdateEntityOwnerAndAcl_Process;
        processMap_["GlobalEntity_MakeSystemEntity"] = GlobalEntity_MakeSystemEntity_Process;
        processMap_["GlobalStatistics_ReadAllGlobalStats"] = GlobalStatistics_ReadAllGlobalStats_Process;
        processMap_["GlobalStatistics_ReadGlobalStatsSubset"] = GlobalStatistics_ReadGlobalStatsSubset_Process;
        processMap_["GlobalStatistics_ReadGlobalStatsForCategory"] = GlobalStatistics_ReadGlobalStatsForCategory_Process;
        processMap_["GlobalStatistics_IncrementGlobalStats"] = GlobalStatistics_IncrementGlobalStats_Process;
        processMap_["GlobalStatistics_ProcessStatistics"] = GlobalStatistics_ProcessStatistics_Process;
        processMap_["Group_AcceptGroupInvitation"] = Group_AcceptGroupInvitation_Process;
        processMap_["Group_AddGroupMember"] = Group_AddGroupMember_Process;
        processMap_["Group_ApproveGroupJoinRequest"] = Group_ApproveGroupJoinRequest_Process;
        processMap_["Group_AutoJoinGroup"] = Group_AutoJoinGroup_Process;
        processMap_["Group_CancelGroupInvitation"] = Group_CancelGroupInvitation_Process;
        processMap_["Group_CreateGroup"] = Group_CreateGroup_Process;
        processMap_["Group_CreateGroupEntity"] = Group_CreateGroupEntity_Process;
        processMap_["Group_DeleteGroup"] = Group_DeleteGroup_Process;
        processMap_["Group_DeleteGroupEntity"] = Group_DeleteGroupEntity_Process;
        processMap_["Group_GetMyGroups"] = Group_GetMyGroups_Process;
        processMap_["Group_IncrementGroupData"] = Group_IncrementGroupData_Process;
        processMap_["Group_IncrementGroupEntityData"] = Group_IncrementGroupEntityData_Process;
        processMap_["Group_InviteGroupMember"] = Group_InviteGroupMember_Process;
        processMap_["Group_JoinGroup"] = Group_JoinGroup_Process;
        processMap_["Group_LeaveGroup"] = Group_LeaveGroup_Process;
        processMap_["Group_ListGroupsPage"] = Group_ListGroupsPage_Process;
        processMap_["Group_ListGroupsPageByOffset"] = Group_ListGroupsPageByOffset_Process;
        processMap_["Group_ListGroupsWithMember"] = Group_ListGroupsWithMember_Process;
        processMap_["Group_ReadGroup"] = Group_ReadGroup_Process;
        processMap_["Group_ReadGroupData"] = Group_ReadGroupData_Process;
        processMap_["Group_ReadGroupEntitiesPage"] = Group_ReadGroupEntitiesPage_Process;
        processMap_["Group_ReadGroupEntitiesPageByOffset"] = Group_ReadGroupEntitiesPageByOffset_Process;
        processMap_["Group_ReadGroupEntity"] = Group_ReadGroupEntity_Process;
        processMap_["Group_ReadGroupMembers"] = Group_ReadGroupMembers_Process;
        processMap_["Group_RejectGroupInvitation"] = Group_RejectGroupInvitation_Process;
        processMap_["Group_RejectGroupJoinRequest"] = Group_RejectGroupJoinRequest_Process;
        processMap_["Group_RemoveGroupMember"] = Group_RemoveGroupMember_Process;
        processMap_["Group_UpdateGroupData"] = Group_UpdateGroupData_Process;
        processMap_["Group_UpdateGroupEntityData"] = Group_UpdateGroupEntityData_Process;
        processMap_["Group_UpdateGroupMember"] = Group_UpdateGroupMember_Process;
        processMap_["Group_UpdateGroupName"] = Group_UpdateGroupName_Process;
        processMap_["Identity_AttachEmailIdentity"] = Identity_AttachEmailIdentity_Process;
        processMap_["Identity_MergeEmailIdentity"] = Identity_MergeEmailIdentity_Process;
        processMap_["Identity_DetachEmailIdentity"] = Identity_DetachEmailIdentity_Process;
        processMap_["Identity_AttachUniversalIdentity"] = Identity_AttachUniversalIdentity_Process;
        processMap_["Identity_MergeUniversalIdentity"] = Identity_MergeUniversalIdentity_Process;
        processMap_["Identity_DetachUniversalIdentity"] = Identity_DetachUniversalIdentity_Process;
        processMap_["Identity_SwitchToChildProfile"] = Identity_SwitchToChildProfile_Process;
        processMap_["Identity_SwitchToSingletonChildProfile"] = Identity_SwitchToSingletonChildProfile_Process;
        processMap_["Identity_AttachParentWithIdentity"] = Identity_AttachParentWithIdentity_Process;
        processMap_["Identity_SwitchToParentProfile"] = Identity_SwitchToParentProfile_Process;
        processMap_["Identity_DetachParent"] = Identity_DetachParent_Process;
        processMap_["Identity_GetChildProfiles"] = Identity_GetChildProfiles_Process;
        processMap_["Identity_GetIdentities"] = Identity_GetIdentities_Process;
        processMap_["Identity_GetExpiredIdentities"] = Identity_GetExpiredIdentities_Process;
        processMap_["Identity_RefreshIdentity"] = Identity_RefreshIdentity_Process;
        processMap_["Identity_ChangeEmailIdentity"] = Identity_ChangeEmailIdentity_Process;
        processMap_["Identity_AttachPeerProfile"] = Identity_AttachPeerProfile_Process;
        processMap_["Identity_DetachPeer"] = Identity_DetachPeer_Process;
        processMap_["Identity_GetPeerProfiles"] = Identity_GetPeerProfiles_Process;
        processMap_["Mail_SendBasicEmail"] = Mail_SendBasicEmail_Process;
        processMap_["Mail_SendAdvancedEmail"] = Mail_SendAdvancedEmail_Process;
        processMap_["Mail_SendAdvancedEmailByAddress"] = Mail_SendAdvancedEmailByAddress_Process;
        processMap_["MatchMaking_Read"] = MatchMaking_Read_Process;
        processMap_["MatchMaking_SetPlayerRating"] = MatchMaking_SetPlayerRating_Process;
        processMap_["MatchMaking_ResetPlayerRating"] = MatchMaking_ResetPlayerRating_Process;
        processMap_["MatchMaking_IncrementPlayerRating"] = MatchMaking_IncrementPlayerRating_Process;
        processMap_["MatchMaking_DecrementPlayerRating"] = MatchMaking_DecrementPlayerRating_Process;
        processMap_["MatchMaking_TurnShieldOn"] = MatchMaking_TurnShieldOn_Process;
        processMap_["MatchMaking_TurnShieldOnFor"] = MatchMaking_TurnShieldOnFor_Process;
        processMap_["MatchMaking_TurnShieldOff"] = MatchMaking_TurnShieldOff_Process;
        processMap_["MatchMaking_IncrementShieldOnFor"] = MatchMaking_IncrementShieldOnFor_Process;
        processMap_["MatchMaking_GetShieldExpiry"] = MatchMaking_GetShieldExpiry_Process;
        processMap_["MatchMaking_FindPlayers"] = MatchMaking_FindPlayers_Process;
        processMap_["MatchMaking_FindPlayersWithAttributes"] = MatchMaking_FindPlayersWithAttributes_Process;
        processMap_["MatchMaking_FindPlayersUsingFilter"] = MatchMaking_FindPlayersUsingFilter_Process;
        processMap_["MatchMaking_FindPlayersWithAttributesUsingFilter"] = MatchMaking_FindPlayersWithAttributesUsingFilter_Process;
        processMap_["MatchMaking_EnableMatchMaking"] = MatchMaking_EnableMatchMaking_Process;
        processMap_["MatchMaking_DisableMatchMaking"] = MatchMaking_DisableMatchMaking_Process;
        processMap_["OneWayMatch_StartMatch"] = OneWayMatch_StartMatch_Process;
        processMap_["OneWayMatch_CancelMatch"] = OneWayMatch_CancelMatch_Process;
        processMap_["OneWayMatch_CompleteMatch"] = OneWayMatch_CompleteMatch_Process;
        processMap_["PlaybackStream_StartStream"] = PlaybackStream_StartStream_Process;
        processMap_["PlaybackStream_ReadStream"] = PlaybackStream_ReadStream_Process;
        processMap_["PlaybackStream_EndStream"] = PlaybackStream_EndStream_Process;
        processMap_["PlaybackStream_DeleteStream"] = PlaybackStream_DeleteStream_Process;
        processMap_["PlaybackStream_AddEvent"] = PlaybackStream_AddEvent_Process;
        processMap_["PlaybackStream_GetRecentStreamsForInitiatingPlayer"] = PlaybackStream_GetRecentStreamsForInitiatingPlayer_Process;
        processMap_["PlaybackStream_GetRecentStreamsForTargetPlayer"] = PlaybackStream_GetRecentStreamsForTargetPlayer_Process;
        processMap_["PlayerState_ReadUserState"] = PlayerState_ReadUserState_Process;
        processMap_["PlayerState_DeleteUser"] = PlayerState_DeleteUser_Process;
        processMap_["PlayerState_ResetUser"] = PlayerState_ResetUser_Process;
        processMap_["PlayerState_Logout"] = PlayerState_Logout_Process;
        processMap_["PlayerState_UpdateUserName"] = PlayerState_UpdateUserName_Process;
        processMap_["PlayerState_UpdateSummaryFriendData"] = PlayerState_UpdateSummaryFriendData_Process;
        processMap_["PlayerState_GetAttributes"] = PlayerState_GetAttributes_Process;
        processMap_["PlayerState_UpdateAttributes"] = PlayerState_UpdateAttributes_Process;
        processMap_["PlayerState_RemoveAttributes"] = PlayerState_RemoveAttributes_Process;
        processMap_["PlayerState_UpdateUserPictureUrl"] = PlayerState_UpdateUserPictureUrl_Process;
        processMap_["PlayerState_UpdateContactEmail"] = PlayerState_UpdateContactEmail_Process;
        processMap_["PlayerStatistics_ReadAllUserStats"] = PlayerStatistics_ReadAllUserStats_Process;
        processMap_["PlayerStatistics_ReadUserStatsSubset"] = PlayerStatistics_ReadUserStatsSubset_Process;
        processMap_["PlayerStatistics_ReadUserStatsForCategory"] = PlayerStatistics_ReadUserStatsForCategory_Process;
        processMap_["PlayerStatistics_ResetAllUserStats"] = PlayerStatistics_ResetAllUserStats_Process;
        processMap_["PlayerStatistics_IncrementUserStats_SSFO"] = PlayerStatistics_IncrementUserStats_SSFO_Process;
        processMap_["PlayerStatistics_IncrementUserStats_DSFO"] = PlayerStatistics_IncrementUserStats_DSFO_Process;
        processMap_["PlayerStatistics_ProcessStatistics"] = PlayerStatistics_ProcessStatistics_Process;
        processMap_["PlayerStatistics_GetNextExperienceLevel"] = PlayerStatistics_GetNextExperienceLevel_Process;
        processMap_["PlayerStatistics_IncrementExperiencePoints"] = PlayerStatistics_IncrementExperiencePoints_Process;
        processMap_["PlayerStatistics_SetExperiencePoints"] = PlayerStatistics_SetExperiencePoints_Process;
        processMap_["PlayerStatisticsEvent_TriggerStatsEvent"] = PlayerStatisticsEvent_TriggerStatsEvent_Process;
        processMap_["PlayerStatisticsEvent_TriggerStatsEvents"] = PlayerStatisticsEvent_TriggerStatsEvents_Process;
        processMap_["Product_GetCurrency"] = Product_GetCurrency_Process;
        processMap_["Product_GetSalesInventory"] = Product_GetSalesInventory_Process;
        processMap_["Product_GetSalesInventoryByCategory"] = Product_GetSalesInventoryByCategory_Process;
        processMap_["Product_VerifyMicrosoftReceipt"] = Product_VerifyMicrosoftReceipt_Process;
        processMap_["Product_GetEligiblePromotions"] = Product_GetEligiblePromotions_Process;
        processMap_["Product_VerifyItunesReceipt"] = Product_VerifyItunesReceipt_Process;
        processMap_["Profanity_ProfanityCheck"] = Profanity_ProfanityCheck_Process;
        processMap_["Profanity_ProfanityReplaceText"] = Profanity_ProfanityReplaceText_Process;
        processMap_["Profanity_ProfanityIdentifyBadWords"] = Profanity_ProfanityIdentifyBadWords_Process;
        processMap_["PushNotification_DeregisterAllPushNotificationDeviceTokens"] = PushNotification_DeregisterAllPushNotificationDeviceTokens_Process;
        processMap_["PushNotification_DeregisterPushNotificationDeviceToken"] = PushNotification_DeregisterPushNotificationDeviceToken_Process;
        processMap_["PushNotification_RegisterPushNotificationDeviceToken"] = PushNotification_RegisterPushNotificationDeviceToken_Process;
        processMap_["PushNotification_SendSimplePushNotification"] = PushNotification_SendSimplePushNotification_Process;
        processMap_["PushNotification_SendRichPushNotification"] = PushNotification_SendRichPushNotification_Process;
        processMap_["PushNotification_SendRichPushNotificationWithParams"] = PushNotification_SendRichPushNotificationWithParams_Process;
        processMap_["PushNotification_SendTemplatedPushNotificationToGroup"] = PushNotification_SendTemplatedPushNotificationToGroup_Process;
        processMap_["PushNotification_SendNormalizedPushNotificationToGroup"] = PushNotification_SendNormalizedPushNotificationToGroup_Process;
        processMap_["PushNotification_ScheduleRawPushNotificationUTC"] = PushNotification_ScheduleRawPushNotificationUTC_Process;
        processMap_["PushNotification_ScheduleRawPushNotificationMinutes"] = PushNotification_ScheduleRawPushNotificationMinutes_Process;
        processMap_["PushNotification_SendRawPushNotification"] = PushNotification_SendRawPushNotification_Process;
        processMap_["PushNotification_SendRawPushNotificationBatch"] = PushNotification_SendRawPushNotificationBatch_Process;
        processMap_["PushNotification_SendRawPushNotificationToGroup"] = PushNotification_SendRawPushNotificationToGroup_Process;
        processMap_["PushNotification_ScheduleNormalizedPushNotificationUTC"] = PushNotification_ScheduleNormalizedPushNotificationUTC_Process;
        processMap_["PushNotification_ScheduleNormalizedPushNotificationMinutes"] = PushNotification_ScheduleNormalizedPushNotificationMinutes_Process;
        processMap_["PushNotification_ScheduleRichPushNotificationUTC"] = PushNotification_ScheduleRichPushNotificationUTC_Process;
        processMap_["PushNotification_ScheduleRichPushNotificationMinutes"] = PushNotification_ScheduleRichPushNotificationMinutes_Process;
        processMap_["PushNotification_SendNormalizedPushNotification"] = PushNotification_SendNormalizedPushNotification_Process;
        processMap_["PushNotification_SendNormalizedPushNotificationBatch"] = PushNotification_SendNormalizedPushNotificationBatch_Process;
        processMap_["Script_RunScript"] = Script_RunScript_Process;
        processMap_["Script_ScheduleRunScriptUTC"] = Script_ScheduleRunScriptUTC_Process;
        processMap_["Script_ScheduleRunScriptMinutes"] = Script_ScheduleRunScriptMinutes_Process;
        processMap_["Script_RunParentScript"] = Script_RunParentScript_Process;
        processMap_["Script_CancelScheduledScript"] = Script_CancelScheduledScript_Process;
        processMap_["Script_RunPeerScript"] = Script_RunPeerScript_Process;
        processMap_["Script_RunPeerScriptAsynch"] = Script_RunPeerScriptAsynch_Process;
        processMap_["SocialLeaderboard_GetSocialLeaderboard"] = SocialLeaderboard_GetSocialLeaderboard_Process;
        processMap_["SocialLeaderboard_GetMultiSocialLeaderboard"] = SocialLeaderboard_GetMultiSocialLeaderboard_Process;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardPage"] = SocialLeaderboard_GetGlobalLeaderboardPage_Process;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardPageByVersion"] = SocialLeaderboard_GetGlobalLeaderboardPageByVersion_Process;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardView"] = SocialLeaderboard_GetGlobalLeaderboardView_Process;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardViewByVersion"] = SocialLeaderboard_GetGlobalLeaderboardViewByVersion_Process;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardVersions"] = SocialLeaderboard_GetGlobalLeaderboardVersions_Process;
        processMap_["SocialLeaderboard_GetGroupSocialLeaderboard"] = SocialLeaderboard_GetGroupSocialLeaderboard_Process;
        processMap_["SocialLeaderboard_PostScoreToLeaderboard"] = SocialLeaderboard_PostScoreToLeaderboard_Process;
        processMap_["SocialLeaderboard_RemovePlayerScore"] = SocialLeaderboard_RemovePlayerScore_Process;
        processMap_["SocialLeaderboard_PostScoreToDynamicLeaderboard"] = SocialLeaderboard_PostScoreToDynamicLeaderboard_Process;
        processMap_["SocialLeaderboard_PostScoreToDynamicLeaderboardDays"] = SocialLeaderboard_PostScoreToDynamicLeaderboardDays_Process;
        processMap_["SocialLeaderboard_GetPlayersSocialLeaderboard"] = SocialLeaderboard_GetPlayersSocialLeaderboard_Process;
        processMap_["SocialLeaderboard_ListLeaderboards"] = SocialLeaderboard_ListLeaderboards_Process;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardEntryCount"] = SocialLeaderboard_GetGlobalLeaderboardEntryCount_Process;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion"] = SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_Process;
        processMap_["SocialLeaderboard_GetPlayerScore"] = SocialLeaderboard_GetPlayerScore_Process;
        processMap_["SocialLeaderboard_GetPlayerScoresFromLeaderboards"] = SocialLeaderboard_GetPlayerScoresFromLeaderboards_Process;
        processMap_["Time_ReadServerTime"] = Time_ReadServerTime_Process;
        processMap_["Tournament_ClaimTournamentReward"] = Tournament_ClaimTournamentReward_Process;
        processMap_["Tournament_GetTournamentStatus"] = Tournament_GetTournamentStatus_Process;
        processMap_["Tournament_JoinTournament"] = Tournament_JoinTournament_Process;
        processMap_["Tournament_LeaveTournament"] = Tournament_LeaveTournament_Process;
        processMap_["Tournament_PostTournamentScore"] = Tournament_PostTournamentScore_Process;
        processMap_["Tournament_PostTournamentScoreWithResults"] = Tournament_PostTournamentScoreWithResults_Process;
        processMap_["Tournament_ViewCurrentReward"] = Tournament_ViewCurrentReward_Process;
        processMap_["Tournament_ViewReward"] = Tournament_ViewReward_Process;
        processMap_["Patch_GetGameManifest"] = Patch_GetGameManifest_Process;
        processMap_["SocialFeed_ShareVideo"] = SocialFeed_ShareVideo_Process;
        processMap_["SocialFeed_ShareScreenshot"] = SocialFeed_ShareScreenshot_Process;
        processMap_["SocialFeed_ShareAchievement"] = SocialFeed_ShareAchievement_Process;
        processMap_["SocialFeed_ShareApp"] = SocialFeed_ShareApp_Process;
        processMap_["SocialFeed_ShareChannel"] = SocialFeed_ShareChannel_Process;
        processMap_["SocialFeed_ShareLink"] = SocialFeed_ShareLink_Process;
        processMap_["SocialFeed_ShareGameGuide"] = SocialFeed_ShareGameGuide_Process;
        processMap_["SocialFeed_ReadSocialFeed"] = SocialFeed_ReadSocialFeed_Process;
        processMap_["SocialFeed_ReadFilteredSocialFeed"] = SocialFeed_ReadFilteredSocialFeed_Process;
        processMap_["SocialFeed_ReadFriendsSocialFeed"] = SocialFeed_ReadFriendsSocialFeed_Process;
        processMap_["SocialFeed_PostComment"] = SocialFeed_PostComment_Process;
        processMap_["SocialFeed_PostCommentReply"] = SocialFeed_PostCommentReply_Process;
        processMap_["SocialFeed_ReadComments"] = SocialFeed_ReadComments_Process;
        processMap_["SocialFeed_ReadCommentReplies"] = SocialFeed_ReadCommentReplies_Process;
        processMap_["SocialFeed_LikeComment"] = SocialFeed_LikeComment_Process;
        processMap_["SocialFeed_LikeActivity"] = SocialFeed_LikeActivity_Process;
        processMap_["SocialFeed_UnlikeComment"] = SocialFeed_UnlikeComment_Process;
        processMap_["SocialFeed_UnlikeActivity"] = SocialFeed_UnlikeActivity_Process;
        processMap_["SocialFeed_SetFeedVisibility"] = SocialFeed_SetFeedVisibility_Process;
        processMap_["SocialFeed_BlockPlayer"] = SocialFeed_BlockPlayer_Process;
        processMap_["SocialFeed_HidePlayer"] = SocialFeed_HidePlayer_Process;
        processMap_["SocialFeed_UnblockPlayer"] = SocialFeed_UnblockPlayer_Process;
        processMap_["SocialFeed_UnhidePlayer"] = SocialFeed_UnhidePlayer_Process;
        processMap_["Telemetry_StartTelemetrySession"] = Telemetry_StartTelemetrySession_Process;
        processMap_["Telemetry_EndTelemetrySession"] = Telemetry_EndTelemetrySession_Process;
        processMap_["Telemetry_LogTelemetryEvent"] = Telemetry_LogTelemetryEvent_Process;
        processMap_["Telemetry_StartTelemetryEvent"] = Telemetry_StartTelemetryEvent_Process;
        processMap_["Telemetry_EndTelemetryEvent"] = Telemetry_EndTelemetryEvent_Process;
        processMap_["File_DownloadFile"] = File_DownloadFile_Process;
        processMap_["File_GetDownloadInfo"] = File_GetDownloadInfo_Process;
        processMap_["File_CancelDownload"] = File_CancelDownload_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void AsyncMatch_CreateMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_CreateMatch_args args = new AsyncMatch_CreateMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_CreateMatch_result result = new AsyncMatch_CreateMatch_result();
        try
        {
          result.Success = iface_.AsyncMatch_CreateMatch(args.JsonOpponentIds, args.PushNotificationMessage, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_CreateMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_CreateMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_CreateMatchWithInitialTurn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_CreateMatchWithInitialTurn_args args = new AsyncMatch_CreateMatchWithInitialTurn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_CreateMatchWithInitialTurn_result result = new AsyncMatch_CreateMatchWithInitialTurn_result();
        try
        {
          result.Success = iface_.AsyncMatch_CreateMatchWithInitialTurn(args.JsonOpponentIds, args.JsonMatchState, args.PushNotificationMessage, args.NextPlayer, args.JsonSummary, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_CreateMatchWithInitialTurn", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_CreateMatchWithInitialTurn", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_SubmitTurn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_SubmitTurn_args args = new AsyncMatch_SubmitTurn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_SubmitTurn_result result = new AsyncMatch_SubmitTurn_result();
        try
        {
          result.Success = iface_.AsyncMatch_SubmitTurn(args.OwnerId, args.MatchId, args.Version, args.JsonMatchState, args.PushNotificationMessage, args.NextPlayer, args.JsonSummary, args.JsonStatistics, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_SubmitTurn", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_SubmitTurn", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_UpdateMatchSummaryData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_UpdateMatchSummaryData_args args = new AsyncMatch_UpdateMatchSummaryData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_UpdateMatchSummaryData_result result = new AsyncMatch_UpdateMatchSummaryData_result();
        try
        {
          result.Success = iface_.AsyncMatch_UpdateMatchSummaryData(args.OwnerId, args.MatchId, args.Version, args.JsonSummary, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_UpdateMatchSummaryData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_UpdateMatchSummaryData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_CompleteMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_CompleteMatch_args args = new AsyncMatch_CompleteMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_CompleteMatch_result result = new AsyncMatch_CompleteMatch_result();
        try
        {
          result.Success = iface_.AsyncMatch_CompleteMatch(args.OwnerId, args.MatchId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_CompleteMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_CompleteMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_ReadMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_ReadMatch_args args = new AsyncMatch_ReadMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_ReadMatch_result result = new AsyncMatch_ReadMatch_result();
        try
        {
          result.Success = iface_.AsyncMatch_ReadMatch(args.OwnerId, args.MatchId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_ReadMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_ReadMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_ReadMatchHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_ReadMatchHistory_args args = new AsyncMatch_ReadMatchHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_ReadMatchHistory_result result = new AsyncMatch_ReadMatchHistory_result();
        try
        {
          result.Success = iface_.AsyncMatch_ReadMatchHistory(args.OwnerId, args.MatchId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_ReadMatchHistory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_ReadMatchHistory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_FindMatches_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_FindMatches_args args = new AsyncMatch_FindMatches_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_FindMatches_result result = new AsyncMatch_FindMatches_result();
        try
        {
          result.Success = iface_.AsyncMatch_FindMatches(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_FindMatches", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_FindMatches", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_FindCompleteMatches_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_FindCompleteMatches_args args = new AsyncMatch_FindCompleteMatches_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_FindCompleteMatches_result result = new AsyncMatch_FindCompleteMatches_result();
        try
        {
          result.Success = iface_.AsyncMatch_FindCompleteMatches(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_FindCompleteMatches", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_FindCompleteMatches", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_AbandonMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_AbandonMatch_args args = new AsyncMatch_AbandonMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_AbandonMatch_result result = new AsyncMatch_AbandonMatch_result();
        try
        {
          result.Success = iface_.AsyncMatch_AbandonMatch(args.OwnerId, args.MatchId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_AbandonMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_AbandonMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AsyncMatch_DeleteMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AsyncMatch_DeleteMatch_args args = new AsyncMatch_DeleteMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AsyncMatch_DeleteMatch_result result = new AsyncMatch_DeleteMatch_result();
        try
        {
          result.Success = iface_.AsyncMatch_DeleteMatch(args.OwnerId, args.MatchId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_DeleteMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AsyncMatch_DeleteMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_GenerateAnonymousId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_GenerateAnonymousId_args args = new Authentication_GenerateAnonymousId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_GenerateAnonymousId_result result = new Authentication_GenerateAnonymousId_result();
        try
        {
          result.Success = iface_.Authentication_GenerateAnonymousId(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_GenerateAnonymousId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_GenerateAnonymousId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_Initialize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_Initialize_args args = new Authentication_Initialize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_Initialize_result result = new Authentication_Initialize_result();
        try
        {
          iface_.Authentication_Initialize(args.ProfileId, args.AnonymousId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_Initialize", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_Initialize", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_ClearSavedProfileID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_ClearSavedProfileID_args args = new Authentication_ClearSavedProfileID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_ClearSavedProfileID_result result = new Authentication_ClearSavedProfileID_result();
        try
        {
          iface_.Authentication_ClearSavedProfileID(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_ClearSavedProfileID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_ClearSavedProfileID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_AuthenticateAnonymous_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_AuthenticateAnonymous_args args = new Authentication_AuthenticateAnonymous_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_AuthenticateAnonymous_result result = new Authentication_AuthenticateAnonymous_result();
        try
        {
          result.Success = iface_.Authentication_AuthenticateAnonymous(args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateAnonymous", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateAnonymous", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_AuthenticateEmailPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_AuthenticateEmailPassword_args args = new Authentication_AuthenticateEmailPassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_AuthenticateEmailPassword_result result = new Authentication_AuthenticateEmailPassword_result();
        try
        {
          result.Success = iface_.Authentication_AuthenticateEmailPassword(args.Email, args.Password, args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateEmailPassword", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateEmailPassword", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_AuthenticateUniversal_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_AuthenticateUniversal_args args = new Authentication_AuthenticateUniversal_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_AuthenticateUniversal_result result = new Authentication_AuthenticateUniversal_result();
        try
        {
          result.Success = iface_.Authentication_AuthenticateUniversal(args.UserId, args.Password, args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateUniversal", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateUniversal", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_AuthenticateExternal_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_AuthenticateExternal_args args = new Authentication_AuthenticateExternal_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_AuthenticateExternal_result result = new Authentication_AuthenticateExternal_result();
        try
        {
          result.Success = iface_.Authentication_AuthenticateExternal(args.UserId, args.Token, args.ExternalAuthName, args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateExternal", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_AuthenticateExternal", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authentication_ResetEmailPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authentication_ResetEmailPassword_args args = new Authentication_ResetEmailPassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authentication_ResetEmailPassword_result result = new Authentication_ResetEmailPassword_result();
        try
        {
          result.Success = iface_.Authentication_ResetEmailPassword(args.ExternalId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Authentication_ResetEmailPassword", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Authentication_ResetEmailPassword", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_GetSessionId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_GetSessionId_args args = new Client_GetSessionId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_GetSessionId_result result = new Client_GetSessionId_result();
        try
        {
          result.Success = iface_.Client_GetSessionId(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_GetSessionId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_GetSessionId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_IsAuthenticated_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_IsAuthenticated_args args = new Client_IsAuthenticated_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_IsAuthenticated_result result = new Client_IsAuthenticated_result();
        try
        {
          result.Success = iface_.Client_IsAuthenticated(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_IsAuthenticated", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_IsAuthenticated", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_IsInitialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_IsInitialized_args args = new Client_IsInitialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_IsInitialized_result result = new Client_IsInitialized_result();
        try
        {
          result.Success = iface_.Client_IsInitialized(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_IsInitialized", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_IsInitialized", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_Initialize_SSS_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_Initialize_SSS_args args = new Client_Initialize_SSS_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_Initialize_SSS_result result = new Client_Initialize_SSS_result();
        try
        {
          iface_.Client_Initialize_SSS(args.SecretKey, args.AppId, args.AppVersion, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_Initialize_SSS", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_Initialize_SSS", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_Initialize_SSSS_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_Initialize_SSSS_args args = new Client_Initialize_SSSS_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_Initialize_SSSS_result result = new Client_Initialize_SSSS_result();
        try
        {
          iface_.Client_Initialize_SSSS(args.ServerURL, args.SecretKey, args.AppId, args.AppVersion, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_Initialize_SSSS", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_Initialize_SSSS", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_InitializeIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_InitializeIdentity_args args = new Client_InitializeIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_InitializeIdentity_result result = new Client_InitializeIdentity_result();
        try
        {
          iface_.Client_InitializeIdentity(args.ProfileId, args.AnonymousId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_InitializeIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_InitializeIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_Update_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_Update_args args = new Client_Update_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_Update_result result = new Client_Update_result();
        try
        {
          iface_.Client_Update(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_Update", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_Update", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_EnableLogging_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_EnableLogging_args args = new Client_EnableLogging_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_EnableLogging_result result = new Client_EnableLogging_result();
        try
        {
          iface_.Client_EnableLogging(args.Enable, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_EnableLogging", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_EnableLogging", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_ResetCommunication_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_ResetCommunication_args args = new Client_ResetCommunication_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_ResetCommunication_result result = new Client_ResetCommunication_result();
        try
        {
          iface_.Client_ResetCommunication(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_ResetCommunication", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_ResetCommunication", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_SetPacketTimeouts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_SetPacketTimeouts_args args = new Client_SetPacketTimeouts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_SetPacketTimeouts_result result = new Client_SetPacketTimeouts_result();
        try
        {
          iface_.Client_SetPacketTimeouts(args.Timeouts, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_SetPacketTimeouts", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_SetPacketTimeouts", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_SetPacketTimeoutsToDefault_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_SetPacketTimeoutsToDefault_args args = new Client_SetPacketTimeoutsToDefault_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_SetPacketTimeoutsToDefault_result result = new Client_SetPacketTimeoutsToDefault_result();
        try
        {
          iface_.Client_SetPacketTimeoutsToDefault(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_SetPacketTimeoutsToDefault", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_SetPacketTimeoutsToDefault", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_GetPacketTimeouts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_GetPacketTimeouts_args args = new Client_GetPacketTimeouts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_GetPacketTimeouts_result result = new Client_GetPacketTimeouts_result();
        try
        {
          result.Success = iface_.Client_GetPacketTimeouts(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_GetPacketTimeouts", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_GetPacketTimeouts", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_SetAuthenticationPacketTimeout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_SetAuthenticationPacketTimeout_args args = new Client_SetAuthenticationPacketTimeout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_SetAuthenticationPacketTimeout_result result = new Client_SetAuthenticationPacketTimeout_result();
        try
        {
          iface_.Client_SetAuthenticationPacketTimeout(args.TimeoutSecs, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_SetAuthenticationPacketTimeout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_SetAuthenticationPacketTimeout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_GetAuthenticationPacketTimeout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_GetAuthenticationPacketTimeout_args args = new Client_GetAuthenticationPacketTimeout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_GetAuthenticationPacketTimeout_result result = new Client_GetAuthenticationPacketTimeout_result();
        try
        {
          result.Success = iface_.Client_GetAuthenticationPacketTimeout(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_GetAuthenticationPacketTimeout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_GetAuthenticationPacketTimeout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_GetUploadLowTransferRateTimeout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_GetUploadLowTransferRateTimeout_args args = new Client_GetUploadLowTransferRateTimeout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_GetUploadLowTransferRateTimeout_result result = new Client_GetUploadLowTransferRateTimeout_result();
        try
        {
          result.Success = iface_.Client_GetUploadLowTransferRateTimeout(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_GetUploadLowTransferRateTimeout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_GetUploadLowTransferRateTimeout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_SetUploadLowTransferRateTimeout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_SetUploadLowTransferRateTimeout_args args = new Client_SetUploadLowTransferRateTimeout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_SetUploadLowTransferRateTimeout_result result = new Client_SetUploadLowTransferRateTimeout_result();
        try
        {
          iface_.Client_SetUploadLowTransferRateTimeout(args.TimeoutSecs, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_SetUploadLowTransferRateTimeout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_SetUploadLowTransferRateTimeout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_GetUploadLowTransferRateThreshold_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_GetUploadLowTransferRateThreshold_args args = new Client_GetUploadLowTransferRateThreshold_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_GetUploadLowTransferRateThreshold_result result = new Client_GetUploadLowTransferRateThreshold_result();
        try
        {
          result.Success = iface_.Client_GetUploadLowTransferRateThreshold(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_GetUploadLowTransferRateThreshold", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_GetUploadLowTransferRateThreshold", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_SetUploadLowTransferRateThreshold_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_SetUploadLowTransferRateThreshold_args args = new Client_SetUploadLowTransferRateThreshold_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_SetUploadLowTransferRateThreshold_result result = new Client_SetUploadLowTransferRateThreshold_result();
        try
        {
          iface_.Client_SetUploadLowTransferRateThreshold(args.BytesPerSec, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_SetUploadLowTransferRateThreshold", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_SetUploadLowTransferRateThreshold", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_EnableNetworkErrorMessageCaching_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_EnableNetworkErrorMessageCaching_args args = new Client_EnableNetworkErrorMessageCaching_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_EnableNetworkErrorMessageCaching_result result = new Client_EnableNetworkErrorMessageCaching_result();
        try
        {
          iface_.Client_EnableNetworkErrorMessageCaching(args.Enabled, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_EnableNetworkErrorMessageCaching", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_EnableNetworkErrorMessageCaching", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_RetryCachedMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_RetryCachedMessages_args args = new Client_RetryCachedMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_RetryCachedMessages_result result = new Client_RetryCachedMessages_result();
        try
        {
          iface_.Client_RetryCachedMessages(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_RetryCachedMessages", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_RetryCachedMessages", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_FlushCachedMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_FlushCachedMessages_args args = new Client_FlushCachedMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_FlushCachedMessages_result result = new Client_FlushCachedMessages_result();
        try
        {
          iface_.Client_FlushCachedMessages(args.SendApiErrorCallbacks, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_FlushCachedMessages", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_FlushCachedMessages", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_InsertEndOfMessageBundleMarker_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_InsertEndOfMessageBundleMarker_args args = new Client_InsertEndOfMessageBundleMarker_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_InsertEndOfMessageBundleMarker_result result = new Client_InsertEndOfMessageBundleMarker_result();
        try
        {
          iface_.Client_InsertEndOfMessageBundleMarker(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_InsertEndOfMessageBundleMarker", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_InsertEndOfMessageBundleMarker", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_OverrideCountryCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_OverrideCountryCode_args args = new Client_OverrideCountryCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_OverrideCountryCode_result result = new Client_OverrideCountryCode_result();
        try
        {
          iface_.Client_OverrideCountryCode(args.CountryCode, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_OverrideCountryCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_OverrideCountryCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Client_OverrideLanguageCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Client_OverrideLanguageCode_args args = new Client_OverrideLanguageCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Client_OverrideLanguageCode_result result = new Client_OverrideLanguageCode_result();
        try
        {
          iface_.Client_OverrideLanguageCode(args.LanguageCode, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Client_OverrideLanguageCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Client_OverrideLanguageCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DataStream_CustomPageEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DataStream_CustomPageEvent_args args = new DataStream_CustomPageEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DataStream_CustomPageEvent_result result = new DataStream_CustomPageEvent_result();
        try
        {
          result.Success = iface_.DataStream_CustomPageEvent(args.EventName, args.JsonEventProperties, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("DataStream_CustomPageEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DataStream_CustomPageEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DataStream_CustomScreenEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DataStream_CustomScreenEvent_args args = new DataStream_CustomScreenEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DataStream_CustomScreenEvent_result result = new DataStream_CustomScreenEvent_result();
        try
        {
          result.Success = iface_.DataStream_CustomScreenEvent(args.EventName, args.JsonEventProperties, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("DataStream_CustomScreenEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DataStream_CustomScreenEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DataStream_CustomTrackEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DataStream_CustomTrackEvent_args args = new DataStream_CustomTrackEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DataStream_CustomTrackEvent_result result = new DataStream_CustomTrackEvent_result();
        try
        {
          result.Success = iface_.DataStream_CustomTrackEvent(args.EventName, args.JsonEventProperties, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("DataStream_CustomTrackEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DataStream_CustomTrackEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_CreateEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_CreateEntity_args args = new Entity_CreateEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_CreateEntity_result result = new Entity_CreateEntity_result();
        try
        {
          result.Success = iface_.Entity_CreateEntity(args.EntityType, args.JsonEntityData, args.JsonEntityAcl, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_CreateEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_CreateEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetEntitiesByType_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetEntitiesByType_args args = new Entity_GetEntitiesByType_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetEntitiesByType_result result = new Entity_GetEntitiesByType_result();
        try
        {
          result.Success = iface_.Entity_GetEntitiesByType(args.EntityType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetEntitiesByType", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetEntitiesByType", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_UpdateEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_UpdateEntity_args args = new Entity_UpdateEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_UpdateEntity_result result = new Entity_UpdateEntity_result();
        try
        {
          result.Success = iface_.Entity_UpdateEntity(args.EntityId, args.EntityType, args.JsonEntityData, args.JsonEntityAcl, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_UpdateEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_UpdateEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_UpdateSharedEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_UpdateSharedEntity_args args = new Entity_UpdateSharedEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_UpdateSharedEntity_result result = new Entity_UpdateSharedEntity_result();
        try
        {
          result.Success = iface_.Entity_UpdateSharedEntity(args.EntityId, args.TargetProfileId, args.EntityType, args.JsonEntityData, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_UpdateSharedEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_UpdateSharedEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_DeleteEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_DeleteEntity_args args = new Entity_DeleteEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_DeleteEntity_result result = new Entity_DeleteEntity_result();
        try
        {
          result.Success = iface_.Entity_DeleteEntity(args.EntityId, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_DeleteEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_DeleteEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_UpdateSingleton_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_UpdateSingleton_args args = new Entity_UpdateSingleton_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_UpdateSingleton_result result = new Entity_UpdateSingleton_result();
        try
        {
          result.Success = iface_.Entity_UpdateSingleton(args.EntityType, args.JsonEntityData, args.JsonEntityAcl, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_UpdateSingleton", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_UpdateSingleton", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_DeleteSingleton_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_DeleteSingleton_args args = new Entity_DeleteSingleton_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_DeleteSingleton_result result = new Entity_DeleteSingleton_result();
        try
        {
          result.Success = iface_.Entity_DeleteSingleton(args.EntityType, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_DeleteSingleton", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_DeleteSingleton", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetEntity_args args = new Entity_GetEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetEntity_result result = new Entity_GetEntity_result();
        try
        {
          result.Success = iface_.Entity_GetEntity(args.EntityId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetSingleton_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetSingleton_args args = new Entity_GetSingleton_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetSingleton_result result = new Entity_GetSingleton_result();
        try
        {
          result.Success = iface_.Entity_GetSingleton(args.EntityType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetSingleton", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetSingleton", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetSharedEntityForProfileId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetSharedEntityForProfileId_args args = new Entity_GetSharedEntityForProfileId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetSharedEntityForProfileId_result result = new Entity_GetSharedEntityForProfileId_result();
        try
        {
          result.Success = iface_.Entity_GetSharedEntityForProfileId(args.ProfileId, args.EntityId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetSharedEntityForProfileId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetSharedEntityForProfileId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetSharedEntitiesForProfileId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetSharedEntitiesForProfileId_args args = new Entity_GetSharedEntitiesForProfileId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetSharedEntitiesForProfileId_result result = new Entity_GetSharedEntitiesForProfileId_result();
        try
        {
          result.Success = iface_.Entity_GetSharedEntitiesForProfileId(args.ProfileId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetSharedEntitiesForProfileId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetSharedEntitiesForProfileId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetList_args args = new Entity_GetList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetList_result result = new Entity_GetList_result();
        try
        {
          result.Success = iface_.Entity_GetList(args.WhereJson, args.OrderByJson, args.MaxReturn, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetSharedEntitiesListForProfileId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetSharedEntitiesListForProfileId_args args = new Entity_GetSharedEntitiesListForProfileId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetSharedEntitiesListForProfileId_result result = new Entity_GetSharedEntitiesListForProfileId_result();
        try
        {
          result.Success = iface_.Entity_GetSharedEntitiesListForProfileId(args.ProfileId, args.WhereJson, args.OrderByJson, args.MaxReturn, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetSharedEntitiesListForProfileId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetSharedEntitiesListForProfileId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetListCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetListCount_args args = new Entity_GetListCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetListCount_result result = new Entity_GetListCount_result();
        try
        {
          result.Success = iface_.Entity_GetListCount(args.WhereJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetListCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetListCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetPage_args args = new Entity_GetPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetPage_result result = new Entity_GetPage_result();
        try
        {
          result.Success = iface_.Entity_GetPage(args.JsonContext, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetPage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetPage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_GetPageOffset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_GetPageOffset_args args = new Entity_GetPageOffset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_GetPageOffset_result result = new Entity_GetPageOffset_result();
        try
        {
          result.Success = iface_.Entity_GetPageOffset(args.Context, args.PageOffset, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_GetPageOffset", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_GetPageOffset", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_IncrementUserEntityData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_IncrementUserEntityData_args args = new Entity_IncrementUserEntityData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_IncrementUserEntityData_result result = new Entity_IncrementUserEntityData_result();
        try
        {
          result.Success = iface_.Entity_IncrementUserEntityData(args.EntityId, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_IncrementUserEntityData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_IncrementUserEntityData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Entity_IncrementSharedUserEntityData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Entity_IncrementSharedUserEntityData_args args = new Entity_IncrementSharedUserEntityData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Entity_IncrementSharedUserEntityData_result result = new Entity_IncrementSharedUserEntityData_result();
        try
        {
          result.Success = iface_.Entity_IncrementSharedUserEntityData(args.EntityId, args.TargetProfileId, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Entity_IncrementSharedUserEntityData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Entity_IncrementSharedUserEntityData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Event_SendEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Event_SendEvent_args args = new Event_SendEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Event_SendEvent_result result = new Event_SendEvent_result();
        try
        {
          result.Success = iface_.Event_SendEvent(args.ToProfileId, args.EventType, args.JsonEventData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Event_SendEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Event_SendEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Event_UpdateIncomingEventData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Event_UpdateIncomingEventData_args args = new Event_UpdateIncomingEventData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Event_UpdateIncomingEventData_result result = new Event_UpdateIncomingEventData_result();
        try
        {
          result.Success = iface_.Event_UpdateIncomingEventData(args.EvId, args.JsonEventData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Event_UpdateIncomingEventData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Event_UpdateIncomingEventData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Event_DeleteIncomingEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Event_DeleteIncomingEvent_args args = new Event_DeleteIncomingEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Event_DeleteIncomingEvent_result result = new Event_DeleteIncomingEvent_result();
        try
        {
          result.Success = iface_.Event_DeleteIncomingEvent(args.EvId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Event_DeleteIncomingEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Event_DeleteIncomingEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Event_GetEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Event_GetEvents_args args = new Event_GetEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Event_GetEvents_result result = new Event_GetEvents_result();
        try
        {
          result.Success = iface_.Event_GetEvents(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Event_GetEvents", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Event_GetEvents", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_UploadFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_UploadFile_args args = new File_UploadFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_UploadFile_result result = new File_UploadFile_result();
        try
        {
          result.Success = iface_.File_UploadFile(args.CloudPath, args.CloudFilename, args.Shareable, args.ReplaceIfExists, args.LocalPath, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_UploadFile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_UploadFile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_CancelUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_CancelUpload_args args = new File_CancelUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_CancelUpload_result result = new File_CancelUpload_result();
        try
        {
          iface_.File_CancelUpload(args.UploadId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_CancelUpload", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_CancelUpload", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_GetUploadProgress_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_GetUploadProgress_args args = new File_GetUploadProgress_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_GetUploadProgress_result result = new File_GetUploadProgress_result();
        try
        {
          result.Success = iface_.File_GetUploadProgress(args.UploadId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_GetUploadProgress", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_GetUploadProgress", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_GetUploadBytesTransferred_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_GetUploadBytesTransferred_args args = new File_GetUploadBytesTransferred_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_GetUploadBytesTransferred_result result = new File_GetUploadBytesTransferred_result();
        try
        {
          result.Success = iface_.File_GetUploadBytesTransferred(args.UploadId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_GetUploadBytesTransferred", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_GetUploadBytesTransferred", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_GetUploadTotalBytesToTransfer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_GetUploadTotalBytesToTransfer_args args = new File_GetUploadTotalBytesToTransfer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_GetUploadTotalBytesToTransfer_result result = new File_GetUploadTotalBytesToTransfer_result();
        try
        {
          result.Success = iface_.File_GetUploadTotalBytesToTransfer(args.UploadId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_GetUploadTotalBytesToTransfer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_GetUploadTotalBytesToTransfer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_ListUserFiles_SFO_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_ListUserFiles_SFO_args args = new File_ListUserFiles_SFO_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_ListUserFiles_SFO_result result = new File_ListUserFiles_SFO_result();
        try
        {
          result.Success = iface_.File_ListUserFiles_SFO(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_ListUserFiles_SFO", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_ListUserFiles_SFO", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_ListUserFiles_SNSFO_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_ListUserFiles_SNSFO_args args = new File_ListUserFiles_SNSFO_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_ListUserFiles_SNSFO_result result = new File_ListUserFiles_SNSFO_result();
        try
        {
          result.Success = iface_.File_ListUserFiles_SNSFO(args.CloudPath, args.Recurse, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_ListUserFiles_SNSFO", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_ListUserFiles_SNSFO", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_DeleteUserFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_DeleteUserFile_args args = new File_DeleteUserFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_DeleteUserFile_result result = new File_DeleteUserFile_result();
        try
        {
          result.Success = iface_.File_DeleteUserFile(args.CloudPath, args.CloudFileName, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_DeleteUserFile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_DeleteUserFile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_DeleteUserFiles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_DeleteUserFiles_args args = new File_DeleteUserFiles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_DeleteUserFiles_result result = new File_DeleteUserFiles_result();
        try
        {
          result.Success = iface_.File_DeleteUserFiles(args.CloudPath, args.Recurse, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_DeleteUserFiles", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_DeleteUserFiles", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_GetCDNUrl_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_GetCDNUrl_args args = new File_GetCDNUrl_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_GetCDNUrl_result result = new File_GetCDNUrl_result();
        try
        {
          result.Success = iface_.File_GetCDNUrl(args.CloudPath, args.CloudFilename, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_GetCDNUrl", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_GetCDNUrl", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_FindUserByUniversalId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_FindUserByUniversalId_args args = new Friend_FindUserByUniversalId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_FindUserByUniversalId_result result = new Friend_FindUserByUniversalId_result();
        try
        {
          result.Success = iface_.Friend_FindUserByUniversalId(args.SearchText, args.MaxResults, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_FindUserByUniversalId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_FindUserByUniversalId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_GetProfileInfoForCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_GetProfileInfoForCredential_args args = new Friend_GetProfileInfoForCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_GetProfileInfoForCredential_result result = new Friend_GetProfileInfoForCredential_result();
        try
        {
          result.Success = iface_.Friend_GetProfileInfoForCredential(args.ExternalId, args.AuthenticationType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_GetProfileInfoForCredential", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_GetProfileInfoForCredential", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_GetProfileInfoForExternalAuthId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_GetProfileInfoForExternalAuthId_args args = new Friend_GetProfileInfoForExternalAuthId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_GetProfileInfoForExternalAuthId_result result = new Friend_GetProfileInfoForExternalAuthId_result();
        try
        {
          result.Success = iface_.Friend_GetProfileInfoForExternalAuthId(args.ExternalId, args.ExternalAuthType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_GetProfileInfoForExternalAuthId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_GetProfileInfoForExternalAuthId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_GetExternalIdForProfileId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_GetExternalIdForProfileId_args args = new Friend_GetExternalIdForProfileId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_GetExternalIdForProfileId_result result = new Friend_GetExternalIdForProfileId_result();
        try
        {
          result.Success = iface_.Friend_GetExternalIdForProfileId(args.ProfileId, args.AuthenticationType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_GetExternalIdForProfileId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_GetExternalIdForProfileId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_ReadFriendEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_ReadFriendEntity_args args = new Friend_ReadFriendEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_ReadFriendEntity_result result = new Friend_ReadFriendEntity_result();
        try
        {
          result.Success = iface_.Friend_ReadFriendEntity(args.EntityId, args.FriendId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_ReadFriendEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_ReadFriendEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_ReadFriendsEntities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_ReadFriendsEntities_args args = new Friend_ReadFriendsEntities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_ReadFriendsEntities_result result = new Friend_ReadFriendsEntities_result();
        try
        {
          result.Success = iface_.Friend_ReadFriendsEntities(args.EntityType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_ReadFriendsEntities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_ReadFriendsEntities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_ReadFriendUserState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_ReadFriendUserState_args args = new Friend_ReadFriendUserState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_ReadFriendUserState_result result = new Friend_ReadFriendUserState_result();
        try
        {
          result.Success = iface_.Friend_ReadFriendUserState(args.FriendId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_ReadFriendUserState", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_ReadFriendUserState", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_GetSummaryDataForProfileId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_GetSummaryDataForProfileId_args args = new Friend_GetSummaryDataForProfileId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_GetSummaryDataForProfileId_result result = new Friend_GetSummaryDataForProfileId_result();
        try
        {
          result.Success = iface_.Friend_GetSummaryDataForProfileId(args.ProfileId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_GetSummaryDataForProfileId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_GetSummaryDataForProfileId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_FindUsersByExactName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_FindUsersByExactName_args args = new Friend_FindUsersByExactName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_FindUsersByExactName_result result = new Friend_FindUsersByExactName_result();
        try
        {
          result.Success = iface_.Friend_FindUsersByExactName(args.SearchText, args.MaxResults, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_FindUsersByExactName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_FindUsersByExactName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_FindUsersBySubstrName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_FindUsersBySubstrName_args args = new Friend_FindUsersBySubstrName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_FindUsersBySubstrName_result result = new Friend_FindUsersBySubstrName_result();
        try
        {
          result.Success = iface_.Friend_FindUsersBySubstrName(args.SearchText, args.MaxResults, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_FindUsersBySubstrName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_FindUsersBySubstrName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_ListFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_ListFriends_args args = new Friend_ListFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_ListFriends_result result = new Friend_ListFriends_result();
        try
        {
          result.Success = iface_.Friend_ListFriends(args.FriendPlatform, args.IncludeSummaryData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_ListFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_ListFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_AddFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_AddFriends_args args = new Friend_AddFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_AddFriends_result result = new Friend_AddFriends_result();
        try
        {
          result.Success = iface_.Friend_AddFriends(args.ProfileIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_AddFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_AddFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_RemoveFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_RemoveFriends_args args = new Friend_RemoveFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_RemoveFriends_result result = new Friend_RemoveFriends_result();
        try
        {
          result.Success = iface_.Friend_RemoveFriends(args.ProfileIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_RemoveFriends", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_RemoveFriends", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Friend_GetUsersOnlineStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Friend_GetUsersOnlineStatus_args args = new Friend_GetUsersOnlineStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Friend_GetUsersOnlineStatus_result result = new Friend_GetUsersOnlineStatus_result();
        try
        {
          result.Success = iface_.Friend_GetUsersOnlineStatus(args.ProfileIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Friend_GetUsersOnlineStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Friend_GetUsersOnlineStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadAllGamification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadAllGamification_args args = new Gamification_ReadAllGamification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadAllGamification_result result = new Gamification_ReadAllGamification_result();
        try
        {
          result.Success = iface_.Gamification_ReadAllGamification(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadAllGamification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadAllGamification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadMilestones_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadMilestones_args args = new Gamification_ReadMilestones_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadMilestones_result result = new Gamification_ReadMilestones_result();
        try
        {
          result.Success = iface_.Gamification_ReadMilestones(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadMilestones", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadMilestones", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadAchievements_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadAchievements_args args = new Gamification_ReadAchievements_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadAchievements_result result = new Gamification_ReadAchievements_result();
        try
        {
          result.Success = iface_.Gamification_ReadAchievements(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadAchievements", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadAchievements", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadXpLevelsMetaData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadXpLevelsMetaData_args args = new Gamification_ReadXpLevelsMetaData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadXpLevelsMetaData_result result = new Gamification_ReadXpLevelsMetaData_result();
        try
        {
          result.Success = iface_.Gamification_ReadXpLevelsMetaData(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadXpLevelsMetaData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadXpLevelsMetaData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadAchievedAchievements_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadAchievedAchievements_args args = new Gamification_ReadAchievedAchievements_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadAchievedAchievements_result result = new Gamification_ReadAchievedAchievements_result();
        try
        {
          result.Success = iface_.Gamification_ReadAchievedAchievements(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadAchievedAchievements", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadAchievedAchievements", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadCompletedMilestones_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadCompletedMilestones_args args = new Gamification_ReadCompletedMilestones_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadCompletedMilestones_result result = new Gamification_ReadCompletedMilestones_result();
        try
        {
          result.Success = iface_.Gamification_ReadCompletedMilestones(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadCompletedMilestones", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadCompletedMilestones", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadInProgressMilestones_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadInProgressMilestones_args args = new Gamification_ReadInProgressMilestones_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadInProgressMilestones_result result = new Gamification_ReadInProgressMilestones_result();
        try
        {
          result.Success = iface_.Gamification_ReadInProgressMilestones(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadInProgressMilestones", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadInProgressMilestones", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadMilestonesByCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadMilestonesByCategory_args args = new Gamification_ReadMilestonesByCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadMilestonesByCategory_result result = new Gamification_ReadMilestonesByCategory_result();
        try
        {
          result.Success = iface_.Gamification_ReadMilestonesByCategory(args.Category, args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadMilestonesByCategory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadMilestonesByCategory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_AwardAchievements_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_AwardAchievements_args args = new Gamification_AwardAchievements_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_AwardAchievements_result result = new Gamification_AwardAchievements_result();
        try
        {
          result.Success = iface_.Gamification_AwardAchievements(args.AchievementIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_AwardAchievements", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_AwardAchievements", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadQuests_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadQuests_args args = new Gamification_ReadQuests_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadQuests_result result = new Gamification_ReadQuests_result();
        try
        {
          result.Success = iface_.Gamification_ReadQuests(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuests", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuests", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadCompletedQuests_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadCompletedQuests_args args = new Gamification_ReadCompletedQuests_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadCompletedQuests_result result = new Gamification_ReadCompletedQuests_result();
        try
        {
          result.Success = iface_.Gamification_ReadCompletedQuests(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadCompletedQuests", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadCompletedQuests", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadInProgressQuests_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadInProgressQuests_args args = new Gamification_ReadInProgressQuests_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadInProgressQuests_result result = new Gamification_ReadInProgressQuests_result();
        try
        {
          result.Success = iface_.Gamification_ReadInProgressQuests(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadInProgressQuests", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadInProgressQuests", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadNotStartedQuests_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadNotStartedQuests_args args = new Gamification_ReadNotStartedQuests_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadNotStartedQuests_result result = new Gamification_ReadNotStartedQuests_result();
        try
        {
          result.Success = iface_.Gamification_ReadNotStartedQuests(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadNotStartedQuests", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadNotStartedQuests", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadQuestsWithStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadQuestsWithStatus_args args = new Gamification_ReadQuestsWithStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadQuestsWithStatus_result result = new Gamification_ReadQuestsWithStatus_result();
        try
        {
          result.Success = iface_.Gamification_ReadQuestsWithStatus(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadQuestsWithBasicPercentage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadQuestsWithBasicPercentage_args args = new Gamification_ReadQuestsWithBasicPercentage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadQuestsWithBasicPercentage_result result = new Gamification_ReadQuestsWithBasicPercentage_result();
        try
        {
          result.Success = iface_.Gamification_ReadQuestsWithBasicPercentage(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithBasicPercentage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithBasicPercentage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadQuestsWithComplexPercentage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadQuestsWithComplexPercentage_args args = new Gamification_ReadQuestsWithComplexPercentage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadQuestsWithComplexPercentage_result result = new Gamification_ReadQuestsWithComplexPercentage_result();
        try
        {
          result.Success = iface_.Gamification_ReadQuestsWithComplexPercentage(args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithComplexPercentage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsWithComplexPercentage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ReadQuestsByCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ReadQuestsByCategory_args args = new Gamification_ReadQuestsByCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ReadQuestsByCategory_result result = new Gamification_ReadQuestsByCategory_result();
        try
        {
          result.Success = iface_.Gamification_ReadQuestsByCategory(args.Category, args.IncludeMetaData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsByCategory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ReadQuestsByCategory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Gamification_ResetMilestones_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Gamification_ResetMilestones_args args = new Gamification_ResetMilestones_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Gamification_ResetMilestones_result result = new Gamification_ResetMilestones_result();
        try
        {
          result.Success = iface_.Gamification_ResetMilestones(args.MilestoneIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Gamification_ResetMilestones", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Gamification_ResetMilestones", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalApp_ReadProperties_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalApp_ReadProperties_args args = new GlobalApp_ReadProperties_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalApp_ReadProperties_result result = new GlobalApp_ReadProperties_result();
        try
        {
          result.Success = iface_.GlobalApp_ReadProperties(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalApp_ReadProperties", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalApp_ReadProperties", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_CreateEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_CreateEntity_args args = new GlobalEntity_CreateEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_CreateEntity_result result = new GlobalEntity_CreateEntity_result();
        try
        {
          result.Success = iface_.GlobalEntity_CreateEntity(args.EntityType, args.TimeToLive, args.JsonEntityAcl, args.JsonEntityData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_CreateEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_CreateEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_CreateEntityWithIndexedId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_CreateEntityWithIndexedId_args args = new GlobalEntity_CreateEntityWithIndexedId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_CreateEntityWithIndexedId_result result = new GlobalEntity_CreateEntityWithIndexedId_result();
        try
        {
          result.Success = iface_.GlobalEntity_CreateEntityWithIndexedId(args.EntityType, args.IndexedId, args.TimeToLive, args.JsonEntityAcl, args.JsonEntityData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_CreateEntityWithIndexedId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_CreateEntityWithIndexedId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_UpdateEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_UpdateEntity_args args = new GlobalEntity_UpdateEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_UpdateEntity_result result = new GlobalEntity_UpdateEntity_result();
        try
        {
          result.Success = iface_.GlobalEntity_UpdateEntity(args.EntityId, args.Version, args.JsonEntityData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_UpdateEntityAcl_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_UpdateEntityAcl_args args = new GlobalEntity_UpdateEntityAcl_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_UpdateEntityAcl_result result = new GlobalEntity_UpdateEntityAcl_result();
        try
        {
          result.Success = iface_.GlobalEntity_UpdateEntityAcl(args.EntityId, args.Version, args.JsonEntityAcl, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityAcl", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityAcl", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_UpdateEntityTimeToLive_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_UpdateEntityTimeToLive_args args = new GlobalEntity_UpdateEntityTimeToLive_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_UpdateEntityTimeToLive_result result = new GlobalEntity_UpdateEntityTimeToLive_result();
        try
        {
          result.Success = iface_.GlobalEntity_UpdateEntityTimeToLive(args.EntityId, args.Version, args.TimeToLive, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityTimeToLive", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityTimeToLive", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_DeleteEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_DeleteEntity_args args = new GlobalEntity_DeleteEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_DeleteEntity_result result = new GlobalEntity_DeleteEntity_result();
        try
        {
          result.Success = iface_.GlobalEntity_DeleteEntity(args.EntityId, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_DeleteEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_DeleteEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_ReadEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_ReadEntity_args args = new GlobalEntity_ReadEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_ReadEntity_result result = new GlobalEntity_ReadEntity_result();
        try
        {
          result.Success = iface_.GlobalEntity_ReadEntity(args.EntityId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_ReadEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_ReadEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_GetList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_GetList_args args = new GlobalEntity_GetList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_GetList_result result = new GlobalEntity_GetList_result();
        try
        {
          result.Success = iface_.GlobalEntity_GetList(args.WhereJson, args.OrderByJson, args.MaxReturn, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_GetListByIndexedId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_GetListByIndexedId_args args = new GlobalEntity_GetListByIndexedId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_GetListByIndexedId_result result = new GlobalEntity_GetListByIndexedId_result();
        try
        {
          result.Success = iface_.GlobalEntity_GetListByIndexedId(args.EntityIndexedId, args.MaxReturn, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetListByIndexedId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetListByIndexedId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_GetListCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_GetListCount_args args = new GlobalEntity_GetListCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_GetListCount_result result = new GlobalEntity_GetListCount_result();
        try
        {
          result.Success = iface_.GlobalEntity_GetListCount(args.WhereJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetListCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetListCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_GetPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_GetPage_args args = new GlobalEntity_GetPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_GetPage_result result = new GlobalEntity_GetPage_result();
        try
        {
          result.Success = iface_.GlobalEntity_GetPage(args.JsonContext, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetPage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetPage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_GetPageOffset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_GetPageOffset_args args = new GlobalEntity_GetPageOffset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_GetPageOffset_result result = new GlobalEntity_GetPageOffset_result();
        try
        {
          result.Success = iface_.GlobalEntity_GetPageOffset(args.Context, args.PageOffset, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetPageOffset", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetPageOffset", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_IncrementGlobalEntityData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_IncrementGlobalEntityData_args args = new GlobalEntity_IncrementGlobalEntityData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_IncrementGlobalEntityData_result result = new GlobalEntity_IncrementGlobalEntityData_result();
        try
        {
          result.Success = iface_.GlobalEntity_IncrementGlobalEntityData(args.EntityId, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_IncrementGlobalEntityData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_IncrementGlobalEntityData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_GetRandomEntitiesMatching_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_GetRandomEntitiesMatching_args args = new GlobalEntity_GetRandomEntitiesMatching_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_GetRandomEntitiesMatching_result result = new GlobalEntity_GetRandomEntitiesMatching_result();
        try
        {
          result.Success = iface_.GlobalEntity_GetRandomEntitiesMatching(args.WhereJson, args.MaxReturn, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetRandomEntitiesMatching", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_GetRandomEntitiesMatching", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_UpdateEntityOwnerAndAcl_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_UpdateEntityOwnerAndAcl_args args = new GlobalEntity_UpdateEntityOwnerAndAcl_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_UpdateEntityOwnerAndAcl_result result = new GlobalEntity_UpdateEntityOwnerAndAcl_result();
        try
        {
          result.Success = iface_.GlobalEntity_UpdateEntityOwnerAndAcl(args.EntityId, args.Version, args.OwnerId, args.Acl, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityOwnerAndAcl", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_UpdateEntityOwnerAndAcl", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalEntity_MakeSystemEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalEntity_MakeSystemEntity_args args = new GlobalEntity_MakeSystemEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalEntity_MakeSystemEntity_result result = new GlobalEntity_MakeSystemEntity_result();
        try
        {
          result.Success = iface_.GlobalEntity_MakeSystemEntity(args.EntityId, args.Version, args.Acl, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_MakeSystemEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalEntity_MakeSystemEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalStatistics_ReadAllGlobalStats_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalStatistics_ReadAllGlobalStats_args args = new GlobalStatistics_ReadAllGlobalStats_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalStatistics_ReadAllGlobalStats_result result = new GlobalStatistics_ReadAllGlobalStats_result();
        try
        {
          result.Success = iface_.GlobalStatistics_ReadAllGlobalStats(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ReadAllGlobalStats", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ReadAllGlobalStats", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalStatistics_ReadGlobalStatsSubset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalStatistics_ReadGlobalStatsSubset_args args = new GlobalStatistics_ReadGlobalStatsSubset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalStatistics_ReadGlobalStatsSubset_result result = new GlobalStatistics_ReadGlobalStatsSubset_result();
        try
        {
          result.Success = iface_.GlobalStatistics_ReadGlobalStatsSubset(args.GlobalStats, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ReadGlobalStatsSubset", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ReadGlobalStatsSubset", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalStatistics_ReadGlobalStatsForCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalStatistics_ReadGlobalStatsForCategory_args args = new GlobalStatistics_ReadGlobalStatsForCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalStatistics_ReadGlobalStatsForCategory_result result = new GlobalStatistics_ReadGlobalStatsForCategory_result();
        try
        {
          result.Success = iface_.GlobalStatistics_ReadGlobalStatsForCategory(args.Category, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ReadGlobalStatsForCategory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ReadGlobalStatsForCategory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalStatistics_IncrementGlobalStats_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalStatistics_IncrementGlobalStats_args args = new GlobalStatistics_IncrementGlobalStats_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalStatistics_IncrementGlobalStats_result result = new GlobalStatistics_IncrementGlobalStats_result();
        try
        {
          result.Success = iface_.GlobalStatistics_IncrementGlobalStats(args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_IncrementGlobalStats", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_IncrementGlobalStats", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GlobalStatistics_ProcessStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GlobalStatistics_ProcessStatistics_args args = new GlobalStatistics_ProcessStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GlobalStatistics_ProcessStatistics_result result = new GlobalStatistics_ProcessStatistics_result();
        try
        {
          result.Success = iface_.GlobalStatistics_ProcessStatistics(args.StatisticsData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ProcessStatistics", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GlobalStatistics_ProcessStatistics", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_AcceptGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_AcceptGroupInvitation_args args = new Group_AcceptGroupInvitation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_AcceptGroupInvitation_result result = new Group_AcceptGroupInvitation_result();
        try
        {
          result.Success = iface_.Group_AcceptGroupInvitation(args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_AcceptGroupInvitation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_AcceptGroupInvitation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_AddGroupMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_AddGroupMember_args args = new Group_AddGroupMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_AddGroupMember_result result = new Group_AddGroupMember_result();
        try
        {
          result.Success = iface_.Group_AddGroupMember(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_AddGroupMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_AddGroupMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ApproveGroupJoinRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ApproveGroupJoinRequest_args args = new Group_ApproveGroupJoinRequest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ApproveGroupJoinRequest_result result = new Group_ApproveGroupJoinRequest_result();
        try
        {
          result.Success = iface_.Group_ApproveGroupJoinRequest(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ApproveGroupJoinRequest", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ApproveGroupJoinRequest", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_AutoJoinGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_AutoJoinGroup_args args = new Group_AutoJoinGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_AutoJoinGroup_result result = new Group_AutoJoinGroup_result();
        try
        {
          result.Success = iface_.Group_AutoJoinGroup(args.GroupType, args.AutoJoinStrategy, args.DataQueryJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_AutoJoinGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_AutoJoinGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_CancelGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_CancelGroupInvitation_args args = new Group_CancelGroupInvitation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_CancelGroupInvitation_result result = new Group_CancelGroupInvitation_result();
        try
        {
          result.Success = iface_.Group_CancelGroupInvitation(args.GroupId, args.ProfileId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_CancelGroupInvitation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_CancelGroupInvitation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_CreateGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_CreateGroup_args args = new Group_CreateGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_CreateGroup_result result = new Group_CreateGroup_result();
        try
        {
          result.Success = iface_.Group_CreateGroup(args.Name, args.GroupType, args.IsOpenGroup, args.Acl, args.JsonData, args.JsonOwnerAttributes, args.JsonDefaultMemberAttributes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_CreateGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_CreateGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_CreateGroupEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_CreateGroupEntity_args args = new Group_CreateGroupEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_CreateGroupEntity_result result = new Group_CreateGroupEntity_result();
        try
        {
          result.Success = iface_.Group_CreateGroupEntity(args.GroupId, args.EntityType, args.IsOwnedByGroupMember, args.Acl, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_CreateGroupEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_CreateGroupEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_DeleteGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_DeleteGroup_args args = new Group_DeleteGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_DeleteGroup_result result = new Group_DeleteGroup_result();
        try
        {
          result.Success = iface_.Group_DeleteGroup(args.GroupId, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_DeleteGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_DeleteGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_DeleteGroupEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_DeleteGroupEntity_args args = new Group_DeleteGroupEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_DeleteGroupEntity_result result = new Group_DeleteGroupEntity_result();
        try
        {
          result.Success = iface_.Group_DeleteGroupEntity(args.GroupId, args.EntityId, args.Version, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_DeleteGroupEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_DeleteGroupEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_GetMyGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_GetMyGroups_args args = new Group_GetMyGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_GetMyGroups_result result = new Group_GetMyGroups_result();
        try
        {
          result.Success = iface_.Group_GetMyGroups(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_GetMyGroups", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_GetMyGroups", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_IncrementGroupData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_IncrementGroupData_args args = new Group_IncrementGroupData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_IncrementGroupData_result result = new Group_IncrementGroupData_result();
        try
        {
          result.Success = iface_.Group_IncrementGroupData(args.GroupId, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_IncrementGroupData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_IncrementGroupData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_IncrementGroupEntityData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_IncrementGroupEntityData_args args = new Group_IncrementGroupEntityData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_IncrementGroupEntityData_result result = new Group_IncrementGroupEntityData_result();
        try
        {
          result.Success = iface_.Group_IncrementGroupEntityData(args.GroupId, args.EntityId, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_IncrementGroupEntityData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_IncrementGroupEntityData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_InviteGroupMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_InviteGroupMember_args args = new Group_InviteGroupMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_InviteGroupMember_result result = new Group_InviteGroupMember_result();
        try
        {
          result.Success = iface_.Group_InviteGroupMember(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_InviteGroupMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_InviteGroupMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_JoinGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_JoinGroup_args args = new Group_JoinGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_JoinGroup_result result = new Group_JoinGroup_result();
        try
        {
          result.Success = iface_.Group_JoinGroup(args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_JoinGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_JoinGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_LeaveGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_LeaveGroup_args args = new Group_LeaveGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_LeaveGroup_result result = new Group_LeaveGroup_result();
        try
        {
          result.Success = iface_.Group_LeaveGroup(args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_LeaveGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_LeaveGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ListGroupsPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ListGroupsPage_args args = new Group_ListGroupsPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ListGroupsPage_result result = new Group_ListGroupsPage_result();
        try
        {
          result.Success = iface_.Group_ListGroupsPage(args.JsonContext, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ListGroupsPage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ListGroupsPage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ListGroupsPageByOffset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ListGroupsPageByOffset_args args = new Group_ListGroupsPageByOffset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ListGroupsPageByOffset_result result = new Group_ListGroupsPageByOffset_result();
        try
        {
          result.Success = iface_.Group_ListGroupsPageByOffset(args.Context, args.PageOffset, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ListGroupsPageByOffset", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ListGroupsPageByOffset", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ListGroupsWithMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ListGroupsWithMember_args args = new Group_ListGroupsWithMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ListGroupsWithMember_result result = new Group_ListGroupsWithMember_result();
        try
        {
          result.Success = iface_.Group_ListGroupsWithMember(args.ProfileId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ListGroupsWithMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ListGroupsWithMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ReadGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ReadGroup_args args = new Group_ReadGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ReadGroup_result result = new Group_ReadGroup_result();
        try
        {
          result.Success = iface_.Group_ReadGroup(args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ReadGroupData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ReadGroupData_args args = new Group_ReadGroupData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ReadGroupData_result result = new Group_ReadGroupData_result();
        try
        {
          result.Success = iface_.Group_ReadGroupData(args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ReadGroupEntitiesPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ReadGroupEntitiesPage_args args = new Group_ReadGroupEntitiesPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ReadGroupEntitiesPage_result result = new Group_ReadGroupEntitiesPage_result();
        try
        {
          result.Success = iface_.Group_ReadGroupEntitiesPage(args.JsonContext, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupEntitiesPage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupEntitiesPage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ReadGroupEntitiesPageByOffset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ReadGroupEntitiesPageByOffset_args args = new Group_ReadGroupEntitiesPageByOffset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ReadGroupEntitiesPageByOffset_result result = new Group_ReadGroupEntitiesPageByOffset_result();
        try
        {
          result.Success = iface_.Group_ReadGroupEntitiesPageByOffset(args.EncodedContext, args.PageOffset, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupEntitiesPageByOffset", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupEntitiesPageByOffset", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ReadGroupEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ReadGroupEntity_args args = new Group_ReadGroupEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ReadGroupEntity_result result = new Group_ReadGroupEntity_result();
        try
        {
          result.Success = iface_.Group_ReadGroupEntity(args.GroupId, args.EntityId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupEntity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupEntity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_ReadGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_ReadGroupMembers_args args = new Group_ReadGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_ReadGroupMembers_result result = new Group_ReadGroupMembers_result();
        try
        {
          result.Success = iface_.Group_ReadGroupMembers(args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupMembers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_ReadGroupMembers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_RejectGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_RejectGroupInvitation_args args = new Group_RejectGroupInvitation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_RejectGroupInvitation_result result = new Group_RejectGroupInvitation_result();
        try
        {
          result.Success = iface_.Group_RejectGroupInvitation(args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_RejectGroupInvitation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_RejectGroupInvitation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_RejectGroupJoinRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_RejectGroupJoinRequest_args args = new Group_RejectGroupJoinRequest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_RejectGroupJoinRequest_result result = new Group_RejectGroupJoinRequest_result();
        try
        {
          result.Success = iface_.Group_RejectGroupJoinRequest(args.GroupId, args.ProfileId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_RejectGroupJoinRequest", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_RejectGroupJoinRequest", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_RemoveGroupMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_RemoveGroupMember_args args = new Group_RemoveGroupMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_RemoveGroupMember_result result = new Group_RemoveGroupMember_result();
        try
        {
          result.Success = iface_.Group_RemoveGroupMember(args.GroupId, args.ProfileId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_RemoveGroupMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_RemoveGroupMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_UpdateGroupData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_UpdateGroupData_args args = new Group_UpdateGroupData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_UpdateGroupData_result result = new Group_UpdateGroupData_result();
        try
        {
          result.Success = iface_.Group_UpdateGroupData(args.GroupId, args.Version, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_UpdateGroupEntityData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_UpdateGroupEntityData_args args = new Group_UpdateGroupEntityData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_UpdateGroupEntityData_result result = new Group_UpdateGroupEntityData_result();
        try
        {
          result.Success = iface_.Group_UpdateGroupEntityData(args.GroupId, args.EntityId, args.Version, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupEntityData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupEntityData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_UpdateGroupMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_UpdateGroupMember_args args = new Group_UpdateGroupMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_UpdateGroupMember_result result = new Group_UpdateGroupMember_result();
        try
        {
          result.Success = iface_.Group_UpdateGroupMember(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Group_UpdateGroupName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Group_UpdateGroupName_args args = new Group_UpdateGroupName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Group_UpdateGroupName_result result = new Group_UpdateGroupName_result();
        try
        {
          result.Success = iface_.Group_UpdateGroupName(args.GroupId, args.Name, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Group_UpdateGroupName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_AttachEmailIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_AttachEmailIdentity_args args = new Identity_AttachEmailIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_AttachEmailIdentity_result result = new Identity_AttachEmailIdentity_result();
        try
        {
          result.Success = iface_.Identity_AttachEmailIdentity(args.Email, args.Password, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_AttachEmailIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_AttachEmailIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_MergeEmailIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_MergeEmailIdentity_args args = new Identity_MergeEmailIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_MergeEmailIdentity_result result = new Identity_MergeEmailIdentity_result();
        try
        {
          result.Success = iface_.Identity_MergeEmailIdentity(args.Email, args.Password, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_MergeEmailIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_MergeEmailIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_DetachEmailIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_DetachEmailIdentity_args args = new Identity_DetachEmailIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_DetachEmailIdentity_result result = new Identity_DetachEmailIdentity_result();
        try
        {
          result.Success = iface_.Identity_DetachEmailIdentity(args.Email, args.ContinueAnon, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_DetachEmailIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_DetachEmailIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_AttachUniversalIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_AttachUniversalIdentity_args args = new Identity_AttachUniversalIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_AttachUniversalIdentity_result result = new Identity_AttachUniversalIdentity_result();
        try
        {
          result.Success = iface_.Identity_AttachUniversalIdentity(args.UserId, args.Password, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_AttachUniversalIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_AttachUniversalIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_MergeUniversalIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_MergeUniversalIdentity_args args = new Identity_MergeUniversalIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_MergeUniversalIdentity_result result = new Identity_MergeUniversalIdentity_result();
        try
        {
          result.Success = iface_.Identity_MergeUniversalIdentity(args.UserId, args.Password, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_MergeUniversalIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_MergeUniversalIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_DetachUniversalIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_DetachUniversalIdentity_args args = new Identity_DetachUniversalIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_DetachUniversalIdentity_result result = new Identity_DetachUniversalIdentity_result();
        try
        {
          result.Success = iface_.Identity_DetachUniversalIdentity(args.UserId, args.ContinueAnon, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_DetachUniversalIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_DetachUniversalIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_SwitchToChildProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_SwitchToChildProfile_args args = new Identity_SwitchToChildProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_SwitchToChildProfile_result result = new Identity_SwitchToChildProfile_result();
        try
        {
          result.Success = iface_.Identity_SwitchToChildProfile(args.ChildProfileId, args.ChildAppId, args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_SwitchToChildProfile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_SwitchToChildProfile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_SwitchToSingletonChildProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_SwitchToSingletonChildProfile_args args = new Identity_SwitchToSingletonChildProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_SwitchToSingletonChildProfile_result result = new Identity_SwitchToSingletonChildProfile_result();
        try
        {
          result.Success = iface_.Identity_SwitchToSingletonChildProfile(args.ChildAppId, args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_SwitchToSingletonChildProfile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_SwitchToSingletonChildProfile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_AttachParentWithIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_AttachParentWithIdentity_args args = new Identity_AttachParentWithIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_AttachParentWithIdentity_result result = new Identity_AttachParentWithIdentity_result();
        try
        {
          result.Success = iface_.Identity_AttachParentWithIdentity(args.ExternalId, args.AuthenticationToken, args.AuthenticationType, args.ExternalAuthName, args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_AttachParentWithIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_AttachParentWithIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_SwitchToParentProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_SwitchToParentProfile_args args = new Identity_SwitchToParentProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_SwitchToParentProfile_result result = new Identity_SwitchToParentProfile_result();
        try
        {
          result.Success = iface_.Identity_SwitchToParentProfile(args.ParentLevelName, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_SwitchToParentProfile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_SwitchToParentProfile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_DetachParent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_DetachParent_args args = new Identity_DetachParent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_DetachParent_result result = new Identity_DetachParent_result();
        try
        {
          result.Success = iface_.Identity_DetachParent(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_DetachParent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_DetachParent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_GetChildProfiles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_GetChildProfiles_args args = new Identity_GetChildProfiles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_GetChildProfiles_result result = new Identity_GetChildProfiles_result();
        try
        {
          result.Success = iface_.Identity_GetChildProfiles(args.IncludeSummaryData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_GetChildProfiles", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_GetChildProfiles", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_GetIdentities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_GetIdentities_args args = new Identity_GetIdentities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_GetIdentities_result result = new Identity_GetIdentities_result();
        try
        {
          result.Success = iface_.Identity_GetIdentities(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_GetIdentities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_GetIdentities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_GetExpiredIdentities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_GetExpiredIdentities_args args = new Identity_GetExpiredIdentities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_GetExpiredIdentities_result result = new Identity_GetExpiredIdentities_result();
        try
        {
          result.Success = iface_.Identity_GetExpiredIdentities(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_GetExpiredIdentities", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_GetExpiredIdentities", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_RefreshIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_RefreshIdentity_args args = new Identity_RefreshIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_RefreshIdentity_result result = new Identity_RefreshIdentity_result();
        try
        {
          result.Success = iface_.Identity_RefreshIdentity(args.ExternalId, args.AuthenticationToken, args.AuthenticationType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_RefreshIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_RefreshIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_ChangeEmailIdentity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_ChangeEmailIdentity_args args = new Identity_ChangeEmailIdentity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_ChangeEmailIdentity_result result = new Identity_ChangeEmailIdentity_result();
        try
        {
          result.Success = iface_.Identity_ChangeEmailIdentity(args.OldEmailAddress, args.Password, args.NewEmailAddress, args.UpdateContactEmail, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_ChangeEmailIdentity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_ChangeEmailIdentity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_AttachPeerProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_AttachPeerProfile_args args = new Identity_AttachPeerProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_AttachPeerProfile_result result = new Identity_AttachPeerProfile_result();
        try
        {
          result.Success = iface_.Identity_AttachPeerProfile(args.Peer, args.ExternalId, args.AuthenticationToken, args.AuthenticationType, args.ExternalAuthName, args.ForceCreate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_AttachPeerProfile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_AttachPeerProfile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_DetachPeer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_DetachPeer_args args = new Identity_DetachPeer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_DetachPeer_result result = new Identity_DetachPeer_result();
        try
        {
          result.Success = iface_.Identity_DetachPeer(args.Peer, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_DetachPeer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_DetachPeer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Identity_GetPeerProfiles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Identity_GetPeerProfiles_args args = new Identity_GetPeerProfiles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Identity_GetPeerProfiles_result result = new Identity_GetPeerProfiles_result();
        try
        {
          result.Success = iface_.Identity_GetPeerProfiles(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Identity_GetPeerProfiles", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Identity_GetPeerProfiles", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Mail_SendBasicEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Mail_SendBasicEmail_args args = new Mail_SendBasicEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Mail_SendBasicEmail_result result = new Mail_SendBasicEmail_result();
        try
        {
          result.Success = iface_.Mail_SendBasicEmail(args.ProfileId, args.Subject, args.Body, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Mail_SendBasicEmail", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Mail_SendBasicEmail", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Mail_SendAdvancedEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Mail_SendAdvancedEmail_args args = new Mail_SendAdvancedEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Mail_SendAdvancedEmail_result result = new Mail_SendAdvancedEmail_result();
        try
        {
          result.Success = iface_.Mail_SendAdvancedEmail(args.ProfileId, args.JsonServiceParams, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Mail_SendAdvancedEmail", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Mail_SendAdvancedEmail", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Mail_SendAdvancedEmailByAddress_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Mail_SendAdvancedEmailByAddress_args args = new Mail_SendAdvancedEmailByAddress_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Mail_SendAdvancedEmailByAddress_result result = new Mail_SendAdvancedEmailByAddress_result();
        try
        {
          result.Success = iface_.Mail_SendAdvancedEmailByAddress(args.EmailAddress, args.JsonServiceParams, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Mail_SendAdvancedEmailByAddress", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Mail_SendAdvancedEmailByAddress", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_Read_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_Read_args args = new MatchMaking_Read_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_Read_result result = new MatchMaking_Read_result();
        try
        {
          result.Success = iface_.MatchMaking_Read(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_Read", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_Read", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_SetPlayerRating_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_SetPlayerRating_args args = new MatchMaking_SetPlayerRating_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_SetPlayerRating_result result = new MatchMaking_SetPlayerRating_result();
        try
        {
          result.Success = iface_.MatchMaking_SetPlayerRating(args.PlayerRating, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_SetPlayerRating", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_SetPlayerRating", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_ResetPlayerRating_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_ResetPlayerRating_args args = new MatchMaking_ResetPlayerRating_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_ResetPlayerRating_result result = new MatchMaking_ResetPlayerRating_result();
        try
        {
          result.Success = iface_.MatchMaking_ResetPlayerRating(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_ResetPlayerRating", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_ResetPlayerRating", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_IncrementPlayerRating_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_IncrementPlayerRating_args args = new MatchMaking_IncrementPlayerRating_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_IncrementPlayerRating_result result = new MatchMaking_IncrementPlayerRating_result();
        try
        {
          result.Success = iface_.MatchMaking_IncrementPlayerRating(args.Increment, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_IncrementPlayerRating", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_IncrementPlayerRating", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_DecrementPlayerRating_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_DecrementPlayerRating_args args = new MatchMaking_DecrementPlayerRating_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_DecrementPlayerRating_result result = new MatchMaking_DecrementPlayerRating_result();
        try
        {
          result.Success = iface_.MatchMaking_DecrementPlayerRating(args.Decrement, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_DecrementPlayerRating", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_DecrementPlayerRating", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_TurnShieldOn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_TurnShieldOn_args args = new MatchMaking_TurnShieldOn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_TurnShieldOn_result result = new MatchMaking_TurnShieldOn_result();
        try
        {
          result.Success = iface_.MatchMaking_TurnShieldOn(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOn", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOn", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_TurnShieldOnFor_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_TurnShieldOnFor_args args = new MatchMaking_TurnShieldOnFor_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_TurnShieldOnFor_result result = new MatchMaking_TurnShieldOnFor_result();
        try
        {
          result.Success = iface_.MatchMaking_TurnShieldOnFor(args.Minutes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOnFor", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOnFor", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_TurnShieldOff_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_TurnShieldOff_args args = new MatchMaking_TurnShieldOff_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_TurnShieldOff_result result = new MatchMaking_TurnShieldOff_result();
        try
        {
          result.Success = iface_.MatchMaking_TurnShieldOff(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOff", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_TurnShieldOff", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_IncrementShieldOnFor_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_IncrementShieldOnFor_args args = new MatchMaking_IncrementShieldOnFor_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_IncrementShieldOnFor_result result = new MatchMaking_IncrementShieldOnFor_result();
        try
        {
          result.Success = iface_.MatchMaking_IncrementShieldOnFor(args.Minutes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_IncrementShieldOnFor", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_IncrementShieldOnFor", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_GetShieldExpiry_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_GetShieldExpiry_args args = new MatchMaking_GetShieldExpiry_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_GetShieldExpiry_result result = new MatchMaking_GetShieldExpiry_result();
        try
        {
          result.Success = iface_.MatchMaking_GetShieldExpiry(args.PlayerId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_GetShieldExpiry", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_GetShieldExpiry", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_FindPlayers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_FindPlayers_args args = new MatchMaking_FindPlayers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_FindPlayers_result result = new MatchMaking_FindPlayers_result();
        try
        {
          result.Success = iface_.MatchMaking_FindPlayers(args.RangeDelta, args.NumMatches, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayers", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayers", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_FindPlayersWithAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_FindPlayersWithAttributes_args args = new MatchMaking_FindPlayersWithAttributes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_FindPlayersWithAttributes_result result = new MatchMaking_FindPlayersWithAttributes_result();
        try
        {
          result.Success = iface_.MatchMaking_FindPlayersWithAttributes(args.RangeDelta, args.NumMatches, args.JsonAttributes, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersWithAttributes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersWithAttributes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_FindPlayersUsingFilter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_FindPlayersUsingFilter_args args = new MatchMaking_FindPlayersUsingFilter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_FindPlayersUsingFilter_result result = new MatchMaking_FindPlayersUsingFilter_result();
        try
        {
          result.Success = iface_.MatchMaking_FindPlayersUsingFilter(args.RangeDelta, args.NumMatches, args.JsonExtraParms, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersUsingFilter", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersUsingFilter", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_FindPlayersWithAttributesUsingFilter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_FindPlayersWithAttributesUsingFilter_args args = new MatchMaking_FindPlayersWithAttributesUsingFilter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_FindPlayersWithAttributesUsingFilter_result result = new MatchMaking_FindPlayersWithAttributesUsingFilter_result();
        try
        {
          result.Success = iface_.MatchMaking_FindPlayersWithAttributesUsingFilter(args.RangeDelta, args.NumMatches, args.JsonAttributes, args.JsonExtraParms, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersWithAttributesUsingFilter", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_FindPlayersWithAttributesUsingFilter", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_EnableMatchMaking_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_EnableMatchMaking_args args = new MatchMaking_EnableMatchMaking_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_EnableMatchMaking_result result = new MatchMaking_EnableMatchMaking_result();
        try
        {
          result.Success = iface_.MatchMaking_EnableMatchMaking(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_EnableMatchMaking", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_EnableMatchMaking", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MatchMaking_DisableMatchMaking_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MatchMaking_DisableMatchMaking_args args = new MatchMaking_DisableMatchMaking_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MatchMaking_DisableMatchMaking_result result = new MatchMaking_DisableMatchMaking_result();
        try
        {
          result.Success = iface_.MatchMaking_DisableMatchMaking(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("MatchMaking_DisableMatchMaking", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MatchMaking_DisableMatchMaking", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void OneWayMatch_StartMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        OneWayMatch_StartMatch_args args = new OneWayMatch_StartMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        OneWayMatch_StartMatch_result result = new OneWayMatch_StartMatch_result();
        try
        {
          result.Success = iface_.OneWayMatch_StartMatch(args.OtherPlayerId, args.RangeDelta, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("OneWayMatch_StartMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("OneWayMatch_StartMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void OneWayMatch_CancelMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        OneWayMatch_CancelMatch_args args = new OneWayMatch_CancelMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        OneWayMatch_CancelMatch_result result = new OneWayMatch_CancelMatch_result();
        try
        {
          result.Success = iface_.OneWayMatch_CancelMatch(args.PlaybackStreamId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("OneWayMatch_CancelMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("OneWayMatch_CancelMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void OneWayMatch_CompleteMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        OneWayMatch_CompleteMatch_args args = new OneWayMatch_CompleteMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        OneWayMatch_CompleteMatch_result result = new OneWayMatch_CompleteMatch_result();
        try
        {
          result.Success = iface_.OneWayMatch_CompleteMatch(args.PlaybackStreamId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("OneWayMatch_CompleteMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("OneWayMatch_CompleteMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaybackStream_StartStream_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaybackStream_StartStream_args args = new PlaybackStream_StartStream_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaybackStream_StartStream_result result = new PlaybackStream_StartStream_result();
        try
        {
          result.Success = iface_.PlaybackStream_StartStream(args.TargetPlayerId, args.IncludeSharedData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_StartStream", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_StartStream", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaybackStream_ReadStream_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaybackStream_ReadStream_args args = new PlaybackStream_ReadStream_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaybackStream_ReadStream_result result = new PlaybackStream_ReadStream_result();
        try
        {
          result.Success = iface_.PlaybackStream_ReadStream(args.PlaybackStreamId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_ReadStream", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_ReadStream", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaybackStream_EndStream_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaybackStream_EndStream_args args = new PlaybackStream_EndStream_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaybackStream_EndStream_result result = new PlaybackStream_EndStream_result();
        try
        {
          result.Success = iface_.PlaybackStream_EndStream(args.PlaybackStreamId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_EndStream", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_EndStream", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaybackStream_DeleteStream_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaybackStream_DeleteStream_args args = new PlaybackStream_DeleteStream_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaybackStream_DeleteStream_result result = new PlaybackStream_DeleteStream_result();
        try
        {
          result.Success = iface_.PlaybackStream_DeleteStream(args.PlaybackStreamId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_DeleteStream", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_DeleteStream", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaybackStream_AddEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaybackStream_AddEvent_args args = new PlaybackStream_AddEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaybackStream_AddEvent_result result = new PlaybackStream_AddEvent_result();
        try
        {
          result.Success = iface_.PlaybackStream_AddEvent(args.PlaybackStreamId, args.EventData, args.Summary, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_AddEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_AddEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaybackStream_GetRecentStreamsForInitiatingPlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaybackStream_GetRecentStreamsForInitiatingPlayer_args args = new PlaybackStream_GetRecentStreamsForInitiatingPlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaybackStream_GetRecentStreamsForInitiatingPlayer_result result = new PlaybackStream_GetRecentStreamsForInitiatingPlayer_result();
        try
        {
          result.Success = iface_.PlaybackStream_GetRecentStreamsForInitiatingPlayer(args.InitiatingPlayerId, args.MaxNumStreams, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_GetRecentStreamsForInitiatingPlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_GetRecentStreamsForInitiatingPlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaybackStream_GetRecentStreamsForTargetPlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaybackStream_GetRecentStreamsForTargetPlayer_args args = new PlaybackStream_GetRecentStreamsForTargetPlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaybackStream_GetRecentStreamsForTargetPlayer_result result = new PlaybackStream_GetRecentStreamsForTargetPlayer_result();
        try
        {
          result.Success = iface_.PlaybackStream_GetRecentStreamsForTargetPlayer(args.TargetPlayerId, args.MaxNumStreams, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_GetRecentStreamsForTargetPlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaybackStream_GetRecentStreamsForTargetPlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_ReadUserState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_ReadUserState_args args = new PlayerState_ReadUserState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_ReadUserState_result result = new PlayerState_ReadUserState_result();
        try
        {
          result.Success = iface_.PlayerState_ReadUserState(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_ReadUserState", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_ReadUserState", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_DeleteUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_DeleteUser_args args = new PlayerState_DeleteUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_DeleteUser_result result = new PlayerState_DeleteUser_result();
        try
        {
          result.Success = iface_.PlayerState_DeleteUser(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_DeleteUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_DeleteUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_ResetUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_ResetUser_args args = new PlayerState_ResetUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_ResetUser_result result = new PlayerState_ResetUser_result();
        try
        {
          result.Success = iface_.PlayerState_ResetUser(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_ResetUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_ResetUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_Logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_Logout_args args = new PlayerState_Logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_Logout_result result = new PlayerState_Logout_result();
        try
        {
          result.Success = iface_.PlayerState_Logout(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_Logout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_Logout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_UpdateUserName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_UpdateUserName_args args = new PlayerState_UpdateUserName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_UpdateUserName_result result = new PlayerState_UpdateUserName_result();
        try
        {
          result.Success = iface_.PlayerState_UpdateUserName(args.UserName, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateUserName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateUserName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_UpdateSummaryFriendData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_UpdateSummaryFriendData_args args = new PlayerState_UpdateSummaryFriendData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_UpdateSummaryFriendData_result result = new PlayerState_UpdateSummaryFriendData_result();
        try
        {
          result.Success = iface_.PlayerState_UpdateSummaryFriendData(args.JsonSummaryData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateSummaryFriendData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateSummaryFriendData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_GetAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_GetAttributes_args args = new PlayerState_GetAttributes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_GetAttributes_result result = new PlayerState_GetAttributes_result();
        try
        {
          result.Success = iface_.PlayerState_GetAttributes(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_GetAttributes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_GetAttributes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_UpdateAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_UpdateAttributes_args args = new PlayerState_UpdateAttributes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_UpdateAttributes_result result = new PlayerState_UpdateAttributes_result();
        try
        {
          result.Success = iface_.PlayerState_UpdateAttributes(args.JsonAttributes, args.WipeExisting, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateAttributes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateAttributes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_RemoveAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_RemoveAttributes_args args = new PlayerState_RemoveAttributes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_RemoveAttributes_result result = new PlayerState_RemoveAttributes_result();
        try
        {
          result.Success = iface_.PlayerState_RemoveAttributes(args.AttributeNames, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_RemoveAttributes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_RemoveAttributes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_UpdateUserPictureUrl_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_UpdateUserPictureUrl_args args = new PlayerState_UpdateUserPictureUrl_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_UpdateUserPictureUrl_result result = new PlayerState_UpdateUserPictureUrl_result();
        try
        {
          result.Success = iface_.PlayerState_UpdateUserPictureUrl(args.PictureUrl, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateUserPictureUrl", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateUserPictureUrl", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerState_UpdateContactEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerState_UpdateContactEmail_args args = new PlayerState_UpdateContactEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerState_UpdateContactEmail_result result = new PlayerState_UpdateContactEmail_result();
        try
        {
          result.Success = iface_.PlayerState_UpdateContactEmail(args.ContactEmail, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateContactEmail", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerState_UpdateContactEmail", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_ReadAllUserStats_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_ReadAllUserStats_args args = new PlayerStatistics_ReadAllUserStats_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_ReadAllUserStats_result result = new PlayerStatistics_ReadAllUserStats_result();
        try
        {
          result.Success = iface_.PlayerStatistics_ReadAllUserStats(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ReadAllUserStats", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ReadAllUserStats", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_ReadUserStatsSubset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_ReadUserStatsSubset_args args = new PlayerStatistics_ReadUserStatsSubset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_ReadUserStatsSubset_result result = new PlayerStatistics_ReadUserStatsSubset_result();
        try
        {
          result.Success = iface_.PlayerStatistics_ReadUserStatsSubset(args.PlayerStats, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ReadUserStatsSubset", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ReadUserStatsSubset", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_ReadUserStatsForCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_ReadUserStatsForCategory_args args = new PlayerStatistics_ReadUserStatsForCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_ReadUserStatsForCategory_result result = new PlayerStatistics_ReadUserStatsForCategory_result();
        try
        {
          result.Success = iface_.PlayerStatistics_ReadUserStatsForCategory(args.Category, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ReadUserStatsForCategory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ReadUserStatsForCategory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_ResetAllUserStats_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_ResetAllUserStats_args args = new PlayerStatistics_ResetAllUserStats_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_ResetAllUserStats_result result = new PlayerStatistics_ResetAllUserStats_result();
        try
        {
          result.Success = iface_.PlayerStatistics_ResetAllUserStats(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ResetAllUserStats", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ResetAllUserStats", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_IncrementUserStats_SSFO_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_IncrementUserStats_SSFO_args args = new PlayerStatistics_IncrementUserStats_SSFO_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_IncrementUserStats_SSFO_result result = new PlayerStatistics_IncrementUserStats_SSFO_result();
        try
        {
          result.Success = iface_.PlayerStatistics_IncrementUserStats_SSFO(args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementUserStats_SSFO", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementUserStats_SSFO", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_IncrementUserStats_DSFO_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_IncrementUserStats_DSFO_args args = new PlayerStatistics_IncrementUserStats_DSFO_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_IncrementUserStats_DSFO_result result = new PlayerStatistics_IncrementUserStats_DSFO_result();
        try
        {
          result.Success = iface_.PlayerStatistics_IncrementUserStats_DSFO(args.DictData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementUserStats_DSFO", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementUserStats_DSFO", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_ProcessStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_ProcessStatistics_args args = new PlayerStatistics_ProcessStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_ProcessStatistics_result result = new PlayerStatistics_ProcessStatistics_result();
        try
        {
          result.Success = iface_.PlayerStatistics_ProcessStatistics(args.StatisticsData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ProcessStatistics", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_ProcessStatistics", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_GetNextExperienceLevel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_GetNextExperienceLevel_args args = new PlayerStatistics_GetNextExperienceLevel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_GetNextExperienceLevel_result result = new PlayerStatistics_GetNextExperienceLevel_result();
        try
        {
          result.Success = iface_.PlayerStatistics_GetNextExperienceLevel(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_GetNextExperienceLevel", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_GetNextExperienceLevel", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_IncrementExperiencePoints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_IncrementExperiencePoints_args args = new PlayerStatistics_IncrementExperiencePoints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_IncrementExperiencePoints_result result = new PlayerStatistics_IncrementExperiencePoints_result();
        try
        {
          result.Success = iface_.PlayerStatistics_IncrementExperiencePoints(args.XpValue, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementExperiencePoints", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_IncrementExperiencePoints", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatistics_SetExperiencePoints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatistics_SetExperiencePoints_args args = new PlayerStatistics_SetExperiencePoints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatistics_SetExperiencePoints_result result = new PlayerStatistics_SetExperiencePoints_result();
        try
        {
          result.Success = iface_.PlayerStatistics_SetExperiencePoints(args.XpValue, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_SetExperiencePoints", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatistics_SetExperiencePoints", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatisticsEvent_TriggerStatsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatisticsEvent_TriggerStatsEvent_args args = new PlayerStatisticsEvent_TriggerStatsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatisticsEvent_TriggerStatsEvent_result result = new PlayerStatisticsEvent_TriggerStatsEvent_result();
        try
        {
          result.Success = iface_.PlayerStatisticsEvent_TriggerStatsEvent(args.EventName, args.EventMultiplier, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatisticsEvent_TriggerStatsEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatisticsEvent_TriggerStatsEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerStatisticsEvent_TriggerStatsEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerStatisticsEvent_TriggerStatsEvents_args args = new PlayerStatisticsEvent_TriggerStatsEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerStatisticsEvent_TriggerStatsEvents_result result = new PlayerStatisticsEvent_TriggerStatsEvents_result();
        try
        {
          result.Success = iface_.PlayerStatisticsEvent_TriggerStatsEvents(args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PlayerStatisticsEvent_TriggerStatsEvents", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlayerStatisticsEvent_TriggerStatsEvents", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Product_GetCurrency_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Product_GetCurrency_args args = new Product_GetCurrency_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Product_GetCurrency_result result = new Product_GetCurrency_result();
        try
        {
          result.Success = iface_.Product_GetCurrency(args.CurrencyType, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Product_GetCurrency", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Product_GetCurrency", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Product_GetSalesInventory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Product_GetSalesInventory_args args = new Product_GetSalesInventory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Product_GetSalesInventory_result result = new Product_GetSalesInventory_result();
        try
        {
          result.Success = iface_.Product_GetSalesInventory(args.Platform, args.UserCurrency, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Product_GetSalesInventory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Product_GetSalesInventory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Product_GetSalesInventoryByCategory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Product_GetSalesInventoryByCategory_args args = new Product_GetSalesInventoryByCategory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Product_GetSalesInventoryByCategory_result result = new Product_GetSalesInventoryByCategory_result();
        try
        {
          result.Success = iface_.Product_GetSalesInventoryByCategory(args.Platform, args.UserCurrency, args.Category, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Product_GetSalesInventoryByCategory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Product_GetSalesInventoryByCategory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Product_VerifyMicrosoftReceipt_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Product_VerifyMicrosoftReceipt_args args = new Product_VerifyMicrosoftReceipt_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Product_VerifyMicrosoftReceipt_result result = new Product_VerifyMicrosoftReceipt_result();
        try
        {
          result.Success = iface_.Product_VerifyMicrosoftReceipt(args.Receipt, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Product_VerifyMicrosoftReceipt", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Product_VerifyMicrosoftReceipt", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Product_GetEligiblePromotions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Product_GetEligiblePromotions_args args = new Product_GetEligiblePromotions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Product_GetEligiblePromotions_result result = new Product_GetEligiblePromotions_result();
        try
        {
          result.Success = iface_.Product_GetEligiblePromotions(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Product_GetEligiblePromotions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Product_GetEligiblePromotions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Product_VerifyItunesReceipt_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Product_VerifyItunesReceipt_args args = new Product_VerifyItunesReceipt_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Product_VerifyItunesReceipt_result result = new Product_VerifyItunesReceipt_result();
        try
        {
          result.Success = iface_.Product_VerifyItunesReceipt(args.Base64EncReceiptData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Product_VerifyItunesReceipt", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Product_VerifyItunesReceipt", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Profanity_ProfanityCheck_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Profanity_ProfanityCheck_args args = new Profanity_ProfanityCheck_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Profanity_ProfanityCheck_result result = new Profanity_ProfanityCheck_result();
        try
        {
          result.Success = iface_.Profanity_ProfanityCheck(args.Text, args.Languages, args.FlagEmail, args.FlagPhone, args.FlagUrls, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Profanity_ProfanityCheck", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Profanity_ProfanityCheck", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Profanity_ProfanityReplaceText_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Profanity_ProfanityReplaceText_args args = new Profanity_ProfanityReplaceText_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Profanity_ProfanityReplaceText_result result = new Profanity_ProfanityReplaceText_result();
        try
        {
          result.Success = iface_.Profanity_ProfanityReplaceText(args.Text, args.ReplaceSymbol, args.Languages, args.FlagEmail, args.FlagPhone, args.FlagUrls, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Profanity_ProfanityReplaceText", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Profanity_ProfanityReplaceText", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Profanity_ProfanityIdentifyBadWords_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Profanity_ProfanityIdentifyBadWords_args args = new Profanity_ProfanityIdentifyBadWords_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Profanity_ProfanityIdentifyBadWords_result result = new Profanity_ProfanityIdentifyBadWords_result();
        try
        {
          result.Success = iface_.Profanity_ProfanityIdentifyBadWords(args.Text, args.Languages, args.FlagEmail, args.FlagPhone, args.FlagUrls, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Profanity_ProfanityIdentifyBadWords", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Profanity_ProfanityIdentifyBadWords", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_DeregisterAllPushNotificationDeviceTokens_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_DeregisterAllPushNotificationDeviceTokens_args args = new PushNotification_DeregisterAllPushNotificationDeviceTokens_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_DeregisterAllPushNotificationDeviceTokens_result result = new PushNotification_DeregisterAllPushNotificationDeviceTokens_result();
        try
        {
          result.Success = iface_.PushNotification_DeregisterAllPushNotificationDeviceTokens(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_DeregisterAllPushNotificationDeviceTokens", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_DeregisterAllPushNotificationDeviceTokens", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_DeregisterPushNotificationDeviceToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_DeregisterPushNotificationDeviceToken_args args = new PushNotification_DeregisterPushNotificationDeviceToken_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_DeregisterPushNotificationDeviceToken_result result = new PushNotification_DeregisterPushNotificationDeviceToken_result();
        try
        {
          result.Success = iface_.PushNotification_DeregisterPushNotificationDeviceToken(args.Platform, args.Token, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_DeregisterPushNotificationDeviceToken", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_DeregisterPushNotificationDeviceToken", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_RegisterPushNotificationDeviceToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_RegisterPushNotificationDeviceToken_args args = new PushNotification_RegisterPushNotificationDeviceToken_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_RegisterPushNotificationDeviceToken_result result = new PushNotification_RegisterPushNotificationDeviceToken_result();
        try
        {
          result.Success = iface_.PushNotification_RegisterPushNotificationDeviceToken(args.Platform, args.Token, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_RegisterPushNotificationDeviceToken", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_RegisterPushNotificationDeviceToken", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendSimplePushNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendSimplePushNotification_args args = new PushNotification_SendSimplePushNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendSimplePushNotification_result result = new PushNotification_SendSimplePushNotification_result();
        try
        {
          result.Success = iface_.PushNotification_SendSimplePushNotification(args.ToProfileId, args.Message, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendSimplePushNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendSimplePushNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendRichPushNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendRichPushNotification_args args = new PushNotification_SendRichPushNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendRichPushNotification_result result = new PushNotification_SendRichPushNotification_result();
        try
        {
          result.Success = iface_.PushNotification_SendRichPushNotification(args.ToProfileId, args.NotificationTemplateId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRichPushNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRichPushNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendRichPushNotificationWithParams_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendRichPushNotificationWithParams_args args = new PushNotification_SendRichPushNotificationWithParams_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendRichPushNotificationWithParams_result result = new PushNotification_SendRichPushNotificationWithParams_result();
        try
        {
          result.Success = iface_.PushNotification_SendRichPushNotificationWithParams(args.ToProfileId, args.NotificationTemplateId, args.SubstitutionJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRichPushNotificationWithParams", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRichPushNotificationWithParams", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendTemplatedPushNotificationToGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendTemplatedPushNotificationToGroup_args args = new PushNotification_SendTemplatedPushNotificationToGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendTemplatedPushNotificationToGroup_result result = new PushNotification_SendTemplatedPushNotificationToGroup_result();
        try
        {
          result.Success = iface_.PushNotification_SendTemplatedPushNotificationToGroup(args.GroupId, args.NotificationTemplateId, args.SubstitutionsJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendTemplatedPushNotificationToGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendTemplatedPushNotificationToGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendNormalizedPushNotificationToGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendNormalizedPushNotificationToGroup_args args = new PushNotification_SendNormalizedPushNotificationToGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendNormalizedPushNotificationToGroup_result result = new PushNotification_SendNormalizedPushNotificationToGroup_result();
        try
        {
          result.Success = iface_.PushNotification_SendNormalizedPushNotificationToGroup(args.GroupId, args.AlertContentJson, args.CustomDataJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotificationToGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotificationToGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_ScheduleRawPushNotificationUTC_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_ScheduleRawPushNotificationUTC_args args = new PushNotification_ScheduleRawPushNotificationUTC_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_ScheduleRawPushNotificationUTC_result result = new PushNotification_ScheduleRawPushNotificationUTC_result();
        try
        {
          result.Success = iface_.PushNotification_ScheduleRawPushNotificationUTC(args.ProfileId, args.FcmContent, args.IosContent, args.FacebookContent, args.StartTime, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRawPushNotificationUTC", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRawPushNotificationUTC", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_ScheduleRawPushNotificationMinutes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_ScheduleRawPushNotificationMinutes_args args = new PushNotification_ScheduleRawPushNotificationMinutes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_ScheduleRawPushNotificationMinutes_result result = new PushNotification_ScheduleRawPushNotificationMinutes_result();
        try
        {
          result.Success = iface_.PushNotification_ScheduleRawPushNotificationMinutes(args.ProfileId, args.FcmContent, args.IosContent, args.FacebookContent, args.MinutesFromNow, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRawPushNotificationMinutes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRawPushNotificationMinutes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendRawPushNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendRawPushNotification_args args = new PushNotification_SendRawPushNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendRawPushNotification_result result = new PushNotification_SendRawPushNotification_result();
        try
        {
          result.Success = iface_.PushNotification_SendRawPushNotification(args.ToProfileId, args.FcmContent, args.IosContent, args.FacebookContent, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendRawPushNotificationBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendRawPushNotificationBatch_args args = new PushNotification_SendRawPushNotificationBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendRawPushNotificationBatch_result result = new PushNotification_SendRawPushNotificationBatch_result();
        try
        {
          result.Success = iface_.PushNotification_SendRawPushNotificationBatch(args.ProfileIds, args.FcmContent, args.IosContent, args.FacebookContent, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotificationBatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotificationBatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendRawPushNotificationToGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendRawPushNotificationToGroup_args args = new PushNotification_SendRawPushNotificationToGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendRawPushNotificationToGroup_result result = new PushNotification_SendRawPushNotificationToGroup_result();
        try
        {
          result.Success = iface_.PushNotification_SendRawPushNotificationToGroup(args.GroupId, args.FcmContent, args.IosContent, args.FacebookContent, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotificationToGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendRawPushNotificationToGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_ScheduleNormalizedPushNotificationUTC_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_ScheduleNormalizedPushNotificationUTC_args args = new PushNotification_ScheduleNormalizedPushNotificationUTC_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_ScheduleNormalizedPushNotificationUTC_result result = new PushNotification_ScheduleNormalizedPushNotificationUTC_result();
        try
        {
          result.Success = iface_.PushNotification_ScheduleNormalizedPushNotificationUTC(args.ProfileId, args.AlertContentJson, args.CustomDataJson, args.StartTime, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleNormalizedPushNotificationUTC", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleNormalizedPushNotificationUTC", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_ScheduleNormalizedPushNotificationMinutes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_ScheduleNormalizedPushNotificationMinutes_args args = new PushNotification_ScheduleNormalizedPushNotificationMinutes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_ScheduleNormalizedPushNotificationMinutes_result result = new PushNotification_ScheduleNormalizedPushNotificationMinutes_result();
        try
        {
          result.Success = iface_.PushNotification_ScheduleNormalizedPushNotificationMinutes(args.ProfileId, args.AlertContentJson, args.CustomDataJson, args.MinutesFromNow, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleNormalizedPushNotificationMinutes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleNormalizedPushNotificationMinutes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_ScheduleRichPushNotificationUTC_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_ScheduleRichPushNotificationUTC_args args = new PushNotification_ScheduleRichPushNotificationUTC_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_ScheduleRichPushNotificationUTC_result result = new PushNotification_ScheduleRichPushNotificationUTC_result();
        try
        {
          result.Success = iface_.PushNotification_ScheduleRichPushNotificationUTC(args.ProfileId, args.NotificationTemplateId, args.SubstitutionsJson, args.StartTime, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRichPushNotificationUTC", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRichPushNotificationUTC", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_ScheduleRichPushNotificationMinutes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_ScheduleRichPushNotificationMinutes_args args = new PushNotification_ScheduleRichPushNotificationMinutes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_ScheduleRichPushNotificationMinutes_result result = new PushNotification_ScheduleRichPushNotificationMinutes_result();
        try
        {
          result.Success = iface_.PushNotification_ScheduleRichPushNotificationMinutes(args.ProfileId, args.NotificationTemplateId, args.SubstitutionsJson, args.MinutesFromNow, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRichPushNotificationMinutes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_ScheduleRichPushNotificationMinutes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendNormalizedPushNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendNormalizedPushNotification_args args = new PushNotification_SendNormalizedPushNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendNormalizedPushNotification_result result = new PushNotification_SendNormalizedPushNotification_result();
        try
        {
          result.Success = iface_.PushNotification_SendNormalizedPushNotification(args.ToProfileId, args.AlertContentJson, args.CustomDataJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotification", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotification", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushNotification_SendNormalizedPushNotificationBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushNotification_SendNormalizedPushNotificationBatch_args args = new PushNotification_SendNormalizedPushNotificationBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushNotification_SendNormalizedPushNotificationBatch_result result = new PushNotification_SendNormalizedPushNotificationBatch_result();
        try
        {
          result.Success = iface_.PushNotification_SendNormalizedPushNotificationBatch(args.ProfileIds, args.AlertContentJson, args.CustomDataJson, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotificationBatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushNotification_SendNormalizedPushNotificationBatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Script_RunScript_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Script_RunScript_args args = new Script_RunScript_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Script_RunScript_result result = new Script_RunScript_result();
        try
        {
          result.Success = iface_.Script_RunScript(args.ScriptName, args.JsonScriptData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Script_RunScript", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Script_RunScript", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Script_ScheduleRunScriptUTC_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Script_ScheduleRunScriptUTC_args args = new Script_ScheduleRunScriptUTC_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Script_ScheduleRunScriptUTC_result result = new Script_ScheduleRunScriptUTC_result();
        try
        {
          result.Success = iface_.Script_ScheduleRunScriptUTC(args.ScriptName, args.JsonScriptData, args.StartDateInUTC, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Script_ScheduleRunScriptUTC", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Script_ScheduleRunScriptUTC", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Script_ScheduleRunScriptMinutes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Script_ScheduleRunScriptMinutes_args args = new Script_ScheduleRunScriptMinutes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Script_ScheduleRunScriptMinutes_result result = new Script_ScheduleRunScriptMinutes_result();
        try
        {
          result.Success = iface_.Script_ScheduleRunScriptMinutes(args.ScriptName, args.JsonScriptData, args.MinutesFromNow, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Script_ScheduleRunScriptMinutes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Script_ScheduleRunScriptMinutes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Script_RunParentScript_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Script_RunParentScript_args args = new Script_RunParentScript_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Script_RunParentScript_result result = new Script_RunParentScript_result();
        try
        {
          result.Success = iface_.Script_RunParentScript(args.ScriptName, args.JsonScriptData, args.ParentLevel, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Script_RunParentScript", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Script_RunParentScript", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Script_CancelScheduledScript_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Script_CancelScheduledScript_args args = new Script_CancelScheduledScript_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Script_CancelScheduledScript_result result = new Script_CancelScheduledScript_result();
        try
        {
          result.Success = iface_.Script_CancelScheduledScript(args.JobId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Script_CancelScheduledScript", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Script_CancelScheduledScript", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Script_RunPeerScript_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Script_RunPeerScript_args args = new Script_RunPeerScript_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Script_RunPeerScript_result result = new Script_RunPeerScript_result();
        try
        {
          result.Success = iface_.Script_RunPeerScript(args.ScriptName, args.JsonScriptData, args.Peer, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Script_RunPeerScript", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Script_RunPeerScript", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Script_RunPeerScriptAsynch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Script_RunPeerScriptAsynch_args args = new Script_RunPeerScriptAsynch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Script_RunPeerScriptAsynch_result result = new Script_RunPeerScriptAsynch_result();
        try
        {
          result.Success = iface_.Script_RunPeerScriptAsynch(args.ScriptName, args.JsonScriptData, args.Peer, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Script_RunPeerScriptAsynch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Script_RunPeerScriptAsynch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetSocialLeaderboard_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetSocialLeaderboard_args args = new SocialLeaderboard_GetSocialLeaderboard_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetSocialLeaderboard_result result = new SocialLeaderboard_GetSocialLeaderboard_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetSocialLeaderboard(args.LeaderboardId, args.ReplaceName, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetSocialLeaderboard", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetSocialLeaderboard", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetMultiSocialLeaderboard_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetMultiSocialLeaderboard_args args = new SocialLeaderboard_GetMultiSocialLeaderboard_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetMultiSocialLeaderboard_result result = new SocialLeaderboard_GetMultiSocialLeaderboard_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetMultiSocialLeaderboard(args.LeaderboardIds, args.LeaderboardResultCount, args.ReplaceName, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetMultiSocialLeaderboard", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetMultiSocialLeaderboard", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGlobalLeaderboardPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGlobalLeaderboardPage_args args = new SocialLeaderboard_GetGlobalLeaderboardPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGlobalLeaderboardPage_result result = new SocialLeaderboard_GetGlobalLeaderboardPage_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGlobalLeaderboardPage(args.LeaderboardId, args.Sort, args.StartIndex, args.EndIndex, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPage", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPage", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGlobalLeaderboardPageByVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args args = new SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result result = new SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGlobalLeaderboardPageByVersion(args.LeaderboardId, args.Sort, args.StartIndex, args.EndIndex, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPageByVersion", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPageByVersion", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGlobalLeaderboardView_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGlobalLeaderboardView_args args = new SocialLeaderboard_GetGlobalLeaderboardView_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGlobalLeaderboardView_result result = new SocialLeaderboard_GetGlobalLeaderboardView_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGlobalLeaderboardView(args.LeaderboardId, args.Sort, args.BeforeCount, args.AfterCount, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardView", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardView", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGlobalLeaderboardViewByVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args args = new SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result result = new SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGlobalLeaderboardViewByVersion(args.LeaderboardId, args.Sort, args.BeforeCount, args.AfterCount, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardViewByVersion", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardViewByVersion", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGlobalLeaderboardVersions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGlobalLeaderboardVersions_args args = new SocialLeaderboard_GetGlobalLeaderboardVersions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGlobalLeaderboardVersions_result result = new SocialLeaderboard_GetGlobalLeaderboardVersions_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGlobalLeaderboardVersions(args.LeaderboardId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardVersions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardVersions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGroupSocialLeaderboard_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGroupSocialLeaderboard_args args = new SocialLeaderboard_GetGroupSocialLeaderboard_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGroupSocialLeaderboard_result result = new SocialLeaderboard_GetGroupSocialLeaderboard_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGroupSocialLeaderboard(args.LeaderboardId, args.GroupId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGroupSocialLeaderboard", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGroupSocialLeaderboard", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_PostScoreToLeaderboard_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_PostScoreToLeaderboard_args args = new SocialLeaderboard_PostScoreToLeaderboard_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_PostScoreToLeaderboard_result result = new SocialLeaderboard_PostScoreToLeaderboard_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_PostScoreToLeaderboard(args.LeaderboardId, args.Score, args.JsonData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToLeaderboard", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToLeaderboard", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_RemovePlayerScore_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_RemovePlayerScore_args args = new SocialLeaderboard_RemovePlayerScore_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_RemovePlayerScore_result result = new SocialLeaderboard_RemovePlayerScore_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_RemovePlayerScore(args.LeaderboardId, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_RemovePlayerScore", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_RemovePlayerScore", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_PostScoreToDynamicLeaderboard_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_PostScoreToDynamicLeaderboard_args args = new SocialLeaderboard_PostScoreToDynamicLeaderboard_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_PostScoreToDynamicLeaderboard_result result = new SocialLeaderboard_PostScoreToDynamicLeaderboard_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_PostScoreToDynamicLeaderboard(args.LeaderboardId, args.Score, args.JsonData, args.LeaderboardType, args.RotationType, args.RotationReset, args.RetainedCount, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboard", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboard", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_PostScoreToDynamicLeaderboardDays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args args = new SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result result = new SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_PostScoreToDynamicLeaderboardDays(args.LeaderboardId, args.Score, args.JsonData, args.LeaderboardType, args.RotationReset, args.RetainedCount, args.NumDaysToRotate, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboardDays", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboardDays", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetPlayersSocialLeaderboard_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetPlayersSocialLeaderboard_args args = new SocialLeaderboard_GetPlayersSocialLeaderboard_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetPlayersSocialLeaderboard_result result = new SocialLeaderboard_GetPlayersSocialLeaderboard_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetPlayersSocialLeaderboard(args.LeaderboardId, args.ProfileIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayersSocialLeaderboard", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayersSocialLeaderboard", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_ListLeaderboards_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_ListLeaderboards_args args = new SocialLeaderboard_ListLeaderboards_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_ListLeaderboards_result result = new SocialLeaderboard_ListLeaderboards_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_ListLeaderboards(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_ListLeaderboards", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_ListLeaderboards", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGlobalLeaderboardEntryCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGlobalLeaderboardEntryCount_args args = new SocialLeaderboard_GetGlobalLeaderboardEntryCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGlobalLeaderboardEntryCount_result result = new SocialLeaderboard_GetGlobalLeaderboardEntryCount_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGlobalLeaderboardEntryCount(args.LeaderboardId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args args = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result result = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(args.LeaderboardId, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetPlayerScore_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetPlayerScore_args args = new SocialLeaderboard_GetPlayerScore_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetPlayerScore_result result = new SocialLeaderboard_GetPlayerScore_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetPlayerScore(args.LeaderboardId, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayerScore", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayerScore", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialLeaderboard_GetPlayerScoresFromLeaderboards_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialLeaderboard_GetPlayerScoresFromLeaderboards_args args = new SocialLeaderboard_GetPlayerScoresFromLeaderboards_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialLeaderboard_GetPlayerScoresFromLeaderboards_result result = new SocialLeaderboard_GetPlayerScoresFromLeaderboards_result();
        try
        {
          result.Success = iface_.SocialLeaderboard_GetPlayerScoresFromLeaderboards(args.LeaderboardIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayerScoresFromLeaderboards", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialLeaderboard_GetPlayerScoresFromLeaderboards", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Time_ReadServerTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Time_ReadServerTime_args args = new Time_ReadServerTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Time_ReadServerTime_result result = new Time_ReadServerTime_result();
        try
        {
          result.Success = iface_.Time_ReadServerTime(args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Time_ReadServerTime", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Time_ReadServerTime", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_ClaimTournamentReward_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_ClaimTournamentReward_args args = new Tournament_ClaimTournamentReward_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_ClaimTournamentReward_result result = new Tournament_ClaimTournamentReward_result();
        try
        {
          result.Success = iface_.Tournament_ClaimTournamentReward(args.LeaderboardId, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_ClaimTournamentReward", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_ClaimTournamentReward", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_GetTournamentStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_GetTournamentStatus_args args = new Tournament_GetTournamentStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_GetTournamentStatus_result result = new Tournament_GetTournamentStatus_result();
        try
        {
          result.Success = iface_.Tournament_GetTournamentStatus(args.LeaderboardId, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_GetTournamentStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_GetTournamentStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_JoinTournament_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_JoinTournament_args args = new Tournament_JoinTournament_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_JoinTournament_result result = new Tournament_JoinTournament_result();
        try
        {
          result.Success = iface_.Tournament_JoinTournament(args.LeaderboardId, args.TournamentCode, args.InitialScore, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_JoinTournament", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_JoinTournament", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_LeaveTournament_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_LeaveTournament_args args = new Tournament_LeaveTournament_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_LeaveTournament_result result = new Tournament_LeaveTournament_result();
        try
        {
          result.Success = iface_.Tournament_LeaveTournament(args.LeaderboardId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_LeaveTournament", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_LeaveTournament", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_PostTournamentScore_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_PostTournamentScore_args args = new Tournament_PostTournamentScore_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_PostTournamentScore_result result = new Tournament_PostTournamentScore_result();
        try
        {
          result.Success = iface_.Tournament_PostTournamentScore(args.LeaderboardId, args.Score, args.JsonData, args.RoundStartedTime, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_PostTournamentScore", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_PostTournamentScore", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_PostTournamentScoreWithResults_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_PostTournamentScoreWithResults_args args = new Tournament_PostTournamentScoreWithResults_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_PostTournamentScoreWithResults_result result = new Tournament_PostTournamentScoreWithResults_result();
        try
        {
          result.Success = iface_.Tournament_PostTournamentScoreWithResults(args.LeaderboardId, args.Score, args.JsonData, args.RoundStartedTime, args.Sort, args.BeforeCount, args.AfterCount, args.InitialScore, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_PostTournamentScoreWithResults", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_PostTournamentScoreWithResults", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_ViewCurrentReward_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_ViewCurrentReward_args args = new Tournament_ViewCurrentReward_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_ViewCurrentReward_result result = new Tournament_ViewCurrentReward_result();
        try
        {
          result.Success = iface_.Tournament_ViewCurrentReward(args.LeaderboardId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_ViewCurrentReward", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_ViewCurrentReward", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Tournament_ViewReward_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Tournament_ViewReward_args args = new Tournament_ViewReward_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Tournament_ViewReward_result result = new Tournament_ViewReward_result();
        try
        {
          result.Success = iface_.Tournament_ViewReward(args.LeaderboardId, args.VersionId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Tournament_ViewReward", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Tournament_ViewReward", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Patch_GetGameManifest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Patch_GetGameManifest_args args = new Patch_GetGameManifest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Patch_GetGameManifest_result result = new Patch_GetGameManifest_result();
        try
        {
          result.Success = iface_.Patch_GetGameManifest(args.GameId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Patch_GetGameManifest", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Patch_GetGameManifest", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ShareVideo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ShareVideo_args args = new SocialFeed_ShareVideo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ShareVideo_result result = new SocialFeed_ShareVideo_result();
        try
        {
          result.Success = iface_.SocialFeed_ShareVideo(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareVideo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareVideo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ShareScreenshot_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ShareScreenshot_args args = new SocialFeed_ShareScreenshot_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ShareScreenshot_result result = new SocialFeed_ShareScreenshot_result();
        try
        {
          result.Success = iface_.SocialFeed_ShareScreenshot(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareScreenshot", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareScreenshot", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ShareAchievement_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ShareAchievement_args args = new SocialFeed_ShareAchievement_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ShareAchievement_result result = new SocialFeed_ShareAchievement_result();
        try
        {
          result.Success = iface_.SocialFeed_ShareAchievement(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareAchievement", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareAchievement", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ShareApp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ShareApp_args args = new SocialFeed_ShareApp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ShareApp_result result = new SocialFeed_ShareApp_result();
        try
        {
          result.Success = iface_.SocialFeed_ShareApp(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareApp", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareApp", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ShareChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ShareChannel_args args = new SocialFeed_ShareChannel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ShareChannel_result result = new SocialFeed_ShareChannel_result();
        try
        {
          result.Success = iface_.SocialFeed_ShareChannel(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareChannel", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareChannel", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ShareLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ShareLink_args args = new SocialFeed_ShareLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ShareLink_result result = new SocialFeed_ShareLink_result();
        try
        {
          result.Success = iface_.SocialFeed_ShareLink(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareLink", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareLink", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ShareGameGuide_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ShareGameGuide_args args = new SocialFeed_ShareGameGuide_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ShareGameGuide_result result = new SocialFeed_ShareGameGuide_result();
        try
        {
          result.Success = iface_.SocialFeed_ShareGameGuide(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareGameGuide", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ShareGameGuide", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ReadSocialFeed_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ReadSocialFeed_args args = new SocialFeed_ReadSocialFeed_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ReadSocialFeed_result result = new SocialFeed_ReadSocialFeed_result();
        try
        {
          result.Success = iface_.SocialFeed_ReadSocialFeed(args.Skip, args.Limit, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadSocialFeed", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadSocialFeed", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ReadFilteredSocialFeed_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ReadFilteredSocialFeed_args args = new SocialFeed_ReadFilteredSocialFeed_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ReadFilteredSocialFeed_result result = new SocialFeed_ReadFilteredSocialFeed_result();
        try
        {
          result.Success = iface_.SocialFeed_ReadFilteredSocialFeed(args.Skip, args.Limit, args.PlayerIds, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadFilteredSocialFeed", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadFilteredSocialFeed", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ReadFriendsSocialFeed_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ReadFriendsSocialFeed_args args = new SocialFeed_ReadFriendsSocialFeed_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ReadFriendsSocialFeed_result result = new SocialFeed_ReadFriendsSocialFeed_result();
        try
        {
          result.Success = iface_.SocialFeed_ReadFriendsSocialFeed(args.Skip, args.Limit, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadFriendsSocialFeed", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadFriendsSocialFeed", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_PostComment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_PostComment_args args = new SocialFeed_PostComment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_PostComment_result result = new SocialFeed_PostComment_result();
        try
        {
          result.Success = iface_.SocialFeed_PostComment(args.Timestamp, args.ParentId, args.Content, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_PostComment", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_PostComment", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_PostCommentReply_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_PostCommentReply_args args = new SocialFeed_PostCommentReply_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_PostCommentReply_result result = new SocialFeed_PostCommentReply_result();
        try
        {
          result.Success = iface_.SocialFeed_PostCommentReply(args.Timestamp, args.ParentId, args.Content, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_PostCommentReply", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_PostCommentReply", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ReadComments_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ReadComments_args args = new SocialFeed_ReadComments_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ReadComments_result result = new SocialFeed_ReadComments_result();
        try
        {
          result.Success = iface_.SocialFeed_ReadComments(args.Skip, args.Limit, args.ParentId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadComments", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadComments", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_ReadCommentReplies_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_ReadCommentReplies_args args = new SocialFeed_ReadCommentReplies_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_ReadCommentReplies_result result = new SocialFeed_ReadCommentReplies_result();
        try
        {
          result.Success = iface_.SocialFeed_ReadCommentReplies(args.Skip, args.Limit, args.ParentId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadCommentReplies", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_ReadCommentReplies", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_LikeComment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_LikeComment_args args = new SocialFeed_LikeComment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_LikeComment_result result = new SocialFeed_LikeComment_result();
        try
        {
          result.Success = iface_.SocialFeed_LikeComment(args.SocialFeedId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_LikeComment", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_LikeComment", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_LikeActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_LikeActivity_args args = new SocialFeed_LikeActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_LikeActivity_result result = new SocialFeed_LikeActivity_result();
        try
        {
          result.Success = iface_.SocialFeed_LikeActivity(args.SocialFeedId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_LikeActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_LikeActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_UnlikeComment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_UnlikeComment_args args = new SocialFeed_UnlikeComment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_UnlikeComment_result result = new SocialFeed_UnlikeComment_result();
        try
        {
          result.Success = iface_.SocialFeed_UnlikeComment(args.SocialFeedId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnlikeComment", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnlikeComment", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_UnlikeActivity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_UnlikeActivity_args args = new SocialFeed_UnlikeActivity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_UnlikeActivity_result result = new SocialFeed_UnlikeActivity_result();
        try
        {
          result.Success = iface_.SocialFeed_UnlikeActivity(args.SocialFeedId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnlikeActivity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnlikeActivity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_SetFeedVisibility_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_SetFeedVisibility_args args = new SocialFeed_SetFeedVisibility_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_SetFeedVisibility_result result = new SocialFeed_SetFeedVisibility_result();
        try
        {
          result.Success = iface_.SocialFeed_SetFeedVisibility(args.Visibility, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_SetFeedVisibility", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_SetFeedVisibility", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_BlockPlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_BlockPlayer_args args = new SocialFeed_BlockPlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_BlockPlayer_result result = new SocialFeed_BlockPlayer_result();
        try
        {
          result.Success = iface_.SocialFeed_BlockPlayer(args.PlayerId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_BlockPlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_BlockPlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_HidePlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_HidePlayer_args args = new SocialFeed_HidePlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_HidePlayer_result result = new SocialFeed_HidePlayer_result();
        try
        {
          result.Success = iface_.SocialFeed_HidePlayer(args.PlayerId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_HidePlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_HidePlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_UnblockPlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_UnblockPlayer_args args = new SocialFeed_UnblockPlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_UnblockPlayer_result result = new SocialFeed_UnblockPlayer_result();
        try
        {
          result.Success = iface_.SocialFeed_UnblockPlayer(args.PlayerId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnblockPlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnblockPlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialFeed_UnhidePlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialFeed_UnhidePlayer_args args = new SocialFeed_UnhidePlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialFeed_UnhidePlayer_result result = new SocialFeed_UnhidePlayer_result();
        try
        {
          result.Success = iface_.SocialFeed_UnhidePlayer(args.PlayerId, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnhidePlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SocialFeed_UnhidePlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Telemetry_StartTelemetrySession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Telemetry_StartTelemetrySession_args args = new Telemetry_StartTelemetrySession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Telemetry_StartTelemetrySession_result result = new Telemetry_StartTelemetrySession_result();
        try
        {
          result.Success = iface_.Telemetry_StartTelemetrySession(args.Timestamp, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Telemetry_StartTelemetrySession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Telemetry_StartTelemetrySession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Telemetry_EndTelemetrySession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Telemetry_EndTelemetrySession_args args = new Telemetry_EndTelemetrySession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Telemetry_EndTelemetrySession_result result = new Telemetry_EndTelemetrySession_result();
        try
        {
          result.Success = iface_.Telemetry_EndTelemetrySession(args.TelemetrySessionId, args.Timestamp, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Telemetry_EndTelemetrySession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Telemetry_EndTelemetrySession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Telemetry_LogTelemetryEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Telemetry_LogTelemetryEvent_args args = new Telemetry_LogTelemetryEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Telemetry_LogTelemetryEvent_result result = new Telemetry_LogTelemetryEvent_result();
        try
        {
          result.Success = iface_.Telemetry_LogTelemetryEvent(args.TelemetrySessionId, args.Timestamp, args.EventType, args.ParticipantId, args.CustomData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Telemetry_LogTelemetryEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Telemetry_LogTelemetryEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Telemetry_StartTelemetryEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Telemetry_StartTelemetryEvent_args args = new Telemetry_StartTelemetryEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Telemetry_StartTelemetryEvent_result result = new Telemetry_StartTelemetryEvent_result();
        try
        {
          result.Success = iface_.Telemetry_StartTelemetryEvent(args.TelemetrySessionId, args.Timestamp, args.EventType, args.ParticipantId, args.CustomData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Telemetry_StartTelemetryEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Telemetry_StartTelemetryEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Telemetry_EndTelemetryEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Telemetry_EndTelemetryEvent_args args = new Telemetry_EndTelemetryEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Telemetry_EndTelemetryEvent_result result = new Telemetry_EndTelemetryEvent_result();
        try
        {
          result.Success = iface_.Telemetry_EndTelemetryEvent(args.TelemetrySessionId, args.Timestamp, args.EventType, args.ParticipantId, args.CustomData, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("Telemetry_EndTelemetryEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Telemetry_EndTelemetryEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_DownloadFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_DownloadFile_args args = new File_DownloadFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_DownloadFile_result result = new File_DownloadFile_result();
        try
        {
          result.Success = iface_.File_DownloadFile(args.CloudPath, args.CloudFilename, args.ReplaceIfExists, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_DownloadFile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_DownloadFile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_GetDownloadInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_GetDownloadInfo_args args = new File_GetDownloadInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_GetDownloadInfo_result result = new File_GetDownloadInfo_result();
        try
        {
          result.Success = iface_.File_GetDownloadInfo(args.CloudPath, args.CloudFilename, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_GetDownloadInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_GetDownloadInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void File_CancelDownload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        File_CancelDownload_args args = new File_CancelDownload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        File_CancelDownload_result result = new File_CancelDownload_result();
        try
        {
          result.Success = iface_.File_CancelDownload(args.CloudPath, args.CloudFilename, args.ClientIndex);
          oprot.WriteMessageBegin(new TMessage("File_CancelDownload", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("File_CancelDownload", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_CreateMatch_args : TBase
    {
      private string _jsonOpponentIds;
      private string _pushNotificationMessage;
      private int _clientIndex;

      /// <summary>
      /// JSON string identifying the opponent platform and id for this match.
      /// 
      /// Platforms are identified as:
      /// BC - a brainCloud profile id
      /// FB - a Facebook id
      /// 
      /// An exmaple of this string would be:
      /// [
      ///     {
      ///         "platform": "BC",
      ///         "id": "some-braincloud-profile"
      ///     },
      ///     {
      ///         "platform": "FB",
      ///         "id": "some-facebook-id"
      ///     }
      /// ]
      /// </summary>
      public string JsonOpponentIds
      {
        get
        {
          return _jsonOpponentIds;
        }
        set
        {
          __isset.jsonOpponentIds = true;
          this._jsonOpponentIds = value;
        }
      }

      /// <summary>
      /// Optional push notification message to send to the other party.
      /// Refer to the Push Notification functions for the syntax required.
      /// </summary>
      public string PushNotificationMessage
      {
        get
        {
          return _pushNotificationMessage;
        }
        set
        {
          __isset.pushNotificationMessage = true;
          this._pushNotificationMessage = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonOpponentIds;
        public bool pushNotificationMessage;
        public bool clientIndex;
      }

      public AsyncMatch_CreateMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonOpponentIds = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  PushNotificationMessage = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_CreateMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonOpponentIds != null && __isset.jsonOpponentIds) {
            field.Name = "jsonOpponentIds";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonOpponentIds);
            oprot.WriteFieldEnd();
          }
          if (PushNotificationMessage != null && __isset.pushNotificationMessage) {
            field.Name = "pushNotificationMessage";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PushNotificationMessage);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_CreateMatch_args(");
        bool __first = true;
        if (JsonOpponentIds != null && __isset.jsonOpponentIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonOpponentIds: ");
          __sb.Append(JsonOpponentIds);
        }
        if (PushNotificationMessage != null && __isset.pushNotificationMessage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PushNotificationMessage: ");
          __sb.Append(PushNotificationMessage);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_CreateMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_CreateMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_CreateMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_CreateMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_CreateMatchWithInitialTurn_args : TBase
    {
      private string _jsonOpponentIds;
      private string _jsonMatchState;
      private string _pushNotificationMessage;
      private string _nextPlayer;
      private string _jsonSummary;
      private int _clientIndex;

      /// <summary>
      /// JSON string identifying the opponent platform and id for this match.
      /// 
      /// Platforms are identified as:
      /// BC - a brainCloud profile id
      /// FB - a Facebook id
      /// 
      /// An exmaple of this string would be:
      /// [
      ///     {
      ///         "platform": "BC",
      ///         "id": "some-braincloud-profile"
      ///     },
      ///     {
      ///         "platform": "FB",
      ///         "id": "some-facebook-id"
      ///     }
      /// ]
      /// </summary>
      public string JsonOpponentIds
      {
        get
        {
          return _jsonOpponentIds;
        }
        set
        {
          __isset.jsonOpponentIds = true;
          this._jsonOpponentIds = value;
        }
      }

      /// <summary>
      /// JSON string blob provided by the caller
      /// </summary>
      public string JsonMatchState
      {
        get
        {
          return _jsonMatchState;
        }
        set
        {
          __isset.jsonMatchState = true;
          this._jsonMatchState = value;
        }
      }

      /// <summary>
      /// Optional push notification message to send to the other party.
      /// Refer to the Push Notification functions for the syntax required.
      /// </summary>
      public string PushNotificationMessage
      {
        get
        {
          return _pushNotificationMessage;
        }
        set
        {
          __isset.pushNotificationMessage = true;
          this._pushNotificationMessage = value;
        }
      }

      /// <summary>
      /// Optionally, force the next player player to be a specific player
      /// </summary>
      public string NextPlayer
      {
        get
        {
          return _nextPlayer;
        }
        set
        {
          __isset.nextPlayer = true;
          this._nextPlayer = value;
        }
      }

      /// <summary>
      /// Optional JSON string defining what the other player will see as a summary of the game when listing their games
      /// </summary>
      public string JsonSummary
      {
        get
        {
          return _jsonSummary;
        }
        set
        {
          __isset.jsonSummary = true;
          this._jsonSummary = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonOpponentIds;
        public bool jsonMatchState;
        public bool pushNotificationMessage;
        public bool nextPlayer;
        public bool jsonSummary;
        public bool clientIndex;
      }

      public AsyncMatch_CreateMatchWithInitialTurn_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonOpponentIds = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonMatchState = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  PushNotificationMessage = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  NextPlayer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  JsonSummary = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_CreateMatchWithInitialTurn_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonOpponentIds != null && __isset.jsonOpponentIds) {
            field.Name = "jsonOpponentIds";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonOpponentIds);
            oprot.WriteFieldEnd();
          }
          if (JsonMatchState != null && __isset.jsonMatchState) {
            field.Name = "jsonMatchState";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonMatchState);
            oprot.WriteFieldEnd();
          }
          if (PushNotificationMessage != null && __isset.pushNotificationMessage) {
            field.Name = "pushNotificationMessage";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PushNotificationMessage);
            oprot.WriteFieldEnd();
          }
          if (NextPlayer != null && __isset.nextPlayer) {
            field.Name = "nextPlayer";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NextPlayer);
            oprot.WriteFieldEnd();
          }
          if (JsonSummary != null && __isset.jsonSummary) {
            field.Name = "jsonSummary";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonSummary);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_CreateMatchWithInitialTurn_args(");
        bool __first = true;
        if (JsonOpponentIds != null && __isset.jsonOpponentIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonOpponentIds: ");
          __sb.Append(JsonOpponentIds);
        }
        if (JsonMatchState != null && __isset.jsonMatchState) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonMatchState: ");
          __sb.Append(JsonMatchState);
        }
        if (PushNotificationMessage != null && __isset.pushNotificationMessage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PushNotificationMessage: ");
          __sb.Append(PushNotificationMessage);
        }
        if (NextPlayer != null && __isset.nextPlayer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NextPlayer: ");
          __sb.Append(NextPlayer);
        }
        if (JsonSummary != null && __isset.jsonSummary) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonSummary: ");
          __sb.Append(JsonSummary);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_CreateMatchWithInitialTurn_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_CreateMatchWithInitialTurn_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_CreateMatchWithInitialTurn_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_CreateMatchWithInitialTurn_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_SubmitTurn_args : TBase
    {
      private string _ownerId;
      private string _matchId;
      private long _version;
      private string _jsonMatchState;
      private string _pushNotificationMessage;
      private string _nextPlayer;
      private string _jsonSummary;
      private string _jsonStatistics;
      private int _clientIndex;

      /// <summary>
      /// Match owner identfier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      /// <summary>
      /// Game state version to ensure turns are submitted once and in order
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// JSON string blob provided by the caller
      /// </summary>
      public string JsonMatchState
      {
        get
        {
          return _jsonMatchState;
        }
        set
        {
          __isset.jsonMatchState = true;
          this._jsonMatchState = value;
        }
      }

      /// <summary>
      /// Optional push notification message to send to the other party.
      /// Refer to the Push Notification functions for the syntax required.
      /// </summary>
      public string PushNotificationMessage
      {
        get
        {
          return _pushNotificationMessage;
        }
        set
        {
          __isset.pushNotificationMessage = true;
          this._pushNotificationMessage = value;
        }
      }

      /// <summary>
      /// Optionally, force the next player player to be a specific player
      /// </summary>
      public string NextPlayer
      {
        get
        {
          return _nextPlayer;
        }
        set
        {
          __isset.nextPlayer = true;
          this._nextPlayer = value;
        }
      }

      /// <summary>
      /// Optional JSON string that other players will see as a summary of the game when listing their games
      /// </summary>
      public string JsonSummary
      {
        get
        {
          return _jsonSummary;
        }
        set
        {
          __isset.jsonSummary = true;
          this._jsonSummary = value;
        }
      }

      /// <summary>
      /// Optional JSON string blob provided by the caller
      /// </summary>
      public string JsonStatistics
      {
        get
        {
          return _jsonStatistics;
        }
        set
        {
          __isset.jsonStatistics = true;
          this._jsonStatistics = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ownerId;
        public bool matchId;
        public bool version;
        public bool jsonMatchState;
        public bool pushNotificationMessage;
        public bool nextPlayer;
        public bool jsonSummary;
        public bool jsonStatistics;
        public bool clientIndex;
      }

      public AsyncMatch_SubmitTurn_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MatchId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonMatchState = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  PushNotificationMessage = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.String) {
                  NextPlayer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.String) {
                  JsonSummary = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.String) {
                  JsonStatistics = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 9:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_SubmitTurn_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (MatchId != null && __isset.matchId) {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (JsonMatchState != null && __isset.jsonMatchState) {
            field.Name = "jsonMatchState";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonMatchState);
            oprot.WriteFieldEnd();
          }
          if (PushNotificationMessage != null && __isset.pushNotificationMessage) {
            field.Name = "pushNotificationMessage";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PushNotificationMessage);
            oprot.WriteFieldEnd();
          }
          if (NextPlayer != null && __isset.nextPlayer) {
            field.Name = "nextPlayer";
            field.Type = TType.String;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NextPlayer);
            oprot.WriteFieldEnd();
          }
          if (JsonSummary != null && __isset.jsonSummary) {
            field.Name = "jsonSummary";
            field.Type = TType.String;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonSummary);
            oprot.WriteFieldEnd();
          }
          if (JsonStatistics != null && __isset.jsonStatistics) {
            field.Name = "jsonStatistics";
            field.Type = TType.String;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonStatistics);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 9;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_SubmitTurn_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchId: ");
          __sb.Append(MatchId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (JsonMatchState != null && __isset.jsonMatchState) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonMatchState: ");
          __sb.Append(JsonMatchState);
        }
        if (PushNotificationMessage != null && __isset.pushNotificationMessage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PushNotificationMessage: ");
          __sb.Append(PushNotificationMessage);
        }
        if (NextPlayer != null && __isset.nextPlayer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NextPlayer: ");
          __sb.Append(NextPlayer);
        }
        if (JsonSummary != null && __isset.jsonSummary) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonSummary: ");
          __sb.Append(JsonSummary);
        }
        if (JsonStatistics != null && __isset.jsonStatistics) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonStatistics: ");
          __sb.Append(JsonStatistics);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_SubmitTurn_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_SubmitTurn_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_SubmitTurn_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_SubmitTurn_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_UpdateMatchSummaryData_args : TBase
    {
      private string _ownerId;
      private string _matchId;
      private long _version;
      private string _jsonSummary;
      private int _clientIndex;

      /// <summary>
      /// Match owner identfier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      /// <summary>
      /// Game state version to ensure turns are submitted once and in order
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// JSON string provided by the caller that other players will see as a summary of the game when listing their games
      /// </summary>
      public string JsonSummary
      {
        get
        {
          return _jsonSummary;
        }
        set
        {
          __isset.jsonSummary = true;
          this._jsonSummary = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ownerId;
        public bool matchId;
        public bool version;
        public bool jsonSummary;
        public bool clientIndex;
      }

      public AsyncMatch_UpdateMatchSummaryData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MatchId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonSummary = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_UpdateMatchSummaryData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (MatchId != null && __isset.matchId) {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (JsonSummary != null && __isset.jsonSummary) {
            field.Name = "jsonSummary";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonSummary);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_UpdateMatchSummaryData_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchId: ");
          __sb.Append(MatchId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (JsonSummary != null && __isset.jsonSummary) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonSummary: ");
          __sb.Append(JsonSummary);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_UpdateMatchSummaryData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_UpdateMatchSummaryData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_UpdateMatchSummaryData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_UpdateMatchSummaryData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_CompleteMatch_args : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_CompleteMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MatchId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_CompleteMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (MatchId != null && __isset.matchId) {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_CompleteMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchId: ");
          __sb.Append(MatchId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_CompleteMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_CompleteMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_CompleteMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_CompleteMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_ReadMatch_args : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_ReadMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MatchId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_ReadMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (MatchId != null && __isset.matchId) {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_ReadMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchId: ");
          __sb.Append(MatchId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_ReadMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_ReadMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_ReadMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_ReadMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_ReadMatchHistory_args : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_ReadMatchHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MatchId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_ReadMatchHistory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (MatchId != null && __isset.matchId) {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_ReadMatchHistory_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchId: ");
          __sb.Append(MatchId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_ReadMatchHistory_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_ReadMatchHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_ReadMatchHistory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_ReadMatchHistory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_FindMatches_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public AsyncMatch_FindMatches_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_FindMatches_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_FindMatches_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_FindMatches_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_FindMatches_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_FindMatches_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_FindMatches_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_FindCompleteMatches_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public AsyncMatch_FindCompleteMatches_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_FindCompleteMatches_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_FindCompleteMatches_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_FindCompleteMatches_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_FindCompleteMatches_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_FindCompleteMatches_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_FindCompleteMatches_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_AbandonMatch_args : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_AbandonMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MatchId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_AbandonMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (MatchId != null && __isset.matchId) {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_AbandonMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchId: ");
          __sb.Append(MatchId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_AbandonMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_AbandonMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_AbandonMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_AbandonMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_DeleteMatch_args : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_DeleteMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MatchId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_DeleteMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (MatchId != null && __isset.matchId) {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_DeleteMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchId: ");
          __sb.Append(MatchId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AsyncMatch_DeleteMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AsyncMatch_DeleteMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AsyncMatch_DeleteMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AsyncMatch_DeleteMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_GenerateAnonymousId_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Authentication_GenerateAnonymousId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_GenerateAnonymousId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_GenerateAnonymousId_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_GenerateAnonymousId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Authentication_GenerateAnonymousId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_GenerateAnonymousId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_GenerateAnonymousId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_Initialize_args : TBase
    {
      private string _profileId;
      private string _anonymousId;
      private int _clientIndex;

      /// <summary>
      /// The id of the profile id that was most recently used by the app (on this device)
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The anonymous installation id that was generated for this device
      /// </summary>
      public string AnonymousId
      {
        get
        {
          return _anonymousId;
        }
        set
        {
          __isset.anonymousId = true;
          this._anonymousId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool anonymousId;
        public bool clientIndex;
      }

      public Authentication_Initialize_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AnonymousId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_Initialize_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (AnonymousId != null && __isset.anonymousId) {
            field.Name = "anonymousId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AnonymousId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_Initialize_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (AnonymousId != null && __isset.anonymousId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AnonymousId: ");
          __sb.Append(AnonymousId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_Initialize_result : TBase
    {

      public Authentication_Initialize_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_Initialize_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_Initialize_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_ClearSavedProfileID_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Authentication_ClearSavedProfileID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_ClearSavedProfileID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_ClearSavedProfileID_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_ClearSavedProfileID_result : TBase
    {

      public Authentication_ClearSavedProfileID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_ClearSavedProfileID_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_ClearSavedProfileID_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateAnonymous_args : TBase
    {
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// Should a new profile be created if it does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateAnonymous_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateAnonymous_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateAnonymous_args(");
        bool __first = true;
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateAnonymous_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Authentication_AuthenticateAnonymous_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateAnonymous_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateAnonymous_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateEmailPassword_args : TBase
    {
      private string _email;
      private string _password;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The e-mail address of the user
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// The password of the user
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      /// <summary>
      /// Should a new profile be created for this user if the account does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool password;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateEmailPassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateEmailPassword_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateEmailPassword_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateEmailPassword_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Authentication_AuthenticateEmailPassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateEmailPassword_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateEmailPassword_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateUniversal_args : TBase
    {
      private string _userId;
      private string _password;
      private bool _forceCreate;
      private int _clientIndex;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The password of the user
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      /// <summary>
      /// Should a new profile be created for this user if the account does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool password;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateUniversal_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateUniversal_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateUniversal_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateUniversal_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Authentication_AuthenticateUniversal_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateUniversal_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateUniversal_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateExternal_args : TBase
    {
      private string _userId;
      private string _token;
      private string _externalAuthName;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The user id
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The user token (password etc)
      /// </summary>
      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      /// <summary>
      /// The name of the cloud script to call for external authentication
      /// </summary>
      public string ExternalAuthName
      {
        get
        {
          return _externalAuthName;
        }
        set
        {
          __isset.externalAuthName = true;
          this._externalAuthName = value;
        }
      }

      /// <summary>
      /// Should a new profile be created for this user if the account does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool token;
        public bool externalAuthName;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateExternal_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Token = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ExternalAuthName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateExternal_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Token);
            oprot.WriteFieldEnd();
          }
          if (ExternalAuthName != null && __isset.externalAuthName) {
            field.Name = "externalAuthName";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalAuthName);
            oprot.WriteFieldEnd();
          }
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateExternal_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (ExternalAuthName != null && __isset.externalAuthName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalAuthName: ");
          __sb.Append(ExternalAuthName);
        }
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_AuthenticateExternal_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Authentication_AuthenticateExternal_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_AuthenticateExternal_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_AuthenticateExternal_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_ResetEmailPassword_args : TBase
    {
      private string _externalId;
      private int _clientIndex;

      /// <summary>
      /// The email address to send the reset email to.
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool externalId;
        public bool clientIndex;
      }

      public Authentication_ResetEmailPassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ExternalId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_ResetEmailPassword_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ExternalId != null && __isset.externalId) {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_ResetEmailPassword_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalId: ");
          __sb.Append(ExternalId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authentication_ResetEmailPassword_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Authentication_ResetEmailPassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Authentication_ResetEmailPassword_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authentication_ResetEmailPassword_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetSessionId_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_GetSessionId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetSessionId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetSessionId_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetSessionId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Client_GetSessionId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetSessionId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetSessionId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_IsAuthenticated_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_IsAuthenticated_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_IsAuthenticated_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_IsAuthenticated_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_IsAuthenticated_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Client_IsAuthenticated_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_IsAuthenticated_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_IsAuthenticated_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_IsInitialized_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_IsInitialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_IsInitialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_IsInitialized_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_IsInitialized_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Client_IsInitialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_IsInitialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_IsInitialized_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_Initialize_SSS_args : TBase
    {
      private string _secretKey;
      private string _appId;
      private string _appVersion;
      private int _clientIndex;

      /// <summary>
      /// The secret key for your app
      /// </summary>
      public string SecretKey
      {
        get
        {
          return _secretKey;
        }
        set
        {
          __isset.secretKey = true;
          this._secretKey = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      /// <summary>
      /// The app version
      /// </summary>
      public string AppVersion
      {
        get
        {
          return _appVersion;
        }
        set
        {
          __isset.appVersion = true;
          this._appVersion = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool secretKey;
        public bool appId;
        public bool appVersion;
        public bool clientIndex;
      }

      public Client_Initialize_SSS_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SecretKey = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  AppVersion = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_Initialize_SSS_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SecretKey != null && __isset.secretKey) {
            field.Name = "secretKey";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SecretKey);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (AppVersion != null && __isset.appVersion) {
            field.Name = "appVersion";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppVersion);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_Initialize_SSS_args(");
        bool __first = true;
        if (SecretKey != null && __isset.secretKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecretKey: ");
          __sb.Append(SecretKey);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (AppVersion != null && __isset.appVersion) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppVersion: ");
          __sb.Append(AppVersion);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_Initialize_SSS_result : TBase
    {

      public Client_Initialize_SSS_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_Initialize_SSS_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_Initialize_SSS_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_Initialize_SSSS_args : TBase
    {
      private string _serverURL;
      private string _secretKey;
      private string _appId;
      private string _appVersion;
      private int _clientIndex;

      /// <summary>
      /// The URL to the brainCloud server
      /// </summary>
      public string ServerURL
      {
        get
        {
          return _serverURL;
        }
        set
        {
          __isset.serverURL = true;
          this._serverURL = value;
        }
      }

      /// <summary>
      /// The secret key for your app
      /// </summary>
      public string SecretKey
      {
        get
        {
          return _secretKey;
        }
        set
        {
          __isset.secretKey = true;
          this._secretKey = value;
        }
      }

      /// <summary>
      /// The app id
      /// </summary>
      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      /// <summary>
      /// The app version
      /// </summary>
      public string AppVersion
      {
        get
        {
          return _appVersion;
        }
        set
        {
          __isset.appVersion = true;
          this._appVersion = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serverURL;
        public bool secretKey;
        public bool appId;
        public bool appVersion;
        public bool clientIndex;
      }

      public Client_Initialize_SSSS_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ServerURL = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  SecretKey = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  AppVersion = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_Initialize_SSSS_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ServerURL != null && __isset.serverURL) {
            field.Name = "serverURL";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ServerURL);
            oprot.WriteFieldEnd();
          }
          if (SecretKey != null && __isset.secretKey) {
            field.Name = "secretKey";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SecretKey);
            oprot.WriteFieldEnd();
          }
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (AppVersion != null && __isset.appVersion) {
            field.Name = "appVersion";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppVersion);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_Initialize_SSSS_args(");
        bool __first = true;
        if (ServerURL != null && __isset.serverURL) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServerURL: ");
          __sb.Append(ServerURL);
        }
        if (SecretKey != null && __isset.secretKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecretKey: ");
          __sb.Append(SecretKey);
        }
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (AppVersion != null && __isset.appVersion) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppVersion: ");
          __sb.Append(AppVersion);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_Initialize_SSSS_result : TBase
    {

      public Client_Initialize_SSSS_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_Initialize_SSSS_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_Initialize_SSSS_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_InitializeIdentity_args : TBase
    {
      private string _profileId;
      private string _anonymousId;
      private int _clientIndex;

      /// <summary>
      /// The profile id
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The anonymous id
      /// </summary>
      public string AnonymousId
      {
        get
        {
          return _anonymousId;
        }
        set
        {
          __isset.anonymousId = true;
          this._anonymousId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool anonymousId;
        public bool clientIndex;
      }

      public Client_InitializeIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AnonymousId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_InitializeIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (AnonymousId != null && __isset.anonymousId) {
            field.Name = "anonymousId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AnonymousId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_InitializeIdentity_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (AnonymousId != null && __isset.anonymousId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AnonymousId: ");
          __sb.Append(AnonymousId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_InitializeIdentity_result : TBase
    {

      public Client_InitializeIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_InitializeIdentity_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_InitializeIdentity_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_Update_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_Update_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_Update_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_Update_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_Update_result : TBase
    {

      public Client_Update_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_Update_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_Update_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_EnableLogging_args : TBase
    {
      private bool _enable;
      private int _clientIndex;

      /// <summary>
      /// True if logging is to be enabled
      /// </summary>
      public bool Enable
      {
        get
        {
          return _enable;
        }
        set
        {
          __isset.enable = true;
          this._enable = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool enable;
        public bool clientIndex;
      }

      public Client_EnableLogging_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  Enable = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_EnableLogging_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.enable) {
            field.Name = "enable";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Enable);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_EnableLogging_args(");
        bool __first = true;
        if (__isset.enable) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Enable: ");
          __sb.Append(Enable);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_EnableLogging_result : TBase
    {

      public Client_EnableLogging_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_EnableLogging_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_EnableLogging_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_ResetCommunication_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_ResetCommunication_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_ResetCommunication_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_ResetCommunication_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_ResetCommunication_result : TBase
    {

      public Client_ResetCommunication_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_ResetCommunication_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_ResetCommunication_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetPacketTimeouts_args : TBase
    {
      private List<int> _timeouts;
      private int _clientIndex;

      /// <summary>
      /// An array of packet timeouts.
      /// </summary>
      public List<int> Timeouts
      {
        get
        {
          return _timeouts;
        }
        set
        {
          __isset.timeouts = true;
          this._timeouts = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timeouts;
        public bool clientIndex;
      }

      public Client_SetPacketTimeouts_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Timeouts = new List<int>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      int _elem2;
                      _elem2 = iprot.ReadI32();
                      Timeouts.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetPacketTimeouts_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Timeouts != null && __isset.timeouts) {
            field.Name = "timeouts";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Timeouts.Count));
              foreach (int _iter3 in Timeouts)
              {
                oprot.WriteI32(_iter3);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetPacketTimeouts_args(");
        bool __first = true;
        if (Timeouts != null && __isset.timeouts) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeouts: ");
          __sb.Append(Timeouts);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetPacketTimeouts_result : TBase
    {

      public Client_SetPacketTimeouts_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetPacketTimeouts_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetPacketTimeouts_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetPacketTimeoutsToDefault_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_SetPacketTimeoutsToDefault_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetPacketTimeoutsToDefault_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetPacketTimeoutsToDefault_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetPacketTimeoutsToDefault_result : TBase
    {

      public Client_SetPacketTimeoutsToDefault_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetPacketTimeoutsToDefault_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetPacketTimeoutsToDefault_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetPacketTimeouts_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_GetPacketTimeouts_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetPacketTimeouts_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetPacketTimeouts_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetPacketTimeouts_result : TBase
    {
      private List<int> _success;

      public List<int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Client_GetPacketTimeouts_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<int>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      int _elem6;
                      _elem6 = iprot.ReadI32();
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetPacketTimeouts_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.I32, Success.Count));
                foreach (int _iter7 in Success)
                {
                  oprot.WriteI32(_iter7);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetPacketTimeouts_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetAuthenticationPacketTimeout_args : TBase
    {
      private int _timeoutSecs;
      private int _clientIndex;

      public int TimeoutSecs
      {
        get
        {
          return _timeoutSecs;
        }
        set
        {
          __isset.timeoutSecs = true;
          this._timeoutSecs = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timeoutSecs;
        public bool clientIndex;
      }

      public Client_SetAuthenticationPacketTimeout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  TimeoutSecs = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetAuthenticationPacketTimeout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timeoutSecs) {
            field.Name = "timeoutSecs";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(TimeoutSecs);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetAuthenticationPacketTimeout_args(");
        bool __first = true;
        if (__isset.timeoutSecs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TimeoutSecs: ");
          __sb.Append(TimeoutSecs);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetAuthenticationPacketTimeout_result : TBase
    {

      public Client_SetAuthenticationPacketTimeout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetAuthenticationPacketTimeout_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetAuthenticationPacketTimeout_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetAuthenticationPacketTimeout_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_GetAuthenticationPacketTimeout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetAuthenticationPacketTimeout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetAuthenticationPacketTimeout_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetAuthenticationPacketTimeout_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Client_GetAuthenticationPacketTimeout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetAuthenticationPacketTimeout_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetAuthenticationPacketTimeout_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetUploadLowTransferRateTimeout_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_GetUploadLowTransferRateTimeout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetUploadLowTransferRateTimeout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetUploadLowTransferRateTimeout_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetUploadLowTransferRateTimeout_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Client_GetUploadLowTransferRateTimeout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetUploadLowTransferRateTimeout_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetUploadLowTransferRateTimeout_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetUploadLowTransferRateTimeout_args : TBase
    {
      private int _timeoutSecs;
      private int _clientIndex;

      public int TimeoutSecs
      {
        get
        {
          return _timeoutSecs;
        }
        set
        {
          __isset.timeoutSecs = true;
          this._timeoutSecs = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timeoutSecs;
        public bool clientIndex;
      }

      public Client_SetUploadLowTransferRateTimeout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  TimeoutSecs = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetUploadLowTransferRateTimeout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timeoutSecs) {
            field.Name = "timeoutSecs";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(TimeoutSecs);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetUploadLowTransferRateTimeout_args(");
        bool __first = true;
        if (__isset.timeoutSecs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TimeoutSecs: ");
          __sb.Append(TimeoutSecs);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetUploadLowTransferRateTimeout_result : TBase
    {

      public Client_SetUploadLowTransferRateTimeout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetUploadLowTransferRateTimeout_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetUploadLowTransferRateTimeout_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetUploadLowTransferRateThreshold_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_GetUploadLowTransferRateThreshold_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetUploadLowTransferRateThreshold_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetUploadLowTransferRateThreshold_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_GetUploadLowTransferRateThreshold_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Client_GetUploadLowTransferRateThreshold_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_GetUploadLowTransferRateThreshold_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_GetUploadLowTransferRateThreshold_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetUploadLowTransferRateThreshold_args : TBase
    {
      private int _bytesPerSec;
      private int _clientIndex;

      /// <summary>
      /// The low transfer rate threshold in bytes/sec
      /// </summary>
      public int BytesPerSec
      {
        get
        {
          return _bytesPerSec;
        }
        set
        {
          __isset.bytesPerSec = true;
          this._bytesPerSec = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bytesPerSec;
        public bool clientIndex;
      }

      public Client_SetUploadLowTransferRateThreshold_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  BytesPerSec = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetUploadLowTransferRateThreshold_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.bytesPerSec) {
            field.Name = "bytesPerSec";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(BytesPerSec);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetUploadLowTransferRateThreshold_args(");
        bool __first = true;
        if (__isset.bytesPerSec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BytesPerSec: ");
          __sb.Append(BytesPerSec);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_SetUploadLowTransferRateThreshold_result : TBase
    {

      public Client_SetUploadLowTransferRateThreshold_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_SetUploadLowTransferRateThreshold_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_SetUploadLowTransferRateThreshold_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_EnableNetworkErrorMessageCaching_args : TBase
    {
      private bool _enabled;
      private int _clientIndex;

      /// <summary>
      /// True if message should be cached on timeout
      /// </summary>
      public bool Enabled
      {
        get
        {
          return _enabled;
        }
        set
        {
          __isset.enabled = true;
          this._enabled = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool enabled;
        public bool clientIndex;
      }

      public Client_EnableNetworkErrorMessageCaching_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  Enabled = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_EnableNetworkErrorMessageCaching_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.enabled) {
            field.Name = "enabled";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Enabled);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_EnableNetworkErrorMessageCaching_args(");
        bool __first = true;
        if (__isset.enabled) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Enabled: ");
          __sb.Append(Enabled);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_EnableNetworkErrorMessageCaching_result : TBase
    {

      public Client_EnableNetworkErrorMessageCaching_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_EnableNetworkErrorMessageCaching_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_EnableNetworkErrorMessageCaching_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_RetryCachedMessages_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_RetryCachedMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_RetryCachedMessages_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_RetryCachedMessages_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_RetryCachedMessages_result : TBase
    {

      public Client_RetryCachedMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_RetryCachedMessages_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_RetryCachedMessages_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_FlushCachedMessages_args : TBase
    {
      private bool _sendApiErrorCallbacks;
      private int _clientIndex;

      /// <summary>
      /// If set to true API error callbacks will
      /// be called for every cached message with statusCode CLIENT_NETWORK_ERROR and reasonCode CLIENT_NETWORK_ERROR_TIMEOUT.
      /// </summary>
      public bool SendApiErrorCallbacks
      {
        get
        {
          return _sendApiErrorCallbacks;
        }
        set
        {
          __isset.sendApiErrorCallbacks = true;
          this._sendApiErrorCallbacks = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sendApiErrorCallbacks;
        public bool clientIndex;
      }

      public Client_FlushCachedMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  SendApiErrorCallbacks = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_FlushCachedMessages_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.sendApiErrorCallbacks) {
            field.Name = "sendApiErrorCallbacks";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(SendApiErrorCallbacks);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_FlushCachedMessages_args(");
        bool __first = true;
        if (__isset.sendApiErrorCallbacks) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SendApiErrorCallbacks: ");
          __sb.Append(SendApiErrorCallbacks);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_FlushCachedMessages_result : TBase
    {

      public Client_FlushCachedMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_FlushCachedMessages_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_FlushCachedMessages_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_InsertEndOfMessageBundleMarker_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Client_InsertEndOfMessageBundleMarker_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_InsertEndOfMessageBundleMarker_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_InsertEndOfMessageBundleMarker_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_InsertEndOfMessageBundleMarker_result : TBase
    {

      public Client_InsertEndOfMessageBundleMarker_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_InsertEndOfMessageBundleMarker_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_InsertEndOfMessageBundleMarker_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_OverrideCountryCode_args : TBase
    {
      private string _countryCode;
      private int _clientIndex;

      /// <summary>
      /// ISO 3166-1 two-letter country code
      /// </summary>
      public string CountryCode
      {
        get
        {
          return _countryCode;
        }
        set
        {
          __isset.countryCode = true;
          this._countryCode = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool countryCode;
        public bool clientIndex;
      }

      public Client_OverrideCountryCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CountryCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_OverrideCountryCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CountryCode != null && __isset.countryCode) {
            field.Name = "countryCode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CountryCode);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_OverrideCountryCode_args(");
        bool __first = true;
        if (CountryCode != null && __isset.countryCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CountryCode: ");
          __sb.Append(CountryCode);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_OverrideCountryCode_result : TBase
    {

      public Client_OverrideCountryCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_OverrideCountryCode_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_OverrideCountryCode_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_OverrideLanguageCode_args : TBase
    {
      private string _languageCode;
      private int _clientIndex;

      /// <summary>
      /// ISO 639-1 two-letter language code
      /// </summary>
      public string LanguageCode
      {
        get
        {
          return _languageCode;
        }
        set
        {
          __isset.languageCode = true;
          this._languageCode = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool languageCode;
        public bool clientIndex;
      }

      public Client_OverrideLanguageCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LanguageCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_OverrideLanguageCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LanguageCode != null && __isset.languageCode) {
            field.Name = "languageCode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LanguageCode);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_OverrideLanguageCode_args(");
        bool __first = true;
        if (LanguageCode != null && __isset.languageCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LanguageCode: ");
          __sb.Append(LanguageCode);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Client_OverrideLanguageCode_result : TBase
    {

      public Client_OverrideLanguageCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Client_OverrideLanguageCode_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Client_OverrideLanguageCode_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DataStream_CustomPageEvent_args : TBase
    {
      private string _eventName;
      private string _jsonEventProperties;
      private int _clientIndex;

      /// <summary>
      /// The name of the event
      /// </summary>
      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      /// <summary>
      /// The properties of the event
      /// </summary>
      public string JsonEventProperties
      {
        get
        {
          return _jsonEventProperties;
        }
        set
        {
          __isset.jsonEventProperties = true;
          this._jsonEventProperties = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool eventName;
        public bool jsonEventProperties;
        public bool clientIndex;
      }

      public DataStream_CustomPageEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EventName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonEventProperties = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DataStream_CustomPageEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EventName != null && __isset.eventName) {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventName);
            oprot.WriteFieldEnd();
          }
          if (JsonEventProperties != null && __isset.jsonEventProperties) {
            field.Name = "jsonEventProperties";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEventProperties);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DataStream_CustomPageEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventName: ");
          __sb.Append(EventName);
        }
        if (JsonEventProperties != null && __isset.jsonEventProperties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEventProperties: ");
          __sb.Append(JsonEventProperties);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DataStream_CustomPageEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DataStream_CustomPageEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DataStream_CustomPageEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DataStream_CustomPageEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DataStream_CustomScreenEvent_args : TBase
    {
      private string _eventName;
      private string _jsonEventProperties;
      private int _clientIndex;

      /// <summary>
      /// The name of the event
      /// </summary>
      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      /// <summary>
      /// The properties of the event
      /// </summary>
      public string JsonEventProperties
      {
        get
        {
          return _jsonEventProperties;
        }
        set
        {
          __isset.jsonEventProperties = true;
          this._jsonEventProperties = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool eventName;
        public bool jsonEventProperties;
        public bool clientIndex;
      }

      public DataStream_CustomScreenEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EventName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonEventProperties = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DataStream_CustomScreenEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EventName != null && __isset.eventName) {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventName);
            oprot.WriteFieldEnd();
          }
          if (JsonEventProperties != null && __isset.jsonEventProperties) {
            field.Name = "jsonEventProperties";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEventProperties);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DataStream_CustomScreenEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventName: ");
          __sb.Append(EventName);
        }
        if (JsonEventProperties != null && __isset.jsonEventProperties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEventProperties: ");
          __sb.Append(JsonEventProperties);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DataStream_CustomScreenEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DataStream_CustomScreenEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DataStream_CustomScreenEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DataStream_CustomScreenEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DataStream_CustomTrackEvent_args : TBase
    {
      private string _eventName;
      private string _jsonEventProperties;
      private int _clientIndex;

      /// <summary>
      /// The name of the event
      /// </summary>
      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      /// <summary>
      /// The properties of the event
      /// </summary>
      public string JsonEventProperties
      {
        get
        {
          return _jsonEventProperties;
        }
        set
        {
          __isset.jsonEventProperties = true;
          this._jsonEventProperties = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool eventName;
        public bool jsonEventProperties;
        public bool clientIndex;
      }

      public DataStream_CustomTrackEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EventName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonEventProperties = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DataStream_CustomTrackEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EventName != null && __isset.eventName) {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventName);
            oprot.WriteFieldEnd();
          }
          if (JsonEventProperties != null && __isset.jsonEventProperties) {
            field.Name = "jsonEventProperties";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEventProperties);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DataStream_CustomTrackEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventName: ");
          __sb.Append(EventName);
        }
        if (JsonEventProperties != null && __isset.jsonEventProperties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEventProperties: ");
          __sb.Append(JsonEventProperties);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DataStream_CustomTrackEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DataStream_CustomTrackEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DataStream_CustomTrackEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DataStream_CustomTrackEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_CreateEntity_args : TBase
    {
      private string _entityType;
      private string _jsonEntityData;
      private string _jsonEntityAcl;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// permissions which make the entity readable/writeable by only the user.
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool jsonEntityData;
        public bool jsonEntityAcl;
        public bool clientIndex;
      }

      public Entity_CreateEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonEntityData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonEntityAcl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_CreateEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityData != null && __isset.jsonEntityData) {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityData);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityAcl);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_CreateEntity_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityData: ");
          __sb.Append(JsonEntityData);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityAcl: ");
          __sb.Append(JsonEntityAcl);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_CreateEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_CreateEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_CreateEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_CreateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetEntitiesByType_args : TBase
    {
      private string _entityType;
      private int _clientIndex;

      /// <summary>
      /// The entity type to search for
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool clientIndex;
      }

      public Entity_GetEntitiesByType_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetEntitiesByType_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetEntitiesByType_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetEntitiesByType_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetEntitiesByType_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetEntitiesByType_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetEntitiesByType_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_UpdateEntity_args : TBase
    {
      private string _entityId;
      private string _entityType;
      private string _jsonEntityData;
      private string _jsonEntityAcl;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity to update
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string.
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// permissions which make the entity readable/writeable by only the user.
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool entityType;
        public bool jsonEntityData;
        public bool jsonEntityAcl;
        public bool version;
        public bool clientIndex;
      }

      public Entity_UpdateEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonEntityData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonEntityAcl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_UpdateEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityData != null && __isset.jsonEntityData) {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityData);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityAcl);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_UpdateEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityData: ");
          __sb.Append(JsonEntityData);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityAcl: ");
          __sb.Append(JsonEntityAcl);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_UpdateEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_UpdateEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_UpdateEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_UpdateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_UpdateSharedEntity_args : TBase
    {
      private string _entityId;
      private string _targetProfileId;
      private string _entityType;
      private string _jsonEntityData;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity to update
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The id of the entity's owner
      /// </summary>
      public string TargetProfileId
      {
        get
        {
          return _targetProfileId;
        }
        set
        {
          __isset.targetProfileId = true;
          this._targetProfileId = value;
        }
      }

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string.
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool targetProfileId;
        public bool entityType;
        public bool jsonEntityData;
        public bool version;
        public bool clientIndex;
      }

      public Entity_UpdateSharedEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  TargetProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonEntityData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_UpdateSharedEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (TargetProfileId != null && __isset.targetProfileId) {
            field.Name = "targetProfileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TargetProfileId);
            oprot.WriteFieldEnd();
          }
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityData != null && __isset.jsonEntityData) {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityData);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_UpdateSharedEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (TargetProfileId != null && __isset.targetProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetProfileId: ");
          __sb.Append(TargetProfileId);
        }
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityData: ");
          __sb.Append(JsonEntityData);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_UpdateSharedEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_UpdateSharedEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_UpdateSharedEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_UpdateSharedEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_DeleteEntity_args : TBase
    {
      private string _entityId;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity to update
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool version;
        public bool clientIndex;
      }

      public Entity_DeleteEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_DeleteEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_DeleteEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_DeleteEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_DeleteEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_DeleteEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_DeleteEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_UpdateSingleton_args : TBase
    {
      private string _entityType;
      private string _jsonEntityData;
      private string _jsonEntityAcl;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string.
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool jsonEntityData;
        public bool jsonEntityAcl;
        public bool version;
        public bool clientIndex;
      }

      public Entity_UpdateSingleton_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonEntityData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonEntityAcl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_UpdateSingleton_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityData != null && __isset.jsonEntityData) {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityData);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityAcl);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_UpdateSingleton_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityData: ");
          __sb.Append(JsonEntityData);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityAcl: ");
          __sb.Append(JsonEntityAcl);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_UpdateSingleton_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_UpdateSingleton_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_UpdateSingleton_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_UpdateSingleton_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_DeleteSingleton_args : TBase
    {
      private string _entityType;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool version;
        public bool clientIndex;
      }

      public Entity_DeleteSingleton_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_DeleteSingleton_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_DeleteSingleton_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_DeleteSingleton_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_DeleteSingleton_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_DeleteSingleton_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_DeleteSingleton_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetEntity_args : TBase
    {
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool clientIndex;
      }

      public Entity_GetEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSingleton_args : TBase
    {
      private string _entityType;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool clientIndex;
      }

      public Entity_GetSingleton_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSingleton_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSingleton_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSingleton_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetSingleton_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSingleton_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSingleton_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSharedEntityForProfileId_args : TBase
    {
      private string _profileId;
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// The the profile ID of the user who owns the entity
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The ID of the entity that will be retrieved
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool entityId;
        public bool clientIndex;
      }

      public Entity_GetSharedEntityForProfileId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSharedEntityForProfileId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSharedEntityForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSharedEntityForProfileId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetSharedEntityForProfileId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSharedEntityForProfileId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSharedEntityForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSharedEntitiesForProfileId_args : TBase
    {
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// The profile id to retrieve shared entities for
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool clientIndex;
      }

      public Entity_GetSharedEntitiesForProfileId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSharedEntitiesForProfileId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSharedEntitiesForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSharedEntitiesForProfileId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetSharedEntitiesForProfileId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSharedEntitiesForProfileId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSharedEntitiesForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetList_args : TBase
    {
      private string _whereJson;
      private string _orderByJson;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// Sort order
      /// </summary>
      public string OrderByJson
      {
        get
        {
          return _orderByJson;
        }
        set
        {
          __isset.orderByJson = true;
          this._orderByJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool whereJson;
        public bool orderByJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public Entity_GetList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  WhereJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  OrderByJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  MaxReturn = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (WhereJson != null && __isset.whereJson) {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(WhereJson);
            oprot.WriteFieldEnd();
          }
          if (OrderByJson != null && __isset.orderByJson) {
            field.Name = "orderByJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OrderByJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxReturn) {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxReturn);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetList_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WhereJson: ");
          __sb.Append(WhereJson);
        }
        if (OrderByJson != null && __isset.orderByJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderByJson: ");
          __sb.Append(OrderByJson);
        }
        if (__isset.maxReturn) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxReturn: ");
          __sb.Append(MaxReturn);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetList_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSharedEntitiesListForProfileId_args : TBase
    {
      private string _profileId;
      private string _whereJson;
      private string _orderByJson;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// The profile ID to retrieve shared entities for
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// Sort order
      /// </summary>
      public string OrderByJson
      {
        get
        {
          return _orderByJson;
        }
        set
        {
          __isset.orderByJson = true;
          this._orderByJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool whereJson;
        public bool orderByJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public Entity_GetSharedEntitiesListForProfileId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  WhereJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  OrderByJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  MaxReturn = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSharedEntitiesListForProfileId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (WhereJson != null && __isset.whereJson) {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(WhereJson);
            oprot.WriteFieldEnd();
          }
          if (OrderByJson != null && __isset.orderByJson) {
            field.Name = "orderByJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OrderByJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxReturn) {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxReturn);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSharedEntitiesListForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (WhereJson != null && __isset.whereJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WhereJson: ");
          __sb.Append(WhereJson);
        }
        if (OrderByJson != null && __isset.orderByJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderByJson: ");
          __sb.Append(OrderByJson);
        }
        if (__isset.maxReturn) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxReturn: ");
          __sb.Append(MaxReturn);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetSharedEntitiesListForProfileId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetSharedEntitiesListForProfileId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetSharedEntitiesListForProfileId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetSharedEntitiesListForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetListCount_args : TBase
    {
      private string _whereJson;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool whereJson;
        public bool clientIndex;
      }

      public Entity_GetListCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  WhereJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetListCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (WhereJson != null && __isset.whereJson) {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(WhereJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetListCount_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WhereJson: ");
          __sb.Append(WhereJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetListCount_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetListCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetListCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetListCount_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetPage_args : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// The json context for the page request.
      /// See the portal appendix documentation for format
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonContext;
        public bool clientIndex;
      }

      public Entity_GetPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonContext = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetPage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonContext != null && __isset.jsonContext) {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonContext);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonContext: ");
          __sb.Append(JsonContext);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetPage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetPage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetPage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetPageOffset_args : TBase
    {
      private string _context;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// The context string returned from the server from a previous call
      /// to GetPage() or GetPageOffset()
      /// </summary>
      public string Context
      {
        get
        {
          return _context;
        }
        set
        {
          __isset.context = true;
          this._context = value;
        }
      }

      /// <summary>
      /// The positive or negative page offset to fetch. Uses the last page
      /// retrieved using the context string to determine a starting point.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool context;
        public bool pageOffset;
        public bool clientIndex;
      }

      public Entity_GetPageOffset_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Context = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  PageOffset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetPageOffset_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Context != null && __isset.context) {
            field.Name = "context";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Context);
            oprot.WriteFieldEnd();
          }
          if (__isset.pageOffset) {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PageOffset);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetPageOffset_args(");
        bool __first = true;
        if (Context != null && __isset.context) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Context: ");
          __sb.Append(Context);
        }
        if (__isset.pageOffset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageOffset: ");
          __sb.Append(PageOffset);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_GetPageOffset_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_GetPageOffset_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_GetPageOffset_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_GetPageOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_IncrementUserEntityData_args : TBase
    {
      private string _entityId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The entity to increment
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The subset of data to increment
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Entity_IncrementUserEntityData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_IncrementUserEntityData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_IncrementUserEntityData_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_IncrementUserEntityData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_IncrementUserEntityData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_IncrementUserEntityData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_IncrementUserEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_IncrementSharedUserEntityData_args : TBase
    {
      private string _entityId;
      private string _targetProfileId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The entity to increment
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Profile ID of the entity owner
      /// </summary>
      public string TargetProfileId
      {
        get
        {
          return _targetProfileId;
        }
        set
        {
          __isset.targetProfileId = true;
          this._targetProfileId = value;
        }
      }

      /// <summary>
      /// The subset of data to increment
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool targetProfileId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Entity_IncrementSharedUserEntityData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  TargetProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_IncrementSharedUserEntityData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (TargetProfileId != null && __isset.targetProfileId) {
            field.Name = "targetProfileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TargetProfileId);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_IncrementSharedUserEntityData_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (TargetProfileId != null && __isset.targetProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetProfileId: ");
          __sb.Append(TargetProfileId);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Entity_IncrementSharedUserEntityData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Entity_IncrementSharedUserEntityData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Entity_IncrementSharedUserEntityData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Entity_IncrementSharedUserEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_SendEvent_args : TBase
    {
      private string _toProfileId;
      private string _eventType;
      private string _jsonEventData;
      private int _clientIndex;

      /// <summary>
      /// The id of the user who is being sent the event
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// The user-defined type of the event.
      /// </summary>
      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      /// <summary>
      /// The user-defined data for this event encoded in JSON.
      /// </summary>
      public string JsonEventData
      {
        get
        {
          return _jsonEventData;
        }
        set
        {
          __isset.jsonEventData = true;
          this._jsonEventData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool toProfileId;
        public bool eventType;
        public bool jsonEventData;
        public bool clientIndex;
      }

      public Event_SendEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ToProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonEventData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_SendEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ToProfileId != null && __isset.toProfileId) {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ToProfileId);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          if (JsonEventData != null && __isset.jsonEventData) {
            field.Name = "jsonEventData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEventData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_SendEvent_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToProfileId: ");
          __sb.Append(ToProfileId);
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        if (JsonEventData != null && __isset.jsonEventData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEventData: ");
          __sb.Append(JsonEventData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_SendEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Event_SendEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_SendEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_SendEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_UpdateIncomingEventData_args : TBase
    {
      private string _evId;
      private string _jsonEventData;
      private int _clientIndex;

      /// <summary>
      /// The event id
      /// </summary>
      public string EvId
      {
        get
        {
          return _evId;
        }
        set
        {
          __isset.evId = true;
          this._evId = value;
        }
      }

      /// <summary>
      /// The user-defined data for this event encoded in JSON.
      /// </summary>
      public string JsonEventData
      {
        get
        {
          return _jsonEventData;
        }
        set
        {
          __isset.jsonEventData = true;
          this._jsonEventData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool evId;
        public bool jsonEventData;
        public bool clientIndex;
      }

      public Event_UpdateIncomingEventData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EvId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonEventData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_UpdateIncomingEventData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EvId != null && __isset.evId) {
            field.Name = "evId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EvId);
            oprot.WriteFieldEnd();
          }
          if (JsonEventData != null && __isset.jsonEventData) {
            field.Name = "jsonEventData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEventData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_UpdateIncomingEventData_args(");
        bool __first = true;
        if (EvId != null && __isset.evId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EvId: ");
          __sb.Append(EvId);
        }
        if (JsonEventData != null && __isset.jsonEventData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEventData: ");
          __sb.Append(JsonEventData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_UpdateIncomingEventData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Event_UpdateIncomingEventData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_UpdateIncomingEventData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_UpdateIncomingEventData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_DeleteIncomingEvent_args : TBase
    {
      private string _evId;
      private int _clientIndex;

      /// <summary>
      /// The event id
      /// </summary>
      public string EvId
      {
        get
        {
          return _evId;
        }
        set
        {
          __isset.evId = true;
          this._evId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool evId;
        public bool clientIndex;
      }

      public Event_DeleteIncomingEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EvId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_DeleteIncomingEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EvId != null && __isset.evId) {
            field.Name = "evId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EvId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_DeleteIncomingEvent_args(");
        bool __first = true;
        if (EvId != null && __isset.evId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EvId: ");
          __sb.Append(EvId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_DeleteIncomingEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Event_DeleteIncomingEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_DeleteIncomingEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_DeleteIncomingEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_GetEvents_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Event_GetEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_GetEvents_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_GetEvents_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Event_GetEvents_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Event_GetEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Event_GetEvents_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Event_GetEvents_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_UploadFile_args : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private bool _shareable;
      private bool _replaceIfExists;
      private string _localPath;
      private int _clientIndex;

      /// <summary>
      /// The desired cloud path of the file
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// The desired cloud fileName of the file
      /// </summary>
      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      /// <summary>
      /// True if the file is shareable
      /// </summary>
      public bool Shareable
      {
        get
        {
          return _shareable;
        }
        set
        {
          __isset.shareable = true;
          this._shareable = value;
        }
      }

      /// <summary>
      /// Whether to replace file if it exists
      /// </summary>
      public bool ReplaceIfExists
      {
        get
        {
          return _replaceIfExists;
        }
        set
        {
          __isset.replaceIfExists = true;
          this._replaceIfExists = value;
        }
      }

      /// <summary>
      /// The path and fileName of the local file
      /// </summary>
      public string LocalPath
      {
        get
        {
          return _localPath;
        }
        set
        {
          __isset.localPath = true;
          this._localPath = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool cloudFilename;
        public bool shareable;
        public bool replaceIfExists;
        public bool localPath;
        public bool clientIndex;
      }

      public File_UploadFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CloudFilename = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  Shareable = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  ReplaceIfExists = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  LocalPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_UploadFile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (CloudFilename != null && __isset.cloudFilename) {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudFilename);
            oprot.WriteFieldEnd();
          }
          if (__isset.shareable) {
            field.Name = "shareable";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Shareable);
            oprot.WriteFieldEnd();
          }
          if (__isset.replaceIfExists) {
            field.Name = "replaceIfExists";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ReplaceIfExists);
            oprot.WriteFieldEnd();
          }
          if (LocalPath != null && __isset.localPath) {
            field.Name = "localPath";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LocalPath);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_UploadFile_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudFilename: ");
          __sb.Append(CloudFilename);
        }
        if (__isset.shareable) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Shareable: ");
          __sb.Append(Shareable);
        }
        if (__isset.replaceIfExists) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReplaceIfExists: ");
          __sb.Append(ReplaceIfExists);
        }
        if (LocalPath != null && __isset.localPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LocalPath: ");
          __sb.Append(LocalPath);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_UploadFile_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_UploadFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_UploadFile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_UploadFile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_CancelUpload_args : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// Upload ID of the file to cancel
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_CancelUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UploadId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_CancelUpload_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UploadId != null && __isset.uploadId) {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UploadId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_CancelUpload_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UploadId: ");
          __sb.Append(UploadId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_CancelUpload_result : TBase
    {

      public File_CancelUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_CancelUpload_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_CancelUpload_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetUploadProgress_args : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// The id of the upload
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_GetUploadProgress_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UploadId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetUploadProgress_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UploadId != null && __isset.uploadId) {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UploadId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetUploadProgress_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UploadId: ");
          __sb.Append(UploadId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetUploadProgress_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_GetUploadProgress_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetUploadProgress_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetUploadProgress_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetUploadBytesTransferred_args : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// The id of the upload
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_GetUploadBytesTransferred_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UploadId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetUploadBytesTransferred_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UploadId != null && __isset.uploadId) {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UploadId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetUploadBytesTransferred_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UploadId: ");
          __sb.Append(UploadId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetUploadBytesTransferred_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_GetUploadBytesTransferred_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetUploadBytesTransferred_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetUploadBytesTransferred_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetUploadTotalBytesToTransfer_args : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// The id of the upload
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_GetUploadTotalBytesToTransfer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UploadId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetUploadTotalBytesToTransfer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UploadId != null && __isset.uploadId) {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UploadId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetUploadTotalBytesToTransfer_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UploadId: ");
          __sb.Append(UploadId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetUploadTotalBytesToTransfer_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_GetUploadTotalBytesToTransfer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetUploadTotalBytesToTransfer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetUploadTotalBytesToTransfer_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_ListUserFiles_SFO_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public File_ListUserFiles_SFO_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_ListUserFiles_SFO_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_ListUserFiles_SFO_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_ListUserFiles_SFO_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_ListUserFiles_SFO_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_ListUserFiles_SFO_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_ListUserFiles_SFO_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_ListUserFiles_SNSFO_args : TBase
    {
      private string _cloudPath;
      private bool _recurse;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// Whether to recurse down the path
      /// </summary>
      public bool Recurse
      {
        get
        {
          return _recurse;
        }
        set
        {
          __isset.recurse = true;
          this._recurse = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool recurse;
        public bool clientIndex;
      }

      public File_ListUserFiles_SNSFO_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  Recurse = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_ListUserFiles_SNSFO_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (__isset.recurse) {
            field.Name = "recurse";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Recurse);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_ListUserFiles_SNSFO_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (__isset.recurse) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recurse: ");
          __sb.Append(Recurse);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_ListUserFiles_SNSFO_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_ListUserFiles_SNSFO_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_ListUserFiles_SNSFO_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_ListUserFiles_SNSFO_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_DeleteUserFile_args : TBase
    {
      private string _cloudPath;
      private string _cloudFileName;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFileName
      {
        get
        {
          return _cloudFileName;
        }
        set
        {
          __isset.cloudFileName = true;
          this._cloudFileName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool cloudFileName;
        public bool clientIndex;
      }

      public File_DeleteUserFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CloudFileName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_DeleteUserFile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (CloudFileName != null && __isset.cloudFileName) {
            field.Name = "cloudFileName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudFileName);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_DeleteUserFile_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (CloudFileName != null && __isset.cloudFileName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudFileName: ");
          __sb.Append(CloudFileName);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_DeleteUserFile_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_DeleteUserFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_DeleteUserFile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_DeleteUserFile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_DeleteUserFiles_args : TBase
    {
      private string _cloudPath;
      private bool _recurse;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// Whether to recurse down the path
      /// </summary>
      public bool Recurse
      {
        get
        {
          return _recurse;
        }
        set
        {
          __isset.recurse = true;
          this._recurse = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool recurse;
        public bool clientIndex;
      }

      public File_DeleteUserFiles_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  Recurse = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_DeleteUserFiles_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (__isset.recurse) {
            field.Name = "recurse";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Recurse);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_DeleteUserFiles_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (__isset.recurse) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Recurse: ");
          __sb.Append(Recurse);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_DeleteUserFiles_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_DeleteUserFiles_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_DeleteUserFiles_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_DeleteUserFiles_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetCDNUrl_args : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// Name of file
      /// </summary>
      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool cloudFilename;
        public bool clientIndex;
      }

      public File_GetCDNUrl_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CloudFilename = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetCDNUrl_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (CloudFilename != null && __isset.cloudFilename) {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudFilename);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetCDNUrl_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudFilename: ");
          __sb.Append(CloudFilename);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetCDNUrl_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_GetCDNUrl_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetCDNUrl_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetCDNUrl_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_FindUserByUniversalId_args : TBase
    {
      private string _searchText;
      private int _maxResults;
      private int _clientIndex;

      /// <summary>
      /// Universal ID text on which to search.
      /// </summary>
      public string SearchText
      {
        get
        {
          return _searchText;
        }
        set
        {
          __isset.searchText = true;
          this._searchText = value;
        }
      }

      /// <summary>
      /// Maximum number of results to return.
      /// </summary>
      public int MaxResults
      {
        get
        {
          return _maxResults;
        }
        set
        {
          __isset.maxResults = true;
          this._maxResults = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool searchText;
        public bool maxResults;
        public bool clientIndex;
      }

      public Friend_FindUserByUniversalId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SearchText = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MaxResults = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_FindUserByUniversalId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SearchText != null && __isset.searchText) {
            field.Name = "searchText";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SearchText);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxResults) {
            field.Name = "maxResults";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxResults);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_FindUserByUniversalId_args(");
        bool __first = true;
        if (SearchText != null && __isset.searchText) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SearchText: ");
          __sb.Append(SearchText);
        }
        if (__isset.maxResults) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxResults: ");
          __sb.Append(MaxResults);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_FindUserByUniversalId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_FindUserByUniversalId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_FindUserByUniversalId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_FindUserByUniversalId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetProfileInfoForCredential_args : TBase
    {
      private string _externalId;
      private string _authenticationType;
      private int _clientIndex;

      /// <summary>
      /// External id of the user to find
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// The authentication type used for the user's ID
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool externalId;
        public bool authenticationType;
        public bool clientIndex;
      }

      public Friend_GetProfileInfoForCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ExternalId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AuthenticationType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetProfileInfoForCredential_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ExternalId != null && __isset.externalId) {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalId);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationType != null && __isset.authenticationType) {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetProfileInfoForCredential_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalId: ");
          __sb.Append(ExternalId);
        }
        if (AuthenticationType != null && __isset.authenticationType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationType: ");
          __sb.Append(AuthenticationType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetProfileInfoForCredential_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_GetProfileInfoForCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetProfileInfoForCredential_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetProfileInfoForCredential_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetProfileInfoForExternalAuthId_args : TBase
    {
      private string _externalId;
      private string _externalAuthType;
      private int _clientIndex;

      /// <summary>
      /// External id of the friend to find
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// The external authentication type used for this friend's external id
      /// </summary>
      public string ExternalAuthType
      {
        get
        {
          return _externalAuthType;
        }
        set
        {
          __isset.externalAuthType = true;
          this._externalAuthType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool externalId;
        public bool externalAuthType;
        public bool clientIndex;
      }

      public Friend_GetProfileInfoForExternalAuthId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ExternalId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ExternalAuthType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetProfileInfoForExternalAuthId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ExternalId != null && __isset.externalId) {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalId);
            oprot.WriteFieldEnd();
          }
          if (ExternalAuthType != null && __isset.externalAuthType) {
            field.Name = "externalAuthType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalAuthType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetProfileInfoForExternalAuthId_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalId: ");
          __sb.Append(ExternalId);
        }
        if (ExternalAuthType != null && __isset.externalAuthType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalAuthType: ");
          __sb.Append(ExternalAuthType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetProfileInfoForExternalAuthId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_GetProfileInfoForExternalAuthId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetProfileInfoForExternalAuthId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetProfileInfoForExternalAuthId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetExternalIdForProfileId_args : TBase
    {
      private string _profileId;
      private string _authenticationType;
      private int _clientIndex;

      /// <summary>
      /// Profile (user) ID.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Associated authentication type.
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool authenticationType;
        public bool clientIndex;
      }

      public Friend_GetExternalIdForProfileId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AuthenticationType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetExternalIdForProfileId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationType != null && __isset.authenticationType) {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetExternalIdForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (AuthenticationType != null && __isset.authenticationType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationType: ");
          __sb.Append(AuthenticationType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetExternalIdForProfileId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_GetExternalIdForProfileId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetExternalIdForProfileId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetExternalIdForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ReadFriendEntity_args : TBase
    {
      private string _entityId;
      private string _friendId;
      private int _clientIndex;

      /// <summary>
      /// Id of entity to retrieve.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Profile Id of friend who owns entity.
      /// </summary>
      public string FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool friendId;
        public bool clientIndex;
      }

      public Friend_ReadFriendEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FriendId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ReadFriendEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (FriendId != null && __isset.friendId) {
            field.Name = "friendId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FriendId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ReadFriendEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (FriendId != null && __isset.friendId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendId: ");
          __sb.Append(FriendId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ReadFriendEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_ReadFriendEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ReadFriendEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ReadFriendEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ReadFriendsEntities_args : TBase
    {
      private string _entityType;
      private int _clientIndex;

      /// <summary>
      /// Types of entities to retrieve.
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool clientIndex;
      }

      public Friend_ReadFriendsEntities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ReadFriendsEntities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ReadFriendsEntities_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ReadFriendsEntities_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_ReadFriendsEntities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ReadFriendsEntities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ReadFriendsEntities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ReadFriendUserState_args : TBase
    {
      private string _friendId;
      private int _clientIndex;

      /// <summary>
      /// Profile Id of friend to retrieve user state for.
      /// </summary>
      public string FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendId;
        public bool clientIndex;
      }

      public Friend_ReadFriendUserState_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  FriendId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ReadFriendUserState_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (FriendId != null && __isset.friendId) {
            field.Name = "friendId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FriendId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ReadFriendUserState_args(");
        bool __first = true;
        if (FriendId != null && __isset.friendId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendId: ");
          __sb.Append(FriendId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ReadFriendUserState_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_ReadFriendUserState_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ReadFriendUserState_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ReadFriendUserState_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetSummaryDataForProfileId_args : TBase
    {
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// Profile Id of user to retrieve player state for.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool clientIndex;
      }

      public Friend_GetSummaryDataForProfileId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetSummaryDataForProfileId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetSummaryDataForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetSummaryDataForProfileId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_GetSummaryDataForProfileId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetSummaryDataForProfileId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetSummaryDataForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_FindUsersByExactName_args : TBase
    {
      private string _searchText;
      private int _maxResults;
      private int _clientIndex;

      /// <summary>
      /// The string to search for.
      /// </summary>
      public string SearchText
      {
        get
        {
          return _searchText;
        }
        set
        {
          __isset.searchText = true;
          this._searchText = value;
        }
      }

      /// <summary>
      /// Maximum number of results to return.
      /// </summary>
      public int MaxResults
      {
        get
        {
          return _maxResults;
        }
        set
        {
          __isset.maxResults = true;
          this._maxResults = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool searchText;
        public bool maxResults;
        public bool clientIndex;
      }

      public Friend_FindUsersByExactName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SearchText = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MaxResults = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_FindUsersByExactName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SearchText != null && __isset.searchText) {
            field.Name = "searchText";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SearchText);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxResults) {
            field.Name = "maxResults";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxResults);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_FindUsersByExactName_args(");
        bool __first = true;
        if (SearchText != null && __isset.searchText) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SearchText: ");
          __sb.Append(SearchText);
        }
        if (__isset.maxResults) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxResults: ");
          __sb.Append(MaxResults);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_FindUsersByExactName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_FindUsersByExactName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_FindUsersByExactName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_FindUsersByExactName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_FindUsersBySubstrName_args : TBase
    {
      private string _searchText;
      private int _maxResults;
      private int _clientIndex;

      /// <summary>
      /// The substring to search for. Minimum length of 3 characters.
      /// </summary>
      public string SearchText
      {
        get
        {
          return _searchText;
        }
        set
        {
          __isset.searchText = true;
          this._searchText = value;
        }
      }

      /// <summary>
      /// Maximum number of results to return.
      /// </summary>
      public int MaxResults
      {
        get
        {
          return _maxResults;
        }
        set
        {
          __isset.maxResults = true;
          this._maxResults = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool searchText;
        public bool maxResults;
        public bool clientIndex;
      }

      public Friend_FindUsersBySubstrName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SearchText = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MaxResults = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_FindUsersBySubstrName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SearchText != null && __isset.searchText) {
            field.Name = "searchText";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SearchText);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxResults) {
            field.Name = "maxResults";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxResults);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_FindUsersBySubstrName_args(");
        bool __first = true;
        if (SearchText != null && __isset.searchText) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SearchText: ");
          __sb.Append(SearchText);
        }
        if (__isset.maxResults) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxResults: ");
          __sb.Append(MaxResults);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_FindUsersBySubstrName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_FindUsersBySubstrName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_FindUsersBySubstrName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_FindUsersBySubstrName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ListFriends_args : TBase
    {
      private Ruyi.SDK.BrainCloudApi.FriendPlatform _friendPlatform;
      private bool _includeSummaryData;
      private int _clientIndex;

      /// <summary>
      /// Friend platform to query.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.FriendPlatform"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.FriendPlatform FriendPlatform
      {
        get
        {
          return _friendPlatform;
        }
        set
        {
          __isset.friendPlatform = true;
          this._friendPlatform = value;
        }
      }

      /// <summary>
      /// True if including summary data; false otherwise.
      /// </summary>
      public bool IncludeSummaryData
      {
        get
        {
          return _includeSummaryData;
        }
        set
        {
          __isset.includeSummaryData = true;
          this._includeSummaryData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendPlatform;
        public bool includeSummaryData;
        public bool clientIndex;
      }

      public Friend_ListFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  FriendPlatform = (Ruyi.SDK.BrainCloudApi.FriendPlatform)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  IncludeSummaryData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ListFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.friendPlatform) {
            field.Name = "friendPlatform";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)FriendPlatform);
            oprot.WriteFieldEnd();
          }
          if (__isset.includeSummaryData) {
            field.Name = "includeSummaryData";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeSummaryData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ListFriends_args(");
        bool __first = true;
        if (__isset.friendPlatform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FriendPlatform: ");
          __sb.Append(FriendPlatform);
        }
        if (__isset.includeSummaryData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeSummaryData: ");
          __sb.Append(IncludeSummaryData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_ListFriends_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_ListFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_ListFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_ListFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_AddFriends_args : TBase
    {
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs.
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileIds;
        public bool clientIndex;
      }

      public Friend_AddFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    ProfileIds = new List<string>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      string _elem10;
                      _elem10 = iprot.ReadString();
                      ProfileIds.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_AddFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileIds != null && __isset.profileIds) {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProfileIds.Count));
              foreach (string _iter11 in ProfileIds)
              {
                oprot.WriteString(_iter11);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_AddFriends_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileIds: ");
          __sb.Append(ProfileIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_AddFriends_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_AddFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_AddFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_AddFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_RemoveFriends_args : TBase
    {
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs.
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileIds;
        public bool clientIndex;
      }

      public Friend_RemoveFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    ProfileIds = new List<string>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      string _elem14;
                      _elem14 = iprot.ReadString();
                      ProfileIds.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_RemoveFriends_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileIds != null && __isset.profileIds) {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProfileIds.Count));
              foreach (string _iter15 in ProfileIds)
              {
                oprot.WriteString(_iter15);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_RemoveFriends_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileIds: ");
          __sb.Append(ProfileIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_RemoveFriends_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_RemoveFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_RemoveFriends_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_RemoveFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetUsersOnlineStatus_args : TBase
    {
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs.
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileIds;
        public bool clientIndex;
      }

      public Friend_GetUsersOnlineStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    ProfileIds = new List<string>();
                    TList _list16 = iprot.ReadListBegin();
                    for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      string _elem18;
                      _elem18 = iprot.ReadString();
                      ProfileIds.Add(_elem18);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetUsersOnlineStatus_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileIds != null && __isset.profileIds) {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProfileIds.Count));
              foreach (string _iter19 in ProfileIds)
              {
                oprot.WriteString(_iter19);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetUsersOnlineStatus_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileIds: ");
          __sb.Append(ProfileIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Friend_GetUsersOnlineStatus_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Friend_GetUsersOnlineStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Friend_GetUsersOnlineStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Friend_GetUsersOnlineStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadAllGamification_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadAllGamification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadAllGamification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadAllGamification_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadAllGamification_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadAllGamification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadAllGamification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadAllGamification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadMilestones_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadMilestones_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadMilestones_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadMilestones_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadMilestones_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadMilestones_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadMilestones_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadAchievements_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadAchievements_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadAchievements_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadAchievements_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadAchievements_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadAchievements_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadAchievements_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadAchievements_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadXpLevelsMetaData_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Gamification_ReadXpLevelsMetaData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadXpLevelsMetaData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadXpLevelsMetaData_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadXpLevelsMetaData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadXpLevelsMetaData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadXpLevelsMetaData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadXpLevelsMetaData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadAchievedAchievements_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadAchievedAchievements_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadAchievedAchievements_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadAchievedAchievements_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadAchievedAchievements_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadAchievedAchievements_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadAchievedAchievements_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadAchievedAchievements_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadCompletedMilestones_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadCompletedMilestones_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadCompletedMilestones_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadCompletedMilestones_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadCompletedMilestones_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadCompletedMilestones_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadCompletedMilestones_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadCompletedMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadInProgressMilestones_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadInProgressMilestones_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadInProgressMilestones_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadInProgressMilestones_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadInProgressMilestones_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadInProgressMilestones_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadInProgressMilestones_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadInProgressMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadMilestonesByCategory_args : TBase
    {
      private string _category;
      private bool _includeMetaData;
      private int _clientIndex;

      /// <summary>
      /// The milestone category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool category;
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadMilestonesByCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadMilestonesByCategory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadMilestonesByCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadMilestonesByCategory_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadMilestonesByCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadMilestonesByCategory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadMilestonesByCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_AwardAchievements_args : TBase
    {
      private List<string> _achievementIds;
      private int _clientIndex;

      /// <summary>
      /// A collection of achievement ids to award
      /// </summary>
      public List<string> AchievementIds
      {
        get
        {
          return _achievementIds;
        }
        set
        {
          __isset.achievementIds = true;
          this._achievementIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool achievementIds;
        public bool clientIndex;
      }

      public Gamification_AwardAchievements_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    AchievementIds = new List<string>();
                    TList _list20 = iprot.ReadListBegin();
                    for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      string _elem22;
                      _elem22 = iprot.ReadString();
                      AchievementIds.Add(_elem22);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_AwardAchievements_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AchievementIds != null && __isset.achievementIds) {
            field.Name = "achievementIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, AchievementIds.Count));
              foreach (string _iter23 in AchievementIds)
              {
                oprot.WriteString(_iter23);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_AwardAchievements_args(");
        bool __first = true;
        if (AchievementIds != null && __isset.achievementIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AchievementIds: ");
          __sb.Append(AchievementIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_AwardAchievements_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_AwardAchievements_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_AwardAchievements_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_AwardAchievements_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuests_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuests_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuests_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuests_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadQuests_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuests_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadCompletedQuests_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadCompletedQuests_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadCompletedQuests_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadCompletedQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadCompletedQuests_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadCompletedQuests_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadCompletedQuests_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadCompletedQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadInProgressQuests_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadInProgressQuests_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadInProgressQuests_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadInProgressQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadInProgressQuests_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadInProgressQuests_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadInProgressQuests_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadInProgressQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadNotStartedQuests_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadNotStartedQuests_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadNotStartedQuests_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadNotStartedQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadNotStartedQuests_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadNotStartedQuests_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadNotStartedQuests_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadNotStartedQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsWithStatus_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsWithStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsWithStatus_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsWithStatus_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsWithStatus_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadQuestsWithStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsWithStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsWithStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsWithBasicPercentage_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsWithBasicPercentage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsWithBasicPercentage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsWithBasicPercentage_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsWithBasicPercentage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadQuestsWithBasicPercentage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsWithBasicPercentage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsWithBasicPercentage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsWithComplexPercentage_args : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsWithComplexPercentage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsWithComplexPercentage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsWithComplexPercentage_args(");
        bool __first = true;
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsWithComplexPercentage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadQuestsWithComplexPercentage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsWithComplexPercentage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsWithComplexPercentage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsByCategory_args : TBase
    {
      private string _category;
      private bool _includeMetaData;
      private int _clientIndex;

      /// <summary>
      /// The quest category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool category;
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsByCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  IncludeMetaData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsByCategory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (__isset.includeMetaData) {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeMetaData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsByCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (__isset.includeMetaData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeMetaData: ");
          __sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ReadQuestsByCategory_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ReadQuestsByCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ReadQuestsByCategory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ReadQuestsByCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ResetMilestones_args : TBase
    {
      private List<string> _milestoneIds;
      private int _clientIndex;

      /// <summary>
      /// List of milestones to reset
      /// </summary>
      public List<string> MilestoneIds
      {
        get
        {
          return _milestoneIds;
        }
        set
        {
          __isset.milestoneIds = true;
          this._milestoneIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool milestoneIds;
        public bool clientIndex;
      }

      public Gamification_ResetMilestones_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    MilestoneIds = new List<string>();
                    TList _list24 = iprot.ReadListBegin();
                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                    {
                      string _elem26;
                      _elem26 = iprot.ReadString();
                      MilestoneIds.Add(_elem26);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ResetMilestones_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MilestoneIds != null && __isset.milestoneIds) {
            field.Name = "milestoneIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, MilestoneIds.Count));
              foreach (string _iter27 in MilestoneIds)
              {
                oprot.WriteString(_iter27);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ResetMilestones_args(");
        bool __first = true;
        if (MilestoneIds != null && __isset.milestoneIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MilestoneIds: ");
          __sb.Append(MilestoneIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Gamification_ResetMilestones_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Gamification_ResetMilestones_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Gamification_ResetMilestones_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Gamification_ResetMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalApp_ReadProperties_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public GlobalApp_ReadProperties_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalApp_ReadProperties_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalApp_ReadProperties_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalApp_ReadProperties_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalApp_ReadProperties_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalApp_ReadProperties_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalApp_ReadProperties_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_CreateEntity_args : TBase
    {
      private string _entityType;
      private long _timeToLive;
      private string _jsonEntityAcl;
      private string _jsonEntityData;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// Sets expiry time for entity in milliseconds if > 0
      /// </summary>
      public long TimeToLive
      {
        get
        {
          return _timeToLive;
        }
        set
        {
          __isset.timeToLive = true;
          this._timeToLive = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool timeToLive;
        public bool jsonEntityAcl;
        public bool jsonEntityData;
        public bool clientIndex;
      }

      public GlobalEntity_CreateEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  TimeToLive = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonEntityAcl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonEntityData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_CreateEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeToLive) {
            field.Name = "timeToLive";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(TimeToLive);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityAcl);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityData != null && __isset.jsonEntityData) {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_CreateEntity_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (__isset.timeToLive) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TimeToLive: ");
          __sb.Append(TimeToLive);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityAcl: ");
          __sb.Append(JsonEntityAcl);
        }
        if (JsonEntityData != null && __isset.jsonEntityData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityData: ");
          __sb.Append(JsonEntityData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_CreateEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_CreateEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_CreateEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_CreateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_CreateEntityWithIndexedId_args : TBase
    {
      private string _entityType;
      private string _indexedId;
      private long _timeToLive;
      private string _jsonEntityAcl;
      private string _jsonEntityData;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// A secondary ID that will be indexed
      /// </summary>
      public string IndexedId
      {
        get
        {
          return _indexedId;
        }
        set
        {
          __isset.indexedId = true;
          this._indexedId = value;
        }
      }

      /// <summary>
      /// Sets expiry time for entity in milliseconds if > 0
      /// </summary>
      public long TimeToLive
      {
        get
        {
          return _timeToLive;
        }
        set
        {
          __isset.timeToLive = true;
          this._timeToLive = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityType;
        public bool indexedId;
        public bool timeToLive;
        public bool jsonEntityAcl;
        public bool jsonEntityData;
        public bool clientIndex;
      }

      public GlobalEntity_CreateEntityWithIndexedId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  IndexedId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  TimeToLive = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonEntityAcl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  JsonEntityData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_CreateEntityWithIndexedId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (IndexedId != null && __isset.indexedId) {
            field.Name = "indexedId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(IndexedId);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeToLive) {
            field.Name = "timeToLive";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(TimeToLive);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityAcl);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityData != null && __isset.jsonEntityData) {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_CreateEntityWithIndexedId_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (IndexedId != null && __isset.indexedId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IndexedId: ");
          __sb.Append(IndexedId);
        }
        if (__isset.timeToLive) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TimeToLive: ");
          __sb.Append(TimeToLive);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityAcl: ");
          __sb.Append(JsonEntityAcl);
        }
        if (JsonEntityData != null && __isset.jsonEntityData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityData: ");
          __sb.Append(JsonEntityData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_CreateEntityWithIndexedId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_CreateEntityWithIndexedId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_CreateEntityWithIndexedId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_CreateEntityWithIndexedId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntity_args : TBase
    {
      private string _entityId;
      private int _version;
      private string _jsonEntityData;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to update
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool version;
        public bool jsonEntityData;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonEntityData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityData != null && __isset.jsonEntityData) {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (JsonEntityData != null && __isset.jsonEntityData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityData: ");
          __sb.Append(JsonEntityData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_UpdateEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntityAcl_args : TBase
    {
      private string _entityId;
      private int _version;
      private string _jsonEntityAcl;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to update
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json.
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool version;
        public bool jsonEntityAcl;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntityAcl_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonEntityAcl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntityAcl_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonEntityAcl);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntityAcl_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonEntityAcl: ");
          __sb.Append(JsonEntityAcl);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntityAcl_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_UpdateEntityAcl_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntityAcl_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntityAcl_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntityTimeToLive_args : TBase
    {
      private string _entityId;
      private int _version;
      private long _timeToLive;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to update
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// Sets expiry time for entity in milliseconds if > 0
      /// </summary>
      public long TimeToLive
      {
        get
        {
          return _timeToLive;
        }
        set
        {
          __isset.timeToLive = true;
          this._timeToLive = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool version;
        public bool timeToLive;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntityTimeToLive_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  TimeToLive = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntityTimeToLive_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeToLive) {
            field.Name = "timeToLive";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(TimeToLive);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntityTimeToLive_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.timeToLive) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TimeToLive: ");
          __sb.Append(TimeToLive);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntityTimeToLive_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_UpdateEntityTimeToLive_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntityTimeToLive_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntityTimeToLive_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_DeleteEntity_args : TBase
    {
      private string _entityId;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to delete
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool version;
        public bool clientIndex;
      }

      public GlobalEntity_DeleteEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Version = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_DeleteEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_DeleteEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_DeleteEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_DeleteEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_DeleteEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_DeleteEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_ReadEntity_args : TBase
    {
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool clientIndex;
      }

      public GlobalEntity_ReadEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_ReadEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_ReadEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_ReadEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_ReadEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_ReadEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_ReadEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetList_args : TBase
    {
      private string _whereJson;
      private string _orderByJson;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// Sort order
      /// </summary>
      public string OrderByJson
      {
        get
        {
          return _orderByJson;
        }
        set
        {
          __isset.orderByJson = true;
          this._orderByJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool whereJson;
        public bool orderByJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public GlobalEntity_GetList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  WhereJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  OrderByJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  MaxReturn = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (WhereJson != null && __isset.whereJson) {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(WhereJson);
            oprot.WriteFieldEnd();
          }
          if (OrderByJson != null && __isset.orderByJson) {
            field.Name = "orderByJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OrderByJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxReturn) {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxReturn);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetList_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WhereJson: ");
          __sb.Append(WhereJson);
        }
        if (OrderByJson != null && __isset.orderByJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderByJson: ");
          __sb.Append(OrderByJson);
        }
        if (__isset.maxReturn) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxReturn: ");
          __sb.Append(MaxReturn);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetList_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_GetList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetListByIndexedId_args : TBase
    {
      private string _entityIndexedId;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// The entity indexed Id
      /// </summary>
      public string EntityIndexedId
      {
        get
        {
          return _entityIndexedId;
        }
        set
        {
          __isset.entityIndexedId = true;
          this._entityIndexedId = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityIndexedId;
        public bool maxReturn;
        public bool clientIndex;
      }

      public GlobalEntity_GetListByIndexedId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityIndexedId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MaxReturn = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetListByIndexedId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityIndexedId != null && __isset.entityIndexedId) {
            field.Name = "entityIndexedId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityIndexedId);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxReturn) {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxReturn);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetListByIndexedId_args(");
        bool __first = true;
        if (EntityIndexedId != null && __isset.entityIndexedId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityIndexedId: ");
          __sb.Append(EntityIndexedId);
        }
        if (__isset.maxReturn) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxReturn: ");
          __sb.Append(MaxReturn);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetListByIndexedId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_GetListByIndexedId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetListByIndexedId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetListByIndexedId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetListCount_args : TBase
    {
      private string _whereJson;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool whereJson;
        public bool clientIndex;
      }

      public GlobalEntity_GetListCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  WhereJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetListCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (WhereJson != null && __isset.whereJson) {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(WhereJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetListCount_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WhereJson: ");
          __sb.Append(WhereJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetListCount_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_GetListCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetListCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetListCount_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetPage_args : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// The json context for the page request.
      /// See the portal appendix documentation for format
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonContext;
        public bool clientIndex;
      }

      public GlobalEntity_GetPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonContext = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetPage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonContext != null && __isset.jsonContext) {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonContext);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonContext: ");
          __sb.Append(JsonContext);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetPage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_GetPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetPage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetPage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetPageOffset_args : TBase
    {
      private string _context;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// The context string returned from the server from a previous call
      /// to GetPage() or GetPageOffset()
      /// </summary>
      public string Context
      {
        get
        {
          return _context;
        }
        set
        {
          __isset.context = true;
          this._context = value;
        }
      }

      /// <summary>
      /// The positive or negative page offset to fetch. Uses the last page
      /// retrieved using the context string to determine a starting point.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool context;
        public bool pageOffset;
        public bool clientIndex;
      }

      public GlobalEntity_GetPageOffset_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Context = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  PageOffset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetPageOffset_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Context != null && __isset.context) {
            field.Name = "context";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Context);
            oprot.WriteFieldEnd();
          }
          if (__isset.pageOffset) {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PageOffset);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetPageOffset_args(");
        bool __first = true;
        if (Context != null && __isset.context) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Context: ");
          __sb.Append(Context);
        }
        if (__isset.pageOffset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageOffset: ");
          __sb.Append(PageOffset);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetPageOffset_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_GetPageOffset_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetPageOffset_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetPageOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_IncrementGlobalEntityData_args : TBase
    {
      private string _entityId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The entity to increment
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The subset of data to increment
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool jsonData;
        public bool clientIndex;
      }

      public GlobalEntity_IncrementGlobalEntityData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_IncrementGlobalEntityData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_IncrementGlobalEntityData_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_IncrementGlobalEntityData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_IncrementGlobalEntityData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_IncrementGlobalEntityData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_IncrementGlobalEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetRandomEntitiesMatching_args : TBase
    {
      private string _whereJson;
      private int _maxReturn;
      private int _clientIndex;

      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool whereJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public GlobalEntity_GetRandomEntitiesMatching_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  WhereJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MaxReturn = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetRandomEntitiesMatching_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (WhereJson != null && __isset.whereJson) {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(WhereJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxReturn) {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxReturn);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetRandomEntitiesMatching_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WhereJson: ");
          __sb.Append(WhereJson);
        }
        if (__isset.maxReturn) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxReturn: ");
          __sb.Append(MaxReturn);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_GetRandomEntitiesMatching_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_GetRandomEntitiesMatching_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_GetRandomEntitiesMatching_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_GetRandomEntitiesMatching_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntityOwnerAndAcl_args : TBase
    {
      private string _entityId;
      private long _version;
      private string _ownerId;
      private string _acl;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The owner ID
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// The entity's access control list
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool version;
        public bool ownerId;
        public bool acl;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntityOwnerAndAcl_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  OwnerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Acl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntityOwnerAndAcl_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (OwnerId != null && __isset.ownerId) {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OwnerId);
            oprot.WriteFieldEnd();
          }
          if (Acl != null && __isset.acl) {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Acl);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntityOwnerAndAcl_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (OwnerId != null && __isset.ownerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OwnerId: ");
          __sb.Append(OwnerId);
        }
        if (Acl != null && __isset.acl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Acl: ");
          __sb.Append(Acl);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_UpdateEntityOwnerAndAcl_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_UpdateEntityOwnerAndAcl_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_UpdateEntityOwnerAndAcl_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_UpdateEntityOwnerAndAcl_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_MakeSystemEntity_args : TBase
    {
      private string _entityId;
      private long _version;
      private string _acl;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The entity's access control list
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool entityId;
        public bool version;
        public bool acl;
        public bool clientIndex;
      }

      public GlobalEntity_MakeSystemEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Acl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_MakeSystemEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (Acl != null && __isset.acl) {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Acl);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_MakeSystemEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (Acl != null && __isset.acl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Acl: ");
          __sb.Append(Acl);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalEntity_MakeSystemEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalEntity_MakeSystemEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalEntity_MakeSystemEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalEntity_MakeSystemEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ReadAllGlobalStats_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public GlobalStatistics_ReadAllGlobalStats_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ReadAllGlobalStats_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ReadAllGlobalStats_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ReadAllGlobalStats_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalStatistics_ReadAllGlobalStats_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ReadAllGlobalStats_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ReadAllGlobalStats_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ReadGlobalStatsSubset_args : TBase
    {
      private List<string> _globalStats;
      private int _clientIndex;

      /// <summary>
      /// A list containing the statistics to read
      /// </summary>
      public List<string> GlobalStats
      {
        get
        {
          return _globalStats;
        }
        set
        {
          __isset.globalStats = true;
          this._globalStats = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool globalStats;
        public bool clientIndex;
      }

      public GlobalStatistics_ReadGlobalStatsSubset_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    GlobalStats = new List<string>();
                    TList _list28 = iprot.ReadListBegin();
                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                    {
                      string _elem30;
                      _elem30 = iprot.ReadString();
                      GlobalStats.Add(_elem30);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ReadGlobalStatsSubset_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GlobalStats != null && __isset.globalStats) {
            field.Name = "globalStats";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, GlobalStats.Count));
              foreach (string _iter31 in GlobalStats)
              {
                oprot.WriteString(_iter31);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsSubset_args(");
        bool __first = true;
        if (GlobalStats != null && __isset.globalStats) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GlobalStats: ");
          __sb.Append(GlobalStats);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ReadGlobalStatsSubset_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalStatistics_ReadGlobalStatsSubset_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ReadGlobalStatsSubset_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsSubset_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ReadGlobalStatsForCategory_args : TBase
    {
      private string _category;
      private int _clientIndex;

      /// <summary>
      /// The global statistics category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool category;
        public bool clientIndex;
      }

      public GlobalStatistics_ReadGlobalStatsForCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ReadGlobalStatsForCategory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsForCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ReadGlobalStatsForCategory_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalStatistics_ReadGlobalStatsForCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ReadGlobalStatsForCategory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsForCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_IncrementGlobalStats_args : TBase
    {
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The JSON encoded data to be sent to the server as follows:
      /// {
      ///   stat1: 10,
      ///   stat2: -5.5,
      /// }
      /// would increment stat1 by 10 and decrement stat2 by 5.5.
      /// For the full statistics grammer see the api.braincloudservers.com site.
      /// There are many more complex operations supported such as:
      /// {
      ///   stat1:INC_TO_LIMIT#9#30
      /// }
      /// which increments stat1 by 9 up to a limit of 30.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonData;
        public bool clientIndex;
      }

      public GlobalStatistics_IncrementGlobalStats_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_IncrementGlobalStats_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_IncrementGlobalStats_args(");
        bool __first = true;
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_IncrementGlobalStats_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalStatistics_IncrementGlobalStats_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_IncrementGlobalStats_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_IncrementGlobalStats_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ProcessStatistics_args : TBase
    {
      private Dictionary<string, string> _statisticsData;
      private int _clientIndex;

      /// <summary>
      /// Example data to be passed to method:
      /// {
      ///     "DEAD_CATS": "RESET",
      ///     "LIVES_LEFT": "SET#9",
      ///     "MICE_KILLED": "INC#2",
      ///     "DOG_SCARE_BONUS_POINTS": "INC#10",
      ///     "TREES_CLIMBED": 1
      /// }
      /// </summary>
      public Dictionary<string, string> StatisticsData
      {
        get
        {
          return _statisticsData;
        }
        set
        {
          __isset.statisticsData = true;
          this._statisticsData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statisticsData;
        public bool clientIndex;
      }

      public GlobalStatistics_ProcessStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    StatisticsData = new Dictionary<string, string>();
                    TMap _map32 = iprot.ReadMapBegin();
                    for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                    {
                      string _key34;
                      string _val35;
                      _key34 = iprot.ReadString();
                      _val35 = iprot.ReadString();
                      StatisticsData[_key34] = _val35;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ProcessStatistics_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (StatisticsData != null && __isset.statisticsData) {
            field.Name = "statisticsData";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, StatisticsData.Count));
              foreach (string _iter36 in StatisticsData.Keys)
              {
                oprot.WriteString(_iter36);
                oprot.WriteString(StatisticsData[_iter36]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ProcessStatistics_args(");
        bool __first = true;
        if (StatisticsData != null && __isset.statisticsData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StatisticsData: ");
          __sb.Append(StatisticsData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GlobalStatistics_ProcessStatistics_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GlobalStatistics_ProcessStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GlobalStatistics_ProcessStatistics_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GlobalStatistics_ProcessStatistics_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_AcceptGroupInvitation_args : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_AcceptGroupInvitation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_AcceptGroupInvitation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_AcceptGroupInvitation_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_AcceptGroupInvitation_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_AcceptGroupInvitation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_AcceptGroupInvitation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_AcceptGroupInvitation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_AddGroupMember_args : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being added.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being added.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being added.
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_AddGroupMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_AddGroupMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.role) {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Role);
            oprot.WriteFieldEnd();
          }
          if (JsonAttributes != null && __isset.jsonAttributes) {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonAttributes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_AddGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.role) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Role: ");
          __sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonAttributes: ");
          __sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_AddGroupMember_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_AddGroupMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_AddGroupMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_AddGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ApproveGroupJoinRequest_args : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the invitation being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being invited.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being invited.
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_ApproveGroupJoinRequest_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ApproveGroupJoinRequest_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.role) {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Role);
            oprot.WriteFieldEnd();
          }
          if (JsonAttributes != null && __isset.jsonAttributes) {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonAttributes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ApproveGroupJoinRequest_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.role) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Role: ");
          __sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonAttributes: ");
          __sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ApproveGroupJoinRequest_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ApproveGroupJoinRequest_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ApproveGroupJoinRequest_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ApproveGroupJoinRequest_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_AutoJoinGroup_args : TBase
    {
      private string _groupType;
      private Ruyi.SDK.BrainCloudApi.AutoJoinStrategy _autoJoinStrategy;
      private string _dataQueryJson;
      private int _clientIndex;

      /// <summary>
      /// Name of the associated group type.
      /// </summary>
      public string GroupType
      {
        get
        {
          return _groupType;
        }
        set
        {
          __isset.groupType = true;
          this._groupType = value;
        }
      }

      /// <summary>
      /// Selection strategy to employ when there are multiple matches
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.AutoJoinStrategy"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.AutoJoinStrategy AutoJoinStrategy
      {
        get
        {
          return _autoJoinStrategy;
        }
        set
        {
          __isset.autoJoinStrategy = true;
          this._autoJoinStrategy = value;
        }
      }

      /// <summary>
      /// Query parameters (optional)
      /// </summary>
      public string DataQueryJson
      {
        get
        {
          return _dataQueryJson;
        }
        set
        {
          __isset.dataQueryJson = true;
          this._dataQueryJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupType;
        public bool autoJoinStrategy;
        public bool dataQueryJson;
        public bool clientIndex;
      }

      public Group_AutoJoinGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  AutoJoinStrategy = (Ruyi.SDK.BrainCloudApi.AutoJoinStrategy)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  DataQueryJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_AutoJoinGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupType != null && __isset.groupType) {
            field.Name = "groupType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupType);
            oprot.WriteFieldEnd();
          }
          if (__isset.autoJoinStrategy) {
            field.Name = "autoJoinStrategy";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)AutoJoinStrategy);
            oprot.WriteFieldEnd();
          }
          if (DataQueryJson != null && __isset.dataQueryJson) {
            field.Name = "dataQueryJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DataQueryJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_AutoJoinGroup_args(");
        bool __first = true;
        if (GroupType != null && __isset.groupType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupType: ");
          __sb.Append(GroupType);
        }
        if (__isset.autoJoinStrategy) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AutoJoinStrategy: ");
          __sb.Append(AutoJoinStrategy);
        }
        if (DataQueryJson != null && __isset.dataQueryJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DataQueryJson: ");
          __sb.Append(DataQueryJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_AutoJoinGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_AutoJoinGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_AutoJoinGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_AutoJoinGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_CancelGroupInvitation_args : TBase
    {
      private string _groupId;
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the invitation being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool profileId;
        public bool clientIndex;
      }

      public Group_CancelGroupInvitation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_CancelGroupInvitation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_CancelGroupInvitation_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_CancelGroupInvitation_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_CancelGroupInvitation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_CancelGroupInvitation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_CancelGroupInvitation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_CreateGroup_args : TBase
    {
      private string _name;
      private string _groupType;
      private bool _isOpenGroup;
      private string _acl;
      private string _jsonData;
      private string _jsonOwnerAttributes;
      private string _jsonDefaultMemberAttributes;
      private int _clientIndex;

      /// <summary>
      /// Name of the group.
      /// </summary>
      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      /// <summary>
      /// Name of the type of group.
      /// </summary>
      public string GroupType
      {
        get
        {
          return _groupType;
        }
        set
        {
          __isset.groupType = true;
          this._groupType = value;
        }
      }

      /// <summary>
      /// true if group is open; false if closed.
      /// </summary>
      public bool IsOpenGroup
      {
        get
        {
          return _isOpenGroup;
        }
        set
        {
          __isset.isOpenGroup = true;
          this._isOpenGroup = value;
        }
      }

      /// <summary>
      /// The group's access control list. A null ACL implies default.
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      /// <summary>
      /// Custom application data.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// Attributes for the group owner (current user).
      /// </summary>
      public string JsonOwnerAttributes
      {
        get
        {
          return _jsonOwnerAttributes;
        }
        set
        {
          __isset.jsonOwnerAttributes = true;
          this._jsonOwnerAttributes = value;
        }
      }

      /// <summary>
      /// Default attributes for group members.
      /// </summary>
      public string JsonDefaultMemberAttributes
      {
        get
        {
          return _jsonDefaultMemberAttributes;
        }
        set
        {
          __isset.jsonDefaultMemberAttributes = true;
          this._jsonDefaultMemberAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool groupType;
        public bool isOpenGroup;
        public bool acl;
        public bool jsonData;
        public bool jsonOwnerAttributes;
        public bool jsonDefaultMemberAttributes;
        public bool clientIndex;
      }

      public Group_CreateGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  GroupType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  IsOpenGroup = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Acl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.String) {
                  JsonOwnerAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.String) {
                  JsonDefaultMemberAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_CreateGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (GroupType != null && __isset.groupType) {
            field.Name = "groupType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupType);
            oprot.WriteFieldEnd();
          }
          if (__isset.isOpenGroup) {
            field.Name = "isOpenGroup";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IsOpenGroup);
            oprot.WriteFieldEnd();
          }
          if (Acl != null && __isset.acl) {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Acl);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (JsonOwnerAttributes != null && __isset.jsonOwnerAttributes) {
            field.Name = "jsonOwnerAttributes";
            field.Type = TType.String;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonOwnerAttributes);
            oprot.WriteFieldEnd();
          }
          if (JsonDefaultMemberAttributes != null && __isset.jsonDefaultMemberAttributes) {
            field.Name = "jsonDefaultMemberAttributes";
            field.Type = TType.String;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonDefaultMemberAttributes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_CreateGroup_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (GroupType != null && __isset.groupType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupType: ");
          __sb.Append(GroupType);
        }
        if (__isset.isOpenGroup) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IsOpenGroup: ");
          __sb.Append(IsOpenGroup);
        }
        if (Acl != null && __isset.acl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Acl: ");
          __sb.Append(Acl);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (JsonOwnerAttributes != null && __isset.jsonOwnerAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonOwnerAttributes: ");
          __sb.Append(JsonOwnerAttributes);
        }
        if (JsonDefaultMemberAttributes != null && __isset.jsonDefaultMemberAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonDefaultMemberAttributes: ");
          __sb.Append(JsonDefaultMemberAttributes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_CreateGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_CreateGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_CreateGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_CreateGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_CreateGroupEntity_args : TBase
    {
      private string _groupId;
      private string _entityType;
      private bool _isOwnedByGroupMember;
      private string _acl;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// true if entity is owned by a member; false if owned by the entire group.
      /// </summary>
      public bool IsOwnedByGroupMember
      {
        get
        {
          return _isOwnedByGroupMember;
        }
        set
        {
          __isset.isOwnedByGroupMember = true;
          this._isOwnedByGroupMember = value;
        }
      }

      /// <summary>
      /// Access control list for the group entity.
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      /// <summary>
      /// Custom application data.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool entityType;
        public bool isOwnedByGroupMember;
        public bool acl;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_CreateGroupEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EntityType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  IsOwnedByGroupMember = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Acl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_CreateGroupEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (EntityType != null && __isset.entityType) {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityType);
            oprot.WriteFieldEnd();
          }
          if (__isset.isOwnedByGroupMember) {
            field.Name = "isOwnedByGroupMember";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IsOwnedByGroupMember);
            oprot.WriteFieldEnd();
          }
          if (Acl != null && __isset.acl) {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Acl);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_CreateGroupEntity_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (EntityType != null && __isset.entityType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityType: ");
          __sb.Append(EntityType);
        }
        if (__isset.isOwnedByGroupMember) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IsOwnedByGroupMember: ");
          __sb.Append(IsOwnedByGroupMember);
        }
        if (Acl != null && __isset.acl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Acl: ");
          __sb.Append(Acl);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_CreateGroupEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_CreateGroupEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_CreateGroupEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_CreateGroupEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_DeleteGroup_args : TBase
    {
      private string _groupId;
      private long _version;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Current version of the group
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool version;
        public bool clientIndex;
      }

      public Group_DeleteGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_DeleteGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_DeleteGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_DeleteGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_DeleteGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_DeleteGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_DeleteGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_DeleteGroupEntity_args : TBase
    {
      private string _groupId;
      private string _entityId;
      private long _version;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The current version of the group entity (for concurrency checking).
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool entityId;
        public bool version;
        public bool clientIndex;
      }

      public Group_DeleteGroupEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_DeleteGroupEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_DeleteGroupEntity_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_DeleteGroupEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_DeleteGroupEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_DeleteGroupEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_DeleteGroupEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_GetMyGroups_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Group_GetMyGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_GetMyGroups_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_GetMyGroups_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_GetMyGroups_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_GetMyGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_GetMyGroups_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_GetMyGroups_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_IncrementGroupData_args : TBase
    {
      private string _groupId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Partial data map with incremental values.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_IncrementGroupData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_IncrementGroupData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_IncrementGroupData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_IncrementGroupData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_IncrementGroupData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_IncrementGroupData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_IncrementGroupData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_IncrementGroupEntityData_args : TBase
    {
      private string _groupId;
      private string _entityId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Partial data map with incremental values.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool entityId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_IncrementGroupEntityData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_IncrementGroupEntityData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_IncrementGroupEntityData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_IncrementGroupEntityData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_IncrementGroupEntityData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_IncrementGroupEntityData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_IncrementGroupEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_InviteGroupMember_args : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being invited.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being invited.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being invited.
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_InviteGroupMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_InviteGroupMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.role) {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Role);
            oprot.WriteFieldEnd();
          }
          if (JsonAttributes != null && __isset.jsonAttributes) {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonAttributes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_InviteGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.role) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Role: ");
          __sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonAttributes: ");
          __sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_InviteGroupMember_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_InviteGroupMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_InviteGroupMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_InviteGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_JoinGroup_args : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_JoinGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_JoinGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_JoinGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_JoinGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_JoinGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_JoinGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_JoinGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_LeaveGroup_args : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_LeaveGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_LeaveGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_LeaveGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_LeaveGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_LeaveGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_LeaveGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_LeaveGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ListGroupsPage_args : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// Query context.
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonContext;
        public bool clientIndex;
      }

      public Group_ListGroupsPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonContext = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ListGroupsPage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonContext != null && __isset.jsonContext) {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonContext);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ListGroupsPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonContext: ");
          __sb.Append(JsonContext);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ListGroupsPage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ListGroupsPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ListGroupsPage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ListGroupsPage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ListGroupsPageByOffset_args : TBase
    {
      private string _context;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// Encoded reference query context.
      /// </summary>
      public string Context
      {
        get
        {
          return _context;
        }
        set
        {
          __isset.context = true;
          this._context = value;
        }
      }

      /// <summary>
      /// Number of pages by which to offset the query.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool context;
        public bool pageOffset;
        public bool clientIndex;
      }

      public Group_ListGroupsPageByOffset_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Context = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  PageOffset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ListGroupsPageByOffset_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Context != null && __isset.context) {
            field.Name = "context";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Context);
            oprot.WriteFieldEnd();
          }
          if (__isset.pageOffset) {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PageOffset);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ListGroupsPageByOffset_args(");
        bool __first = true;
        if (Context != null && __isset.context) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Context: ");
          __sb.Append(Context);
        }
        if (__isset.pageOffset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageOffset: ");
          __sb.Append(PageOffset);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ListGroupsPageByOffset_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ListGroupsPageByOffset_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ListGroupsPageByOffset_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ListGroupsPageByOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ListGroupsWithMember_args : TBase
    {
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// User to read groups for
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool clientIndex;
      }

      public Group_ListGroupsWithMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ListGroupsWithMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ListGroupsWithMember_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ListGroupsWithMember_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ListGroupsWithMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ListGroupsWithMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ListGroupsWithMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroup_args : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_ReadGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ReadGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupData_args : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_ReadGroupData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ReadGroupData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupEntitiesPage_args : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// Query context.
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonContext;
        public bool clientIndex;
      }

      public Group_ReadGroupEntitiesPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonContext = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupEntitiesPage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonContext != null && __isset.jsonContext) {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonContext);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupEntitiesPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonContext: ");
          __sb.Append(JsonContext);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupEntitiesPage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ReadGroupEntitiesPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupEntitiesPage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupEntitiesPage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupEntitiesPageByOffset_args : TBase
    {
      private string _encodedContext;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// Encoded reference query context.
      /// </summary>
      public string EncodedContext
      {
        get
        {
          return _encodedContext;
        }
        set
        {
          __isset.encodedContext = true;
          this._encodedContext = value;
        }
      }

      /// <summary>
      /// Number of pages by which to offset the query.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool encodedContext;
        public bool pageOffset;
        public bool clientIndex;
      }

      public Group_ReadGroupEntitiesPageByOffset_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EncodedContext = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  PageOffset = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupEntitiesPageByOffset_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EncodedContext != null && __isset.encodedContext) {
            field.Name = "encodedContext";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EncodedContext);
            oprot.WriteFieldEnd();
          }
          if (__isset.pageOffset) {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PageOffset);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupEntitiesPageByOffset_args(");
        bool __first = true;
        if (EncodedContext != null && __isset.encodedContext) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EncodedContext: ");
          __sb.Append(EncodedContext);
        }
        if (__isset.pageOffset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PageOffset: ");
          __sb.Append(PageOffset);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupEntitiesPageByOffset_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ReadGroupEntitiesPageByOffset_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupEntitiesPageByOffset_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupEntitiesPageByOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupEntity_args : TBase
    {
      private string _groupId;
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool entityId;
        public bool clientIndex;
      }

      public Group_ReadGroupEntity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupEntity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupEntity_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupEntity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ReadGroupEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupEntity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupMembers_args : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_ReadGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupMembers_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_ReadGroupMembers_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_ReadGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_ReadGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_ReadGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_RejectGroupInvitation_args : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_RejectGroupInvitation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_RejectGroupInvitation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_RejectGroupInvitation_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_RejectGroupInvitation_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_RejectGroupInvitation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_RejectGroupInvitation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_RejectGroupInvitation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_RejectGroupJoinRequest_args : TBase
    {
      private string _groupId;
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the invitation being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool profileId;
        public bool clientIndex;
      }

      public Group_RejectGroupJoinRequest_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_RejectGroupJoinRequest_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_RejectGroupJoinRequest_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_RejectGroupJoinRequest_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_RejectGroupJoinRequest_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_RejectGroupJoinRequest_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_RejectGroupJoinRequest_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_RemoveGroupMember_args : TBase
    {
      private string _groupId;
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool profileId;
        public bool clientIndex;
      }

      public Group_RemoveGroupMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_RemoveGroupMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_RemoveGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_RemoveGroupMember_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_RemoveGroupMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_RemoveGroupMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_RemoveGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupData_args : TBase
    {
      private string _groupId;
      private long _version;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Version to verify.
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// Data to apply.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool version;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_UpdateGroupData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_UpdateGroupData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupEntityData_args : TBase
    {
      private string _groupId;
      private string _entityId;
      private long _version;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The current version of the group entity (for concurrency checking).
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// Custom application data.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool entityId;
        public bool version;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_UpdateGroupEntityData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EntityId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Version = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupEntityData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (EntityId != null && __isset.entityId) {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EntityId);
            oprot.WriteFieldEnd();
          }
          if (__isset.version) {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupEntityData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EntityId: ");
          __sb.Append(EntityId);
        }
        if (__isset.version) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version: ");
          __sb.Append(Version);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupEntityData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_UpdateGroupEntityData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupEntityData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupMember_args : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being updated.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being updated (optional).
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being updated (optional).
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_UpdateGroupMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.role) {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Role);
            oprot.WriteFieldEnd();
          }
          if (JsonAttributes != null && __isset.jsonAttributes) {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonAttributes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.role) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Role: ");
          __sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonAttributes: ");
          __sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupMember_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_UpdateGroupMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupName_args : TBase
    {
      private string _groupId;
      private string _name;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Name to apply.
      /// </summary>
      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool name;
        public bool clientIndex;
      }

      public Group_UpdateGroupName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupName_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Group_UpdateGroupName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Group_UpdateGroupName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Group_UpdateGroupName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Group_UpdateGroupName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachEmailIdentity_args : TBase
    {
      private string _email;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's e-mail address
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool password;
        public bool clientIndex;
      }

      public Identity_AttachEmailIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachEmailIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachEmailIdentity_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachEmailIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_AttachEmailIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachEmailIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_MergeEmailIdentity_args : TBase
    {
      private string _email;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's e-mail address
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool password;
        public bool clientIndex;
      }

      public Identity_MergeEmailIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_MergeEmailIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_MergeEmailIdentity_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_MergeEmailIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_MergeEmailIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_MergeEmailIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_MergeEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachEmailIdentity_args : TBase
    {
      private string _email;
      private bool _continueAnon;
      private int _clientIndex;

      /// <summary>
      /// The user's e-mail address
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// Proceed even if the profile will revert to anonymous?
      /// </summary>
      public bool ContinueAnon
      {
        get
        {
          return _continueAnon;
        }
        set
        {
          __isset.continueAnon = true;
          this._continueAnon = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool continueAnon;
        public bool clientIndex;
      }

      public Identity_DetachEmailIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Email = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  ContinueAnon = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachEmailIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Email != null && __isset.email) {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Email);
            oprot.WriteFieldEnd();
          }
          if (__isset.continueAnon) {
            field.Name = "continueAnon";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ContinueAnon);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachEmailIdentity_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (__isset.continueAnon) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ContinueAnon: ");
          __sb.Append(ContinueAnon);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachEmailIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_DetachEmailIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachEmailIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachUniversalIdentity_args : TBase
    {
      private string _userId;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's userId
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool password;
        public bool clientIndex;
      }

      public Identity_AttachUniversalIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachUniversalIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachUniversalIdentity_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachUniversalIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_AttachUniversalIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachUniversalIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachUniversalIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_MergeUniversalIdentity_args : TBase
    {
      private string _userId;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's userId
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool password;
        public bool clientIndex;
      }

      public Identity_MergeUniversalIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_MergeUniversalIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_MergeUniversalIdentity_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_MergeUniversalIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_MergeUniversalIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_MergeUniversalIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_MergeUniversalIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachUniversalIdentity_args : TBase
    {
      private string _userId;
      private bool _continueAnon;
      private int _clientIndex;

      /// <summary>
      /// The user's userId
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// Proceed even if the profile will revert to anonymous?
      /// </summary>
      public bool ContinueAnon
      {
        get
        {
          return _continueAnon;
        }
        set
        {
          __isset.continueAnon = true;
          this._continueAnon = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool continueAnon;
        public bool clientIndex;
      }

      public Identity_DetachUniversalIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  ContinueAnon = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachUniversalIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (__isset.continueAnon) {
            field.Name = "continueAnon";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ContinueAnon);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachUniversalIdentity_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.continueAnon) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ContinueAnon: ");
          __sb.Append(ContinueAnon);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachUniversalIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_DetachUniversalIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachUniversalIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachUniversalIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_SwitchToChildProfile_args : TBase
    {
      private string _childProfileId;
      private string _childAppId;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the child profile to switch to
      /// If null and forceCreate is true a new profile will be created
      /// </summary>
      public string ChildProfileId
      {
        get
        {
          return _childProfileId;
        }
        set
        {
          __isset.childProfileId = true;
          this._childProfileId = value;
        }
      }

      /// <summary>
      /// The appId of the child game to switch to
      /// </summary>
      public string ChildAppId
      {
        get
        {
          return _childAppId;
        }
        set
        {
          __isset.childAppId = true;
          this._childAppId = value;
        }
      }

      /// <summary>
      /// Should a new profile be created if it does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool childProfileId;
        public bool childAppId;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_SwitchToChildProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ChildProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ChildAppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_SwitchToChildProfile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ChildProfileId != null && __isset.childProfileId) {
            field.Name = "childProfileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ChildProfileId);
            oprot.WriteFieldEnd();
          }
          if (ChildAppId != null && __isset.childAppId) {
            field.Name = "childAppId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ChildAppId);
            oprot.WriteFieldEnd();
          }
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_SwitchToChildProfile_args(");
        bool __first = true;
        if (ChildProfileId != null && __isset.childProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ChildProfileId: ");
          __sb.Append(ChildProfileId);
        }
        if (ChildAppId != null && __isset.childAppId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ChildAppId: ");
          __sb.Append(ChildAppId);
        }
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_SwitchToChildProfile_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_SwitchToChildProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_SwitchToChildProfile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_SwitchToChildProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_SwitchToSingletonChildProfile_args : TBase
    {
      private string _childAppId;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The App ID of the child game to switch to
      /// </summary>
      public string ChildAppId
      {
        get
        {
          return _childAppId;
        }
        set
        {
          __isset.childAppId = true;
          this._childAppId = value;
        }
      }

      /// <summary>
      /// Should a new profile be created if one does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool childAppId;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_SwitchToSingletonChildProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ChildAppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_SwitchToSingletonChildProfile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ChildAppId != null && __isset.childAppId) {
            field.Name = "childAppId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ChildAppId);
            oprot.WriteFieldEnd();
          }
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_SwitchToSingletonChildProfile_args(");
        bool __first = true;
        if (ChildAppId != null && __isset.childAppId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ChildAppId: ");
          __sb.Append(ChildAppId);
        }
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_SwitchToSingletonChildProfile_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_SwitchToSingletonChildProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_SwitchToSingletonChildProfile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_SwitchToSingletonChildProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachParentWithIdentity_args : TBase
    {
      private string _externalId;
      private string _authenticationToken;
      private string _authenticationType;
      private string _externalAuthName;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// User ID
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// Password or client side token
      /// </summary>
      public string AuthenticationToken
      {
        get
        {
          return _authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this._authenticationToken = value;
        }
      }

      /// <summary>
      /// Type of authentication
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      /// <summary>
      /// Optional - if using AuthenticationType of external
      /// </summary>
      public string ExternalAuthName
      {
        get
        {
          return _externalAuthName;
        }
        set
        {
          __isset.externalAuthName = true;
          this._externalAuthName = value;
        }
      }

      /// <summary>
      /// If the profile does not exist, should it be created?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool externalId;
        public bool authenticationToken;
        public bool authenticationType;
        public bool externalAuthName;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_AttachParentWithIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ExternalId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AuthenticationToken = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  AuthenticationType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  ExternalAuthName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachParentWithIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ExternalId != null && __isset.externalId) {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalId);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationToken != null && __isset.authenticationToken) {
            field.Name = "authenticationToken";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationToken);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationType != null && __isset.authenticationType) {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationType);
            oprot.WriteFieldEnd();
          }
          if (ExternalAuthName != null && __isset.externalAuthName) {
            field.Name = "externalAuthName";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalAuthName);
            oprot.WriteFieldEnd();
          }
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachParentWithIdentity_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalId: ");
          __sb.Append(ExternalId);
        }
        if (AuthenticationToken != null && __isset.authenticationToken) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationToken: ");
          __sb.Append(AuthenticationToken);
        }
        if (AuthenticationType != null && __isset.authenticationType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationType: ");
          __sb.Append(AuthenticationType);
        }
        if (ExternalAuthName != null && __isset.externalAuthName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalAuthName: ");
          __sb.Append(ExternalAuthName);
        }
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachParentWithIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_AttachParentWithIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachParentWithIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachParentWithIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_SwitchToParentProfile_args : TBase
    {
      private string _parentLevelName;
      private int _clientIndex;

      /// <summary>
      /// The level of the parent to switch to
      /// </summary>
      public string ParentLevelName
      {
        get
        {
          return _parentLevelName;
        }
        set
        {
          __isset.parentLevelName = true;
          this._parentLevelName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool parentLevelName;
        public bool clientIndex;
      }

      public Identity_SwitchToParentProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ParentLevelName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_SwitchToParentProfile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ParentLevelName != null && __isset.parentLevelName) {
            field.Name = "parentLevelName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParentLevelName);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_SwitchToParentProfile_args(");
        bool __first = true;
        if (ParentLevelName != null && __isset.parentLevelName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParentLevelName: ");
          __sb.Append(ParentLevelName);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_SwitchToParentProfile_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_SwitchToParentProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_SwitchToParentProfile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_SwitchToParentProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachParent_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Identity_DetachParent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachParent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachParent_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachParent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_DetachParent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachParent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachParent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetChildProfiles_args : TBase
    {
      private bool _includeSummaryData;
      private int _clientIndex;

      /// <summary>
      /// Whether to return the summary friend data along with this call
      /// </summary>
      public bool IncludeSummaryData
      {
        get
        {
          return _includeSummaryData;
        }
        set
        {
          __isset.includeSummaryData = true;
          this._includeSummaryData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool includeSummaryData;
        public bool clientIndex;
      }

      public Identity_GetChildProfiles_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  IncludeSummaryData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetChildProfiles_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.includeSummaryData) {
            field.Name = "includeSummaryData";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeSummaryData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetChildProfiles_args(");
        bool __first = true;
        if (__isset.includeSummaryData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeSummaryData: ");
          __sb.Append(IncludeSummaryData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetChildProfiles_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_GetChildProfiles_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetChildProfiles_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetChildProfiles_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetIdentities_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Identity_GetIdentities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetIdentities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetIdentities_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetIdentities_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_GetIdentities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetIdentities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetIdentities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetExpiredIdentities_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Identity_GetExpiredIdentities_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetExpiredIdentities_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetExpiredIdentities_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetExpiredIdentities_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_GetExpiredIdentities_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetExpiredIdentities_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetExpiredIdentities_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_RefreshIdentity_args : TBase
    {
      private string _externalId;
      private string _authenticationToken;
      private string _authenticationType;
      private int _clientIndex;

      /// <summary>
      /// User ID
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// Password or client side token
      /// </summary>
      public string AuthenticationToken
      {
        get
        {
          return _authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this._authenticationToken = value;
        }
      }

      /// <summary>
      /// Type of authentication
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool externalId;
        public bool authenticationToken;
        public bool authenticationType;
        public bool clientIndex;
      }

      public Identity_RefreshIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ExternalId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AuthenticationToken = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  AuthenticationType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_RefreshIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ExternalId != null && __isset.externalId) {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalId);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationToken != null && __isset.authenticationToken) {
            field.Name = "authenticationToken";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationToken);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationType != null && __isset.authenticationType) {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_RefreshIdentity_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalId: ");
          __sb.Append(ExternalId);
        }
        if (AuthenticationToken != null && __isset.authenticationToken) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationToken: ");
          __sb.Append(AuthenticationToken);
        }
        if (AuthenticationType != null && __isset.authenticationType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationType: ");
          __sb.Append(AuthenticationType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_RefreshIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_RefreshIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_RefreshIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_RefreshIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_ChangeEmailIdentity_args : TBase
    {
      private string _oldEmailAddress;
      private string _password;
      private string _newEmailAddress;
      private bool _updateContactEmail;
      private int _clientIndex;

      /// <summary>
      /// Old email address
      /// </summary>
      public string OldEmailAddress
      {
        get
        {
          return _oldEmailAddress;
        }
        set
        {
          __isset.oldEmailAddress = true;
          this._oldEmailAddress = value;
        }
      }

      /// <summary>
      /// Password for identity
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      /// <summary>
      /// New email address
      /// </summary>
      public string NewEmailAddress
      {
        get
        {
          return _newEmailAddress;
        }
        set
        {
          __isset.newEmailAddress = true;
          this._newEmailAddress = value;
        }
      }

      /// <summary>
      /// Whether to update contact email in profile
      /// </summary>
      public bool UpdateContactEmail
      {
        get
        {
          return _updateContactEmail;
        }
        set
        {
          __isset.updateContactEmail = true;
          this._updateContactEmail = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool oldEmailAddress;
        public bool password;
        public bool newEmailAddress;
        public bool updateContactEmail;
        public bool clientIndex;
      }

      public Identity_ChangeEmailIdentity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OldEmailAddress = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  NewEmailAddress = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  UpdateContactEmail = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_ChangeEmailIdentity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OldEmailAddress != null && __isset.oldEmailAddress) {
            field.Name = "oldEmailAddress";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OldEmailAddress);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (NewEmailAddress != null && __isset.newEmailAddress) {
            field.Name = "newEmailAddress";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NewEmailAddress);
            oprot.WriteFieldEnd();
          }
          if (__isset.updateContactEmail) {
            field.Name = "updateContactEmail";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(UpdateContactEmail);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_ChangeEmailIdentity_args(");
        bool __first = true;
        if (OldEmailAddress != null && __isset.oldEmailAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OldEmailAddress: ");
          __sb.Append(OldEmailAddress);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (NewEmailAddress != null && __isset.newEmailAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NewEmailAddress: ");
          __sb.Append(NewEmailAddress);
        }
        if (__isset.updateContactEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UpdateContactEmail: ");
          __sb.Append(UpdateContactEmail);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_ChangeEmailIdentity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_ChangeEmailIdentity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_ChangeEmailIdentity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_ChangeEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachPeerProfile_args : TBase
    {
      private string _peer;
      private string _externalId;
      private string _authenticationToken;
      private string _authenticationType;
      private string _externalAuthName;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// Name of the peer to connect to
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      /// <summary>
      /// User ID
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// Password or client side token
      /// </summary>
      public string AuthenticationToken
      {
        get
        {
          return _authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this._authenticationToken = value;
        }
      }

      /// <summary>
      /// Type of authentication
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      /// <summary>
      /// Optional - if using AuthenticationType of external
      /// </summary>
      public string ExternalAuthName
      {
        get
        {
          return _externalAuthName;
        }
        set
        {
          __isset.externalAuthName = true;
          this._externalAuthName = value;
        }
      }

      /// <summary>
      /// If the profile does not exist, should it be created?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool peer;
        public bool externalId;
        public bool authenticationToken;
        public bool authenticationType;
        public bool externalAuthName;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_AttachPeerProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Peer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ExternalId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  AuthenticationToken = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  AuthenticationType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  ExternalAuthName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.Bool) {
                  ForceCreate = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachPeerProfile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Peer != null && __isset.peer) {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Peer);
            oprot.WriteFieldEnd();
          }
          if (ExternalId != null && __isset.externalId) {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalId);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationToken != null && __isset.authenticationToken) {
            field.Name = "authenticationToken";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationToken);
            oprot.WriteFieldEnd();
          }
          if (AuthenticationType != null && __isset.authenticationType) {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AuthenticationType);
            oprot.WriteFieldEnd();
          }
          if (ExternalAuthName != null && __isset.externalAuthName) {
            field.Name = "externalAuthName";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExternalAuthName);
            oprot.WriteFieldEnd();
          }
          if (__isset.forceCreate) {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ForceCreate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachPeerProfile_args(");
        bool __first = true;
        if (Peer != null && __isset.peer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peer: ");
          __sb.Append(Peer);
        }
        if (ExternalId != null && __isset.externalId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalId: ");
          __sb.Append(ExternalId);
        }
        if (AuthenticationToken != null && __isset.authenticationToken) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationToken: ");
          __sb.Append(AuthenticationToken);
        }
        if (AuthenticationType != null && __isset.authenticationType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthenticationType: ");
          __sb.Append(AuthenticationType);
        }
        if (ExternalAuthName != null && __isset.externalAuthName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExternalAuthName: ");
          __sb.Append(ExternalAuthName);
        }
        if (__isset.forceCreate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ForceCreate: ");
          __sb.Append(ForceCreate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_AttachPeerProfile_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_AttachPeerProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_AttachPeerProfile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_AttachPeerProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachPeer_args : TBase
    {
      private string _peer;
      private int _clientIndex;

      /// <summary>
      /// Name of the peer to connect to
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool peer;
        public bool clientIndex;
      }

      public Identity_DetachPeer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Peer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachPeer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Peer != null && __isset.peer) {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Peer);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachPeer_args(");
        bool __first = true;
        if (Peer != null && __isset.peer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peer: ");
          __sb.Append(Peer);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_DetachPeer_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_DetachPeer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_DetachPeer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_DetachPeer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetPeerProfiles_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Identity_GetPeerProfiles_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetPeerProfiles_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetPeerProfiles_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Identity_GetPeerProfiles_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Identity_GetPeerProfiles_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Identity_GetPeerProfiles_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Identity_GetPeerProfiles_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Mail_SendBasicEmail_args : TBase
    {
      private string _profileId;
      private string _subject;
      private string _body;
      private int _clientIndex;

      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The email subject
      /// </summary>
      public string Subject
      {
        get
        {
          return _subject;
        }
        set
        {
          __isset.subject = true;
          this._subject = value;
        }
      }

      /// <summary>
      /// The email body
      /// </summary>
      public string Body
      {
        get
        {
          return _body;
        }
        set
        {
          __isset.body = true;
          this._body = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool subject;
        public bool body;
        public bool clientIndex;
      }

      public Mail_SendBasicEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Subject = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Body = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Mail_SendBasicEmail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (Subject != null && __isset.subject) {
            field.Name = "subject";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Subject);
            oprot.WriteFieldEnd();
          }
          if (Body != null && __isset.body) {
            field.Name = "body";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Body);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Mail_SendBasicEmail_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (Subject != null && __isset.subject) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Subject: ");
          __sb.Append(Subject);
        }
        if (Body != null && __isset.body) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Body: ");
          __sb.Append(Body);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Mail_SendBasicEmail_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Mail_SendBasicEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Mail_SendBasicEmail_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Mail_SendBasicEmail_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Mail_SendAdvancedEmail_args : TBase
    {
      private string _profileId;
      private string _jsonServiceParams;
      private int _clientIndex;

      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Parameters to send to the email service. See the documentation for
      /// a full list. http://getbraincloud.com/apidocs/apiref/#capi-mail
      /// </summary>
      public string JsonServiceParams
      {
        get
        {
          return _jsonServiceParams;
        }
        set
        {
          __isset.jsonServiceParams = true;
          this._jsonServiceParams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool jsonServiceParams;
        public bool clientIndex;
      }

      public Mail_SendAdvancedEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonServiceParams = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Mail_SendAdvancedEmail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (JsonServiceParams != null && __isset.jsonServiceParams) {
            field.Name = "jsonServiceParams";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonServiceParams);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Mail_SendAdvancedEmail_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (JsonServiceParams != null && __isset.jsonServiceParams) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonServiceParams: ");
          __sb.Append(JsonServiceParams);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Mail_SendAdvancedEmail_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Mail_SendAdvancedEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Mail_SendAdvancedEmail_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Mail_SendAdvancedEmail_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Mail_SendAdvancedEmailByAddress_args : TBase
    {
      private string _emailAddress;
      private string _jsonServiceParams;
      private int _clientIndex;

      /// <summary>
      /// The address to send the email to
      /// </summary>
      public string EmailAddress
      {
        get
        {
          return _emailAddress;
        }
        set
        {
          __isset.emailAddress = true;
          this._emailAddress = value;
        }
      }

      /// <summary>
      /// Parameters to send to the email service. See the documentation for
      /// a full list. http://getbraincloud.com/apidocs/apiref/#capi-mail
      /// </summary>
      public string JsonServiceParams
      {
        get
        {
          return _jsonServiceParams;
        }
        set
        {
          __isset.jsonServiceParams = true;
          this._jsonServiceParams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool emailAddress;
        public bool jsonServiceParams;
        public bool clientIndex;
      }

      public Mail_SendAdvancedEmailByAddress_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EmailAddress = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonServiceParams = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Mail_SendAdvancedEmailByAddress_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EmailAddress != null && __isset.emailAddress) {
            field.Name = "emailAddress";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EmailAddress);
            oprot.WriteFieldEnd();
          }
          if (JsonServiceParams != null && __isset.jsonServiceParams) {
            field.Name = "jsonServiceParams";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonServiceParams);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Mail_SendAdvancedEmailByAddress_args(");
        bool __first = true;
        if (EmailAddress != null && __isset.emailAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmailAddress: ");
          __sb.Append(EmailAddress);
        }
        if (JsonServiceParams != null && __isset.jsonServiceParams) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonServiceParams: ");
          __sb.Append(JsonServiceParams);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Mail_SendAdvancedEmailByAddress_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Mail_SendAdvancedEmailByAddress_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Mail_SendAdvancedEmailByAddress_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Mail_SendAdvancedEmailByAddress_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_Read_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public MatchMaking_Read_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_Read_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_Read_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_Read_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_Read_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_Read_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_Read_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_SetPlayerRating_args : TBase
    {
      private long _playerRating;
      private int _clientIndex;

      /// <summary>
      /// The new player rating.
      /// </summary>
      public long PlayerRating
      {
        get
        {
          return _playerRating;
        }
        set
        {
          __isset.playerRating = true;
          this._playerRating = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playerRating;
        public bool clientIndex;
      }

      public MatchMaking_SetPlayerRating_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  PlayerRating = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_SetPlayerRating_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.playerRating) {
            field.Name = "playerRating";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(PlayerRating);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_SetPlayerRating_args(");
        bool __first = true;
        if (__isset.playerRating) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerRating: ");
          __sb.Append(PlayerRating);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_SetPlayerRating_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_SetPlayerRating_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_SetPlayerRating_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_SetPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_ResetPlayerRating_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public MatchMaking_ResetPlayerRating_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_ResetPlayerRating_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_ResetPlayerRating_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_ResetPlayerRating_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_ResetPlayerRating_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_ResetPlayerRating_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_ResetPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_IncrementPlayerRating_args : TBase
    {
      private long _increment;
      private int _clientIndex;

      /// <summary>
      /// The increment amount
      /// </summary>
      public long Increment
      {
        get
        {
          return _increment;
        }
        set
        {
          __isset.increment = true;
          this._increment = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool increment;
        public bool clientIndex;
      }

      public MatchMaking_IncrementPlayerRating_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Increment = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_IncrementPlayerRating_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.increment) {
            field.Name = "increment";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Increment);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_IncrementPlayerRating_args(");
        bool __first = true;
        if (__isset.increment) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Increment: ");
          __sb.Append(Increment);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_IncrementPlayerRating_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_IncrementPlayerRating_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_IncrementPlayerRating_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_IncrementPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_DecrementPlayerRating_args : TBase
    {
      private long _decrement;
      private int _clientIndex;

      /// <summary>
      /// The decrement amount
      /// </summary>
      public long Decrement
      {
        get
        {
          return _decrement;
        }
        set
        {
          __isset.decrement = true;
          this._decrement = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool decrement;
        public bool clientIndex;
      }

      public MatchMaking_DecrementPlayerRating_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Decrement = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_DecrementPlayerRating_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.decrement) {
            field.Name = "decrement";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Decrement);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_DecrementPlayerRating_args(");
        bool __first = true;
        if (__isset.decrement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Decrement: ");
          __sb.Append(Decrement);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_DecrementPlayerRating_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_DecrementPlayerRating_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_DecrementPlayerRating_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_DecrementPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_TurnShieldOn_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public MatchMaking_TurnShieldOn_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_TurnShieldOn_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_TurnShieldOn_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_TurnShieldOn_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_TurnShieldOn_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_TurnShieldOn_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_TurnShieldOn_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_TurnShieldOnFor_args : TBase
    {
      private int _minutes;
      private int _clientIndex;

      /// <summary>
      /// Number of minutes to turn the shield on for
      /// </summary>
      public int Minutes
      {
        get
        {
          return _minutes;
        }
        set
        {
          __isset.minutes = true;
          this._minutes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool minutes;
        public bool clientIndex;
      }

      public MatchMaking_TurnShieldOnFor_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Minutes = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_TurnShieldOnFor_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.minutes) {
            field.Name = "minutes";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Minutes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_TurnShieldOnFor_args(");
        bool __first = true;
        if (__isset.minutes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Minutes: ");
          __sb.Append(Minutes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_TurnShieldOnFor_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_TurnShieldOnFor_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_TurnShieldOnFor_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_TurnShieldOnFor_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_TurnShieldOff_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public MatchMaking_TurnShieldOff_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_TurnShieldOff_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_TurnShieldOff_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_TurnShieldOff_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_TurnShieldOff_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_TurnShieldOff_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_TurnShieldOff_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_IncrementShieldOnFor_args : TBase
    {
      private int _minutes;
      private int _clientIndex;

      /// <summary>
      /// Number of minutes to increase the shield time for
      /// </summary>
      public int Minutes
      {
        get
        {
          return _minutes;
        }
        set
        {
          __isset.minutes = true;
          this._minutes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool minutes;
        public bool clientIndex;
      }

      public MatchMaking_IncrementShieldOnFor_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Minutes = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_IncrementShieldOnFor_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.minutes) {
            field.Name = "minutes";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Minutes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_IncrementShieldOnFor_args(");
        bool __first = true;
        if (__isset.minutes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Minutes: ");
          __sb.Append(Minutes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_IncrementShieldOnFor_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_IncrementShieldOnFor_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_IncrementShieldOnFor_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_IncrementShieldOnFor_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_GetShieldExpiry_args : TBase
    {
      private string _playerId;
      private int _clientIndex;

      /// <summary>
      /// The player id or use null to retrieve for the current player
      /// </summary>
      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playerId;
        public bool clientIndex;
      }

      public MatchMaking_GetShieldExpiry_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_GetShieldExpiry_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlayerId != null && __isset.playerId) {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_GetShieldExpiry_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerId: ");
          __sb.Append(PlayerId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_GetShieldExpiry_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_GetShieldExpiry_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_GetShieldExpiry_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_GetShieldExpiry_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayers_args : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rangeDelta;
        public bool numMatches;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  RangeDelta = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  NumMatches = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.rangeDelta) {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RangeDelta);
            oprot.WriteFieldEnd();
          }
          if (__isset.numMatches) {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(NumMatches);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayers_args(");
        bool __first = true;
        if (__isset.rangeDelta) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RangeDelta: ");
          __sb.Append(RangeDelta);
        }
        if (__isset.numMatches) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumMatches: ");
          __sb.Append(NumMatches);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayers_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_FindPlayers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayersWithAttributes_args : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      /// <summary>
      /// Attributes match criteria
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rangeDelta;
        public bool numMatches;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayersWithAttributes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  RangeDelta = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  NumMatches = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayersWithAttributes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.rangeDelta) {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RangeDelta);
            oprot.WriteFieldEnd();
          }
          if (__isset.numMatches) {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(NumMatches);
            oprot.WriteFieldEnd();
          }
          if (JsonAttributes != null && __isset.jsonAttributes) {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonAttributes);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayersWithAttributes_args(");
        bool __first = true;
        if (__isset.rangeDelta) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RangeDelta: ");
          __sb.Append(RangeDelta);
        }
        if (__isset.numMatches) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumMatches: ");
          __sb.Append(NumMatches);
        }
        if (JsonAttributes != null && __isset.jsonAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonAttributes: ");
          __sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayersWithAttributes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_FindPlayersWithAttributes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayersWithAttributes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayersWithAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayersUsingFilter_args : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private string _jsonExtraParms;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      /// <summary>
      /// Parameters to pass to the CloudCode filter script
      /// </summary>
      public string JsonExtraParms
      {
        get
        {
          return _jsonExtraParms;
        }
        set
        {
          __isset.jsonExtraParms = true;
          this._jsonExtraParms = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rangeDelta;
        public bool numMatches;
        public bool jsonExtraParms;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayersUsingFilter_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  RangeDelta = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  NumMatches = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonExtraParms = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayersUsingFilter_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.rangeDelta) {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RangeDelta);
            oprot.WriteFieldEnd();
          }
          if (__isset.numMatches) {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(NumMatches);
            oprot.WriteFieldEnd();
          }
          if (JsonExtraParms != null && __isset.jsonExtraParms) {
            field.Name = "jsonExtraParms";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonExtraParms);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayersUsingFilter_args(");
        bool __first = true;
        if (__isset.rangeDelta) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RangeDelta: ");
          __sb.Append(RangeDelta);
        }
        if (__isset.numMatches) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumMatches: ");
          __sb.Append(NumMatches);
        }
        if (JsonExtraParms != null && __isset.jsonExtraParms) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonExtraParms: ");
          __sb.Append(JsonExtraParms);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayersUsingFilter_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_FindPlayersUsingFilter_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayersUsingFilter_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayersUsingFilter_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayersWithAttributesUsingFilter_args : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private string _jsonAttributes;
      private string _jsonExtraParms;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      /// <summary>
      /// Attributes match criteria
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      /// <summary>
      /// Parameters to pass to the CloudCode filter script
      /// </summary>
      public string JsonExtraParms
      {
        get
        {
          return _jsonExtraParms;
        }
        set
        {
          __isset.jsonExtraParms = true;
          this._jsonExtraParms = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rangeDelta;
        public bool numMatches;
        public bool jsonAttributes;
        public bool jsonExtraParms;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayersWithAttributesUsingFilter_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  RangeDelta = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  NumMatches = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  JsonExtraParms = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayersWithAttributesUsingFilter_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.rangeDelta) {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RangeDelta);
            oprot.WriteFieldEnd();
          }
          if (__isset.numMatches) {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(NumMatches);
            oprot.WriteFieldEnd();
          }
          if (JsonAttributes != null && __isset.jsonAttributes) {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonAttributes);
            oprot.WriteFieldEnd();
          }
          if (JsonExtraParms != null && __isset.jsonExtraParms) {
            field.Name = "jsonExtraParms";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonExtraParms);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayersWithAttributesUsingFilter_args(");
        bool __first = true;
        if (__isset.rangeDelta) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RangeDelta: ");
          __sb.Append(RangeDelta);
        }
        if (__isset.numMatches) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumMatches: ");
          __sb.Append(NumMatches);
        }
        if (JsonAttributes != null && __isset.jsonAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonAttributes: ");
          __sb.Append(JsonAttributes);
        }
        if (JsonExtraParms != null && __isset.jsonExtraParms) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonExtraParms: ");
          __sb.Append(JsonExtraParms);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_FindPlayersWithAttributesUsingFilter_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_FindPlayersWithAttributesUsingFilter_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_FindPlayersWithAttributesUsingFilter_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_FindPlayersWithAttributesUsingFilter_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_EnableMatchMaking_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public MatchMaking_EnableMatchMaking_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_EnableMatchMaking_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_EnableMatchMaking_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_EnableMatchMaking_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_EnableMatchMaking_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_EnableMatchMaking_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_EnableMatchMaking_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_DisableMatchMaking_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public MatchMaking_DisableMatchMaking_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_DisableMatchMaking_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_DisableMatchMaking_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MatchMaking_DisableMatchMaking_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MatchMaking_DisableMatchMaking_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MatchMaking_DisableMatchMaking_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MatchMaking_DisableMatchMaking_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class OneWayMatch_StartMatch_args : TBase
    {
      private string _otherPlayerId;
      private long _rangeDelta;
      private int _clientIndex;

      /// <summary>
      /// The player to start a match with
      /// </summary>
      public string OtherPlayerId
      {
        get
        {
          return _otherPlayerId;
        }
        set
        {
          __isset.otherPlayerId = true;
          this._otherPlayerId = value;
        }
      }

      /// <summary>
      /// The range delta used for the initial match search
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool otherPlayerId;
        public bool rangeDelta;
        public bool clientIndex;
      }

      public OneWayMatch_StartMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OtherPlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  RangeDelta = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("OneWayMatch_StartMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OtherPlayerId != null && __isset.otherPlayerId) {
            field.Name = "otherPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OtherPlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.rangeDelta) {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RangeDelta);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("OneWayMatch_StartMatch_args(");
        bool __first = true;
        if (OtherPlayerId != null && __isset.otherPlayerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OtherPlayerId: ");
          __sb.Append(OtherPlayerId);
        }
        if (__isset.rangeDelta) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RangeDelta: ");
          __sb.Append(RangeDelta);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class OneWayMatch_StartMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public OneWayMatch_StartMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("OneWayMatch_StartMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("OneWayMatch_StartMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class OneWayMatch_CancelMatch_args : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// The playback stream id returned in the start match
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public OneWayMatch_CancelMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlaybackStreamId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("OneWayMatch_CancelMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId) {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlaybackStreamId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("OneWayMatch_CancelMatch_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlaybackStreamId: ");
          __sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class OneWayMatch_CancelMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public OneWayMatch_CancelMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("OneWayMatch_CancelMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("OneWayMatch_CancelMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class OneWayMatch_CompleteMatch_args : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// The playback stream id returned in the initial start match
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public OneWayMatch_CompleteMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlaybackStreamId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("OneWayMatch_CompleteMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId) {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlaybackStreamId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("OneWayMatch_CompleteMatch_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlaybackStreamId: ");
          __sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class OneWayMatch_CompleteMatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public OneWayMatch_CompleteMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("OneWayMatch_CompleteMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("OneWayMatch_CompleteMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_StartStream_args : TBase
    {
      private string _targetPlayerId;
      private bool _includeSharedData;
      private int _clientIndex;

      /// <summary>
      /// The player to start a stream with
      /// </summary>
      public string TargetPlayerId
      {
        get
        {
          return _targetPlayerId;
        }
        set
        {
          __isset.targetPlayerId = true;
          this._targetPlayerId = value;
        }
      }

      /// <summary>
      /// Whether to include shared data in the stream
      /// </summary>
      public bool IncludeSharedData
      {
        get
        {
          return _includeSharedData;
        }
        set
        {
          __isset.includeSharedData = true;
          this._includeSharedData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool targetPlayerId;
        public bool includeSharedData;
        public bool clientIndex;
      }

      public PlaybackStream_StartStream_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  TargetPlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  IncludeSharedData = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_StartStream_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TargetPlayerId != null && __isset.targetPlayerId) {
            field.Name = "targetPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TargetPlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.includeSharedData) {
            field.Name = "includeSharedData";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeSharedData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_StartStream_args(");
        bool __first = true;
        if (TargetPlayerId != null && __isset.targetPlayerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetPlayerId: ");
          __sb.Append(TargetPlayerId);
        }
        if (__isset.includeSharedData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeSharedData: ");
          __sb.Append(IncludeSharedData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_StartStream_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlaybackStream_StartStream_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_StartStream_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_StartStream_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_ReadStream_args : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public PlaybackStream_ReadStream_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlaybackStreamId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_ReadStream_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId) {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlaybackStreamId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_ReadStream_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlaybackStreamId: ");
          __sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_ReadStream_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlaybackStream_ReadStream_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_ReadStream_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_ReadStream_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_EndStream_args : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public PlaybackStream_EndStream_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlaybackStreamId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_EndStream_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId) {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlaybackStreamId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_EndStream_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlaybackStreamId: ");
          __sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_EndStream_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlaybackStream_EndStream_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_EndStream_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_EndStream_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_DeleteStream_args : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public PlaybackStream_DeleteStream_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlaybackStreamId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_DeleteStream_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId) {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlaybackStreamId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_DeleteStream_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlaybackStreamId: ");
          __sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_DeleteStream_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlaybackStream_DeleteStream_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_DeleteStream_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_DeleteStream_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_AddEvent_args : TBase
    {
      private string _playbackStreamId;
      private string _eventData;
      private string _summary;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      /// <summary>
      /// Describes the event
      /// </summary>
      public string EventData
      {
        get
        {
          return _eventData;
        }
        set
        {
          __isset.eventData = true;
          this._eventData = value;
        }
      }

      /// <summary>
      /// Current summary data as of this event
      /// </summary>
      public string Summary
      {
        get
        {
          return _summary;
        }
        set
        {
          __isset.summary = true;
          this._summary = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playbackStreamId;
        public bool eventData;
        public bool summary;
        public bool clientIndex;
      }

      public PlaybackStream_AddEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlaybackStreamId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EventData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Summary = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_AddEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId) {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlaybackStreamId);
            oprot.WriteFieldEnd();
          }
          if (EventData != null && __isset.eventData) {
            field.Name = "eventData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventData);
            oprot.WriteFieldEnd();
          }
          if (Summary != null && __isset.summary) {
            field.Name = "summary";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Summary);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_AddEvent_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlaybackStreamId: ");
          __sb.Append(PlaybackStreamId);
        }
        if (EventData != null && __isset.eventData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventData: ");
          __sb.Append(EventData);
        }
        if (Summary != null && __isset.summary) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Summary: ");
          __sb.Append(Summary);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_AddEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlaybackStream_AddEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_AddEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_AddEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_GetRecentStreamsForInitiatingPlayer_args : TBase
    {
      private string _initiatingPlayerId;
      private int _maxNumStreams;
      private int _clientIndex;

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public string InitiatingPlayerId
      {
        get
        {
          return _initiatingPlayerId;
        }
        set
        {
          __isset.initiatingPlayerId = true;
          this._initiatingPlayerId = value;
        }
      }

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public int MaxNumStreams
      {
        get
        {
          return _maxNumStreams;
        }
        set
        {
          __isset.maxNumStreams = true;
          this._maxNumStreams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool initiatingPlayerId;
        public bool maxNumStreams;
        public bool clientIndex;
      }

      public PlaybackStream_GetRecentStreamsForInitiatingPlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  InitiatingPlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MaxNumStreams = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_GetRecentStreamsForInitiatingPlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (InitiatingPlayerId != null && __isset.initiatingPlayerId) {
            field.Name = "initiatingPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(InitiatingPlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxNumStreams) {
            field.Name = "maxNumStreams";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxNumStreams);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_GetRecentStreamsForInitiatingPlayer_args(");
        bool __first = true;
        if (InitiatingPlayerId != null && __isset.initiatingPlayerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InitiatingPlayerId: ");
          __sb.Append(InitiatingPlayerId);
        }
        if (__isset.maxNumStreams) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxNumStreams: ");
          __sb.Append(MaxNumStreams);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_GetRecentStreamsForInitiatingPlayer_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlaybackStream_GetRecentStreamsForInitiatingPlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_GetRecentStreamsForInitiatingPlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_GetRecentStreamsForInitiatingPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_GetRecentStreamsForTargetPlayer_args : TBase
    {
      private string _targetPlayerId;
      private int _maxNumStreams;
      private int _clientIndex;

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public string TargetPlayerId
      {
        get
        {
          return _targetPlayerId;
        }
        set
        {
          __isset.targetPlayerId = true;
          this._targetPlayerId = value;
        }
      }

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public int MaxNumStreams
      {
        get
        {
          return _maxNumStreams;
        }
        set
        {
          __isset.maxNumStreams = true;
          this._maxNumStreams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool targetPlayerId;
        public bool maxNumStreams;
        public bool clientIndex;
      }

      public PlaybackStream_GetRecentStreamsForTargetPlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  TargetPlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MaxNumStreams = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_GetRecentStreamsForTargetPlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TargetPlayerId != null && __isset.targetPlayerId) {
            field.Name = "targetPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TargetPlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxNumStreams) {
            field.Name = "maxNumStreams";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxNumStreams);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_GetRecentStreamsForTargetPlayer_args(");
        bool __first = true;
        if (TargetPlayerId != null && __isset.targetPlayerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetPlayerId: ");
          __sb.Append(TargetPlayerId);
        }
        if (__isset.maxNumStreams) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxNumStreams: ");
          __sb.Append(MaxNumStreams);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaybackStream_GetRecentStreamsForTargetPlayer_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlaybackStream_GetRecentStreamsForTargetPlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaybackStream_GetRecentStreamsForTargetPlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaybackStream_GetRecentStreamsForTargetPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_ReadUserState_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerState_ReadUserState_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_ReadUserState_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_ReadUserState_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_ReadUserState_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_ReadUserState_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_ReadUserState_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_ReadUserState_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_DeleteUser_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerState_DeleteUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_DeleteUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_DeleteUser_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_DeleteUser_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_DeleteUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_DeleteUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_DeleteUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_ResetUser_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerState_ResetUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_ResetUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_ResetUser_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_ResetUser_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_ResetUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_ResetUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_ResetUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_Logout_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerState_Logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_Logout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_Logout_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_Logout_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_Logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_Logout_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_Logout_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateUserName_args : TBase
    {
      private string _userName;
      private int _clientIndex;

      /// <summary>
      /// The name of the user
      /// </summary>
      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userName;
        public bool clientIndex;
      }

      public PlayerState_UpdateUserName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateUserName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserName != null && __isset.userName) {
            field.Name = "userName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserName);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateUserName_args(");
        bool __first = true;
        if (UserName != null && __isset.userName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserName: ");
          __sb.Append(UserName);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateUserName_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_UpdateUserName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateUserName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateUserName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateSummaryFriendData_args : TBase
    {
      private string _jsonSummaryData;
      private int _clientIndex;

      /// <summary>
      /// A JSON string defining the summary data.
      /// For example:
      /// {
      ///   "xp":123,
      ///   "level":12,
      ///   "highScore":45123
      /// }
      /// </summary>
      public string JsonSummaryData
      {
        get
        {
          return _jsonSummaryData;
        }
        set
        {
          __isset.jsonSummaryData = true;
          this._jsonSummaryData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonSummaryData;
        public bool clientIndex;
      }

      public PlayerState_UpdateSummaryFriendData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonSummaryData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateSummaryFriendData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonSummaryData != null && __isset.jsonSummaryData) {
            field.Name = "jsonSummaryData";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonSummaryData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateSummaryFriendData_args(");
        bool __first = true;
        if (JsonSummaryData != null && __isset.jsonSummaryData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonSummaryData: ");
          __sb.Append(JsonSummaryData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateSummaryFriendData_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_UpdateSummaryFriendData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateSummaryFriendData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateSummaryFriendData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_GetAttributes_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerState_GetAttributes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_GetAttributes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_GetAttributes_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_GetAttributes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_GetAttributes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_GetAttributes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_GetAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateAttributes_args : TBase
    {
      private string _jsonAttributes;
      private bool _wipeExisting;
      private int _clientIndex;

      /// <summary>
      /// Single layer json string that is a set of key-value pairs
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      /// <summary>
      /// Whether to wipe existing attributes prior to update.
      /// </summary>
      public bool WipeExisting
      {
        get
        {
          return _wipeExisting;
        }
        set
        {
          __isset.wipeExisting = true;
          this._wipeExisting = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonAttributes;
        public bool wipeExisting;
        public bool clientIndex;
      }

      public PlayerState_UpdateAttributes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonAttributes = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  WipeExisting = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateAttributes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonAttributes != null && __isset.jsonAttributes) {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonAttributes);
            oprot.WriteFieldEnd();
          }
          if (__isset.wipeExisting) {
            field.Name = "wipeExisting";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(WipeExisting);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateAttributes_args(");
        bool __first = true;
        if (JsonAttributes != null && __isset.jsonAttributes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonAttributes: ");
          __sb.Append(JsonAttributes);
        }
        if (__isset.wipeExisting) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("WipeExisting: ");
          __sb.Append(WipeExisting);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateAttributes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_UpdateAttributes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateAttributes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_RemoveAttributes_args : TBase
    {
      private List<string> _attributeNames;
      private int _clientIndex;

      /// <summary>
      /// List of attribute names.
      /// </summary>
      public List<string> AttributeNames
      {
        get
        {
          return _attributeNames;
        }
        set
        {
          __isset.attributeNames = true;
          this._attributeNames = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool attributeNames;
        public bool clientIndex;
      }

      public PlayerState_RemoveAttributes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    AttributeNames = new List<string>();
                    TList _list37 = iprot.ReadListBegin();
                    for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                    {
                      string _elem39;
                      _elem39 = iprot.ReadString();
                      AttributeNames.Add(_elem39);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_RemoveAttributes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AttributeNames != null && __isset.attributeNames) {
            field.Name = "attributeNames";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, AttributeNames.Count));
              foreach (string _iter40 in AttributeNames)
              {
                oprot.WriteString(_iter40);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_RemoveAttributes_args(");
        bool __first = true;
        if (AttributeNames != null && __isset.attributeNames) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AttributeNames: ");
          __sb.Append(AttributeNames);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_RemoveAttributes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_RemoveAttributes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_RemoveAttributes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_RemoveAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateUserPictureUrl_args : TBase
    {
      private string _pictureUrl;
      private int _clientIndex;

      /// <summary>
      /// URL to apply.
      /// </summary>
      public string PictureUrl
      {
        get
        {
          return _pictureUrl;
        }
        set
        {
          __isset.pictureUrl = true;
          this._pictureUrl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pictureUrl;
        public bool clientIndex;
      }

      public PlayerState_UpdateUserPictureUrl_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PictureUrl = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateUserPictureUrl_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PictureUrl != null && __isset.pictureUrl) {
            field.Name = "pictureUrl";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PictureUrl);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateUserPictureUrl_args(");
        bool __first = true;
        if (PictureUrl != null && __isset.pictureUrl) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PictureUrl: ");
          __sb.Append(PictureUrl);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateUserPictureUrl_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_UpdateUserPictureUrl_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateUserPictureUrl_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateUserPictureUrl_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateContactEmail_args : TBase
    {
      private string _contactEmail;
      private int _clientIndex;

      /// <summary>
      /// Updated email
      /// </summary>
      public string ContactEmail
      {
        get
        {
          return _contactEmail;
        }
        set
        {
          __isset.contactEmail = true;
          this._contactEmail = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool contactEmail;
        public bool clientIndex;
      }

      public PlayerState_UpdateContactEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ContactEmail = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateContactEmail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ContactEmail != null && __isset.contactEmail) {
            field.Name = "contactEmail";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ContactEmail);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateContactEmail_args(");
        bool __first = true;
        if (ContactEmail != null && __isset.contactEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ContactEmail: ");
          __sb.Append(ContactEmail);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerState_UpdateContactEmail_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerState_UpdateContactEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerState_UpdateContactEmail_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerState_UpdateContactEmail_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ReadAllUserStats_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerStatistics_ReadAllUserStats_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ReadAllUserStats_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ReadAllUserStats_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ReadAllUserStats_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_ReadAllUserStats_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ReadAllUserStats_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ReadAllUserStats_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ReadUserStatsSubset_args : TBase
    {
      private List<string> _playerStats;
      private int _clientIndex;

      public List<string> PlayerStats
      {
        get
        {
          return _playerStats;
        }
        set
        {
          __isset.playerStats = true;
          this._playerStats = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playerStats;
        public bool clientIndex;
      }

      public PlayerStatistics_ReadUserStatsSubset_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    PlayerStats = new List<string>();
                    TList _list41 = iprot.ReadListBegin();
                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                    {
                      string _elem43;
                      _elem43 = iprot.ReadString();
                      PlayerStats.Add(_elem43);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ReadUserStatsSubset_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlayerStats != null && __isset.playerStats) {
            field.Name = "playerStats";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, PlayerStats.Count));
              foreach (string _iter44 in PlayerStats)
              {
                oprot.WriteString(_iter44);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ReadUserStatsSubset_args(");
        bool __first = true;
        if (PlayerStats != null && __isset.playerStats) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerStats: ");
          __sb.Append(PlayerStats);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ReadUserStatsSubset_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_ReadUserStatsSubset_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ReadUserStatsSubset_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ReadUserStatsSubset_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ReadUserStatsForCategory_args : TBase
    {
      private string _category;
      private int _clientIndex;

      /// <summary>
      /// The user statistics category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool category;
        public bool clientIndex;
      }

      public PlayerStatistics_ReadUserStatsForCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ReadUserStatsForCategory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ReadUserStatsForCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ReadUserStatsForCategory_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_ReadUserStatsForCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ReadUserStatsForCategory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ReadUserStatsForCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ResetAllUserStats_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerStatistics_ResetAllUserStats_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ResetAllUserStats_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ResetAllUserStats_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ResetAllUserStats_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_ResetAllUserStats_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ResetAllUserStats_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ResetAllUserStats_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_IncrementUserStats_SSFO_args : TBase
    {
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The JSON encoded data to be sent to the server as follows:
      /// {
      ///   stat1: 10,
      ///   stat2: -5.5,
      /// }
      /// would increment stat1 by 10 and decrement stat2 by 5.5.
      /// For the full statistics grammer see the api.braincloudservers.com site.
      /// There are many more complex operations supported such as:
      /// {
      ///   stat1:INC_TO_LIMIT#9#30
      /// }
      /// which increments stat1 by 9 up to a limit of 30.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonData;
        public bool clientIndex;
      }

      public PlayerStatistics_IncrementUserStats_SSFO_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_IncrementUserStats_SSFO_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_IncrementUserStats_SSFO_args(");
        bool __first = true;
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_IncrementUserStats_SSFO_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_IncrementUserStats_SSFO_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_IncrementUserStats_SSFO_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_IncrementUserStats_SSFO_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_IncrementUserStats_DSFO_args : TBase
    {
      private Dictionary<string, string> _dictData;
      private int _clientIndex;

      /// <summary>
      /// Stats name and their increments:
      /// {
      ///  {"stat1", 10},
      ///  {"stat1", -5}
      /// }
      /// 
      /// would increment stat1 by 10 and decrement stat2 by 5.
      /// For the full statistics grammer see the api.braincloudservers.com site.
      /// There are many more complex operations supported such as:
      /// {
      ///   stat1:INC_TO_LIMIT#9#30
      /// }
      /// which increments stat1 by 9 up to a limit of 30.
      /// </summary>
      public Dictionary<string, string> DictData
      {
        get
        {
          return _dictData;
        }
        set
        {
          __isset.dictData = true;
          this._dictData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dictData;
        public bool clientIndex;
      }

      public PlayerStatistics_IncrementUserStats_DSFO_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    DictData = new Dictionary<string, string>();
                    TMap _map45 = iprot.ReadMapBegin();
                    for( int _i46 = 0; _i46 < _map45.Count; ++_i46)
                    {
                      string _key47;
                      string _val48;
                      _key47 = iprot.ReadString();
                      _val48 = iprot.ReadString();
                      DictData[_key47] = _val48;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_IncrementUserStats_DSFO_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DictData != null && __isset.dictData) {
            field.Name = "dictData";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, DictData.Count));
              foreach (string _iter49 in DictData.Keys)
              {
                oprot.WriteString(_iter49);
                oprot.WriteString(DictData[_iter49]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_IncrementUserStats_DSFO_args(");
        bool __first = true;
        if (DictData != null && __isset.dictData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DictData: ");
          __sb.Append(DictData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_IncrementUserStats_DSFO_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_IncrementUserStats_DSFO_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_IncrementUserStats_DSFO_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_IncrementUserStats_DSFO_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ProcessStatistics_args : TBase
    {
      private Dictionary<string, string> _statisticsData;
      private int _clientIndex;

      /// <summary>
      /// Example data to be passed to method:
      /// {
      ///     "DEAD_CATS": "RESET",
      ///     "LIVES_LEFT": "SET#9",
      ///     "MICE_KILLED": "INC#2",
      ///     "DOG_SCARE_BONUS_POINTS": "INC#10",
      ///     "TREES_CLIMBED": 1
      /// }
      /// </summary>
      public Dictionary<string, string> StatisticsData
      {
        get
        {
          return _statisticsData;
        }
        set
        {
          __isset.statisticsData = true;
          this._statisticsData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statisticsData;
        public bool clientIndex;
      }

      public PlayerStatistics_ProcessStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    StatisticsData = new Dictionary<string, string>();
                    TMap _map50 = iprot.ReadMapBegin();
                    for( int _i51 = 0; _i51 < _map50.Count; ++_i51)
                    {
                      string _key52;
                      string _val53;
                      _key52 = iprot.ReadString();
                      _val53 = iprot.ReadString();
                      StatisticsData[_key52] = _val53;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ProcessStatistics_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (StatisticsData != null && __isset.statisticsData) {
            field.Name = "statisticsData";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, StatisticsData.Count));
              foreach (string _iter54 in StatisticsData.Keys)
              {
                oprot.WriteString(_iter54);
                oprot.WriteString(StatisticsData[_iter54]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ProcessStatistics_args(");
        bool __first = true;
        if (StatisticsData != null && __isset.statisticsData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StatisticsData: ");
          __sb.Append(StatisticsData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_ProcessStatistics_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_ProcessStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_ProcessStatistics_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_ProcessStatistics_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_GetNextExperienceLevel_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PlayerStatistics_GetNextExperienceLevel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_GetNextExperienceLevel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_GetNextExperienceLevel_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_GetNextExperienceLevel_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_GetNextExperienceLevel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_GetNextExperienceLevel_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_GetNextExperienceLevel_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_IncrementExperiencePoints_args : TBase
    {
      private int _xpValue;
      private int _clientIndex;

      /// <summary>
      /// The amount to increase the user's experience by
      /// </summary>
      public int XpValue
      {
        get
        {
          return _xpValue;
        }
        set
        {
          __isset.xpValue = true;
          this._xpValue = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool xpValue;
        public bool clientIndex;
      }

      public PlayerStatistics_IncrementExperiencePoints_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  XpValue = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_IncrementExperiencePoints_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.xpValue) {
            field.Name = "xpValue";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(XpValue);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_IncrementExperiencePoints_args(");
        bool __first = true;
        if (__isset.xpValue) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("XpValue: ");
          __sb.Append(XpValue);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_IncrementExperiencePoints_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_IncrementExperiencePoints_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_IncrementExperiencePoints_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_IncrementExperiencePoints_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_SetExperiencePoints_args : TBase
    {
      private int _xpValue;
      private int _clientIndex;

      /// <summary>
      /// The amount to set the the player's experience to
      /// </summary>
      public int XpValue
      {
        get
        {
          return _xpValue;
        }
        set
        {
          __isset.xpValue = true;
          this._xpValue = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool xpValue;
        public bool clientIndex;
      }

      public PlayerStatistics_SetExperiencePoints_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  XpValue = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_SetExperiencePoints_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.xpValue) {
            field.Name = "xpValue";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(XpValue);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_SetExperiencePoints_args(");
        bool __first = true;
        if (__isset.xpValue) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("XpValue: ");
          __sb.Append(XpValue);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatistics_SetExperiencePoints_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatistics_SetExperiencePoints_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatistics_SetExperiencePoints_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatistics_SetExperiencePoints_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatisticsEvent_TriggerStatsEvent_args : TBase
    {
      private string _eventName;
      private int _eventMultiplier;
      private int _clientIndex;

      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      public int EventMultiplier
      {
        get
        {
          return _eventMultiplier;
        }
        set
        {
          __isset.eventMultiplier = true;
          this._eventMultiplier = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool eventName;
        public bool eventMultiplier;
        public bool clientIndex;
      }

      public PlayerStatisticsEvent_TriggerStatsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EventName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  EventMultiplier = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EventName != null && __isset.eventName) {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventName);
            oprot.WriteFieldEnd();
          }
          if (__isset.eventMultiplier) {
            field.Name = "eventMultiplier";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(EventMultiplier);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventName: ");
          __sb.Append(EventName);
        }
        if (__isset.eventMultiplier) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventMultiplier: ");
          __sb.Append(EventMultiplier);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatisticsEvent_TriggerStatsEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatisticsEvent_TriggerStatsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatisticsEvent_TriggerStatsEvents_args : TBase
    {
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// jsonData
      /// [
      ///   {
      ///     "eventName": "event1",
      ///     "eventMultiplier": 1
      ///   },
      ///   {
      ///     "eventName": "event2",
      ///     "eventMultiplier": 1
      ///   }
      /// ]
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jsonData;
        public bool clientIndex;
      }

      public PlayerStatisticsEvent_TriggerStatsEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvents_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvents_args(");
        bool __first = true;
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerStatisticsEvent_TriggerStatsEvents_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerStatisticsEvent_TriggerStatsEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvents_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvents_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetCurrency_args : TBase
    {
      private string _currencyType;
      private int _clientIndex;

      /// <summary>
      /// The currency type to retrieve or null
      /// if all currency types are being requested.
      /// </summary>
      public string CurrencyType
      {
        get
        {
          return _currencyType;
        }
        set
        {
          __isset.currencyType = true;
          this._currencyType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool currencyType;
        public bool clientIndex;
      }

      public Product_GetCurrency_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CurrencyType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetCurrency_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CurrencyType != null && __isset.currencyType) {
            field.Name = "currencyType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CurrencyType);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetCurrency_args(");
        bool __first = true;
        if (CurrencyType != null && __isset.currencyType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CurrencyType: ");
          __sb.Append(CurrencyType);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetCurrency_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Product_GetCurrency_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetCurrency_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetCurrency_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetSalesInventory_args : TBase
    {
      private string _platform;
      private string _userCurrency;
      private int _clientIndex;

      /// <summary>
      /// The store platform. Valid stores are:
      /// - itunes
      /// - facebook
      /// - appworld
      /// - steam
      /// - windows
      /// - windowsPhone
      /// - googlePlay
      /// </summary>
      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The currency to retrieve the sales
      /// inventory for. This is only used for Steam and Facebook stores.
      /// </summary>
      public string UserCurrency
      {
        get
        {
          return _userCurrency;
        }
        set
        {
          __isset.userCurrency = true;
          this._userCurrency = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platform;
        public bool userCurrency;
        public bool clientIndex;
      }

      public Product_GetSalesInventory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Platform = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserCurrency = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetSalesInventory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Platform != null && __isset.platform) {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Platform);
            oprot.WriteFieldEnd();
          }
          if (UserCurrency != null && __isset.userCurrency) {
            field.Name = "userCurrency";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserCurrency);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetSalesInventory_args(");
        bool __first = true;
        if (Platform != null && __isset.platform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Platform: ");
          __sb.Append(Platform);
        }
        if (UserCurrency != null && __isset.userCurrency) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCurrency: ");
          __sb.Append(UserCurrency);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetSalesInventory_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Product_GetSalesInventory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetSalesInventory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetSalesInventory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetSalesInventoryByCategory_args : TBase
    {
      private string _platform;
      private string _userCurrency;
      private string _category;
      private int _clientIndex;

      /// <summary>
      /// The store platform. Valid stores are:
      /// - itunes
      /// - facebook
      /// - appworld
      /// - steam
      /// - windows
      /// - windowsPhone
      /// - googlePlay
      /// </summary>
      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The currency to retrieve the sales
      /// inventory for. This is only used for Steam and Facebook stores.
      /// </summary>
      public string UserCurrency
      {
        get
        {
          return _userCurrency;
        }
        set
        {
          __isset.userCurrency = true;
          this._userCurrency = value;
        }
      }

      /// <summary>
      /// The product category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platform;
        public bool userCurrency;
        public bool category;
        public bool clientIndex;
      }

      public Product_GetSalesInventoryByCategory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Platform = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserCurrency = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetSalesInventoryByCategory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Platform != null && __isset.platform) {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Platform);
            oprot.WriteFieldEnd();
          }
          if (UserCurrency != null && __isset.userCurrency) {
            field.Name = "userCurrency";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserCurrency);
            oprot.WriteFieldEnd();
          }
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetSalesInventoryByCategory_args(");
        bool __first = true;
        if (Platform != null && __isset.platform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Platform: ");
          __sb.Append(Platform);
        }
        if (UserCurrency != null && __isset.userCurrency) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCurrency: ");
          __sb.Append(UserCurrency);
        }
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetSalesInventoryByCategory_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Product_GetSalesInventoryByCategory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetSalesInventoryByCategory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetSalesInventoryByCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_VerifyMicrosoftReceipt_args : TBase
    {
      private string _receipt;
      private int _clientIndex;

      /// <summary>
      /// Receipt XML
      /// </summary>
      public string Receipt
      {
        get
        {
          return _receipt;
        }
        set
        {
          __isset.receipt = true;
          this._receipt = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool receipt;
        public bool clientIndex;
      }

      public Product_VerifyMicrosoftReceipt_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Receipt = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_VerifyMicrosoftReceipt_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Receipt != null && __isset.receipt) {
            field.Name = "receipt";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Receipt);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_VerifyMicrosoftReceipt_args(");
        bool __first = true;
        if (Receipt != null && __isset.receipt) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Receipt: ");
          __sb.Append(Receipt);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_VerifyMicrosoftReceipt_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Product_VerifyMicrosoftReceipt_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_VerifyMicrosoftReceipt_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_VerifyMicrosoftReceipt_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetEligiblePromotions_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Product_GetEligiblePromotions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetEligiblePromotions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetEligiblePromotions_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_GetEligiblePromotions_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Product_GetEligiblePromotions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_GetEligiblePromotions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_GetEligiblePromotions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_VerifyItunesReceipt_args : TBase
    {
      private string _base64EncReceiptData;
      private int _clientIndex;

      /// <summary>
      /// Base64 encoded receipt data
      /// </summary>
      public string Base64EncReceiptData
      {
        get
        {
          return _base64EncReceiptData;
        }
        set
        {
          __isset.base64EncReceiptData = true;
          this._base64EncReceiptData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool base64EncReceiptData;
        public bool clientIndex;
      }

      public Product_VerifyItunesReceipt_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Base64EncReceiptData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_VerifyItunesReceipt_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Base64EncReceiptData != null && __isset.base64EncReceiptData) {
            field.Name = "base64EncReceiptData";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Base64EncReceiptData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_VerifyItunesReceipt_args(");
        bool __first = true;
        if (Base64EncReceiptData != null && __isset.base64EncReceiptData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Base64EncReceiptData: ");
          __sb.Append(Base64EncReceiptData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Product_VerifyItunesReceipt_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Product_VerifyItunesReceipt_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Product_VerifyItunesReceipt_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Product_VerifyItunesReceipt_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Profanity_ProfanityCheck_args : TBase
    {
      private string _text;
      private string _languages;
      private bool _flagEmail;
      private bool _flagPhone;
      private bool _flagUrls;
      private int _clientIndex;

      /// <summary>
      /// The text to check
      /// </summary>
      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      /// <summary>
      /// Optional comma delimited list of two character language codes
      /// </summary>
      public string Languages
      {
        get
        {
          return _languages;
        }
        set
        {
          __isset.languages = true;
          this._languages = value;
        }
      }

      /// <summary>
      /// Optional processing of email addresses
      /// </summary>
      public bool FlagEmail
      {
        get
        {
          return _flagEmail;
        }
        set
        {
          __isset.flagEmail = true;
          this._flagEmail = value;
        }
      }

      /// <summary>
      /// Optional processing of phone numbers
      /// </summary>
      public bool FlagPhone
      {
        get
        {
          return _flagPhone;
        }
        set
        {
          __isset.flagPhone = true;
          this._flagPhone = value;
        }
      }

      /// <summary>
      /// Optional processing of urls
      /// </summary>
      public bool FlagUrls
      {
        get
        {
          return _flagUrls;
        }
        set
        {
          __isset.flagUrls = true;
          this._flagUrls = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool text;
        public bool languages;
        public bool flagEmail;
        public bool flagPhone;
        public bool flagUrls;
        public bool clientIndex;
      }

      public Profanity_ProfanityCheck_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Text = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Languages = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  FlagEmail = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  FlagPhone = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Bool) {
                  FlagUrls = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Profanity_ProfanityCheck_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Text != null && __isset.text) {
            field.Name = "text";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Text);
            oprot.WriteFieldEnd();
          }
          if (Languages != null && __isset.languages) {
            field.Name = "languages";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Languages);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagEmail) {
            field.Name = "flagEmail";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagEmail);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagPhone) {
            field.Name = "flagPhone";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagPhone);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagUrls) {
            field.Name = "flagUrls";
            field.Type = TType.Bool;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagUrls);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Profanity_ProfanityCheck_args(");
        bool __first = true;
        if (Text != null && __isset.text) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Text: ");
          __sb.Append(Text);
        }
        if (Languages != null && __isset.languages) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Languages: ");
          __sb.Append(Languages);
        }
        if (__isset.flagEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagEmail: ");
          __sb.Append(FlagEmail);
        }
        if (__isset.flagPhone) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagPhone: ");
          __sb.Append(FlagPhone);
        }
        if (__isset.flagUrls) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagUrls: ");
          __sb.Append(FlagUrls);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Profanity_ProfanityCheck_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Profanity_ProfanityCheck_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Profanity_ProfanityCheck_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Profanity_ProfanityCheck_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Profanity_ProfanityReplaceText_args : TBase
    {
      private string _text;
      private string _replaceSymbol;
      private string _languages;
      private bool _flagEmail;
      private bool _flagPhone;
      private bool _flagUrls;
      private int _clientIndex;

      /// <summary>
      /// The text to check
      /// </summary>
      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      /// <summary>
      /// The text to replace individual characters of profanity text with
      /// </summary>
      public string ReplaceSymbol
      {
        get
        {
          return _replaceSymbol;
        }
        set
        {
          __isset.replaceSymbol = true;
          this._replaceSymbol = value;
        }
      }

      /// <summary>
      /// Optional comma delimited list of two character language codes
      /// </summary>
      public string Languages
      {
        get
        {
          return _languages;
        }
        set
        {
          __isset.languages = true;
          this._languages = value;
        }
      }

      /// <summary>
      /// Optional processing of email addresses
      /// </summary>
      public bool FlagEmail
      {
        get
        {
          return _flagEmail;
        }
        set
        {
          __isset.flagEmail = true;
          this._flagEmail = value;
        }
      }

      /// <summary>
      /// Optional processing of phone numbers
      /// </summary>
      public bool FlagPhone
      {
        get
        {
          return _flagPhone;
        }
        set
        {
          __isset.flagPhone = true;
          this._flagPhone = value;
        }
      }

      /// <summary>
      /// Optional processing of urls
      /// </summary>
      public bool FlagUrls
      {
        get
        {
          return _flagUrls;
        }
        set
        {
          __isset.flagUrls = true;
          this._flagUrls = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool text;
        public bool replaceSymbol;
        public bool languages;
        public bool flagEmail;
        public bool flagPhone;
        public bool flagUrls;
        public bool clientIndex;
      }

      public Profanity_ProfanityReplaceText_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Text = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ReplaceSymbol = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Languages = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  FlagEmail = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Bool) {
                  FlagPhone = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.Bool) {
                  FlagUrls = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Profanity_ProfanityReplaceText_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Text != null && __isset.text) {
            field.Name = "text";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Text);
            oprot.WriteFieldEnd();
          }
          if (ReplaceSymbol != null && __isset.replaceSymbol) {
            field.Name = "replaceSymbol";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ReplaceSymbol);
            oprot.WriteFieldEnd();
          }
          if (Languages != null && __isset.languages) {
            field.Name = "languages";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Languages);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagEmail) {
            field.Name = "flagEmail";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagEmail);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagPhone) {
            field.Name = "flagPhone";
            field.Type = TType.Bool;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagPhone);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagUrls) {
            field.Name = "flagUrls";
            field.Type = TType.Bool;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagUrls);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Profanity_ProfanityReplaceText_args(");
        bool __first = true;
        if (Text != null && __isset.text) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Text: ");
          __sb.Append(Text);
        }
        if (ReplaceSymbol != null && __isset.replaceSymbol) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReplaceSymbol: ");
          __sb.Append(ReplaceSymbol);
        }
        if (Languages != null && __isset.languages) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Languages: ");
          __sb.Append(Languages);
        }
        if (__isset.flagEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagEmail: ");
          __sb.Append(FlagEmail);
        }
        if (__isset.flagPhone) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagPhone: ");
          __sb.Append(FlagPhone);
        }
        if (__isset.flagUrls) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagUrls: ");
          __sb.Append(FlagUrls);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Profanity_ProfanityReplaceText_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Profanity_ProfanityReplaceText_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Profanity_ProfanityReplaceText_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Profanity_ProfanityReplaceText_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Profanity_ProfanityIdentifyBadWords_args : TBase
    {
      private string _text;
      private string _languages;
      private bool _flagEmail;
      private bool _flagPhone;
      private bool _flagUrls;
      private int _clientIndex;

      /// <summary>
      /// The text to check
      /// </summary>
      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      /// <summary>
      /// Optional comma delimited list of two character language codes
      /// </summary>
      public string Languages
      {
        get
        {
          return _languages;
        }
        set
        {
          __isset.languages = true;
          this._languages = value;
        }
      }

      /// <summary>
      /// Optional processing of email addresses
      /// </summary>
      public bool FlagEmail
      {
        get
        {
          return _flagEmail;
        }
        set
        {
          __isset.flagEmail = true;
          this._flagEmail = value;
        }
      }

      /// <summary>
      /// Optional processing of phone numbers
      /// </summary>
      public bool FlagPhone
      {
        get
        {
          return _flagPhone;
        }
        set
        {
          __isset.flagPhone = true;
          this._flagPhone = value;
        }
      }

      /// <summary>
      /// Optional processing of urls
      /// </summary>
      public bool FlagUrls
      {
        get
        {
          return _flagUrls;
        }
        set
        {
          __isset.flagUrls = true;
          this._flagUrls = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool text;
        public bool languages;
        public bool flagEmail;
        public bool flagPhone;
        public bool flagUrls;
        public bool clientIndex;
      }

      public Profanity_ProfanityIdentifyBadWords_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Text = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Languages = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  FlagEmail = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  FlagPhone = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Bool) {
                  FlagUrls = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Profanity_ProfanityIdentifyBadWords_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Text != null && __isset.text) {
            field.Name = "text";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Text);
            oprot.WriteFieldEnd();
          }
          if (Languages != null && __isset.languages) {
            field.Name = "languages";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Languages);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagEmail) {
            field.Name = "flagEmail";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagEmail);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagPhone) {
            field.Name = "flagPhone";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagPhone);
            oprot.WriteFieldEnd();
          }
          if (__isset.flagUrls) {
            field.Name = "flagUrls";
            field.Type = TType.Bool;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(FlagUrls);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Profanity_ProfanityIdentifyBadWords_args(");
        bool __first = true;
        if (Text != null && __isset.text) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Text: ");
          __sb.Append(Text);
        }
        if (Languages != null && __isset.languages) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Languages: ");
          __sb.Append(Languages);
        }
        if (__isset.flagEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagEmail: ");
          __sb.Append(FlagEmail);
        }
        if (__isset.flagPhone) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagPhone: ");
          __sb.Append(FlagPhone);
        }
        if (__isset.flagUrls) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FlagUrls: ");
          __sb.Append(FlagUrls);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Profanity_ProfanityIdentifyBadWords_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Profanity_ProfanityIdentifyBadWords_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Profanity_ProfanityIdentifyBadWords_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Profanity_ProfanityIdentifyBadWords_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_DeregisterAllPushNotificationDeviceTokens_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public PushNotification_DeregisterAllPushNotificationDeviceTokens_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_DeregisterAllPushNotificationDeviceTokens_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_DeregisterAllPushNotificationDeviceTokens_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_DeregisterAllPushNotificationDeviceTokens_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_DeregisterAllPushNotificationDeviceTokens_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_DeregisterAllPushNotificationDeviceTokens_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_DeregisterAllPushNotificationDeviceTokens_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_DeregisterPushNotificationDeviceToken_args : TBase
    {
      private string _platform;
      private string _token;
      private int _clientIndex;

      /// <summary>
      /// The device platform being registered.
      /// </summary>
      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The platform-dependant device token needed for push notifications.
      /// </summary>
      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platform;
        public bool token;
        public bool clientIndex;
      }

      public PushNotification_DeregisterPushNotificationDeviceToken_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Platform = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Token = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_DeregisterPushNotificationDeviceToken_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Platform != null && __isset.platform) {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Platform);
            oprot.WriteFieldEnd();
          }
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Token);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_DeregisterPushNotificationDeviceToken_args(");
        bool __first = true;
        if (Platform != null && __isset.platform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Platform: ");
          __sb.Append(Platform);
        }
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_DeregisterPushNotificationDeviceToken_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_DeregisterPushNotificationDeviceToken_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_DeregisterPushNotificationDeviceToken_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_DeregisterPushNotificationDeviceToken_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_RegisterPushNotificationDeviceToken_args : TBase
    {
      private string _platform;
      private string _token;
      private int _clientIndex;

      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The platform-dependant device token needed for push notifications.
      /// </summary>
      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platform;
        public bool token;
        public bool clientIndex;
      }

      public PushNotification_RegisterPushNotificationDeviceToken_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Platform = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Token = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_RegisterPushNotificationDeviceToken_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Platform != null && __isset.platform) {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Platform);
            oprot.WriteFieldEnd();
          }
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Token);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_RegisterPushNotificationDeviceToken_args(");
        bool __first = true;
        if (Platform != null && __isset.platform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Platform: ");
          __sb.Append(Platform);
        }
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_RegisterPushNotificationDeviceToken_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_RegisterPushNotificationDeviceToken_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_RegisterPushNotificationDeviceToken_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_RegisterPushNotificationDeviceToken_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendSimplePushNotification_args : TBase
    {
      private string _toProfileId;
      private string _message;
      private int _clientIndex;

      /// <summary>
      /// The braincloud profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Text of the push notification
      /// </summary>
      public string Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool toProfileId;
        public bool message;
        public bool clientIndex;
      }

      public PushNotification_SendSimplePushNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ToProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Message = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendSimplePushNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ToProfileId != null && __isset.toProfileId) {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ToProfileId);
            oprot.WriteFieldEnd();
          }
          if (Message != null && __isset.message) {
            field.Name = "message";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Message);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendSimplePushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToProfileId: ");
          __sb.Append(ToProfileId);
        }
        if (Message != null && __isset.message) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Message: ");
          __sb.Append(Message);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendSimplePushNotification_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendSimplePushNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendSimplePushNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendSimplePushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRichPushNotification_args : TBase
    {
      private string _toProfileId;
      private int _notificationTemplateId;
      private int _clientIndex;

      /// <summary>
      /// The braincloud profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Id of the notification template
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool toProfileId;
        public bool notificationTemplateId;
        public bool clientIndex;
      }

      public PushNotification_SendRichPushNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ToProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NotificationTemplateId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRichPushNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ToProfileId != null && __isset.toProfileId) {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ToProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.notificationTemplateId) {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NotificationTemplateId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRichPushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToProfileId: ");
          __sb.Append(ToProfileId);
        }
        if (__isset.notificationTemplateId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotificationTemplateId: ");
          __sb.Append(NotificationTemplateId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRichPushNotification_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendRichPushNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRichPushNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRichPushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRichPushNotificationWithParams_args : TBase
    {
      private string _toProfileId;
      private int _notificationTemplateId;
      private string _substitutionJson;
      private int _clientIndex;

      /// <summary>
      /// The braincloud profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Id of the notification template
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// JSON defining the substitution params to use with the template
      /// </summary>
      public string SubstitutionJson
      {
        get
        {
          return _substitutionJson;
        }
        set
        {
          __isset.substitutionJson = true;
          this._substitutionJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool toProfileId;
        public bool notificationTemplateId;
        public bool substitutionJson;
        public bool clientIndex;
      }

      public PushNotification_SendRichPushNotificationWithParams_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ToProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NotificationTemplateId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SubstitutionJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRichPushNotificationWithParams_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ToProfileId != null && __isset.toProfileId) {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ToProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.notificationTemplateId) {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NotificationTemplateId);
            oprot.WriteFieldEnd();
          }
          if (SubstitutionJson != null && __isset.substitutionJson) {
            field.Name = "substitutionJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubstitutionJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRichPushNotificationWithParams_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToProfileId: ");
          __sb.Append(ToProfileId);
        }
        if (__isset.notificationTemplateId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotificationTemplateId: ");
          __sb.Append(NotificationTemplateId);
        }
        if (SubstitutionJson != null && __isset.substitutionJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubstitutionJson: ");
          __sb.Append(SubstitutionJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRichPushNotificationWithParams_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendRichPushNotificationWithParams_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRichPushNotificationWithParams_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRichPushNotificationWithParams_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendTemplatedPushNotificationToGroup_args : TBase
    {
      private string _groupId;
      private int _notificationTemplateId;
      private string _substitutionsJson;
      private int _clientIndex;

      /// <summary>
      /// Target group
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Id of the notification template
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// JSON defining the substitution params to use with the template
      /// </summary>
      public string SubstitutionsJson
      {
        get
        {
          return _substitutionsJson;
        }
        set
        {
          __isset.substitutionsJson = true;
          this._substitutionsJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool notificationTemplateId;
        public bool substitutionsJson;
        public bool clientIndex;
      }

      public PushNotification_SendTemplatedPushNotificationToGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NotificationTemplateId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SubstitutionsJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendTemplatedPushNotificationToGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.notificationTemplateId) {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NotificationTemplateId);
            oprot.WriteFieldEnd();
          }
          if (SubstitutionsJson != null && __isset.substitutionsJson) {
            field.Name = "substitutionsJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubstitutionsJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendTemplatedPushNotificationToGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.notificationTemplateId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotificationTemplateId: ");
          __sb.Append(NotificationTemplateId);
        }
        if (SubstitutionsJson != null && __isset.substitutionsJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubstitutionsJson: ");
          __sb.Append(SubstitutionsJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendTemplatedPushNotificationToGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendTemplatedPushNotificationToGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendTemplatedPushNotificationToGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendTemplatedPushNotificationToGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendNormalizedPushNotificationToGroup_args : TBase
    {
      private string _groupId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _clientIndex;

      /// <summary>
      /// Target group
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool clientIndex;
      }

      public PushNotification_SendNormalizedPushNotificationToGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AlertContentJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CustomDataJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendNormalizedPushNotificationToGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (AlertContentJson != null && __isset.alertContentJson) {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AlertContentJson);
            oprot.WriteFieldEnd();
          }
          if (CustomDataJson != null && __isset.customDataJson) {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CustomDataJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationToGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (AlertContentJson != null && __isset.alertContentJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AlertContentJson: ");
          __sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomDataJson: ");
          __sb.Append(CustomDataJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendNormalizedPushNotificationToGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendNormalizedPushNotificationToGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendNormalizedPushNotificationToGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationToGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRawPushNotificationUTC_args : TBase
    {
      private string _profileId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _startTime;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      /// <summary>
      /// Start time of sending the push notification
      /// </summary>
      public int StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool startTime;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRawPushNotificationUTC_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FcmContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  IosContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  FacebookContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  StartTime = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRawPushNotificationUTC_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (FcmContent != null && __isset.fcmContent) {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FcmContent);
            oprot.WriteFieldEnd();
          }
          if (IosContent != null && __isset.iosContent) {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(IosContent);
            oprot.WriteFieldEnd();
          }
          if (FacebookContent != null && __isset.facebookContent) {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FacebookContent);
            oprot.WriteFieldEnd();
          }
          if (__isset.startTime) {
            field.Name = "startTime";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StartTime);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationUTC_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (FcmContent != null && __isset.fcmContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FcmContent: ");
          __sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IosContent: ");
          __sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FacebookContent: ");
          __sb.Append(FacebookContent);
        }
        if (__isset.startTime) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartTime: ");
          __sb.Append(StartTime);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRawPushNotificationUTC_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_ScheduleRawPushNotificationUTC_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRawPushNotificationUTC_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRawPushNotificationMinutes_args : TBase
    {
      private string _profileId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      /// <summary>
      /// Minutes from now to send the push notification
      /// </summary>
      public int MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRawPushNotificationMinutes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FcmContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  IosContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  FacebookContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  MinutesFromNow = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRawPushNotificationMinutes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (FcmContent != null && __isset.fcmContent) {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FcmContent);
            oprot.WriteFieldEnd();
          }
          if (IosContent != null && __isset.iosContent) {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(IosContent);
            oprot.WriteFieldEnd();
          }
          if (FacebookContent != null && __isset.facebookContent) {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FacebookContent);
            oprot.WriteFieldEnd();
          }
          if (__isset.minutesFromNow) {
            field.Name = "minutesFromNow";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinutesFromNow);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationMinutes_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (FcmContent != null && __isset.fcmContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FcmContent: ");
          __sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IosContent: ");
          __sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FacebookContent: ");
          __sb.Append(FacebookContent);
        }
        if (__isset.minutesFromNow) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinutesFromNow: ");
          __sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRawPushNotificationMinutes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_ScheduleRawPushNotificationMinutes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRawPushNotificationMinutes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRawPushNotification_args : TBase
    {
      private string _toProfileId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool toProfileId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool clientIndex;
      }

      public PushNotification_SendRawPushNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ToProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FcmContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  IosContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  FacebookContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRawPushNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ToProfileId != null && __isset.toProfileId) {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ToProfileId);
            oprot.WriteFieldEnd();
          }
          if (FcmContent != null && __isset.fcmContent) {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FcmContent);
            oprot.WriteFieldEnd();
          }
          if (IosContent != null && __isset.iosContent) {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(IosContent);
            oprot.WriteFieldEnd();
          }
          if (FacebookContent != null && __isset.facebookContent) {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FacebookContent);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRawPushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToProfileId: ");
          __sb.Append(ToProfileId);
        }
        if (FcmContent != null && __isset.fcmContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FcmContent: ");
          __sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IosContent: ");
          __sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FacebookContent: ");
          __sb.Append(FacebookContent);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRawPushNotification_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendRawPushNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRawPushNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRawPushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRawPushNotificationBatch_args : TBase
    {
      private List<string> _profileIds;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs to send the notification to
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileIds;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool clientIndex;
      }

      public PushNotification_SendRawPushNotificationBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    ProfileIds = new List<string>();
                    TList _list55 = iprot.ReadListBegin();
                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)
                    {
                      string _elem57;
                      _elem57 = iprot.ReadString();
                      ProfileIds.Add(_elem57);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FcmContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  IosContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  FacebookContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRawPushNotificationBatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileIds != null && __isset.profileIds) {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProfileIds.Count));
              foreach (string _iter58 in ProfileIds)
              {
                oprot.WriteString(_iter58);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (FcmContent != null && __isset.fcmContent) {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FcmContent);
            oprot.WriteFieldEnd();
          }
          if (IosContent != null && __isset.iosContent) {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(IosContent);
            oprot.WriteFieldEnd();
          }
          if (FacebookContent != null && __isset.facebookContent) {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FacebookContent);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRawPushNotificationBatch_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileIds: ");
          __sb.Append(ProfileIds);
        }
        if (FcmContent != null && __isset.fcmContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FcmContent: ");
          __sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IosContent: ");
          __sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FacebookContent: ");
          __sb.Append(FacebookContent);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRawPushNotificationBatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendRawPushNotificationBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRawPushNotificationBatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRawPushNotificationBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRawPushNotificationToGroup_args : TBase
    {
      private string _groupId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _clientIndex;

      /// <summary>
      /// Target group
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool clientIndex;
      }

      public PushNotification_SendRawPushNotificationToGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FcmContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  IosContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  FacebookContent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRawPushNotificationToGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (FcmContent != null && __isset.fcmContent) {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FcmContent);
            oprot.WriteFieldEnd();
          }
          if (IosContent != null && __isset.iosContent) {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(IosContent);
            oprot.WriteFieldEnd();
          }
          if (FacebookContent != null && __isset.facebookContent) {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FacebookContent);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRawPushNotificationToGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (FcmContent != null && __isset.fcmContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FcmContent: ");
          __sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IosContent: ");
          __sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FacebookContent: ");
          __sb.Append(FacebookContent);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendRawPushNotificationToGroup_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendRawPushNotificationToGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendRawPushNotificationToGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendRawPushNotificationToGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleNormalizedPushNotificationUTC_args : TBase
    {
      private string _profileId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _startTime;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      /// <summary>
      /// Start time of sending the push notification
      /// </summary>
      public int StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool startTime;
        public bool clientIndex;
      }

      public PushNotification_ScheduleNormalizedPushNotificationUTC_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AlertContentJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CustomDataJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  StartTime = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationUTC_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (AlertContentJson != null && __isset.alertContentJson) {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AlertContentJson);
            oprot.WriteFieldEnd();
          }
          if (CustomDataJson != null && __isset.customDataJson) {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CustomDataJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.startTime) {
            field.Name = "startTime";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StartTime);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationUTC_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (AlertContentJson != null && __isset.alertContentJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AlertContentJson: ");
          __sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomDataJson: ");
          __sb.Append(CustomDataJson);
        }
        if (__isset.startTime) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartTime: ");
          __sb.Append(StartTime);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleNormalizedPushNotificationUTC_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_ScheduleNormalizedPushNotificationUTC_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationUTC_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleNormalizedPushNotificationMinutes_args : TBase
    {
      private string _profileId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      /// <summary>
      /// Minutes from now to send the push notification
      /// </summary>
      public int MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public PushNotification_ScheduleNormalizedPushNotificationMinutes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AlertContentJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CustomDataJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  MinutesFromNow = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationMinutes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (AlertContentJson != null && __isset.alertContentJson) {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AlertContentJson);
            oprot.WriteFieldEnd();
          }
          if (CustomDataJson != null && __isset.customDataJson) {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CustomDataJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.minutesFromNow) {
            field.Name = "minutesFromNow";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinutesFromNow);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationMinutes_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (AlertContentJson != null && __isset.alertContentJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AlertContentJson: ");
          __sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomDataJson: ");
          __sb.Append(CustomDataJson);
        }
        if (__isset.minutesFromNow) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinutesFromNow: ");
          __sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleNormalizedPushNotificationMinutes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_ScheduleNormalizedPushNotificationMinutes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationMinutes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRichPushNotificationUTC_args : TBase
    {
      private string _profileId;
      private int _notificationTemplateId;
      private string _substitutionsJson;
      private int _startTime;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string SubstitutionsJson
      {
        get
        {
          return _substitutionsJson;
        }
        set
        {
          __isset.substitutionsJson = true;
          this._substitutionsJson = value;
        }
      }

      /// <summary>
      /// Start time of sending the push notification
      /// </summary>
      public int StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool notificationTemplateId;
        public bool substitutionsJson;
        public bool startTime;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRichPushNotificationUTC_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NotificationTemplateId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SubstitutionsJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  StartTime = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRichPushNotificationUTC_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.notificationTemplateId) {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NotificationTemplateId);
            oprot.WriteFieldEnd();
          }
          if (SubstitutionsJson != null && __isset.substitutionsJson) {
            field.Name = "substitutionsJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubstitutionsJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.startTime) {
            field.Name = "startTime";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StartTime);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationUTC_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.notificationTemplateId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotificationTemplateId: ");
          __sb.Append(NotificationTemplateId);
        }
        if (SubstitutionsJson != null && __isset.substitutionsJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubstitutionsJson: ");
          __sb.Append(SubstitutionsJson);
        }
        if (__isset.startTime) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartTime: ");
          __sb.Append(StartTime);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRichPushNotificationUTC_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_ScheduleRichPushNotificationUTC_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRichPushNotificationUTC_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRichPushNotificationMinutes_args : TBase
    {
      private string _profileId;
      private int _notificationTemplateId;
      private string _substitutionsJson;
      private int _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string SubstitutionsJson
      {
        get
        {
          return _substitutionsJson;
        }
        set
        {
          __isset.substitutionsJson = true;
          this._substitutionsJson = value;
        }
      }

      /// <summary>
      /// Minutes from now to send the push notification
      /// </summary>
      public int MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileId;
        public bool notificationTemplateId;
        public bool substitutionsJson;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRichPushNotificationMinutes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NotificationTemplateId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SubstitutionsJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  MinutesFromNow = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRichPushNotificationMinutes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileId != null && __isset.profileId) {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileId);
            oprot.WriteFieldEnd();
          }
          if (__isset.notificationTemplateId) {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NotificationTemplateId);
            oprot.WriteFieldEnd();
          }
          if (SubstitutionsJson != null && __isset.substitutionsJson) {
            field.Name = "substitutionsJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubstitutionsJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.minutesFromNow) {
            field.Name = "minutesFromNow";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinutesFromNow);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationMinutes_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileId: ");
          __sb.Append(ProfileId);
        }
        if (__isset.notificationTemplateId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotificationTemplateId: ");
          __sb.Append(NotificationTemplateId);
        }
        if (SubstitutionsJson != null && __isset.substitutionsJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubstitutionsJson: ");
          __sb.Append(SubstitutionsJson);
        }
        if (__isset.minutesFromNow) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinutesFromNow: ");
          __sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_ScheduleRichPushNotificationMinutes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_ScheduleRichPushNotificationMinutes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_ScheduleRichPushNotificationMinutes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendNormalizedPushNotification_args : TBase
    {
      private string _toProfileId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool toProfileId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool clientIndex;
      }

      public PushNotification_SendNormalizedPushNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ToProfileId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AlertContentJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CustomDataJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendNormalizedPushNotification_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ToProfileId != null && __isset.toProfileId) {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ToProfileId);
            oprot.WriteFieldEnd();
          }
          if (AlertContentJson != null && __isset.alertContentJson) {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AlertContentJson);
            oprot.WriteFieldEnd();
          }
          if (CustomDataJson != null && __isset.customDataJson) {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CustomDataJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendNormalizedPushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToProfileId: ");
          __sb.Append(ToProfileId);
        }
        if (AlertContentJson != null && __isset.alertContentJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AlertContentJson: ");
          __sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomDataJson: ");
          __sb.Append(CustomDataJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendNormalizedPushNotification_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendNormalizedPushNotification_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendNormalizedPushNotification_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendNormalizedPushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendNormalizedPushNotificationBatch_args : TBase
    {
      private List<string> _profileIds;
      private string _alertContentJson;
      private string _customDataJson;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs to send the notification to
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileIds;
        public bool alertContentJson;
        public bool customDataJson;
        public bool clientIndex;
      }

      public PushNotification_SendNormalizedPushNotificationBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    ProfileIds = new List<string>();
                    TList _list59 = iprot.ReadListBegin();
                    for( int _i60 = 0; _i60 < _list59.Count; ++_i60)
                    {
                      string _elem61;
                      _elem61 = iprot.ReadString();
                      ProfileIds.Add(_elem61);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AlertContentJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CustomDataJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendNormalizedPushNotificationBatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileIds != null && __isset.profileIds) {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProfileIds.Count));
              foreach (string _iter62 in ProfileIds)
              {
                oprot.WriteString(_iter62);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (AlertContentJson != null && __isset.alertContentJson) {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AlertContentJson);
            oprot.WriteFieldEnd();
          }
          if (CustomDataJson != null && __isset.customDataJson) {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CustomDataJson);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationBatch_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileIds: ");
          __sb.Append(ProfileIds);
        }
        if (AlertContentJson != null && __isset.alertContentJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AlertContentJson: ");
          __sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomDataJson: ");
          __sb.Append(CustomDataJson);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushNotification_SendNormalizedPushNotificationBatch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushNotification_SendNormalizedPushNotificationBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushNotification_SendNormalizedPushNotificationBatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunScript_args : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private int _clientIndex;

      /// <summary>
      /// The name of the script to be run
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// Data to be sent to the script in json format
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scriptName;
        public bool jsonScriptData;
        public bool clientIndex;
      }

      public Script_RunScript_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ScriptName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonScriptData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunScript_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ScriptName != null && __isset.scriptName) {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ScriptName);
            oprot.WriteFieldEnd();
          }
          if (JsonScriptData != null && __isset.jsonScriptData) {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonScriptData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunScript_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ScriptName: ");
          __sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonScriptData: ");
          __sb.Append(JsonScriptData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunScript_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Script_RunScript_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunScript_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunScript_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_ScheduleRunScriptUTC_args : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private long _startDateInUTC;
      private int _clientIndex;

      /// <summary>
      /// Name of script
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON bundle to pass to script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// The start date as a DateTime object
      /// </summary>
      public long StartDateInUTC
      {
        get
        {
          return _startDateInUTC;
        }
        set
        {
          __isset.startDateInUTC = true;
          this._startDateInUTC = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scriptName;
        public bool jsonScriptData;
        public bool startDateInUTC;
        public bool clientIndex;
      }

      public Script_ScheduleRunScriptUTC_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ScriptName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonScriptData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  StartDateInUTC = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_ScheduleRunScriptUTC_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ScriptName != null && __isset.scriptName) {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ScriptName);
            oprot.WriteFieldEnd();
          }
          if (JsonScriptData != null && __isset.jsonScriptData) {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonScriptData);
            oprot.WriteFieldEnd();
          }
          if (__isset.startDateInUTC) {
            field.Name = "startDateInUTC";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(StartDateInUTC);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_ScheduleRunScriptUTC_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ScriptName: ");
          __sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonScriptData: ");
          __sb.Append(JsonScriptData);
        }
        if (__isset.startDateInUTC) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartDateInUTC: ");
          __sb.Append(StartDateInUTC);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_ScheduleRunScriptUTC_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Script_ScheduleRunScriptUTC_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_ScheduleRunScriptUTC_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_ScheduleRunScriptUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_ScheduleRunScriptMinutes_args : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private long _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// Name of script
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON bundle to pass to script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// Number of minutes from now to run script
      /// </summary>
      public long MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scriptName;
        public bool jsonScriptData;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public Script_ScheduleRunScriptMinutes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ScriptName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonScriptData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  MinutesFromNow = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_ScheduleRunScriptMinutes_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ScriptName != null && __isset.scriptName) {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ScriptName);
            oprot.WriteFieldEnd();
          }
          if (JsonScriptData != null && __isset.jsonScriptData) {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonScriptData);
            oprot.WriteFieldEnd();
          }
          if (__isset.minutesFromNow) {
            field.Name = "minutesFromNow";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(MinutesFromNow);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_ScheduleRunScriptMinutes_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ScriptName: ");
          __sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonScriptData: ");
          __sb.Append(JsonScriptData);
        }
        if (__isset.minutesFromNow) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinutesFromNow: ");
          __sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_ScheduleRunScriptMinutes_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Script_ScheduleRunScriptMinutes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_ScheduleRunScriptMinutes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_ScheduleRunScriptMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunParentScript_args : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private string _parentLevel;
      private int _clientIndex;

      /// <summary>
      /// Name of script
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON bundle to pass to script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// The level name of the parent to run the script from
      /// </summary>
      public string ParentLevel
      {
        get
        {
          return _parentLevel;
        }
        set
        {
          __isset.parentLevel = true;
          this._parentLevel = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scriptName;
        public bool jsonScriptData;
        public bool parentLevel;
        public bool clientIndex;
      }

      public Script_RunParentScript_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ScriptName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonScriptData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ParentLevel = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunParentScript_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ScriptName != null && __isset.scriptName) {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ScriptName);
            oprot.WriteFieldEnd();
          }
          if (JsonScriptData != null && __isset.jsonScriptData) {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonScriptData);
            oprot.WriteFieldEnd();
          }
          if (ParentLevel != null && __isset.parentLevel) {
            field.Name = "parentLevel";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParentLevel);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunParentScript_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ScriptName: ");
          __sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonScriptData: ");
          __sb.Append(JsonScriptData);
        }
        if (ParentLevel != null && __isset.parentLevel) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParentLevel: ");
          __sb.Append(ParentLevel);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunParentScript_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Script_RunParentScript_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunParentScript_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunParentScript_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_CancelScheduledScript_args : TBase
    {
      private string _jobId;
      private int _clientIndex;

      /// <summary>
      /// ID of script job to cancel
      /// </summary>
      public string JobId
      {
        get
        {
          return _jobId;
        }
        set
        {
          __isset.jobId = true;
          this._jobId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool jobId;
        public bool clientIndex;
      }

      public Script_CancelScheduledScript_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  JobId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_CancelScheduledScript_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (JobId != null && __isset.jobId) {
            field.Name = "jobId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JobId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_CancelScheduledScript_args(");
        bool __first = true;
        if (JobId != null && __isset.jobId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JobId: ");
          __sb.Append(JobId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_CancelScheduledScript_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Script_CancelScheduledScript_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_CancelScheduledScript_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_CancelScheduledScript_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunPeerScript_args : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private string _peer;
      private int _clientIndex;

      /// <summary>
      /// The name of the script to run
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON data to pass into the script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// Identifies the peer
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scriptName;
        public bool jsonScriptData;
        public bool peer;
        public bool clientIndex;
      }

      public Script_RunPeerScript_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ScriptName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonScriptData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Peer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunPeerScript_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ScriptName != null && __isset.scriptName) {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ScriptName);
            oprot.WriteFieldEnd();
          }
          if (JsonScriptData != null && __isset.jsonScriptData) {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonScriptData);
            oprot.WriteFieldEnd();
          }
          if (Peer != null && __isset.peer) {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Peer);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunPeerScript_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ScriptName: ");
          __sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonScriptData: ");
          __sb.Append(JsonScriptData);
        }
        if (Peer != null && __isset.peer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peer: ");
          __sb.Append(Peer);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunPeerScript_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Script_RunPeerScript_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunPeerScript_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunPeerScript_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunPeerScriptAsynch_args : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private string _peer;
      private int _clientIndex;

      /// <summary>
      /// The name of the script to run
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON data to pass into the script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// Identifies the peer
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scriptName;
        public bool jsonScriptData;
        public bool peer;
        public bool clientIndex;
      }

      public Script_RunPeerScriptAsynch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ScriptName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  JsonScriptData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Peer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunPeerScriptAsynch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ScriptName != null && __isset.scriptName) {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ScriptName);
            oprot.WriteFieldEnd();
          }
          if (JsonScriptData != null && __isset.jsonScriptData) {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonScriptData);
            oprot.WriteFieldEnd();
          }
          if (Peer != null && __isset.peer) {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Peer);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunPeerScriptAsynch_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ScriptName: ");
          __sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonScriptData: ");
          __sb.Append(JsonScriptData);
        }
        if (Peer != null && __isset.peer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peer: ");
          __sb.Append(Peer);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Script_RunPeerScriptAsynch_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Script_RunPeerScriptAsynch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Script_RunPeerScriptAsynch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Script_RunPeerScriptAsynch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetSocialLeaderboard_args : TBase
    {
      private string _leaderboardId;
      private bool _replaceName;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// If true, the currently logged in player's name will be replaced
      /// by the string "You".
      /// </summary>
      public bool ReplaceName
      {
        get
        {
          return _replaceName;
        }
        set
        {
          __isset.replaceName = true;
          this._replaceName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool replaceName;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetSocialLeaderboard_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  ReplaceName = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetSocialLeaderboard_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.replaceName) {
            field.Name = "replaceName";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ReplaceName);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.replaceName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReplaceName: ");
          __sb.Append(ReplaceName);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetSocialLeaderboard_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetSocialLeaderboard_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetSocialLeaderboard_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetMultiSocialLeaderboard_args : TBase
    {
      private List<string> _leaderboardIds;
      private int _leaderboardResultCount;
      private bool _replaceName;
      private int _clientIndex;

      /// <summary>
      /// Array of leaderboard id strings
      /// </summary>
      public List<string> LeaderboardIds
      {
        get
        {
          return _leaderboardIds;
        }
        set
        {
          __isset.leaderboardIds = true;
          this._leaderboardIds = value;
        }
      }

      /// <summary>
      /// Maximum count of entries to return for each leaderboard.
      /// </summary>
      public int LeaderboardResultCount
      {
        get
        {
          return _leaderboardResultCount;
        }
        set
        {
          __isset.leaderboardResultCount = true;
          this._leaderboardResultCount = value;
        }
      }

      /// <summary>
      /// If true, the currently logged in player's name will be replaced
      /// by the string "You".
      /// </summary>
      public bool ReplaceName
      {
        get
        {
          return _replaceName;
        }
        set
        {
          __isset.replaceName = true;
          this._replaceName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardIds;
        public bool leaderboardResultCount;
        public bool replaceName;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetMultiSocialLeaderboard_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    LeaderboardIds = new List<string>();
                    TList _list63 = iprot.ReadListBegin();
                    for( int _i64 = 0; _i64 < _list63.Count; ++_i64)
                    {
                      string _elem65;
                      _elem65 = iprot.ReadString();
                      LeaderboardIds.Add(_elem65);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  LeaderboardResultCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  ReplaceName = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetMultiSocialLeaderboard_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardIds != null && __isset.leaderboardIds) {
            field.Name = "leaderboardIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, LeaderboardIds.Count));
              foreach (string _iter66 in LeaderboardIds)
              {
                oprot.WriteString(_iter66);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.leaderboardResultCount) {
            field.Name = "leaderboardResultCount";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(LeaderboardResultCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.replaceName) {
            field.Name = "replaceName";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ReplaceName);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetMultiSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardIds != null && __isset.leaderboardIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardIds: ");
          __sb.Append(LeaderboardIds);
        }
        if (__isset.leaderboardResultCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardResultCount: ");
          __sb.Append(LeaderboardResultCount);
        }
        if (__isset.replaceName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReplaceName: ");
          __sb.Append(ReplaceName);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetMultiSocialLeaderboard_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetMultiSocialLeaderboard_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetMultiSocialLeaderboard_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetMultiSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardPage_args : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _startIndex;
      private int _endIndex;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The index at which to start the page.
      /// </summary>
      public int StartIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      /// <summary>
      /// The index at which to end the page.
      /// </summary>
      public int EndIndex
      {
        get
        {
          return _endIndex;
        }
        set
        {
          __isset.endIndex = true;
          this._endIndex = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool sort;
        public bool startIndex;
        public bool endIndex;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  StartIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  EndIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sort) {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Sort);
            oprot.WriteFieldEnd();
          }
          if (__isset.startIndex) {
            field.Name = "startIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StartIndex);
            oprot.WriteFieldEnd();
          }
          if (__isset.endIndex) {
            field.Name = "endIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(EndIndex);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPage_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.sort) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sort: ");
          __sb.Append(Sort);
        }
        if (__isset.startIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartIndex: ");
          __sb.Append(StartIndex);
        }
        if (__isset.endIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EndIndex: ");
          __sb.Append(EndIndex);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardPage_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPage_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _startIndex;
      private int _endIndex;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The index at which to start the page.
      /// </summary>
      public int StartIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      /// <summary>
      /// The index at which to end the page.
      /// </summary>
      public int EndIndex
      {
        get
        {
          return _endIndex;
        }
        set
        {
          __isset.endIndex = true;
          this._endIndex = value;
        }
      }

      /// <summary>
      /// The historical version to retrieve.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool sort;
        public bool startIndex;
        public bool endIndex;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  StartIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  EndIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sort) {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Sort);
            oprot.WriteFieldEnd();
          }
          if (__isset.startIndex) {
            field.Name = "startIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(StartIndex);
            oprot.WriteFieldEnd();
          }
          if (__isset.endIndex) {
            field.Name = "endIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(EndIndex);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.sort) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sort: ");
          __sb.Append(Sort);
        }
        if (__isset.startIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartIndex: ");
          __sb.Append(StartIndex);
        }
        if (__isset.endIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EndIndex: ");
          __sb.Append(EndIndex);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardView_args : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _beforeCount;
      private int _afterCount;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The count of number of players before the current player to include.
      /// </summary>
      public int BeforeCount
      {
        get
        {
          return _beforeCount;
        }
        set
        {
          __isset.beforeCount = true;
          this._beforeCount = value;
        }
      }

      /// <summary>
      /// The count of number of players after the current player to include.
      /// </summary>
      public int AfterCount
      {
        get
        {
          return _afterCount;
        }
        set
        {
          __isset.afterCount = true;
          this._afterCount = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool sort;
        public bool beforeCount;
        public bool afterCount;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardView_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  BeforeCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  AfterCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardView_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sort) {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Sort);
            oprot.WriteFieldEnd();
          }
          if (__isset.beforeCount) {
            field.Name = "beforeCount";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(BeforeCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.afterCount) {
            field.Name = "afterCount";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(AfterCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardView_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.sort) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sort: ");
          __sb.Append(Sort);
        }
        if (__isset.beforeCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BeforeCount: ");
          __sb.Append(BeforeCount);
        }
        if (__isset.afterCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AfterCount: ");
          __sb.Append(AfterCount);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardView_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardView_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardView_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardView_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _beforeCount;
      private int _afterCount;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The count of number of players before the current player to include.
      /// </summary>
      public int BeforeCount
      {
        get
        {
          return _beforeCount;
        }
        set
        {
          __isset.beforeCount = true;
          this._beforeCount = value;
        }
      }

      /// <summary>
      /// The count of number of players after the current player to include.
      /// </summary>
      public int AfterCount
      {
        get
        {
          return _afterCount;
        }
        set
        {
          __isset.afterCount = true;
          this._afterCount = value;
        }
      }

      /// <summary>
      /// The historial version to retrieve. Use -1 for current leaderboard.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool sort;
        public bool beforeCount;
        public bool afterCount;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  BeforeCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  AfterCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sort) {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Sort);
            oprot.WriteFieldEnd();
          }
          if (__isset.beforeCount) {
            field.Name = "beforeCount";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(BeforeCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.afterCount) {
            field.Name = "afterCount";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(AfterCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.sort) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sort: ");
          __sb.Append(Sort);
        }
        if (__isset.beforeCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BeforeCount: ");
          __sb.Append(BeforeCount);
        }
        if (__isset.afterCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AfterCount: ");
          __sb.Append(AfterCount);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardVersions_args : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// In_leaderboard identifier.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardVersions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardVersions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardVersions_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardVersions_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardVersions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardVersions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardVersions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGroupSocialLeaderboard_args : TBase
    {
      private string _leaderboardId;
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to read
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The group ID
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool groupId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGroupSocialLeaderboard_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  GroupId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGroupSocialLeaderboard_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (GroupId != null && __isset.groupId) {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GroupId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGroupSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (GroupId != null && __isset.groupId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GroupId: ");
          __sb.Append(GroupId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGroupSocialLeaderboard_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGroupSocialLeaderboard_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGroupSocialLeaderboard_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGroupSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_PostScoreToLeaderboard_args : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to post to
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool clientIndex;
      }

      public SocialLeaderboard_PostScoreToLeaderboard_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Score = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_PostScoreToLeaderboard_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.score) {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Score);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_PostScoreToLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.score) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Score: ");
          __sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_PostScoreToLeaderboard_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_PostScoreToLeaderboard_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_PostScoreToLeaderboard_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_PostScoreToLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_RemovePlayerScore_args : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The version of the leaderboard
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_RemovePlayerScore_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_RemovePlayerScore_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_RemovePlayerScore_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_RemovePlayerScore_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_RemovePlayerScore_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_RemovePlayerScore_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_RemovePlayerScore_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboard_args : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private Ruyi.SDK.BrainCloudApi.SocialLeaderboardType _leaderboardType;
      private Ruyi.SDK.BrainCloudApi.RotationType _rotationType;
      private long _rotationReset;
      private int _retainedCount;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to post to
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// leaderboard type
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SocialLeaderboardType"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SocialLeaderboardType LeaderboardType
      {
        get
        {
          return _leaderboardType;
        }
        set
        {
          __isset.leaderboardType = true;
          this._leaderboardType = value;
        }
      }

      /// <summary>
      /// Type of rotation
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.RotationType"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.RotationType RotationType
      {
        get
        {
          return _rotationType;
        }
        set
        {
          __isset.rotationType = true;
          this._rotationType = value;
        }
      }

      /// <summary>
      /// Date to reset the leaderboard UTC
      /// </summary>
      public long RotationReset
      {
        get
        {
          return _rotationReset;
        }
        set
        {
          __isset.rotationReset = true;
          this._rotationReset = value;
        }
      }

      /// <summary>
      /// How many rotations to keep
      /// </summary>
      public int RetainedCount
      {
        get
        {
          return _retainedCount;
        }
        set
        {
          __isset.retainedCount = true;
          this._retainedCount = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool leaderboardType;
        public bool rotationType;
        public bool rotationReset;
        public bool retainedCount;
        public bool clientIndex;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboard_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Score = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  LeaderboardType = (Ruyi.SDK.BrainCloudApi.SocialLeaderboardType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  RotationType = (Ruyi.SDK.BrainCloudApi.RotationType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I64) {
                  RotationReset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.I32) {
                  RetainedCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboard_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.score) {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Score);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.leaderboardType) {
            field.Name = "leaderboardType";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)LeaderboardType);
            oprot.WriteFieldEnd();
          }
          if (__isset.rotationType) {
            field.Name = "rotationType";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)RotationType);
            oprot.WriteFieldEnd();
          }
          if (__isset.rotationReset) {
            field.Name = "rotationReset";
            field.Type = TType.I64;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RotationReset);
            oprot.WriteFieldEnd();
          }
          if (__isset.retainedCount) {
            field.Name = "retainedCount";
            field.Type = TType.I32;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(RetainedCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.score) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Score: ");
          __sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.leaderboardType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardType: ");
          __sb.Append(LeaderboardType);
        }
        if (__isset.rotationType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RotationType: ");
          __sb.Append(RotationType);
        }
        if (__isset.rotationReset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RotationReset: ");
          __sb.Append(RotationReset);
        }
        if (__isset.retainedCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetainedCount: ");
          __sb.Append(RetainedCount);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboard_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboard_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboard_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private Ruyi.SDK.BrainCloudApi.SocialLeaderboardType _leaderboardType;
      private long _rotationReset;
      private int _retainedCount;
      private int _numDaysToRotate;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to post to
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// leaderboard type
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SocialLeaderboardType"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SocialLeaderboardType LeaderboardType
      {
        get
        {
          return _leaderboardType;
        }
        set
        {
          __isset.leaderboardType = true;
          this._leaderboardType = value;
        }
      }

      /// <summary>
      /// Date to reset the leaderboard UTC
      /// </summary>
      public long RotationReset
      {
        get
        {
          return _rotationReset;
        }
        set
        {
          __isset.rotationReset = true;
          this._rotationReset = value;
        }
      }

      /// <summary>
      /// How many rotations to keep
      /// </summary>
      public int RetainedCount
      {
        get
        {
          return _retainedCount;
        }
        set
        {
          __isset.retainedCount = true;
          this._retainedCount = value;
        }
      }

      /// <summary>
      /// How many days between each rotation
      /// </summary>
      public int NumDaysToRotate
      {
        get
        {
          return _numDaysToRotate;
        }
        set
        {
          __isset.numDaysToRotate = true;
          this._numDaysToRotate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool leaderboardType;
        public bool rotationReset;
        public bool retainedCount;
        public bool numDaysToRotate;
        public bool clientIndex;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Score = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  LeaderboardType = (Ruyi.SDK.BrainCloudApi.SocialLeaderboardType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I64) {
                  RotationReset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  RetainedCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.I32) {
                  NumDaysToRotate = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.score) {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Score);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.leaderboardType) {
            field.Name = "leaderboardType";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)LeaderboardType);
            oprot.WriteFieldEnd();
          }
          if (__isset.rotationReset) {
            field.Name = "rotationReset";
            field.Type = TType.I64;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RotationReset);
            oprot.WriteFieldEnd();
          }
          if (__isset.retainedCount) {
            field.Name = "retainedCount";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(RetainedCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.numDaysToRotate) {
            field.Name = "numDaysToRotate";
            field.Type = TType.I32;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NumDaysToRotate);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.score) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Score: ");
          __sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.leaderboardType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardType: ");
          __sb.Append(LeaderboardType);
        }
        if (__isset.rotationReset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RotationReset: ");
          __sb.Append(RotationReset);
        }
        if (__isset.retainedCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetainedCount: ");
          __sb.Append(RetainedCount);
        }
        if (__isset.numDaysToRotate) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumDaysToRotate: ");
          __sb.Append(NumDaysToRotate);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetPlayersSocialLeaderboard_args : TBase
    {
      private string _leaderboardId;
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The IDs of the players
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool profileIds;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetPlayersSocialLeaderboard_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    ProfileIds = new List<string>();
                    TList _list67 = iprot.ReadListBegin();
                    for( int _i68 = 0; _i68 < _list67.Count; ++_i68)
                    {
                      string _elem69;
                      _elem69 = iprot.ReadString();
                      ProfileIds.Add(_elem69);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetPlayersSocialLeaderboard_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (ProfileIds != null && __isset.profileIds) {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, ProfileIds.Count));
              foreach (string _iter70 in ProfileIds)
              {
                oprot.WriteString(_iter70);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetPlayersSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (ProfileIds != null && __isset.profileIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileIds: ");
          __sb.Append(ProfileIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetPlayersSocialLeaderboard_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetPlayersSocialLeaderboard_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetPlayersSocialLeaderboard_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetPlayersSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_ListLeaderboards_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public SocialLeaderboard_ListLeaderboards_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_ListLeaderboards_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_ListLeaderboards_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_ListLeaderboards_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_ListLeaderboards_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_ListLeaderboards_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_ListLeaderboards_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCount_args : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCount_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCount_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCount_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The version of the leaderboard
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetPlayerScore_args : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The version of the leaderboard. Use -1 for current.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetPlayerScore_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetPlayerScore_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetPlayerScore_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetPlayerScore_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetPlayerScore_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetPlayerScore_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetPlayerScore_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetPlayerScoresFromLeaderboards_args : TBase
    {
      private List<string> _leaderboardIds;
      private int _clientIndex;

      /// <summary>
      /// A collection of leaderboardIds to retrieve scores from
      /// </summary>
      public List<string> LeaderboardIds
      {
        get
        {
          return _leaderboardIds;
        }
        set
        {
          __isset.leaderboardIds = true;
          this._leaderboardIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardIds;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetPlayerScoresFromLeaderboards_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    LeaderboardIds = new List<string>();
                    TList _list71 = iprot.ReadListBegin();
                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)
                    {
                      string _elem73;
                      _elem73 = iprot.ReadString();
                      LeaderboardIds.Add(_elem73);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetPlayerScoresFromLeaderboards_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardIds != null && __isset.leaderboardIds) {
            field.Name = "leaderboardIds";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, LeaderboardIds.Count));
              foreach (string _iter74 in LeaderboardIds)
              {
                oprot.WriteString(_iter74);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetPlayerScoresFromLeaderboards_args(");
        bool __first = true;
        if (LeaderboardIds != null && __isset.leaderboardIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardIds: ");
          __sb.Append(LeaderboardIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialLeaderboard_GetPlayerScoresFromLeaderboards_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialLeaderboard_GetPlayerScoresFromLeaderboards_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialLeaderboard_GetPlayerScoresFromLeaderboards_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialLeaderboard_GetPlayerScoresFromLeaderboards_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Time_ReadServerTime_args : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientIndex;
      }

      public Time_ReadServerTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Time_ReadServerTime_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Time_ReadServerTime_args(");
        bool __first = true;
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Time_ReadServerTime_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Time_ReadServerTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Time_ReadServerTime_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Time_ReadServerTime_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_ClaimTournamentReward_args : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Version of the tournament to claim rewards for.
      /// Use -1 for the latest version.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public Tournament_ClaimTournamentReward_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_ClaimTournamentReward_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_ClaimTournamentReward_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_ClaimTournamentReward_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_ClaimTournamentReward_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_ClaimTournamentReward_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_ClaimTournamentReward_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_GetTournamentStatus_args : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Version of the tournament. Use -1 for the latest version.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public Tournament_GetTournamentStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_GetTournamentStatus_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_GetTournamentStatus_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_GetTournamentStatus_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_GetTournamentStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_GetTournamentStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_GetTournamentStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_JoinTournament_args : TBase
    {
      private string _leaderboardId;
      private string _tournamentCode;
      private long _initialScore;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Tournament to join
      /// </summary>
      public string TournamentCode
      {
        get
        {
          return _tournamentCode;
        }
        set
        {
          __isset.tournamentCode = true;
          this._tournamentCode = value;
        }
      }

      /// <summary>
      /// The initial score for players first joining a tournament
      /// Usually 0, unless leaderboard is LOW_VALUE
      /// </summary>
      public long InitialScore
      {
        get
        {
          return _initialScore;
        }
        set
        {
          __isset.initialScore = true;
          this._initialScore = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool tournamentCode;
        public bool initialScore;
        public bool clientIndex;
      }

      public Tournament_JoinTournament_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  TournamentCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  InitialScore = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_JoinTournament_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (TournamentCode != null && __isset.tournamentCode) {
            field.Name = "tournamentCode";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TournamentCode);
            oprot.WriteFieldEnd();
          }
          if (__isset.initialScore) {
            field.Name = "initialScore";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(InitialScore);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_JoinTournament_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (TournamentCode != null && __isset.tournamentCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TournamentCode: ");
          __sb.Append(TournamentCode);
        }
        if (__isset.initialScore) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InitialScore: ");
          __sb.Append(InitialScore);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_JoinTournament_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_JoinTournament_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_JoinTournament_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_JoinTournament_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_LeaveTournament_args : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public Tournament_LeaveTournament_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_LeaveTournament_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_LeaveTournament_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_LeaveTournament_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_LeaveTournament_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_LeaveTournament_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_LeaveTournament_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_PostTournamentScore_args : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private long _roundStartedTime;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      /// <summary>
      /// Optional data attached to the leaderboard entry
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// Time the user started the match resulting in the score
      /// being posted.
      /// </summary>
      public long RoundStartedTime
      {
        get
        {
          return _roundStartedTime;
        }
        set
        {
          __isset.roundStartedTime = true;
          this._roundStartedTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool roundStartedTime;
        public bool clientIndex;
      }

      public Tournament_PostTournamentScore_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Score = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I64) {
                  RoundStartedTime = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_PostTournamentScore_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.score) {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Score);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.roundStartedTime) {
            field.Name = "roundStartedTime";
            field.Type = TType.I64;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RoundStartedTime);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_PostTournamentScore_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.score) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Score: ");
          __sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.roundStartedTime) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RoundStartedTime: ");
          __sb.Append(RoundStartedTime);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_PostTournamentScore_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_PostTournamentScore_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_PostTournamentScore_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_PostTournamentScore_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_PostTournamentScoreWithResults_args : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private long _roundStartedTime;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _beforeCount;
      private int _afterCount;
      private long _initialScore;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      /// <summary>
      /// Optional data attached to the leaderboard entry
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// Time the user started the match resulting in the score
      /// being posted.
      /// </summary>
      public long RoundStartedTime
      {
        get
        {
          return _roundStartedTime;
        }
        set
        {
          __isset.roundStartedTime = true;
          this._roundStartedTime = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The count of number of players before the current player to include.
      /// </summary>
      public int BeforeCount
      {
        get
        {
          return _beforeCount;
        }
        set
        {
          __isset.beforeCount = true;
          this._beforeCount = value;
        }
      }

      /// <summary>
      /// The count of number of players after the current player to include.
      /// </summary>
      public int AfterCount
      {
        get
        {
          return _afterCount;
        }
        set
        {
          __isset.afterCount = true;
          this._afterCount = value;
        }
      }

      /// <summary>
      /// The initial score for players first joining a tournament
      /// Usually 0, unless leaderboard is LOW_VALUE
      /// </summary>
      public long InitialScore
      {
        get
        {
          return _initialScore;
        }
        set
        {
          __isset.initialScore = true;
          this._initialScore = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool roundStartedTime;
        public bool sort;
        public bool beforeCount;
        public bool afterCount;
        public bool initialScore;
        public bool clientIndex;
      }

      public Tournament_PostTournamentScoreWithResults_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Score = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  JsonData = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I64) {
                  RoundStartedTime = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  BeforeCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.I32) {
                  AfterCount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.I64) {
                  InitialScore = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 9:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_PostTournamentScoreWithResults_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.score) {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Score);
            oprot.WriteFieldEnd();
          }
          if (JsonData != null && __isset.jsonData) {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(JsonData);
            oprot.WriteFieldEnd();
          }
          if (__isset.roundStartedTime) {
            field.Name = "roundStartedTime";
            field.Type = TType.I64;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(RoundStartedTime);
            oprot.WriteFieldEnd();
          }
          if (__isset.sort) {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Sort);
            oprot.WriteFieldEnd();
          }
          if (__isset.beforeCount) {
            field.Name = "beforeCount";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(BeforeCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.afterCount) {
            field.Name = "afterCount";
            field.Type = TType.I32;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(AfterCount);
            oprot.WriteFieldEnd();
          }
          if (__isset.initialScore) {
            field.Name = "initialScore";
            field.Type = TType.I64;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(InitialScore);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 9;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_PostTournamentScoreWithResults_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.score) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Score: ");
          __sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("JsonData: ");
          __sb.Append(JsonData);
        }
        if (__isset.roundStartedTime) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RoundStartedTime: ");
          __sb.Append(RoundStartedTime);
        }
        if (__isset.sort) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sort: ");
          __sb.Append(Sort);
        }
        if (__isset.beforeCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BeforeCount: ");
          __sb.Append(BeforeCount);
        }
        if (__isset.afterCount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AfterCount: ");
          __sb.Append(AfterCount);
        }
        if (__isset.initialScore) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InitialScore: ");
          __sb.Append(InitialScore);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_PostTournamentScoreWithResults_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_PostTournamentScoreWithResults_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_PostTournamentScoreWithResults_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_PostTournamentScoreWithResults_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_ViewCurrentReward_args : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public Tournament_ViewCurrentReward_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_ViewCurrentReward_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_ViewCurrentReward_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_ViewCurrentReward_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_ViewCurrentReward_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_ViewCurrentReward_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_ViewCurrentReward_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_ViewReward_args : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Version of the tournament. Use -1 for the latest version.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public Tournament_ViewReward_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LeaderboardId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  VersionId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_ViewReward_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId) {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LeaderboardId);
            oprot.WriteFieldEnd();
          }
          if (__isset.versionId) {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(VersionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_ViewReward_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderboardId: ");
          __sb.Append(LeaderboardId);
        }
        if (__isset.versionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("VersionId: ");
          __sb.Append(VersionId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Tournament_ViewReward_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Tournament_ViewReward_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Tournament_ViewReward_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Tournament_ViewReward_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Patch_GetGameManifest_args : TBase
    {
      private string _gameId;
      private int _clientIndex;

      public string GameId
      {
        get
        {
          return _gameId;
        }
        set
        {
          __isset.gameId = true;
          this._gameId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool gameId;
        public bool clientIndex;
      }

      public Patch_GetGameManifest_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  GameId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Patch_GetGameManifest_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (GameId != null && __isset.gameId) {
            field.Name = "gameId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(GameId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Patch_GetGameManifest_args(");
        bool __first = true;
        if (GameId != null && __isset.gameId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GameId: ");
          __sb.Append(GameId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Patch_GetGameManifest_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Patch_GetGameManifest_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Patch_GetGameManifest_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Patch_GetGameManifest_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareVideo_args : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareVideo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Resource = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Tagged = new List<string>();
                    TList _list75 = iprot.ReadListBegin();
                    for( int _i76 = 0; _i76 < _list75.Count; ++_i76)
                    {
                      string _elem77;
                      _elem77 = iprot.ReadString();
                      Tagged.Add(_elem77);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Show = new List<string>();
                    TList _list78 = iprot.ReadListBegin();
                    for( int _i79 = 0; _i79 < _list78.Count; ++_i79)
                    {
                      string _elem80;
                      _elem80 = iprot.ReadString();
                      Show.Add(_elem80);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.List) {
                  {
                    Block = new List<string>();
                    TList _list81 = iprot.ReadListBegin();
                    for( int _i82 = 0; _i82 < _list81.Count; ++_i82)
                    {
                      string _elem83;
                      _elem83 = iprot.ReadString();
                      Block.Add(_elem83);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareVideo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (Resource != null && __isset.resource) {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Resource);
            oprot.WriteFieldEnd();
          }
          if (Tagged != null && __isset.tagged) {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Tagged.Count));
              foreach (string _iter84 in Tagged)
              {
                oprot.WriteString(_iter84);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Show != null && __isset.show) {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Show.Count));
              foreach (string _iter85 in Show)
              {
                oprot.WriteString(_iter85);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Block != null && __isset.block) {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Block.Count));
              foreach (string _iter86 in Block)
              {
                oprot.WriteString(_iter86);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareVideo_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Resource: ");
          __sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tagged: ");
          __sb.Append(Tagged);
        }
        if (Show != null && __isset.show) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Show: ");
          __sb.Append(Show);
        }
        if (Block != null && __isset.block) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Block: ");
          __sb.Append(Block);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareVideo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ShareVideo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareVideo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareVideo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareScreenshot_args : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareScreenshot_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Resource = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Tagged = new List<string>();
                    TList _list87 = iprot.ReadListBegin();
                    for( int _i88 = 0; _i88 < _list87.Count; ++_i88)
                    {
                      string _elem89;
                      _elem89 = iprot.ReadString();
                      Tagged.Add(_elem89);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Show = new List<string>();
                    TList _list90 = iprot.ReadListBegin();
                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                    {
                      string _elem92;
                      _elem92 = iprot.ReadString();
                      Show.Add(_elem92);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.List) {
                  {
                    Block = new List<string>();
                    TList _list93 = iprot.ReadListBegin();
                    for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                    {
                      string _elem95;
                      _elem95 = iprot.ReadString();
                      Block.Add(_elem95);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareScreenshot_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (Resource != null && __isset.resource) {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Resource);
            oprot.WriteFieldEnd();
          }
          if (Tagged != null && __isset.tagged) {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Tagged.Count));
              foreach (string _iter96 in Tagged)
              {
                oprot.WriteString(_iter96);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Show != null && __isset.show) {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Show.Count));
              foreach (string _iter97 in Show)
              {
                oprot.WriteString(_iter97);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Block != null && __isset.block) {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Block.Count));
              foreach (string _iter98 in Block)
              {
                oprot.WriteString(_iter98);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareScreenshot_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Resource: ");
          __sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tagged: ");
          __sb.Append(Tagged);
        }
        if (Show != null && __isset.show) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Show: ");
          __sb.Append(Show);
        }
        if (Block != null && __isset.block) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Block: ");
          __sb.Append(Block);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareScreenshot_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ShareScreenshot_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareScreenshot_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareScreenshot_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareAchievement_args : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareAchievement_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Resource = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Tagged = new List<string>();
                    TList _list99 = iprot.ReadListBegin();
                    for( int _i100 = 0; _i100 < _list99.Count; ++_i100)
                    {
                      string _elem101;
                      _elem101 = iprot.ReadString();
                      Tagged.Add(_elem101);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Show = new List<string>();
                    TList _list102 = iprot.ReadListBegin();
                    for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                    {
                      string _elem104;
                      _elem104 = iprot.ReadString();
                      Show.Add(_elem104);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.List) {
                  {
                    Block = new List<string>();
                    TList _list105 = iprot.ReadListBegin();
                    for( int _i106 = 0; _i106 < _list105.Count; ++_i106)
                    {
                      string _elem107;
                      _elem107 = iprot.ReadString();
                      Block.Add(_elem107);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareAchievement_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (Resource != null && __isset.resource) {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Resource);
            oprot.WriteFieldEnd();
          }
          if (Tagged != null && __isset.tagged) {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Tagged.Count));
              foreach (string _iter108 in Tagged)
              {
                oprot.WriteString(_iter108);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Show != null && __isset.show) {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Show.Count));
              foreach (string _iter109 in Show)
              {
                oprot.WriteString(_iter109);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Block != null && __isset.block) {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Block.Count));
              foreach (string _iter110 in Block)
              {
                oprot.WriteString(_iter110);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareAchievement_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Resource: ");
          __sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tagged: ");
          __sb.Append(Tagged);
        }
        if (Show != null && __isset.show) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Show: ");
          __sb.Append(Show);
        }
        if (Block != null && __isset.block) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Block: ");
          __sb.Append(Block);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareAchievement_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ShareAchievement_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareAchievement_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareAchievement_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareApp_args : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareApp_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Resource = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Tagged = new List<string>();
                    TList _list111 = iprot.ReadListBegin();
                    for( int _i112 = 0; _i112 < _list111.Count; ++_i112)
                    {
                      string _elem113;
                      _elem113 = iprot.ReadString();
                      Tagged.Add(_elem113);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Show = new List<string>();
                    TList _list114 = iprot.ReadListBegin();
                    for( int _i115 = 0; _i115 < _list114.Count; ++_i115)
                    {
                      string _elem116;
                      _elem116 = iprot.ReadString();
                      Show.Add(_elem116);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.List) {
                  {
                    Block = new List<string>();
                    TList _list117 = iprot.ReadListBegin();
                    for( int _i118 = 0; _i118 < _list117.Count; ++_i118)
                    {
                      string _elem119;
                      _elem119 = iprot.ReadString();
                      Block.Add(_elem119);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareApp_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (Resource != null && __isset.resource) {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Resource);
            oprot.WriteFieldEnd();
          }
          if (Tagged != null && __isset.tagged) {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Tagged.Count));
              foreach (string _iter120 in Tagged)
              {
                oprot.WriteString(_iter120);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Show != null && __isset.show) {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Show.Count));
              foreach (string _iter121 in Show)
              {
                oprot.WriteString(_iter121);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Block != null && __isset.block) {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Block.Count));
              foreach (string _iter122 in Block)
              {
                oprot.WriteString(_iter122);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareApp_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Resource: ");
          __sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tagged: ");
          __sb.Append(Tagged);
        }
        if (Show != null && __isset.show) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Show: ");
          __sb.Append(Show);
        }
        if (Block != null && __isset.block) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Block: ");
          __sb.Append(Block);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareApp_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ShareApp_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareApp_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareApp_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareChannel_args : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareChannel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Resource = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Tagged = new List<string>();
                    TList _list123 = iprot.ReadListBegin();
                    for( int _i124 = 0; _i124 < _list123.Count; ++_i124)
                    {
                      string _elem125;
                      _elem125 = iprot.ReadString();
                      Tagged.Add(_elem125);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Show = new List<string>();
                    TList _list126 = iprot.ReadListBegin();
                    for( int _i127 = 0; _i127 < _list126.Count; ++_i127)
                    {
                      string _elem128;
                      _elem128 = iprot.ReadString();
                      Show.Add(_elem128);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.List) {
                  {
                    Block = new List<string>();
                    TList _list129 = iprot.ReadListBegin();
                    for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                    {
                      string _elem131;
                      _elem131 = iprot.ReadString();
                      Block.Add(_elem131);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareChannel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (Resource != null && __isset.resource) {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Resource);
            oprot.WriteFieldEnd();
          }
          if (Tagged != null && __isset.tagged) {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Tagged.Count));
              foreach (string _iter132 in Tagged)
              {
                oprot.WriteString(_iter132);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Show != null && __isset.show) {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Show.Count));
              foreach (string _iter133 in Show)
              {
                oprot.WriteString(_iter133);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Block != null && __isset.block) {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Block.Count));
              foreach (string _iter134 in Block)
              {
                oprot.WriteString(_iter134);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareChannel_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Resource: ");
          __sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tagged: ");
          __sb.Append(Tagged);
        }
        if (Show != null && __isset.show) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Show: ");
          __sb.Append(Show);
        }
        if (Block != null && __isset.block) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Block: ");
          __sb.Append(Block);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareChannel_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ShareChannel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareChannel_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareChannel_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareLink_args : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Resource = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Tagged = new List<string>();
                    TList _list135 = iprot.ReadListBegin();
                    for( int _i136 = 0; _i136 < _list135.Count; ++_i136)
                    {
                      string _elem137;
                      _elem137 = iprot.ReadString();
                      Tagged.Add(_elem137);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Show = new List<string>();
                    TList _list138 = iprot.ReadListBegin();
                    for( int _i139 = 0; _i139 < _list138.Count; ++_i139)
                    {
                      string _elem140;
                      _elem140 = iprot.ReadString();
                      Show.Add(_elem140);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.List) {
                  {
                    Block = new List<string>();
                    TList _list141 = iprot.ReadListBegin();
                    for( int _i142 = 0; _i142 < _list141.Count; ++_i142)
                    {
                      string _elem143;
                      _elem143 = iprot.ReadString();
                      Block.Add(_elem143);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareLink_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (Resource != null && __isset.resource) {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Resource);
            oprot.WriteFieldEnd();
          }
          if (Tagged != null && __isset.tagged) {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Tagged.Count));
              foreach (string _iter144 in Tagged)
              {
                oprot.WriteString(_iter144);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Show != null && __isset.show) {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Show.Count));
              foreach (string _iter145 in Show)
              {
                oprot.WriteString(_iter145);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Block != null && __isset.block) {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Block.Count));
              foreach (string _iter146 in Block)
              {
                oprot.WriteString(_iter146);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareLink_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Resource: ");
          __sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tagged: ");
          __sb.Append(Tagged);
        }
        if (Show != null && __isset.show) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Show: ");
          __sb.Append(Show);
        }
        if (Block != null && __isset.block) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Block: ");
          __sb.Append(Block);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareLink_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ShareLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareLink_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareLink_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareGameGuide_args : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareGameGuide_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Resource = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Tagged = new List<string>();
                    TList _list147 = iprot.ReadListBegin();
                    for( int _i148 = 0; _i148 < _list147.Count; ++_i148)
                    {
                      string _elem149;
                      _elem149 = iprot.ReadString();
                      Tagged.Add(_elem149);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Show = new List<string>();
                    TList _list150 = iprot.ReadListBegin();
                    for( int _i151 = 0; _i151 < _list150.Count; ++_i151)
                    {
                      string _elem152;
                      _elem152 = iprot.ReadString();
                      Show.Add(_elem152);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.List) {
                  {
                    Block = new List<string>();
                    TList _list153 = iprot.ReadListBegin();
                    for( int _i154 = 0; _i154 < _list153.Count; ++_i154)
                    {
                      string _elem155;
                      _elem155 = iprot.ReadString();
                      Block.Add(_elem155);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareGameGuide_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (Resource != null && __isset.resource) {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Resource);
            oprot.WriteFieldEnd();
          }
          if (Tagged != null && __isset.tagged) {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Tagged.Count));
              foreach (string _iter156 in Tagged)
              {
                oprot.WriteString(_iter156);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Show != null && __isset.show) {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Show.Count));
              foreach (string _iter157 in Show)
              {
                oprot.WriteString(_iter157);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Block != null && __isset.block) {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Block.Count));
              foreach (string _iter158 in Block)
              {
                oprot.WriteString(_iter158);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareGameGuide_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Resource: ");
          __sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tagged: ");
          __sb.Append(Tagged);
        }
        if (Show != null && __isset.show) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Show: ");
          __sb.Append(Show);
        }
        if (Block != null && __isset.block) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Block: ");
          __sb.Append(Block);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ShareGameGuide_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ShareGameGuide_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ShareGameGuide_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ShareGameGuide_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadSocialFeed_args : TBase
    {
      private int _skip;
      private int _limit;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skip;
        public bool limit;
        public bool clientIndex;
      }

      public SocialFeed_ReadSocialFeed_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Skip = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadSocialFeed_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.skip) {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Skip);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadSocialFeed_args(");
        bool __first = true;
        if (__isset.skip) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skip: ");
          __sb.Append(Skip);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadSocialFeed_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ReadSocialFeed_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadSocialFeed_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadSocialFeed_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadFilteredSocialFeed_args : TBase
    {
      private int _skip;
      private int _limit;
      private List<string> _playerIds;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public List<string> PlayerIds
      {
        get
        {
          return _playerIds;
        }
        set
        {
          __isset.playerIds = true;
          this._playerIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skip;
        public bool limit;
        public bool playerIds;
        public bool clientIndex;
      }

      public SocialFeed_ReadFilteredSocialFeed_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Skip = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    PlayerIds = new List<string>();
                    TList _list159 = iprot.ReadListBegin();
                    for( int _i160 = 0; _i160 < _list159.Count; ++_i160)
                    {
                      string _elem161;
                      _elem161 = iprot.ReadString();
                      PlayerIds.Add(_elem161);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadFilteredSocialFeed_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.skip) {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Skip);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          if (PlayerIds != null && __isset.playerIds) {
            field.Name = "playerIds";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, PlayerIds.Count));
              foreach (string _iter162 in PlayerIds)
              {
                oprot.WriteString(_iter162);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadFilteredSocialFeed_args(");
        bool __first = true;
        if (__isset.skip) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skip: ");
          __sb.Append(Skip);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (PlayerIds != null && __isset.playerIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerIds: ");
          __sb.Append(PlayerIds);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadFilteredSocialFeed_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ReadFilteredSocialFeed_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadFilteredSocialFeed_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadFilteredSocialFeed_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadFriendsSocialFeed_args : TBase
    {
      private int _skip;
      private int _limit;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skip;
        public bool limit;
        public bool clientIndex;
      }

      public SocialFeed_ReadFriendsSocialFeed_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Skip = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadFriendsSocialFeed_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.skip) {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Skip);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadFriendsSocialFeed_args(");
        bool __first = true;
        if (__isset.skip) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skip: ");
          __sb.Append(Skip);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadFriendsSocialFeed_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ReadFriendsSocialFeed_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadFriendsSocialFeed_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadFriendsSocialFeed_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_PostComment_args : TBase
    {
      private int _timestamp;
      private string _parentId;
      private string _content;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public string Content
      {
        get
        {
          return _content;
        }
        set
        {
          __isset.content = true;
          this._content = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool parentId;
        public bool content;
        public bool clientIndex;
      }

      public SocialFeed_PostComment_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ParentId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Content = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_PostComment_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (ParentId != null && __isset.parentId) {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParentId);
            oprot.WriteFieldEnd();
          }
          if (Content != null && __isset.content) {
            field.Name = "content";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Content);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_PostComment_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (ParentId != null && __isset.parentId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParentId: ");
          __sb.Append(ParentId);
        }
        if (Content != null && __isset.content) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Content: ");
          __sb.Append(Content);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_PostComment_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_PostComment_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_PostComment_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_PostComment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_PostCommentReply_args : TBase
    {
      private int _timestamp;
      private string _parentId;
      private string _content;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public string Content
      {
        get
        {
          return _content;
        }
        set
        {
          __isset.content = true;
          this._content = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool parentId;
        public bool content;
        public bool clientIndex;
      }

      public SocialFeed_PostCommentReply_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ParentId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Content = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_PostCommentReply_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (ParentId != null && __isset.parentId) {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParentId);
            oprot.WriteFieldEnd();
          }
          if (Content != null && __isset.content) {
            field.Name = "content";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Content);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_PostCommentReply_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (ParentId != null && __isset.parentId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParentId: ");
          __sb.Append(ParentId);
        }
        if (Content != null && __isset.content) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Content: ");
          __sb.Append(Content);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_PostCommentReply_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_PostCommentReply_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_PostCommentReply_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_PostCommentReply_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadComments_args : TBase
    {
      private int _skip;
      private int _limit;
      private string _parentId;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skip;
        public bool limit;
        public bool parentId;
        public bool clientIndex;
      }

      public SocialFeed_ReadComments_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Skip = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ParentId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadComments_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.skip) {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Skip);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          if (ParentId != null && __isset.parentId) {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParentId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadComments_args(");
        bool __first = true;
        if (__isset.skip) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skip: ");
          __sb.Append(Skip);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (ParentId != null && __isset.parentId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParentId: ");
          __sb.Append(ParentId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadComments_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ReadComments_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadComments_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadComments_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadCommentReplies_args : TBase
    {
      private int _skip;
      private int _limit;
      private string _parentId;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skip;
        public bool limit;
        public bool parentId;
        public bool clientIndex;
      }

      public SocialFeed_ReadCommentReplies_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Skip = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Limit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ParentId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadCommentReplies_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.skip) {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Skip);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Limit);
            oprot.WriteFieldEnd();
          }
          if (ParentId != null && __isset.parentId) {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParentId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadCommentReplies_args(");
        bool __first = true;
        if (__isset.skip) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Skip: ");
          __sb.Append(Skip);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (ParentId != null && __isset.parentId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParentId: ");
          __sb.Append(ParentId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_ReadCommentReplies_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_ReadCommentReplies_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_ReadCommentReplies_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_ReadCommentReplies_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_LikeComment_args : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_LikeComment_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SocialFeedId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_LikeComment_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId) {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SocialFeedId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_LikeComment_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SocialFeedId: ");
          __sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_LikeComment_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_LikeComment_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_LikeComment_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_LikeComment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_LikeActivity_args : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_LikeActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SocialFeedId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_LikeActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId) {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SocialFeedId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_LikeActivity_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SocialFeedId: ");
          __sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_LikeActivity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_LikeActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_LikeActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_LikeActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnlikeComment_args : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_UnlikeComment_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SocialFeedId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnlikeComment_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId) {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SocialFeedId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnlikeComment_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SocialFeedId: ");
          __sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnlikeComment_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_UnlikeComment_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnlikeComment_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnlikeComment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnlikeActivity_args : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_UnlikeActivity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SocialFeedId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnlikeActivity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId) {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SocialFeedId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnlikeActivity_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SocialFeedId: ");
          __sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnlikeActivity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_UnlikeActivity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnlikeActivity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnlikeActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_SetFeedVisibility_args : TBase
    {
      private string _visibility;
      private int _clientIndex;

      public string Visibility
      {
        get
        {
          return _visibility;
        }
        set
        {
          __isset.visibility = true;
          this._visibility = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool visibility;
        public bool clientIndex;
      }

      public SocialFeed_SetFeedVisibility_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Visibility = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_SetFeedVisibility_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Visibility != null && __isset.visibility) {
            field.Name = "visibility";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Visibility);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_SetFeedVisibility_args(");
        bool __first = true;
        if (Visibility != null && __isset.visibility) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Visibility: ");
          __sb.Append(Visibility);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_SetFeedVisibility_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_SetFeedVisibility_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_SetFeedVisibility_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_SetFeedVisibility_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_BlockPlayer_args : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_BlockPlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_BlockPlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlayerId != null && __isset.playerId) {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_BlockPlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerId: ");
          __sb.Append(PlayerId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_BlockPlayer_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_BlockPlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_BlockPlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_BlockPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_HidePlayer_args : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_HidePlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_HidePlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlayerId != null && __isset.playerId) {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_HidePlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerId: ");
          __sb.Append(PlayerId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_HidePlayer_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_HidePlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_HidePlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_HidePlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnblockPlayer_args : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_UnblockPlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnblockPlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlayerId != null && __isset.playerId) {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnblockPlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerId: ");
          __sb.Append(PlayerId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnblockPlayer_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_UnblockPlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnblockPlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnblockPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnhidePlayer_args : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_UnhidePlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PlayerId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnhidePlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PlayerId != null && __isset.playerId) {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PlayerId);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnhidePlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PlayerId: ");
          __sb.Append(PlayerId);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialFeed_UnhidePlayer_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SocialFeed_UnhidePlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SocialFeed_UnhidePlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SocialFeed_UnhidePlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_StartTelemetrySession_args : TBase
    {
      private int _timestamp;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
        public bool clientIndex;
      }

      public Telemetry_StartTelemetrySession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_StartTelemetrySession_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_StartTelemetrySession_args(");
        bool __first = true;
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_StartTelemetrySession_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Telemetry_StartTelemetrySession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_StartTelemetrySession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_StartTelemetrySession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_EndTelemetrySession_args : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool clientIndex;
      }

      public Telemetry_EndTelemetrySession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  TelemetrySessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_EndTelemetrySession_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId) {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TelemetrySessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_EndTelemetrySession_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TelemetrySessionId: ");
          __sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_EndTelemetrySession_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Telemetry_EndTelemetrySession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_EndTelemetrySession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_EndTelemetrySession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_LogTelemetryEvent_args : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private string _eventType;
      private string _participantId;
      private Dictionary<string, string> _customData;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      public string ParticipantId
      {
        get
        {
          return _participantId;
        }
        set
        {
          __isset.participantId = true;
          this._participantId = value;
        }
      }

      public Dictionary<string, string> CustomData
      {
        get
        {
          return _customData;
        }
        set
        {
          __isset.customData = true;
          this._customData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool eventType;
        public bool participantId;
        public bool customData;
        public bool clientIndex;
      }

      public Telemetry_LogTelemetryEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  TelemetrySessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  ParticipantId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Map) {
                  {
                    CustomData = new Dictionary<string, string>();
                    TMap _map163 = iprot.ReadMapBegin();
                    for( int _i164 = 0; _i164 < _map163.Count; ++_i164)
                    {
                      string _key165;
                      string _val166;
                      _key165 = iprot.ReadString();
                      _val166 = iprot.ReadString();
                      CustomData[_key165] = _val166;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_LogTelemetryEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId) {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TelemetrySessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          if (ParticipantId != null && __isset.participantId) {
            field.Name = "participantId";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParticipantId);
            oprot.WriteFieldEnd();
          }
          if (CustomData != null && __isset.customData) {
            field.Name = "customData";
            field.Type = TType.Map;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, CustomData.Count));
              foreach (string _iter167 in CustomData.Keys)
              {
                oprot.WriteString(_iter167);
                oprot.WriteString(CustomData[_iter167]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_LogTelemetryEvent_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TelemetrySessionId: ");
          __sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        if (ParticipantId != null && __isset.participantId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParticipantId: ");
          __sb.Append(ParticipantId);
        }
        if (CustomData != null && __isset.customData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomData: ");
          __sb.Append(CustomData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_LogTelemetryEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Telemetry_LogTelemetryEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_LogTelemetryEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_LogTelemetryEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_StartTelemetryEvent_args : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private string _eventType;
      private string _participantId;
      private Dictionary<string, string> _customData;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      public string ParticipantId
      {
        get
        {
          return _participantId;
        }
        set
        {
          __isset.participantId = true;
          this._participantId = value;
        }
      }

      public Dictionary<string, string> CustomData
      {
        get
        {
          return _customData;
        }
        set
        {
          __isset.customData = true;
          this._customData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool eventType;
        public bool participantId;
        public bool customData;
        public bool clientIndex;
      }

      public Telemetry_StartTelemetryEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  TelemetrySessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  ParticipantId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Map) {
                  {
                    CustomData = new Dictionary<string, string>();
                    TMap _map168 = iprot.ReadMapBegin();
                    for( int _i169 = 0; _i169 < _map168.Count; ++_i169)
                    {
                      string _key170;
                      string _val171;
                      _key170 = iprot.ReadString();
                      _val171 = iprot.ReadString();
                      CustomData[_key170] = _val171;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_StartTelemetryEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId) {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TelemetrySessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          if (ParticipantId != null && __isset.participantId) {
            field.Name = "participantId";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParticipantId);
            oprot.WriteFieldEnd();
          }
          if (CustomData != null && __isset.customData) {
            field.Name = "customData";
            field.Type = TType.Map;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, CustomData.Count));
              foreach (string _iter172 in CustomData.Keys)
              {
                oprot.WriteString(_iter172);
                oprot.WriteString(CustomData[_iter172]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_StartTelemetryEvent_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TelemetrySessionId: ");
          __sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        if (ParticipantId != null && __isset.participantId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParticipantId: ");
          __sb.Append(ParticipantId);
        }
        if (CustomData != null && __isset.customData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomData: ");
          __sb.Append(CustomData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_StartTelemetryEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Telemetry_StartTelemetryEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_StartTelemetryEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_StartTelemetryEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_EndTelemetryEvent_args : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private string _eventType;
      private string _participantId;
      private Dictionary<string, string> _customData;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      public string ParticipantId
      {
        get
        {
          return _participantId;
        }
        set
        {
          __isset.participantId = true;
          this._participantId = value;
        }
      }

      public Dictionary<string, string> CustomData
      {
        get
        {
          return _customData;
        }
        set
        {
          __isset.customData = true;
          this._customData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool eventType;
        public bool participantId;
        public bool customData;
        public bool clientIndex;
      }

      public Telemetry_EndTelemetryEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  TelemetrySessionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timestamp = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  ParticipantId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Map) {
                  {
                    CustomData = new Dictionary<string, string>();
                    TMap _map173 = iprot.ReadMapBegin();
                    for( int _i174 = 0; _i174 < _map173.Count; ++_i174)
                    {
                      string _key175;
                      string _val176;
                      _key175 = iprot.ReadString();
                      _val176 = iprot.ReadString();
                      CustomData[_key175] = _val176;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_EndTelemetryEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId) {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TelemetrySessionId);
            oprot.WriteFieldEnd();
          }
          if (__isset.timestamp) {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timestamp);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          if (ParticipantId != null && __isset.participantId) {
            field.Name = "participantId";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ParticipantId);
            oprot.WriteFieldEnd();
          }
          if (CustomData != null && __isset.customData) {
            field.Name = "customData";
            field.Type = TType.Map;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, CustomData.Count));
              foreach (string _iter177 in CustomData.Keys)
              {
                oprot.WriteString(_iter177);
                oprot.WriteString(CustomData[_iter177]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_EndTelemetryEvent_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TelemetrySessionId: ");
          __sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timestamp: ");
          __sb.Append(Timestamp);
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        if (ParticipantId != null && __isset.participantId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParticipantId: ");
          __sb.Append(ParticipantId);
        }
        if (CustomData != null && __isset.customData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomData: ");
          __sb.Append(CustomData);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Telemetry_EndTelemetryEvent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Telemetry_EndTelemetryEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Telemetry_EndTelemetryEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Telemetry_EndTelemetryEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_DownloadFile_args : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private bool _replaceIfExists;
      private int _clientIndex;

      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public bool ReplaceIfExists
      {
        get
        {
          return _replaceIfExists;
        }
        set
        {
          __isset.replaceIfExists = true;
          this._replaceIfExists = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool cloudFilename;
        public bool replaceIfExists;
        public bool clientIndex;
      }

      public File_DownloadFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CloudFilename = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  ReplaceIfExists = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_DownloadFile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (CloudFilename != null && __isset.cloudFilename) {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudFilename);
            oprot.WriteFieldEnd();
          }
          if (__isset.replaceIfExists) {
            field.Name = "replaceIfExists";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(ReplaceIfExists);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_DownloadFile_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudFilename: ");
          __sb.Append(CloudFilename);
        }
        if (__isset.replaceIfExists) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReplaceIfExists: ");
          __sb.Append(ReplaceIfExists);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_DownloadFile_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_DownloadFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_DownloadFile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_DownloadFile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetDownloadInfo_args : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private int _clientIndex;

      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool cloudFilename;
        public bool clientIndex;
      }

      public File_GetDownloadInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CloudFilename = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetDownloadInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (CloudFilename != null && __isset.cloudFilename) {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudFilename);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetDownloadInfo_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudFilename: ");
          __sb.Append(CloudFilename);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_GetDownloadInfo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_GetDownloadInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_GetDownloadInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_GetDownloadInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_CancelDownload_args : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private int _clientIndex;

      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cloudPath;
        public bool cloudFilename;
        public bool clientIndex;
      }

      public File_CancelDownload_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CloudPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CloudFilename = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  ClientIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_CancelDownload_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CloudPath != null && __isset.cloudPath) {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudPath);
            oprot.WriteFieldEnd();
          }
          if (CloudFilename != null && __isset.cloudFilename) {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CloudFilename);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientIndex) {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ClientIndex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_CancelDownload_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudPath: ");
          __sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CloudFilename: ");
          __sb.Append(CloudFilename);
        }
        if (__isset.clientIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientIndex: ");
          __sb.Append(ClientIndex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class File_CancelDownload_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public File_CancelDownload_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("File_CancelDownload_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("File_CancelDownload_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
