/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.SettingSystem.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RuyiNetworkSettings : TBase
  {
    private bool _connection;
    private bool _isWifi;
    private int _quality;
    private string _SSID;
    private string _BSSID;
    private string _Authentication;
    private bool _DHCPEnabled;
    private string _IpAddress;
    private string _SubMask;
    private string _Gateway;
    private string _MainDNS;
    private string _SubDNS;
    private string _MacAddress;
    private string _Proxy;

    public bool Connection
    {
      get
      {
        return _connection;
      }
      set
      {
        __isset.connection = true;
        this._connection = value;
      }
    }

    public bool IsWifi
    {
      get
      {
        return _isWifi;
      }
      set
      {
        __isset.isWifi = true;
        this._isWifi = value;
      }
    }

    public int Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public string SSID
    {
      get
      {
        return _SSID;
      }
      set
      {
        __isset.SSID = true;
        this._SSID = value;
      }
    }

    public string BSSID
    {
      get
      {
        return _BSSID;
      }
      set
      {
        __isset.BSSID = true;
        this._BSSID = value;
      }
    }

    public string Authentication
    {
      get
      {
        return _Authentication;
      }
      set
      {
        __isset.Authentication = true;
        this._Authentication = value;
      }
    }

    public bool DHCPEnabled
    {
      get
      {
        return _DHCPEnabled;
      }
      set
      {
        __isset.DHCPEnabled = true;
        this._DHCPEnabled = value;
      }
    }

    public string IpAddress
    {
      get
      {
        return _IpAddress;
      }
      set
      {
        __isset.IpAddress = true;
        this._IpAddress = value;
      }
    }

    public string SubMask
    {
      get
      {
        return _SubMask;
      }
      set
      {
        __isset.SubMask = true;
        this._SubMask = value;
      }
    }

    public string Gateway
    {
      get
      {
        return _Gateway;
      }
      set
      {
        __isset.Gateway = true;
        this._Gateway = value;
      }
    }

    public string MainDNS
    {
      get
      {
        return _MainDNS;
      }
      set
      {
        __isset.MainDNS = true;
        this._MainDNS = value;
      }
    }

    public string SubDNS
    {
      get
      {
        return _SubDNS;
      }
      set
      {
        __isset.SubDNS = true;
        this._SubDNS = value;
      }
    }

    public string MacAddress
    {
      get
      {
        return _MacAddress;
      }
      set
      {
        __isset.MacAddress = true;
        this._MacAddress = value;
      }
    }

    public string Proxy
    {
      get
      {
        return _Proxy;
      }
      set
      {
        __isset.Proxy = true;
        this._Proxy = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool connection;
      public bool isWifi;
      public bool quality;
      public bool SSID;
      public bool BSSID;
      public bool Authentication;
      public bool DHCPEnabled;
      public bool IpAddress;
      public bool SubMask;
      public bool Gateway;
      public bool MainDNS;
      public bool SubDNS;
      public bool MacAddress;
      public bool Proxy;
    }

    public RuyiNetworkSettings() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Connection = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IsWifi = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Quality = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                SSID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                BSSID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Authentication = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                DHCPEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                IpAddress = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                SubMask = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Gateway = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                MainDNS = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                SubDNS = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                MacAddress = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                Proxy = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RuyiNetworkSettings");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.connection) {
          field.Name = "connection";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Connection);
          oprot.WriteFieldEnd();
        }
        if (__isset.isWifi) {
          field.Name = "isWifi";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsWifi);
          oprot.WriteFieldEnd();
        }
        if (__isset.quality) {
          field.Name = "quality";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Quality);
          oprot.WriteFieldEnd();
        }
        if (SSID != null && __isset.SSID) {
          field.Name = "SSID";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SSID);
          oprot.WriteFieldEnd();
        }
        if (BSSID != null && __isset.BSSID) {
          field.Name = "BSSID";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BSSID);
          oprot.WriteFieldEnd();
        }
        if (Authentication != null && __isset.Authentication) {
          field.Name = "Authentication";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Authentication);
          oprot.WriteFieldEnd();
        }
        if (__isset.DHCPEnabled) {
          field.Name = "DHCPEnabled";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DHCPEnabled);
          oprot.WriteFieldEnd();
        }
        if (IpAddress != null && __isset.IpAddress) {
          field.Name = "IpAddress";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IpAddress);
          oprot.WriteFieldEnd();
        }
        if (SubMask != null && __isset.SubMask) {
          field.Name = "SubMask";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SubMask);
          oprot.WriteFieldEnd();
        }
        if (Gateway != null && __isset.Gateway) {
          field.Name = "Gateway";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gateway);
          oprot.WriteFieldEnd();
        }
        if (MainDNS != null && __isset.MainDNS) {
          field.Name = "MainDNS";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MainDNS);
          oprot.WriteFieldEnd();
        }
        if (SubDNS != null && __isset.SubDNS) {
          field.Name = "SubDNS";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SubDNS);
          oprot.WriteFieldEnd();
        }
        if (MacAddress != null && __isset.MacAddress) {
          field.Name = "MacAddress";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MacAddress);
          oprot.WriteFieldEnd();
        }
        if (Proxy != null && __isset.Proxy) {
          field.Name = "Proxy";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Proxy);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RuyiNetworkSettings(");
      bool __first = true;
      if (__isset.connection) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Connection: ");
        __sb.Append(Connection);
      }
      if (__isset.isWifi) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsWifi: ");
        __sb.Append(IsWifi);
      }
      if (__isset.quality) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Quality: ");
        __sb.Append(Quality);
      }
      if (SSID != null && __isset.SSID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SSID: ");
        __sb.Append(SSID);
      }
      if (BSSID != null && __isset.BSSID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BSSID: ");
        __sb.Append(BSSID);
      }
      if (Authentication != null && __isset.Authentication) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Authentication: ");
        __sb.Append(Authentication);
      }
      if (__isset.DHCPEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DHCPEnabled: ");
        __sb.Append(DHCPEnabled);
      }
      if (IpAddress != null && __isset.IpAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IpAddress: ");
        __sb.Append(IpAddress);
      }
      if (SubMask != null && __isset.SubMask) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SubMask: ");
        __sb.Append(SubMask);
      }
      if (Gateway != null && __isset.Gateway) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gateway: ");
        __sb.Append(Gateway);
      }
      if (MainDNS != null && __isset.MainDNS) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MainDNS: ");
        __sb.Append(MainDNS);
      }
      if (SubDNS != null && __isset.SubDNS) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SubDNS: ");
        __sb.Append(SubDNS);
      }
      if (MacAddress != null && __isset.MacAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MacAddress: ");
        __sb.Append(MacAddress);
      }
      if (Proxy != null && __isset.Proxy) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Proxy: ");
        __sb.Append(Proxy);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
