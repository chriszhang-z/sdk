/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.CommonType
{

  public partial class PopupNotification : TBase
  {
    private string _title;
    private string _description;
    private string _mainIcon;
    private string _icon;
    private NotificationType _NotificationType;
    private bool _HasInteractiveBar;
    private bool _isLargeMainIcon;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public string MainIcon
    {
      get
      {
        return _mainIcon;
      }
      set
      {
        __isset.mainIcon = true;
        this._mainIcon = value;
      }
    }

    public string Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="NotificationType"/>
    /// </summary>
    public NotificationType NotificationType
    {
      get
      {
        return _NotificationType;
      }
      set
      {
        __isset.NotificationType = true;
        this._NotificationType = value;
      }
    }

    public bool HasInteractiveBar
    {
      get
      {
        return _HasInteractiveBar;
      }
      set
      {
        __isset.HasInteractiveBar = true;
        this._HasInteractiveBar = value;
      }
    }

    public bool IsLargeMainIcon
    {
      get
      {
        return _isLargeMainIcon;
      }
      set
      {
        __isset.isLargeMainIcon = true;
        this._isLargeMainIcon = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool title;
      public bool description;
      public bool mainIcon;
      public bool icon;
      public bool NotificationType;
      public bool HasInteractiveBar;
      public bool isLargeMainIcon;
    }

    public PopupNotification()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Description = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                MainIcon = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Icon = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                NotificationType = (NotificationType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                HasInteractiveBar = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                IsLargeMainIcon = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("PopupNotification");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Title != null && __isset.title)
        {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Description != null && __isset.description)
        {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Description, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MainIcon != null && __isset.mainIcon)
        {
          field.Name = "mainIcon";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(MainIcon, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Icon != null && __isset.icon)
        {
          field.Name = "icon";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Icon, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.NotificationType)
        {
          field.Name = "NotificationType";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)NotificationType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.HasInteractiveBar)
        {
          field.Name = "HasInteractiveBar";
          field.Type = TType.Bool;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(HasInteractiveBar, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.isLargeMainIcon)
        {
          field.Name = "isLargeMainIcon";
          field.Type = TType.Bool;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(IsLargeMainIcon, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("PopupNotification(");
      bool __first = true;
      if (Title != null && __isset.title)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Title: ");
        sb.Append(Title);
      }
      if (Description != null && __isset.description)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Description: ");
        sb.Append(Description);
      }
      if (MainIcon != null && __isset.mainIcon)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MainIcon: ");
        sb.Append(MainIcon);
      }
      if (Icon != null && __isset.icon)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Icon: ");
        sb.Append(Icon);
      }
      if (__isset.NotificationType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NotificationType: ");
        sb.Append(NotificationType);
      }
      if (__isset.HasInteractiveBar)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("HasInteractiveBar: ");
        sb.Append(HasInteractiveBar);
      }
      if (__isset.isLargeMainIcon)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IsLargeMainIcon: ");
        sb.Append(IsLargeMainIcon);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
