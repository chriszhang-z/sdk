/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SettingSystemSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace SettingSystem { namespace Api {

int _kNodeTypeValues[] = {
  NodeType::Category,
  NodeType::SettingItem,
  NodeType::All
};
const char* _kNodeTypeNames[] = {
  "Category",
  "SettingItem",
  "All"
};
const std::map<int, const char*> _NodeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNodeTypeValues, _kNodeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


CategoryNode::~CategoryNode() throw() {
}


void CategoryNode::__set_id(const std::string& val) {
  this->id = val;
}

void CategoryNode::__set_categoryId(const std::string& val) {
  this->categoryId = val;
}

void CategoryNode::__set_sortingPriority(const int32_t val) {
  this->sortingPriority = val;
}

void CategoryNode::__set_children(const std::vector<CategoryNode> & val) {
  this->children = val;
}

uint32_t CategoryNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->categoryId);
          this->__isset.categoryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sortingPriority);
          this->__isset.sortingPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->children.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->children.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->children[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.children = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CategoryNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CategoryNode");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("categoryId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->categoryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sortingPriority", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sortingPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("children", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->children.size()));
    std::vector<CategoryNode> ::const_iterator _iter5;
    for (_iter5 = this->children.begin(); _iter5 != this->children.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CategoryNode &a, CategoryNode &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.categoryId, b.categoryId);
  swap(a.sortingPriority, b.sortingPriority);
  swap(a.children, b.children);
  swap(a.__isset, b.__isset);
}

CategoryNode::CategoryNode(const CategoryNode& other6) {
  id = other6.id;
  categoryId = other6.categoryId;
  sortingPriority = other6.sortingPriority;
  children = other6.children;
  __isset = other6.__isset;
}
CategoryNode& CategoryNode::operator=(const CategoryNode& other7) {
  id = other7.id;
  categoryId = other7.categoryId;
  sortingPriority = other7.sortingPriority;
  children = other7.children;
  __isset = other7.__isset;
  return *this;
}
void CategoryNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CategoryNode(";
  out << "id=" << to_string(id);
  out << ", " << "categoryId=" << to_string(categoryId);
  out << ", " << "sortingPriority=" << to_string(sortingPriority);
  out << ", " << "children=" << to_string(children);
  out << ")";
}


SettingSearchResult::~SettingSearchResult() throw() {
}


void SettingSearchResult::__set_Version(const std::string& val) {
  this->Version = val;
}

void SettingSearchResult::__set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}

uint32_t SettingSearchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Version);
          this->__isset.Version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingItems.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->SettingItems.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->SettingItems[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingSearchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingSearchResult");

  xfer += oprot->writeFieldBegin("Version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter13;
    for (_iter13 = this->SettingItems.begin(); _iter13 != this->SettingItems.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingSearchResult &a, SettingSearchResult &b) {
  using ::std::swap;
  swap(a.Version, b.Version);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

SettingSearchResult::SettingSearchResult(const SettingSearchResult& other14) {
  Version = other14.Version;
  SettingItems = other14.SettingItems;
  __isset = other14.__isset;
}
SettingSearchResult& SettingSearchResult::operator=(const SettingSearchResult& other15) {
  Version = other15.Version;
  SettingItems = other15.SettingItems;
  __isset = other15.__isset;
  return *this;
}
void SettingSearchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingSearchResult(";
  out << "Version=" << to_string(Version);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


SettingTree::~SettingTree() throw() {
}


void SettingTree::__set_CateNode(const CategoryNode& val) {
  this->CateNode = val;
}

void SettingTree::__set_SettingCategories(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory> & val) {
  this->SettingCategories = val;
}

void SettingTree::__set_SettingItems(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}

uint32_t SettingTree::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->CateNode.read(iprot);
          this->__isset.CateNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->SettingCategories.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _ktype17;
            ::apache::thrift::protocol::TType _vtype18;
            xfer += iprot->readMapBegin(_ktype17, _vtype18, _size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              std::string _key21;
              xfer += iprot->readString(_key21);
               ::Ruyi::SDK::CommonType::SettingCategory& _val22 = this->SettingCategories[_key21];
              xfer += _val22.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.SettingCategories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->SettingItems.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _ktype24;
            ::apache::thrift::protocol::TType _vtype25;
            xfer += iprot->readMapBegin(_ktype24, _vtype25, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::string _key28;
              xfer += iprot->readString(_key28);
               ::Ruyi::SDK::CommonType::SettingItem& _val29 = this->SettingItems[_key28];
              xfer += _val29.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingTree::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingTree");

  xfer += oprot->writeFieldBegin("CateNode", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->CateNode.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingCategories", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingCategories.size()));
    std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory> ::const_iterator _iter30;
    for (_iter30 = this->SettingCategories.begin(); _iter30 != this->SettingCategories.end(); ++_iter30)
    {
      xfer += oprot->writeString(_iter30->first);
      xfer += _iter30->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter31;
    for (_iter31 = this->SettingItems.begin(); _iter31 != this->SettingItems.end(); ++_iter31)
    {
      xfer += oprot->writeString(_iter31->first);
      xfer += _iter31->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingTree &a, SettingTree &b) {
  using ::std::swap;
  swap(a.CateNode, b.CateNode);
  swap(a.SettingCategories, b.SettingCategories);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

SettingTree::SettingTree(const SettingTree& other32) {
  CateNode = other32.CateNode;
  SettingCategories = other32.SettingCategories;
  SettingItems = other32.SettingItems;
  __isset = other32.__isset;
}
SettingTree& SettingTree::operator=(const SettingTree& other33) {
  CateNode = other33.CateNode;
  SettingCategories = other33.SettingCategories;
  SettingItems = other33.SettingItems;
  __isset = other33.__isset;
  return *this;
}
void SettingTree::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingTree(";
  out << "CateNode=" << to_string(CateNode);
  out << ", " << "SettingCategories=" << to_string(SettingCategories);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


NodeList::~NodeList() throw() {
}


void NodeList::__set_SettingCategories(const std::vector< ::Ruyi::SDK::CommonType::SettingCategory> & val) {
  this->SettingCategories = val;
}

void NodeList::__set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val) {
  this->SettingItems = val;
}

uint32_t NodeList::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingCategories.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->SettingCategories.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += this->SettingCategories[_i38].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingCategories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SettingItems.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->SettingItems.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->SettingItems[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SettingItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NodeList");

  xfer += oprot->writeFieldBegin("SettingCategories", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingCategories.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingCategory> ::const_iterator _iter44;
    for (_iter44 = this->SettingCategories.begin(); _iter44 != this->SettingCategories.end(); ++_iter44)
    {
      xfer += (*_iter44).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SettingItems", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SettingItems.size()));
    std::vector< ::Ruyi::SDK::CommonType::SettingItem> ::const_iterator _iter45;
    for (_iter45 = this->SettingItems.begin(); _iter45 != this->SettingItems.end(); ++_iter45)
    {
      xfer += (*_iter45).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeList &a, NodeList &b) {
  using ::std::swap;
  swap(a.SettingCategories, b.SettingCategories);
  swap(a.SettingItems, b.SettingItems);
  swap(a.__isset, b.__isset);
}

NodeList::NodeList(const NodeList& other46) {
  SettingCategories = other46.SettingCategories;
  SettingItems = other46.SettingItems;
  __isset = other46.__isset;
}
NodeList& NodeList::operator=(const NodeList& other47) {
  SettingCategories = other47.SettingCategories;
  SettingItems = other47.SettingItems;
  __isset = other47.__isset;
  return *this;
}
void NodeList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NodeList(";
  out << "SettingCategories=" << to_string(SettingCategories);
  out << ", " << "SettingItems=" << to_string(SettingItems);
  out << ")";
}


SettingItemNotification::~SettingItemNotification() throw() {
}


void SettingItemNotification::__set_key(const std::string& val) {
  this->key = val;
}

void SettingItemNotification::__set_contents(const JSON& val) {
  this->contents = val;
}

uint32_t SettingItemNotification::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contents);
          this->__isset.contents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SettingItemNotification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SettingItemNotification");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contents", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->contents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SettingItemNotification &a, SettingItemNotification &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.contents, b.contents);
  swap(a.__isset, b.__isset);
}

SettingItemNotification::SettingItemNotification(const SettingItemNotification& other48) {
  key = other48.key;
  contents = other48.contents;
  __isset = other48.__isset;
}
SettingItemNotification& SettingItemNotification::operator=(const SettingItemNotification& other49) {
  key = other49.key;
  contents = other49.contents;
  __isset = other49.__isset;
  return *this;
}
void SettingItemNotification::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SettingItemNotification(";
  out << "key=" << to_string(key);
  out << ", " << "contents=" << to_string(contents);
  out << ")";
}

}}}} // namespace
