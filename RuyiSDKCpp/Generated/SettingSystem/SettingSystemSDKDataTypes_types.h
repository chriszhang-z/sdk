/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SettingSystemSDKDataTypes_TYPES_H
#define SettingSystemSDKDataTypes_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "CommonTypeSDKDataTypes_types.h"


namespace Ruyi { namespace SDK { namespace SettingSystem { namespace Api {

struct NodeType {
  enum type {
    Category = 1,
    SettingItem = 2,
    All = 3
  };
};

extern const std::map<int, const char*> _NodeType_VALUES_TO_NAMES;

typedef std::string JSON;

class CategoryNode;

class SettingSearchResult;

class SettingTree;

class NodeList;

class SettingItemNotification;

typedef struct _CategoryNode__isset {
  _CategoryNode__isset() : id(false), categoryId(false), sortingPriority(false), children(false) {}
  bool id :1;
  bool categoryId :1;
  bool sortingPriority :1;
  bool children :1;
} _CategoryNode__isset;

class CategoryNode : public virtual ::apache::thrift::TBase {
 public:

  CategoryNode(const CategoryNode&);
  CategoryNode& operator=(const CategoryNode&);
  CategoryNode() : id(), categoryId(), sortingPriority(0) {
  }

  virtual ~CategoryNode() throw();
  std::string id;
  std::string categoryId;
  int32_t sortingPriority;
  std::vector<CategoryNode>  children;

  _CategoryNode__isset __isset;

  void __set_id(const std::string& val);

  void __set_categoryId(const std::string& val);

  void __set_sortingPriority(const int32_t val);

  void __set_children(const std::vector<CategoryNode> & val);

  bool operator == (const CategoryNode & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(categoryId == rhs.categoryId))
      return false;
    if (!(sortingPriority == rhs.sortingPriority))
      return false;
    if (!(children == rhs.children))
      return false;
    return true;
  }
  bool operator != (const CategoryNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CategoryNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CategoryNode &a, CategoryNode &b);

inline std::ostream& operator<<(std::ostream& out, const CategoryNode& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SettingSearchResult__isset {
  _SettingSearchResult__isset() : Version(false), SettingItems(false) {}
  bool Version :1;
  bool SettingItems :1;
} _SettingSearchResult__isset;

class SettingSearchResult : public virtual ::apache::thrift::TBase {
 public:

  SettingSearchResult(const SettingSearchResult&);
  SettingSearchResult& operator=(const SettingSearchResult&);
  SettingSearchResult() : Version() {
  }

  virtual ~SettingSearchResult() throw();
  std::string Version;
  std::vector< ::Ruyi::SDK::CommonType::SettingItem>  SettingItems;

  _SettingSearchResult__isset __isset;

  void __set_Version(const std::string& val);

  void __set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val);

  bool operator == (const SettingSearchResult & rhs) const
  {
    if (!(Version == rhs.Version))
      return false;
    if (!(SettingItems == rhs.SettingItems))
      return false;
    return true;
  }
  bool operator != (const SettingSearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SettingSearchResult &a, SettingSearchResult &b);

inline std::ostream& operator<<(std::ostream& out, const SettingSearchResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SettingTree__isset {
  _SettingTree__isset() : CateNode(false), SettingCategories(false), SettingItems(false) {}
  bool CateNode :1;
  bool SettingCategories :1;
  bool SettingItems :1;
} _SettingTree__isset;

class SettingTree : public virtual ::apache::thrift::TBase {
 public:

  SettingTree(const SettingTree&);
  SettingTree& operator=(const SettingTree&);
  SettingTree() {
  }

  virtual ~SettingTree() throw();
  CategoryNode CateNode;
  std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory>  SettingCategories;
  std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem>  SettingItems;

  _SettingTree__isset __isset;

  void __set_CateNode(const CategoryNode& val);

  void __set_SettingCategories(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingCategory> & val);

  void __set_SettingItems(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingItem> & val);

  bool operator == (const SettingTree & rhs) const
  {
    if (!(CateNode == rhs.CateNode))
      return false;
    if (!(SettingCategories == rhs.SettingCategories))
      return false;
    if (!(SettingItems == rhs.SettingItems))
      return false;
    return true;
  }
  bool operator != (const SettingTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SettingTree &a, SettingTree &b);

inline std::ostream& operator<<(std::ostream& out, const SettingTree& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NodeList__isset {
  _NodeList__isset() : SettingCategories(false), SettingItems(false) {}
  bool SettingCategories :1;
  bool SettingItems :1;
} _NodeList__isset;

class NodeList : public virtual ::apache::thrift::TBase {
 public:

  NodeList(const NodeList&);
  NodeList& operator=(const NodeList&);
  NodeList() {
  }

  virtual ~NodeList() throw();
  std::vector< ::Ruyi::SDK::CommonType::SettingCategory>  SettingCategories;
  std::vector< ::Ruyi::SDK::CommonType::SettingItem>  SettingItems;

  _NodeList__isset __isset;

  void __set_SettingCategories(const std::vector< ::Ruyi::SDK::CommonType::SettingCategory> & val);

  void __set_SettingItems(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val);

  bool operator == (const NodeList & rhs) const
  {
    if (!(SettingCategories == rhs.SettingCategories))
      return false;
    if (!(SettingItems == rhs.SettingItems))
      return false;
    return true;
  }
  bool operator != (const NodeList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NodeList &a, NodeList &b);

inline std::ostream& operator<<(std::ostream& out, const NodeList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SettingItemNotification__isset {
  _SettingItemNotification__isset() : key(false), contents(true) {}
  bool key :1;
  bool contents :1;
} _SettingItemNotification__isset;

class SettingItemNotification : public virtual ::apache::thrift::TBase {
 public:

  SettingItemNotification(const SettingItemNotification&);
  SettingItemNotification& operator=(const SettingItemNotification&);
  SettingItemNotification() : key(), contents("{}") {
  }

  virtual ~SettingItemNotification() throw();
  std::string key;
  JSON contents;

  _SettingItemNotification__isset __isset;

  void __set_key(const std::string& val);

  void __set_contents(const JSON& val);

  bool operator == (const SettingItemNotification & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const SettingItemNotification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingItemNotification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SettingItemNotification &a, SettingItemNotification &b);

inline std::ostream& operator<<(std::ostream& out, const SettingItemNotification& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
