/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GlobalInputDefineSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace GlobalInputDefine {

int _kRuyiInputDeviceTypeValues[] = {
  RuyiInputDeviceType::XB360,
  RuyiInputDeviceType::Mouse,
  RuyiInputDeviceType::Keyboard,
  RuyiInputDeviceType::Joystick,
  RuyiInputDeviceType::Gamepad,
  RuyiInputDeviceType::Driving,
  RuyiInputDeviceType::Flight,
  RuyiInputDeviceType::FirstPerson,
  RuyiInputDeviceType::ControlDevice,
  RuyiInputDeviceType::ScreenPointer,
  RuyiInputDeviceType::Remote,
  RuyiInputDeviceType::Supplemental,
  RuyiInputDeviceType::RuyiController
};
const char* _kRuyiInputDeviceTypeNames[] = {
  "XB360",
  "Mouse",
  "Keyboard",
  "Joystick",
  "Gamepad",
  "Driving",
  "Flight",
  "FirstPerson",
  "ControlDevice",
  "ScreenPointer",
  "Remote",
  "Supplemental",
  "RuyiController"
};
const std::map<int, const char*> _RuyiInputDeviceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kRuyiInputDeviceTypeValues, _kRuyiInputDeviceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGamepadButtonFlagsValues[] = {
  GamepadButtonFlags::Y,
  GamepadButtonFlags::None,
  GamepadButtonFlags::DPadUp,
  GamepadButtonFlags::DPadDown,
  GamepadButtonFlags::DPadLeft,
  GamepadButtonFlags::DPadRight,
  GamepadButtonFlags::Start,
  GamepadButtonFlags::Back,
  GamepadButtonFlags::LeftThumb,
  GamepadButtonFlags::RightThumb,
  GamepadButtonFlags::LeftShoulder,
  GamepadButtonFlags::RightShoulder,
  GamepadButtonFlags::A,
  GamepadButtonFlags::B,
  GamepadButtonFlags::X,
  GamepadButtonFlags::LeftTrigger,
  GamepadButtonFlags::RightTrigger,
  GamepadButtonFlags::LeftThumbX,
  GamepadButtonFlags::LeftThumbY,
  GamepadButtonFlags::RightThumbX,
  GamepadButtonFlags::RightThumbY
};
const char* _kGamepadButtonFlagsNames[] = {
  "Y",
  "None",
  "DPadUp",
  "DPadDown",
  "DPadLeft",
  "DPadRight",
  "Start",
  "Back",
  "LeftThumb",
  "RightThumb",
  "LeftShoulder",
  "RightShoulder",
  "A",
  "B",
  "X",
  "LeftTrigger",
  "RightTrigger",
  "LeftThumbX",
  "LeftThumbY",
  "RightThumbX",
  "RightThumbY"
};
const std::map<int, const char*> _GamepadButtonFlags_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(21, _kGamepadButtonFlagsValues, _kGamepadButtonFlagsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kKeyValues[] = {
  Key::Unknown,
  Key::Escape,
  Key::D1,
  Key::D2,
  Key::D3,
  Key::D4,
  Key::D5,
  Key::D6,
  Key::D7,
  Key::D8,
  Key::D9,
  Key::D0,
  Key::Minus,
  Key::Equals,
  Key::Back,
  Key::Tab,
  Key::Q,
  Key::W,
  Key::E,
  Key::R,
  Key::T,
  Key::Y,
  Key::U,
  Key::I,
  Key::O,
  Key::P,
  Key::LeftBracket,
  Key::RightBracket,
  Key::Return,
  Key::LeftControl,
  Key::A,
  Key::S,
  Key::D,
  Key::F,
  Key::G,
  Key::H,
  Key::J,
  Key::K,
  Key::L,
  Key::Semicolon,
  Key::Apostrophe,
  Key::Grave,
  Key::LeftShift,
  Key::Backslash,
  Key::Z,
  Key::X,
  Key::C,
  Key::V,
  Key::B,
  Key::N,
  Key::M,
  Key::Comma,
  Key::Period,
  Key::Slash,
  Key::RightShift,
  Key::Multiply,
  Key::LeftAlt,
  Key::Space,
  Key::Capital,
  Key::F1,
  Key::F2,
  Key::F3,
  Key::F4,
  Key::F5,
  Key::F6,
  Key::F7,
  Key::F8,
  Key::F9,
  Key::F10,
  Key::NumberLock,
  Key::ScrollLock,
  Key::NumberPad7,
  Key::NumberPad8,
  Key::NumberPad9,
  Key::Subtract,
  Key::NumberPad4,
  Key::NumberPad5,
  Key::NumberPad6,
  Key::Add,
  Key::NumberPad1,
  Key::NumberPad2,
  Key::NumberPad3,
  Key::NumberPad0,
  Key::Decimal,
  Key::Oem102,
  Key::F11,
  Key::F12,
  Key::F13,
  Key::F14,
  Key::F15,
  Key::Kana,
  Key::AbntC1,
  Key::Convert,
  Key::NoConvert,
  Key::Yen,
  Key::AbntC2,
  Key::NumberPadEquals,
  Key::PreviousTrack,
  Key::AT,
  Key::Colon,
  Key::Underline,
  Key::Kanji,
  Key::Stop,
  Key::AX,
  Key::Unlabeled,
  Key::NextTrack,
  Key::NumberPadEnter,
  Key::RightControl,
  Key::Mute,
  Key::Calculator,
  Key::PlayPause,
  Key::MediaStop,
  Key::VolumeDown,
  Key::VolumeUp,
  Key::WebHome,
  Key::NumberPadComma,
  Key::Divide,
  Key::PrintScreen,
  Key::RightAlt,
  Key::Pause,
  Key::Home,
  Key::Up,
  Key::PageUp,
  Key::Left,
  Key::Right,
  Key::End,
  Key::Down,
  Key::PageDown,
  Key::Insert,
  Key::Delete,
  Key::LeftWindowsKey,
  Key::RightWindowsKey,
  Key::Applications,
  Key::Power,
  Key::Sleep,
  Key::Wake,
  Key::WebSearch,
  Key::WebFavorites,
  Key::WebRefresh,
  Key::WebStop,
  Key::WebForward,
  Key::WebBack,
  Key::MyComputer,
  Key::Mail,
  Key::MediaSelect
};
const char* _kKeyNames[] = {
  "Unknown",
  "Escape",
  "D1",
  "D2",
  "D3",
  "D4",
  "D5",
  "D6",
  "D7",
  "D8",
  "D9",
  "D0",
  "Minus",
  "Equals",
  "Back",
  "Tab",
  "Q",
  "W",
  "E",
  "R",
  "T",
  "Y",
  "U",
  "I",
  "O",
  "P",
  "LeftBracket",
  "RightBracket",
  "Return",
  "LeftControl",
  "A",
  "S",
  "D",
  "F",
  "G",
  "H",
  "J",
  "K",
  "L",
  "Semicolon",
  "Apostrophe",
  "Grave",
  "LeftShift",
  "Backslash",
  "Z",
  "X",
  "C",
  "V",
  "B",
  "N",
  "M",
  "Comma",
  "Period",
  "Slash",
  "RightShift",
  "Multiply",
  "LeftAlt",
  "Space",
  "Capital",
  "F1",
  "F2",
  "F3",
  "F4",
  "F5",
  "F6",
  "F7",
  "F8",
  "F9",
  "F10",
  "NumberLock",
  "ScrollLock",
  "NumberPad7",
  "NumberPad8",
  "NumberPad9",
  "Subtract",
  "NumberPad4",
  "NumberPad5",
  "NumberPad6",
  "Add",
  "NumberPad1",
  "NumberPad2",
  "NumberPad3",
  "NumberPad0",
  "Decimal",
  "Oem102",
  "F11",
  "F12",
  "F13",
  "F14",
  "F15",
  "Kana",
  "AbntC1",
  "Convert",
  "NoConvert",
  "Yen",
  "AbntC2",
  "NumberPadEquals",
  "PreviousTrack",
  "AT",
  "Colon",
  "Underline",
  "Kanji",
  "Stop",
  "AX",
  "Unlabeled",
  "NextTrack",
  "NumberPadEnter",
  "RightControl",
  "Mute",
  "Calculator",
  "PlayPause",
  "MediaStop",
  "VolumeDown",
  "VolumeUp",
  "WebHome",
  "NumberPadComma",
  "Divide",
  "PrintScreen",
  "RightAlt",
  "Pause",
  "Home",
  "Up",
  "PageUp",
  "Left",
  "Right",
  "End",
  "Down",
  "PageDown",
  "Insert",
  "Delete",
  "LeftWindowsKey",
  "RightWindowsKey",
  "Applications",
  "Power",
  "Sleep",
  "Wake",
  "WebSearch",
  "WebFavorites",
  "WebRefresh",
  "WebStop",
  "WebForward",
  "WebBack",
  "MyComputer",
  "Mail",
  "MediaSelect"
};
const std::map<int, const char*> _Key_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(145, _kKeyValues, _kKeyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMouseOffsetValues[] = {
  MouseOffset::X,
  MouseOffset::Y,
  MouseOffset::Z,
  MouseOffset::Buttons0,
  MouseOffset::Buttons1,
  MouseOffset::Buttons2,
  MouseOffset::Buttons3,
  MouseOffset::Buttons4,
  MouseOffset::Buttons5,
  MouseOffset::Buttons6,
  MouseOffset::Buttons7
};
const char* _kMouseOffsetNames[] = {
  "X",
  "Y",
  "Z",
  "Buttons0",
  "Buttons1",
  "Buttons2",
  "Buttons3",
  "Buttons4",
  "Buttons5",
  "Buttons6",
  "Buttons7"
};
const std::map<int, const char*> _MouseOffset_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kMouseOffsetValues, _kMouseOffsetNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kJoystickOffsetValues[] = {
  JoystickOffset::X,
  JoystickOffset::Y,
  JoystickOffset::Z,
  JoystickOffset::RotationX,
  JoystickOffset::RotationY,
  JoystickOffset::RotationZ,
  JoystickOffset::Sliders0,
  JoystickOffset::Sliders1,
  JoystickOffset::PointOfViewControllers0,
  JoystickOffset::PointOfViewControllers1,
  JoystickOffset::PointOfViewControllers2,
  JoystickOffset::PointOfViewControllers3,
  JoystickOffset::Buttons0,
  JoystickOffset::Buttons1,
  JoystickOffset::Buttons2,
  JoystickOffset::Buttons3,
  JoystickOffset::Buttons4,
  JoystickOffset::Buttons5,
  JoystickOffset::Buttons6,
  JoystickOffset::Buttons7,
  JoystickOffset::Buttons8,
  JoystickOffset::Buttons9,
  JoystickOffset::Buttons10,
  JoystickOffset::Buttons11,
  JoystickOffset::Buttons12,
  JoystickOffset::Buttons13,
  JoystickOffset::Buttons14,
  JoystickOffset::Buttons15,
  JoystickOffset::Buttons16,
  JoystickOffset::Buttons17,
  JoystickOffset::Buttons18,
  JoystickOffset::Buttons19,
  JoystickOffset::Buttons20,
  JoystickOffset::Buttons21,
  JoystickOffset::Buttons22,
  JoystickOffset::Buttons23,
  JoystickOffset::Buttons24,
  JoystickOffset::Buttons25,
  JoystickOffset::Buttons26,
  JoystickOffset::Buttons27,
  JoystickOffset::Buttons28,
  JoystickOffset::Buttons29,
  JoystickOffset::Buttons30,
  JoystickOffset::Buttons31,
  JoystickOffset::Buttons32,
  JoystickOffset::Buttons33,
  JoystickOffset::Buttons34,
  JoystickOffset::Buttons35,
  JoystickOffset::Buttons36,
  JoystickOffset::Buttons37,
  JoystickOffset::Buttons38,
  JoystickOffset::Buttons39,
  JoystickOffset::Buttons40,
  JoystickOffset::Buttons41,
  JoystickOffset::Buttons42,
  JoystickOffset::Buttons43,
  JoystickOffset::Buttons44,
  JoystickOffset::Buttons45,
  JoystickOffset::Buttons46,
  JoystickOffset::Buttons47,
  JoystickOffset::Buttons48,
  JoystickOffset::Buttons49,
  JoystickOffset::Buttons50,
  JoystickOffset::Buttons51,
  JoystickOffset::Buttons52,
  JoystickOffset::Buttons53,
  JoystickOffset::Buttons54,
  JoystickOffset::Buttons55,
  JoystickOffset::Buttons56,
  JoystickOffset::Buttons57,
  JoystickOffset::Buttons58,
  JoystickOffset::Buttons59,
  JoystickOffset::Buttons60,
  JoystickOffset::Buttons61,
  JoystickOffset::Buttons62,
  JoystickOffset::Buttons63,
  JoystickOffset::Buttons64,
  JoystickOffset::Buttons65,
  JoystickOffset::Buttons66,
  JoystickOffset::Buttons67,
  JoystickOffset::Buttons68,
  JoystickOffset::Buttons69,
  JoystickOffset::Buttons70,
  JoystickOffset::Buttons71,
  JoystickOffset::Buttons72,
  JoystickOffset::Buttons73,
  JoystickOffset::Buttons74,
  JoystickOffset::Buttons75,
  JoystickOffset::Buttons76,
  JoystickOffset::Buttons77,
  JoystickOffset::Buttons78,
  JoystickOffset::Buttons79,
  JoystickOffset::Buttons80,
  JoystickOffset::Buttons81,
  JoystickOffset::Buttons82,
  JoystickOffset::Buttons83,
  JoystickOffset::Buttons84,
  JoystickOffset::Buttons85,
  JoystickOffset::Buttons86,
  JoystickOffset::Buttons87,
  JoystickOffset::Buttons88,
  JoystickOffset::Buttons89,
  JoystickOffset::Buttons90,
  JoystickOffset::Buttons91,
  JoystickOffset::Buttons92,
  JoystickOffset::Buttons93,
  JoystickOffset::Buttons94,
  JoystickOffset::Buttons95,
  JoystickOffset::Buttons96,
  JoystickOffset::Buttons97,
  JoystickOffset::Buttons98,
  JoystickOffset::Buttons99,
  JoystickOffset::Buttons100,
  JoystickOffset::Buttons101,
  JoystickOffset::Buttons102,
  JoystickOffset::Buttons103,
  JoystickOffset::Buttons104,
  JoystickOffset::Buttons105,
  JoystickOffset::Buttons106,
  JoystickOffset::Buttons107,
  JoystickOffset::Buttons108,
  JoystickOffset::Buttons109,
  JoystickOffset::Buttons110,
  JoystickOffset::Buttons111,
  JoystickOffset::Buttons112,
  JoystickOffset::Buttons113,
  JoystickOffset::Buttons114,
  JoystickOffset::Buttons115,
  JoystickOffset::Buttons116,
  JoystickOffset::Buttons117,
  JoystickOffset::Buttons118,
  JoystickOffset::Buttons119,
  JoystickOffset::Buttons120,
  JoystickOffset::Buttons121,
  JoystickOffset::Buttons122,
  JoystickOffset::Buttons123,
  JoystickOffset::Buttons124,
  JoystickOffset::Buttons125,
  JoystickOffset::Buttons126,
  JoystickOffset::Buttons127,
  JoystickOffset::VelocityX,
  JoystickOffset::VelocityY,
  JoystickOffset::VelocityZ,
  JoystickOffset::AngularVelocityX,
  JoystickOffset::AngularVelocityY,
  JoystickOffset::AngularVelocityZ,
  JoystickOffset::VelocitySliders0,
  JoystickOffset::VelocitySliders1,
  JoystickOffset::AccelerationX,
  JoystickOffset::AccelerationY,
  JoystickOffset::AccelerationZ,
  JoystickOffset::AngularAccelerationX,
  JoystickOffset::AngularAccelerationY,
  JoystickOffset::AngularAccelerationZ,
  JoystickOffset::AccelerationSliders0,
  JoystickOffset::AccelerationSliders1,
  JoystickOffset::ForceX,
  JoystickOffset::ForceY,
  JoystickOffset::ForceZ,
  JoystickOffset::TorqueX,
  JoystickOffset::TorqueY,
  JoystickOffset::TorqueZ,
  JoystickOffset::ForceSliders0,
  JoystickOffset::ForceSliders1
};
const char* _kJoystickOffsetNames[] = {
  "X",
  "Y",
  "Z",
  "RotationX",
  "RotationY",
  "RotationZ",
  "Sliders0",
  "Sliders1",
  "PointOfViewControllers0",
  "PointOfViewControllers1",
  "PointOfViewControllers2",
  "PointOfViewControllers3",
  "Buttons0",
  "Buttons1",
  "Buttons2",
  "Buttons3",
  "Buttons4",
  "Buttons5",
  "Buttons6",
  "Buttons7",
  "Buttons8",
  "Buttons9",
  "Buttons10",
  "Buttons11",
  "Buttons12",
  "Buttons13",
  "Buttons14",
  "Buttons15",
  "Buttons16",
  "Buttons17",
  "Buttons18",
  "Buttons19",
  "Buttons20",
  "Buttons21",
  "Buttons22",
  "Buttons23",
  "Buttons24",
  "Buttons25",
  "Buttons26",
  "Buttons27",
  "Buttons28",
  "Buttons29",
  "Buttons30",
  "Buttons31",
  "Buttons32",
  "Buttons33",
  "Buttons34",
  "Buttons35",
  "Buttons36",
  "Buttons37",
  "Buttons38",
  "Buttons39",
  "Buttons40",
  "Buttons41",
  "Buttons42",
  "Buttons43",
  "Buttons44",
  "Buttons45",
  "Buttons46",
  "Buttons47",
  "Buttons48",
  "Buttons49",
  "Buttons50",
  "Buttons51",
  "Buttons52",
  "Buttons53",
  "Buttons54",
  "Buttons55",
  "Buttons56",
  "Buttons57",
  "Buttons58",
  "Buttons59",
  "Buttons60",
  "Buttons61",
  "Buttons62",
  "Buttons63",
  "Buttons64",
  "Buttons65",
  "Buttons66",
  "Buttons67",
  "Buttons68",
  "Buttons69",
  "Buttons70",
  "Buttons71",
  "Buttons72",
  "Buttons73",
  "Buttons74",
  "Buttons75",
  "Buttons76",
  "Buttons77",
  "Buttons78",
  "Buttons79",
  "Buttons80",
  "Buttons81",
  "Buttons82",
  "Buttons83",
  "Buttons84",
  "Buttons85",
  "Buttons86",
  "Buttons87",
  "Buttons88",
  "Buttons89",
  "Buttons90",
  "Buttons91",
  "Buttons92",
  "Buttons93",
  "Buttons94",
  "Buttons95",
  "Buttons96",
  "Buttons97",
  "Buttons98",
  "Buttons99",
  "Buttons100",
  "Buttons101",
  "Buttons102",
  "Buttons103",
  "Buttons104",
  "Buttons105",
  "Buttons106",
  "Buttons107",
  "Buttons108",
  "Buttons109",
  "Buttons110",
  "Buttons111",
  "Buttons112",
  "Buttons113",
  "Buttons114",
  "Buttons115",
  "Buttons116",
  "Buttons117",
  "Buttons118",
  "Buttons119",
  "Buttons120",
  "Buttons121",
  "Buttons122",
  "Buttons123",
  "Buttons124",
  "Buttons125",
  "Buttons126",
  "Buttons127",
  "VelocityX",
  "VelocityY",
  "VelocityZ",
  "AngularVelocityX",
  "AngularVelocityY",
  "AngularVelocityZ",
  "VelocitySliders0",
  "VelocitySliders1",
  "AccelerationX",
  "AccelerationY",
  "AccelerationZ",
  "AngularAccelerationX",
  "AngularAccelerationY",
  "AngularAccelerationZ",
  "AccelerationSliders0",
  "AccelerationSliders1",
  "ForceX",
  "ForceY",
  "ForceZ",
  "TorqueX",
  "TorqueY",
  "TorqueZ",
  "ForceSliders0",
  "ForceSliders1"
};
const std::map<int, const char*> _JoystickOffset_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(164, _kJoystickOffsetValues, _kJoystickOffsetNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRuyiControllerKeyValues[] = {
  RuyiControllerKey::eButtonL3,
  RuyiControllerKey::eButtonR3,
  RuyiControllerKey::eButtonX,
  RuyiControllerKey::eButtonB,
  RuyiControllerKey::eButtonY,
  RuyiControllerKey::eButtonA,
  RuyiControllerKey::eButtonL1,
  RuyiControllerKey::eButtonR1,
  RuyiControllerKey::eButtonLeft,
  RuyiControllerKey::eButtonRight,
  RuyiControllerKey::eButtonUp,
  RuyiControllerKey::eButtonDown,
  RuyiControllerKey::eButtonStart,
  RuyiControllerKey::eButtonBack,
  RuyiControllerKey::eButtonHome,
  RuyiControllerKey::eAnalogL2,
  RuyiControllerKey::eAnalogR2,
  RuyiControllerKey::eAnalogLeftJoyX,
  RuyiControllerKey::eAnalogLeftJoyY,
  RuyiControllerKey::eAnalogRightJoyX,
  RuyiControllerKey::eAnalogRightJoyY
};
const char* _kRuyiControllerKeyNames[] = {
  "eButtonL3",
  "eButtonR3",
  "eButtonX",
  "eButtonB",
  "eButtonY",
  "eButtonA",
  "eButtonL1",
  "eButtonR1",
  "eButtonLeft",
  "eButtonRight",
  "eButtonUp",
  "eButtonDown",
  "eButtonStart",
  "eButtonBack",
  "eButtonHome",
  "eAnalogL2",
  "eAnalogR2",
  "eAnalogLeftJoyX",
  "eAnalogLeftJoyY",
  "eAnalogRightJoyX",
  "eAnalogRightJoyY"
};
const std::map<int, const char*> _RuyiControllerKey_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(21, _kRuyiControllerKeyValues, _kRuyiControllerKeyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRuyiActionActivateEventValues[] = {
  RuyiActionActivateEvent::eKeyDown,
  RuyiActionActivateEvent::eKeyUp,
  RuyiActionActivateEvent::eKeyDownAndUp
};
const char* _kRuyiActionActivateEventNames[] = {
  "eKeyDown",
  "eKeyUp",
  "eKeyDownAndUp"
};
const std::map<int, const char*> _RuyiActionActivateEvent_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRuyiActionActivateEventValues, _kRuyiActionActivateEventNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Gamepad::~Gamepad() throw() {
}


void Gamepad::__set_Buttons(const int32_t val) {
  this->Buttons = val;
}

void Gamepad::__set_LeftTrigger(const int8_t val) {
  this->LeftTrigger = val;
}

void Gamepad::__set_RightTrigger(const int8_t val) {
  this->RightTrigger = val;
}

void Gamepad::__set_LeftThumbX(const int16_t val) {
  this->LeftThumbX = val;
}

void Gamepad::__set_LeftThumbY(const int16_t val) {
  this->LeftThumbY = val;
}

void Gamepad::__set_RightThumbX(const int16_t val) {
  this->RightThumbX = val;
}

void Gamepad::__set_RightThumbY(const int16_t val) {
  this->RightThumbY = val;
}

uint32_t Gamepad::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Buttons);
          this->__isset.Buttons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->LeftTrigger);
          this->__isset.LeftTrigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->RightTrigger);
          this->__isset.RightTrigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->LeftThumbX);
          this->__isset.LeftThumbX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->LeftThumbY);
          this->__isset.LeftThumbY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->RightThumbX);
          this->__isset.RightThumbX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->RightThumbY);
          this->__isset.RightThumbY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Gamepad::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Gamepad");

  xfer += oprot->writeFieldBegin("Buttons", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->Buttons);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftTrigger", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->LeftTrigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightTrigger", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->RightTrigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftThumbX", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->LeftThumbX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftThumbY", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->LeftThumbY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightThumbX", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->RightThumbX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightThumbY", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->RightThumbY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Gamepad &a, Gamepad &b) {
  using ::std::swap;
  swap(a.Buttons, b.Buttons);
  swap(a.LeftTrigger, b.LeftTrigger);
  swap(a.RightTrigger, b.RightTrigger);
  swap(a.LeftThumbX, b.LeftThumbX);
  swap(a.LeftThumbY, b.LeftThumbY);
  swap(a.RightThumbX, b.RightThumbX);
  swap(a.RightThumbY, b.RightThumbY);
  swap(a.__isset, b.__isset);
}

Gamepad::Gamepad(const Gamepad& other0) {
  Buttons = other0.Buttons;
  LeftTrigger = other0.LeftTrigger;
  RightTrigger = other0.RightTrigger;
  LeftThumbX = other0.LeftThumbX;
  LeftThumbY = other0.LeftThumbY;
  RightThumbX = other0.RightThumbX;
  RightThumbY = other0.RightThumbY;
  __isset = other0.__isset;
}
Gamepad& Gamepad::operator=(const Gamepad& other1) {
  Buttons = other1.Buttons;
  LeftTrigger = other1.LeftTrigger;
  RightTrigger = other1.RightTrigger;
  LeftThumbX = other1.LeftThumbX;
  LeftThumbY = other1.LeftThumbY;
  RightThumbX = other1.RightThumbX;
  RightThumbY = other1.RightThumbY;
  __isset = other1.__isset;
  return *this;
}
void Gamepad::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Gamepad(";
  out << "Buttons=" << to_string(Buttons);
  out << ", " << "LeftTrigger=" << to_string(LeftTrigger);
  out << ", " << "RightTrigger=" << to_string(RightTrigger);
  out << ", " << "LeftThumbX=" << to_string(LeftThumbX);
  out << ", " << "LeftThumbY=" << to_string(LeftThumbY);
  out << ", " << "RightThumbX=" << to_string(RightThumbX);
  out << ", " << "RightThumbY=" << to_string(RightThumbY);
  out << ")";
}


RuyiInputStateXB360::~RuyiInputStateXB360() throw() {
}


void RuyiInputStateXB360::__set_PacketNumber(const int32_t val) {
  this->PacketNumber = val;
}

void RuyiInputStateXB360::__set_gamepad(const Gamepad& val) {
  this->gamepad = val;
}

uint32_t RuyiInputStateXB360::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->PacketNumber);
          this->__isset.PacketNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gamepad.read(iprot);
          this->__isset.gamepad = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputStateXB360::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputStateXB360");

  xfer += oprot->writeFieldBegin("PacketNumber", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->PacketNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gamepad", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->gamepad.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputStateXB360 &a, RuyiInputStateXB360 &b) {
  using ::std::swap;
  swap(a.PacketNumber, b.PacketNumber);
  swap(a.gamepad, b.gamepad);
  swap(a.__isset, b.__isset);
}

RuyiInputStateXB360::RuyiInputStateXB360(const RuyiInputStateXB360& other2) {
  PacketNumber = other2.PacketNumber;
  gamepad = other2.gamepad;
  __isset = other2.__isset;
}
RuyiInputStateXB360& RuyiInputStateXB360::operator=(const RuyiInputStateXB360& other3) {
  PacketNumber = other3.PacketNumber;
  gamepad = other3.gamepad;
  __isset = other3.__isset;
  return *this;
}
void RuyiInputStateXB360::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputStateXB360(";
  out << "PacketNumber=" << to_string(PacketNumber);
  out << ", " << "gamepad=" << to_string(gamepad);
  out << ")";
}


RuyiInputStateKeyboard::~RuyiInputStateKeyboard() throw() {
}


void RuyiInputStateKeyboard::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void RuyiInputStateKeyboard::__set_Value(const int32_t val) {
  this->Value = val;
}

void RuyiInputStateKeyboard::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void RuyiInputStateKeyboard::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void RuyiInputStateKeyboard::__set_Key(const Key::type val) {
  this->Key = val;
}

void RuyiInputStateKeyboard::__set_IsPressed(const bool val) {
  this->IsPressed = val;
}

void RuyiInputStateKeyboard::__set_IsReleased(const bool val) {
  this->IsReleased = val;
}

uint32_t RuyiInputStateKeyboard::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->Key = (Key::type)ecast4;
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsPressed);
          this->__isset.IsPressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsReleased);
          this->__isset.IsReleased = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputStateKeyboard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputStateKeyboard");

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsPressed", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->IsPressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsReleased", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->IsReleased);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputStateKeyboard &a, RuyiInputStateKeyboard &b) {
  using ::std::swap;
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Key, b.Key);
  swap(a.IsPressed, b.IsPressed);
  swap(a.IsReleased, b.IsReleased);
  swap(a.__isset, b.__isset);
}

RuyiInputStateKeyboard::RuyiInputStateKeyboard(const RuyiInputStateKeyboard& other5) {
  RawOffset = other5.RawOffset;
  Value = other5.Value;
  Timestamp = other5.Timestamp;
  Sequence = other5.Sequence;
  Key = other5.Key;
  IsPressed = other5.IsPressed;
  IsReleased = other5.IsReleased;
  __isset = other5.__isset;
}
RuyiInputStateKeyboard& RuyiInputStateKeyboard::operator=(const RuyiInputStateKeyboard& other6) {
  RawOffset = other6.RawOffset;
  Value = other6.Value;
  Timestamp = other6.Timestamp;
  Sequence = other6.Sequence;
  Key = other6.Key;
  IsPressed = other6.IsPressed;
  IsReleased = other6.IsReleased;
  __isset = other6.__isset;
  return *this;
}
void RuyiInputStateKeyboard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputStateKeyboard(";
  out << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Key=" << to_string(Key);
  out << ", " << "IsPressed=" << to_string(IsPressed);
  out << ", " << "IsReleased=" << to_string(IsReleased);
  out << ")";
}


RuyiInputStateMouse::~RuyiInputStateMouse() throw() {
}


void RuyiInputStateMouse::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void RuyiInputStateMouse::__set_Value(const int32_t val) {
  this->Value = val;
}

void RuyiInputStateMouse::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void RuyiInputStateMouse::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void RuyiInputStateMouse::__set_Offset(const MouseOffset::type val) {
  this->Offset = val;
}

void RuyiInputStateMouse::__set_IsButton(const bool val) {
  this->IsButton = val;
}

uint32_t RuyiInputStateMouse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->Offset = (MouseOffset::type)ecast7;
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsButton);
          this->__isset.IsButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputStateMouse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputStateMouse");

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsButton", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->IsButton);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputStateMouse &a, RuyiInputStateMouse &b) {
  using ::std::swap;
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.IsButton, b.IsButton);
  swap(a.__isset, b.__isset);
}

RuyiInputStateMouse::RuyiInputStateMouse(const RuyiInputStateMouse& other8) {
  RawOffset = other8.RawOffset;
  Value = other8.Value;
  Timestamp = other8.Timestamp;
  Sequence = other8.Sequence;
  Offset = other8.Offset;
  IsButton = other8.IsButton;
  __isset = other8.__isset;
}
RuyiInputStateMouse& RuyiInputStateMouse::operator=(const RuyiInputStateMouse& other9) {
  RawOffset = other9.RawOffset;
  Value = other9.Value;
  Timestamp = other9.Timestamp;
  Sequence = other9.Sequence;
  Offset = other9.Offset;
  IsButton = other9.IsButton;
  __isset = other9.__isset;
  return *this;
}
void RuyiInputStateMouse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputStateMouse(";
  out << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ", " << "IsButton=" << to_string(IsButton);
  out << ")";
}


RuyiInputStateGamepad::~RuyiInputStateGamepad() throw() {
}


void RuyiInputStateGamepad::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void RuyiInputStateGamepad::__set_Value(const int32_t val) {
  this->Value = val;
}

void RuyiInputStateGamepad::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void RuyiInputStateGamepad::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void RuyiInputStateGamepad::__set_Offset(const JoystickOffset::type val) {
  this->Offset = val;
}

uint32_t RuyiInputStateGamepad::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->Offset = (JoystickOffset::type)ecast10;
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputStateGamepad::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputStateGamepad");

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputStateGamepad &a, RuyiInputStateGamepad &b) {
  using ::std::swap;
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.__isset, b.__isset);
}

RuyiInputStateGamepad::RuyiInputStateGamepad(const RuyiInputStateGamepad& other11) {
  RawOffset = other11.RawOffset;
  Value = other11.Value;
  Timestamp = other11.Timestamp;
  Sequence = other11.Sequence;
  Offset = other11.Offset;
  __isset = other11.__isset;
}
RuyiInputStateGamepad& RuyiInputStateGamepad::operator=(const RuyiInputStateGamepad& other12) {
  RawOffset = other12.RawOffset;
  Value = other12.Value;
  Timestamp = other12.Timestamp;
  Sequence = other12.Sequence;
  Offset = other12.Offset;
  __isset = other12.__isset;
  return *this;
}
void RuyiInputStateGamepad::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputStateGamepad(";
  out << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ")";
}


RuyiInputStateJoystick::~RuyiInputStateJoystick() throw() {
}


void RuyiInputStateJoystick::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void RuyiInputStateJoystick::__set_Value(const int32_t val) {
  this->Value = val;
}

void RuyiInputStateJoystick::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void RuyiInputStateJoystick::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void RuyiInputStateJoystick::__set_Offset(const JoystickOffset::type val) {
  this->Offset = val;
}

uint32_t RuyiInputStateJoystick::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->Offset = (JoystickOffset::type)ecast13;
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputStateJoystick::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputStateJoystick");

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputStateJoystick &a, RuyiInputStateJoystick &b) {
  using ::std::swap;
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.__isset, b.__isset);
}

RuyiInputStateJoystick::RuyiInputStateJoystick(const RuyiInputStateJoystick& other14) {
  RawOffset = other14.RawOffset;
  Value = other14.Value;
  Timestamp = other14.Timestamp;
  Sequence = other14.Sequence;
  Offset = other14.Offset;
  __isset = other14.__isset;
}
RuyiInputStateJoystick& RuyiInputStateJoystick::operator=(const RuyiInputStateJoystick& other15) {
  RawOffset = other15.RawOffset;
  Value = other15.Value;
  Timestamp = other15.Timestamp;
  Sequence = other15.Sequence;
  Offset = other15.Offset;
  __isset = other15.__isset;
  return *this;
}
void RuyiInputStateJoystick::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputStateJoystick(";
  out << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ")";
}


RuyiInputStateRuyiController::~RuyiInputStateRuyiController() throw() {
}


void RuyiInputStateRuyiController::__set_PacketId(const int64_t val) {
  this->PacketId = val;
}

void RuyiInputStateRuyiController::__set_ChannelId(const int32_t val) {
  this->ChannelId = val;
}

void RuyiInputStateRuyiController::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void RuyiInputStateRuyiController::__set_KeyPress(const int32_t val) {
  this->KeyPress = val;
}

void RuyiInputStateRuyiController::__set_AnalogL2(const int8_t val) {
  this->AnalogL2 = val;
}

void RuyiInputStateRuyiController::__set_AnalogR2(const int8_t val) {
  this->AnalogR2 = val;
}

void RuyiInputStateRuyiController::__set_AnalogLeftJoyX(const int8_t val) {
  this->AnalogLeftJoyX = val;
}

void RuyiInputStateRuyiController::__set_AnalogLeftJoyY(const int8_t val) {
  this->AnalogLeftJoyY = val;
}

void RuyiInputStateRuyiController::__set_AnalogRightJoyX(const int8_t val) {
  this->AnalogRightJoyX = val;
}

void RuyiInputStateRuyiController::__set_AnalogRightJoyY(const int8_t val) {
  this->AnalogRightJoyY = val;
}

uint32_t RuyiInputStateRuyiController::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->PacketId);
          this->__isset.PacketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ChannelId);
          this->__isset.ChannelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->KeyPress);
          this->__isset.KeyPress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogL2);
          this->__isset.AnalogL2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogR2);
          this->__isset.AnalogR2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogLeftJoyX);
          this->__isset.AnalogLeftJoyX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogLeftJoyY);
          this->__isset.AnalogLeftJoyY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogRightJoyX);
          this->__isset.AnalogRightJoyX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogRightJoyY);
          this->__isset.AnalogRightJoyY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputStateRuyiController::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputStateRuyiController");

  xfer += oprot->writeFieldBegin("PacketId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->PacketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ChannelId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ChannelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyPress", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->KeyPress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogL2", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->AnalogL2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogR2", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->AnalogR2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogLeftJoyX", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->AnalogLeftJoyX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogLeftJoyY", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte(this->AnalogLeftJoyY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogRightJoyX", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->AnalogRightJoyX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogRightJoyY", ::apache::thrift::protocol::T_BYTE, 10);
  xfer += oprot->writeByte(this->AnalogRightJoyY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputStateRuyiController &a, RuyiInputStateRuyiController &b) {
  using ::std::swap;
  swap(a.PacketId, b.PacketId);
  swap(a.ChannelId, b.ChannelId);
  swap(a.DeviceId, b.DeviceId);
  swap(a.KeyPress, b.KeyPress);
  swap(a.AnalogL2, b.AnalogL2);
  swap(a.AnalogR2, b.AnalogR2);
  swap(a.AnalogLeftJoyX, b.AnalogLeftJoyX);
  swap(a.AnalogLeftJoyY, b.AnalogLeftJoyY);
  swap(a.AnalogRightJoyX, b.AnalogRightJoyX);
  swap(a.AnalogRightJoyY, b.AnalogRightJoyY);
  swap(a.__isset, b.__isset);
}

RuyiInputStateRuyiController::RuyiInputStateRuyiController(const RuyiInputStateRuyiController& other16) {
  PacketId = other16.PacketId;
  ChannelId = other16.ChannelId;
  DeviceId = other16.DeviceId;
  KeyPress = other16.KeyPress;
  AnalogL2 = other16.AnalogL2;
  AnalogR2 = other16.AnalogR2;
  AnalogLeftJoyX = other16.AnalogLeftJoyX;
  AnalogLeftJoyY = other16.AnalogLeftJoyY;
  AnalogRightJoyX = other16.AnalogRightJoyX;
  AnalogRightJoyY = other16.AnalogRightJoyY;
  __isset = other16.__isset;
}
RuyiInputStateRuyiController& RuyiInputStateRuyiController::operator=(const RuyiInputStateRuyiController& other17) {
  PacketId = other17.PacketId;
  ChannelId = other17.ChannelId;
  DeviceId = other17.DeviceId;
  KeyPress = other17.KeyPress;
  AnalogL2 = other17.AnalogL2;
  AnalogR2 = other17.AnalogR2;
  AnalogLeftJoyX = other17.AnalogLeftJoyX;
  AnalogLeftJoyY = other17.AnalogLeftJoyY;
  AnalogRightJoyX = other17.AnalogRightJoyX;
  AnalogRightJoyY = other17.AnalogRightJoyY;
  __isset = other17.__isset;
  return *this;
}
void RuyiInputStateRuyiController::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputStateRuyiController(";
  out << "PacketId=" << to_string(PacketId);
  out << ", " << "ChannelId=" << to_string(ChannelId);
  out << ", " << "DeviceId=" << to_string(DeviceId);
  out << ", " << "KeyPress=" << to_string(KeyPress);
  out << ", " << "AnalogL2=" << to_string(AnalogL2);
  out << ", " << "AnalogR2=" << to_string(AnalogR2);
  out << ", " << "AnalogLeftJoyX=" << to_string(AnalogLeftJoyX);
  out << ", " << "AnalogLeftJoyY=" << to_string(AnalogLeftJoyY);
  out << ", " << "AnalogRightJoyX=" << to_string(AnalogRightJoyX);
  out << ", " << "AnalogRightJoyY=" << to_string(AnalogRightJoyY);
  out << ")";
}

}}} // namespace
