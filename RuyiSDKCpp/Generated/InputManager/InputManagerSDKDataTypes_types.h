/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InputManagerSDKDataTypes_TYPES_H
#define InputManagerSDKDataTypes_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Ruyi { namespace SDK { namespace InputManager {

class InputDeviceEventHeader;

class InputDeviceConnectionChanged;

class RuyiInputStateChanged;

class InputDeviceStateChangedX360;

class InputDeviceStateChangedGamepad;

class InputDeviceStateChangedJoystick;

class InputDeviceStateChangedKeyboard;

class InputDeviceStateChangedMouse;

class InputActionTriggered;

class RuyiInputEvent;

class InputDeviceStateChangedRuyiController;

class InputDeviceStateChanged;

typedef struct _InputDeviceEventHeader__isset {
  _InputDeviceEventHeader__isset() : headerType(false), deviceId(false), deviceType(false) {}
  bool headerType :1;
  bool deviceId :1;
  bool deviceType :1;
} _InputDeviceEventHeader__isset;

class InputDeviceEventHeader : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceEventHeader(const InputDeviceEventHeader&);
  InputDeviceEventHeader& operator=(const InputDeviceEventHeader&);
  InputDeviceEventHeader() : headerType(0), deviceId(), deviceType(0) {
  }

  virtual ~InputDeviceEventHeader() throw();
  int32_t headerType;
  std::string deviceId;
  int32_t deviceType;

  _InputDeviceEventHeader__isset __isset;

  void __set_headerType(const int32_t val);

  void __set_deviceId(const std::string& val);

  void __set_deviceType(const int32_t val);

  bool operator == (const InputDeviceEventHeader & rhs) const
  {
    if (!(headerType == rhs.headerType))
      return false;
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(deviceType == rhs.deviceType))
      return false;
    return true;
  }
  bool operator != (const InputDeviceEventHeader &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceEventHeader & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceEventHeader &a, InputDeviceEventHeader &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceEventHeader& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceConnectionChanged__isset {
  _InputDeviceConnectionChanged__isset() : header(false), isConnected(false) {}
  bool header :1;
  bool isConnected :1;
} _InputDeviceConnectionChanged__isset;

class InputDeviceConnectionChanged : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceConnectionChanged(const InputDeviceConnectionChanged&);
  InputDeviceConnectionChanged& operator=(const InputDeviceConnectionChanged&);
  InputDeviceConnectionChanged() : isConnected(0) {
  }

  virtual ~InputDeviceConnectionChanged() throw();
  InputDeviceEventHeader header;
  bool isConnected;

  _InputDeviceConnectionChanged__isset __isset;

  void __set_header(const InputDeviceEventHeader& val);

  void __set_isConnected(const bool val);

  bool operator == (const InputDeviceConnectionChanged & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    if (!(isConnected == rhs.isConnected))
      return false;
    return true;
  }
  bool operator != (const InputDeviceConnectionChanged &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceConnectionChanged & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceConnectionChanged &a, InputDeviceConnectionChanged &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceConnectionChanged& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RuyiInputStateChanged__isset {
  _RuyiInputStateChanged__isset() : keyPressEvent(false), analogEvent(false) {}
  bool keyPressEvent :1;
  bool analogEvent :1;
} _RuyiInputStateChanged__isset;

class RuyiInputStateChanged : public virtual ::apache::thrift::TBase {
 public:

  RuyiInputStateChanged(const RuyiInputStateChanged&);
  RuyiInputStateChanged& operator=(const RuyiInputStateChanged&);
  RuyiInputStateChanged() {
  }

  virtual ~RuyiInputStateChanged() throw();
  std::vector<RuyiInputEvent>  keyPressEvent;
  std::vector<RuyiInputEvent>  analogEvent;

  _RuyiInputStateChanged__isset __isset;

  void __set_keyPressEvent(const std::vector<RuyiInputEvent> & val);

  void __set_analogEvent(const std::vector<RuyiInputEvent> & val);

  bool operator == (const RuyiInputStateChanged & rhs) const
  {
    if (!(keyPressEvent == rhs.keyPressEvent))
      return false;
    if (!(analogEvent == rhs.analogEvent))
      return false;
    return true;
  }
  bool operator != (const RuyiInputStateChanged &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RuyiInputStateChanged & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RuyiInputStateChanged &a, RuyiInputStateChanged &b);

inline std::ostream& operator<<(std::ostream& out, const RuyiInputStateChanged& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceStateChangedX360__isset {
  _InputDeviceStateChangedX360__isset() : PacketNumber(false), DeviceId(false), LeftThumbDeadZone(false), RightThumbDeadZone(false), Buttons(false), LeftTrigger(false), RightTrigger(false), LeftThumbX(false), LeftThumbY(false), RightThumbX(false), RightThumbY(false), Changed(false) {}
  bool PacketNumber :1;
  bool DeviceId :1;
  bool LeftThumbDeadZone :1;
  bool RightThumbDeadZone :1;
  bool Buttons :1;
  bool LeftTrigger :1;
  bool RightTrigger :1;
  bool LeftThumbX :1;
  bool LeftThumbY :1;
  bool RightThumbX :1;
  bool RightThumbY :1;
  bool Changed :1;
} _InputDeviceStateChangedX360__isset;

class InputDeviceStateChangedX360 : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceStateChangedX360(const InputDeviceStateChangedX360&);
  InputDeviceStateChangedX360& operator=(const InputDeviceStateChangedX360&);
  InputDeviceStateChangedX360() : PacketNumber(0), DeviceId(), LeftThumbDeadZone(0), RightThumbDeadZone(0), Buttons(0), LeftTrigger(0), RightTrigger(0), LeftThumbX(0), LeftThumbY(0), RightThumbX(0), RightThumbY(0) {
  }

  virtual ~InputDeviceStateChangedX360() throw();
  int64_t PacketNumber;
  std::string DeviceId;
  int16_t LeftThumbDeadZone;
  int16_t RightThumbDeadZone;
  int32_t Buttons;
  int8_t LeftTrigger;
  int8_t RightTrigger;
  int16_t LeftThumbX;
  int16_t LeftThumbY;
  int16_t RightThumbX;
  int16_t RightThumbY;
  RuyiInputStateChanged Changed;

  _InputDeviceStateChangedX360__isset __isset;

  void __set_PacketNumber(const int64_t val);

  void __set_DeviceId(const std::string& val);

  void __set_LeftThumbDeadZone(const int16_t val);

  void __set_RightThumbDeadZone(const int16_t val);

  void __set_Buttons(const int32_t val);

  void __set_LeftTrigger(const int8_t val);

  void __set_RightTrigger(const int8_t val);

  void __set_LeftThumbX(const int16_t val);

  void __set_LeftThumbY(const int16_t val);

  void __set_RightThumbX(const int16_t val);

  void __set_RightThumbY(const int16_t val);

  void __set_Changed(const RuyiInputStateChanged& val);

  bool operator == (const InputDeviceStateChangedX360 & rhs) const
  {
    if (!(PacketNumber == rhs.PacketNumber))
      return false;
    if (!(DeviceId == rhs.DeviceId))
      return false;
    if (!(LeftThumbDeadZone == rhs.LeftThumbDeadZone))
      return false;
    if (!(RightThumbDeadZone == rhs.RightThumbDeadZone))
      return false;
    if (!(Buttons == rhs.Buttons))
      return false;
    if (!(LeftTrigger == rhs.LeftTrigger))
      return false;
    if (!(RightTrigger == rhs.RightTrigger))
      return false;
    if (!(LeftThumbX == rhs.LeftThumbX))
      return false;
    if (!(LeftThumbY == rhs.LeftThumbY))
      return false;
    if (!(RightThumbX == rhs.RightThumbX))
      return false;
    if (!(RightThumbY == rhs.RightThumbY))
      return false;
    if (!(Changed == rhs.Changed))
      return false;
    return true;
  }
  bool operator != (const InputDeviceStateChangedX360 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceStateChangedX360 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceStateChangedX360 &a, InputDeviceStateChangedX360 &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceStateChangedX360& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceStateChangedGamepad__isset {
  _InputDeviceStateChangedGamepad__isset() : RawOffset(false), Value(false), Timestamp(false), Sequence(false), Offset(false) {}
  bool RawOffset :1;
  bool Value :1;
  bool Timestamp :1;
  bool Sequence :1;
  bool Offset :1;
} _InputDeviceStateChangedGamepad__isset;

class InputDeviceStateChangedGamepad : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceStateChangedGamepad(const InputDeviceStateChangedGamepad&);
  InputDeviceStateChangedGamepad& operator=(const InputDeviceStateChangedGamepad&);
  InputDeviceStateChangedGamepad() : RawOffset(0), Value(0), Timestamp(0), Sequence(0), Offset(0) {
  }

  virtual ~InputDeviceStateChangedGamepad() throw();
  int32_t RawOffset;
  int32_t Value;
  int32_t Timestamp;
  int32_t Sequence;
  int16_t Offset;

  _InputDeviceStateChangedGamepad__isset __isset;

  void __set_RawOffset(const int32_t val);

  void __set_Value(const int32_t val);

  void __set_Timestamp(const int32_t val);

  void __set_Sequence(const int32_t val);

  void __set_Offset(const int16_t val);

  bool operator == (const InputDeviceStateChangedGamepad & rhs) const
  {
    if (!(RawOffset == rhs.RawOffset))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Timestamp == rhs.Timestamp))
      return false;
    if (!(Sequence == rhs.Sequence))
      return false;
    if (!(Offset == rhs.Offset))
      return false;
    return true;
  }
  bool operator != (const InputDeviceStateChangedGamepad &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceStateChangedGamepad & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceStateChangedGamepad &a, InputDeviceStateChangedGamepad &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceStateChangedGamepad& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceStateChangedJoystick__isset {
  _InputDeviceStateChangedJoystick__isset() : RawOffset(false), Value(false), Timestamp(false), Sequence(false), Offset(false) {}
  bool RawOffset :1;
  bool Value :1;
  bool Timestamp :1;
  bool Sequence :1;
  bool Offset :1;
} _InputDeviceStateChangedJoystick__isset;

class InputDeviceStateChangedJoystick : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceStateChangedJoystick(const InputDeviceStateChangedJoystick&);
  InputDeviceStateChangedJoystick& operator=(const InputDeviceStateChangedJoystick&);
  InputDeviceStateChangedJoystick() : RawOffset(0), Value(0), Timestamp(0), Sequence(0), Offset(0) {
  }

  virtual ~InputDeviceStateChangedJoystick() throw();
  int32_t RawOffset;
  int32_t Value;
  int32_t Timestamp;
  int32_t Sequence;
  int16_t Offset;

  _InputDeviceStateChangedJoystick__isset __isset;

  void __set_RawOffset(const int32_t val);

  void __set_Value(const int32_t val);

  void __set_Timestamp(const int32_t val);

  void __set_Sequence(const int32_t val);

  void __set_Offset(const int16_t val);

  bool operator == (const InputDeviceStateChangedJoystick & rhs) const
  {
    if (!(RawOffset == rhs.RawOffset))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Timestamp == rhs.Timestamp))
      return false;
    if (!(Sequence == rhs.Sequence))
      return false;
    if (!(Offset == rhs.Offset))
      return false;
    return true;
  }
  bool operator != (const InputDeviceStateChangedJoystick &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceStateChangedJoystick & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceStateChangedJoystick &a, InputDeviceStateChangedJoystick &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceStateChangedJoystick& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceStateChangedKeyboard__isset {
  _InputDeviceStateChangedKeyboard__isset() : DeviceId(false), RawOffset(false), Value(false), Timestamp(false), Sequence(false), Key(false), IsPressed(false), IsReleased(false) {}
  bool DeviceId :1;
  bool RawOffset :1;
  bool Value :1;
  bool Timestamp :1;
  bool Sequence :1;
  bool Key :1;
  bool IsPressed :1;
  bool IsReleased :1;
} _InputDeviceStateChangedKeyboard__isset;

class InputDeviceStateChangedKeyboard : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceStateChangedKeyboard(const InputDeviceStateChangedKeyboard&);
  InputDeviceStateChangedKeyboard& operator=(const InputDeviceStateChangedKeyboard&);
  InputDeviceStateChangedKeyboard() : DeviceId(), RawOffset(0), Value(0), Timestamp(0), Sequence(0), Key(0), IsPressed(0), IsReleased(0) {
  }

  virtual ~InputDeviceStateChangedKeyboard() throw();
  std::string DeviceId;
  int32_t RawOffset;
  int32_t Value;
  int32_t Timestamp;
  int32_t Sequence;
  int8_t Key;
  bool IsPressed;
  bool IsReleased;

  _InputDeviceStateChangedKeyboard__isset __isset;

  void __set_DeviceId(const std::string& val);

  void __set_RawOffset(const int32_t val);

  void __set_Value(const int32_t val);

  void __set_Timestamp(const int32_t val);

  void __set_Sequence(const int32_t val);

  void __set_Key(const int8_t val);

  void __set_IsPressed(const bool val);

  void __set_IsReleased(const bool val);

  bool operator == (const InputDeviceStateChangedKeyboard & rhs) const
  {
    if (!(DeviceId == rhs.DeviceId))
      return false;
    if (!(RawOffset == rhs.RawOffset))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Timestamp == rhs.Timestamp))
      return false;
    if (!(Sequence == rhs.Sequence))
      return false;
    if (!(Key == rhs.Key))
      return false;
    if (!(IsPressed == rhs.IsPressed))
      return false;
    if (!(IsReleased == rhs.IsReleased))
      return false;
    return true;
  }
  bool operator != (const InputDeviceStateChangedKeyboard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceStateChangedKeyboard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceStateChangedKeyboard &a, InputDeviceStateChangedKeyboard &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceStateChangedKeyboard& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceStateChangedMouse__isset {
  _InputDeviceStateChangedMouse__isset() : RawOffset(false), Value(false), Timestamp(false), Sequence(false), Offset(false), IsButton(false) {}
  bool RawOffset :1;
  bool Value :1;
  bool Timestamp :1;
  bool Sequence :1;
  bool Offset :1;
  bool IsButton :1;
} _InputDeviceStateChangedMouse__isset;

class InputDeviceStateChangedMouse : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceStateChangedMouse(const InputDeviceStateChangedMouse&);
  InputDeviceStateChangedMouse& operator=(const InputDeviceStateChangedMouse&);
  InputDeviceStateChangedMouse() : RawOffset(0), Value(0), Timestamp(0), Sequence(0), Offset(0), IsButton(0) {
  }

  virtual ~InputDeviceStateChangedMouse() throw();
  int32_t RawOffset;
  int32_t Value;
  int32_t Timestamp;
  int32_t Sequence;
  int8_t Offset;
  bool IsButton;

  _InputDeviceStateChangedMouse__isset __isset;

  void __set_RawOffset(const int32_t val);

  void __set_Value(const int32_t val);

  void __set_Timestamp(const int32_t val);

  void __set_Sequence(const int32_t val);

  void __set_Offset(const int8_t val);

  void __set_IsButton(const bool val);

  bool operator == (const InputDeviceStateChangedMouse & rhs) const
  {
    if (!(RawOffset == rhs.RawOffset))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Timestamp == rhs.Timestamp))
      return false;
    if (!(Sequence == rhs.Sequence))
      return false;
    if (!(Offset == rhs.Offset))
      return false;
    if (!(IsButton == rhs.IsButton))
      return false;
    return true;
  }
  bool operator != (const InputDeviceStateChangedMouse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceStateChangedMouse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceStateChangedMouse &a, InputDeviceStateChangedMouse &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceStateChangedMouse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputActionTriggered__isset {
  _InputActionTriggered__isset() : deviceId(false), name(false), timestamp(false), events(false) {}
  bool deviceId :1;
  bool name :1;
  bool timestamp :1;
  bool events :1;
} _InputActionTriggered__isset;

class InputActionTriggered : public virtual ::apache::thrift::TBase {
 public:

  InputActionTriggered(const InputActionTriggered&);
  InputActionTriggered& operator=(const InputActionTriggered&);
  InputActionTriggered() : deviceId(), name(), timestamp(0) {
  }

  virtual ~InputActionTriggered() throw();
  std::string deviceId;
  std::string name;
  int64_t timestamp;
  std::vector<RuyiInputEvent>  events;

  _InputActionTriggered__isset __isset;

  void __set_deviceId(const std::string& val);

  void __set_name(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_events(const std::vector<RuyiInputEvent> & val);

  bool operator == (const InputActionTriggered & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const InputActionTriggered &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputActionTriggered & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputActionTriggered &a, InputActionTriggered &b);

inline std::ostream& operator<<(std::ostream& out, const InputActionTriggered& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RuyiInputEvent__isset {
  _RuyiInputEvent__isset() : EventId(false), DeviceType(false), Key(false), NewValue(false), LastValue(false) {}
  bool EventId :1;
  bool DeviceType :1;
  bool Key :1;
  bool NewValue :1;
  bool LastValue :1;
} _RuyiInputEvent__isset;

class RuyiInputEvent : public virtual ::apache::thrift::TBase {
 public:

  RuyiInputEvent(const RuyiInputEvent&);
  RuyiInputEvent& operator=(const RuyiInputEvent&);
  RuyiInputEvent() : EventId(0), DeviceType(0), Key(0), NewValue(0), LastValue(0) {
  }

  virtual ~RuyiInputEvent() throw();
  int64_t EventId;
  int8_t DeviceType;
  int32_t Key;
  int8_t NewValue;
  int8_t LastValue;

  _RuyiInputEvent__isset __isset;

  void __set_EventId(const int64_t val);

  void __set_DeviceType(const int8_t val);

  void __set_Key(const int32_t val);

  void __set_NewValue(const int8_t val);

  void __set_LastValue(const int8_t val);

  bool operator == (const RuyiInputEvent & rhs) const
  {
    if (!(EventId == rhs.EventId))
      return false;
    if (!(DeviceType == rhs.DeviceType))
      return false;
    if (!(Key == rhs.Key))
      return false;
    if (!(NewValue == rhs.NewValue))
      return false;
    if (!(LastValue == rhs.LastValue))
      return false;
    return true;
  }
  bool operator != (const RuyiInputEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RuyiInputEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RuyiInputEvent &a, RuyiInputEvent &b);

inline std::ostream& operator<<(std::ostream& out, const RuyiInputEvent& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceStateChangedRuyiController__isset {
  _InputDeviceStateChangedRuyiController__isset() : PacketId(false), ChannelId(false), DeviceId(false), KeyPress(false), AnalogL2(false), AnalogR2(false), AnalogLeftJoyX(false), AnalogLeftJoyY(false), AnalogRightJoyX(false), AnalogRightJoyY(false), Changed(false) {}
  bool PacketId :1;
  bool ChannelId :1;
  bool DeviceId :1;
  bool KeyPress :1;
  bool AnalogL2 :1;
  bool AnalogR2 :1;
  bool AnalogLeftJoyX :1;
  bool AnalogLeftJoyY :1;
  bool AnalogRightJoyX :1;
  bool AnalogRightJoyY :1;
  bool Changed :1;
} _InputDeviceStateChangedRuyiController__isset;

class InputDeviceStateChangedRuyiController : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceStateChangedRuyiController(const InputDeviceStateChangedRuyiController&);
  InputDeviceStateChangedRuyiController& operator=(const InputDeviceStateChangedRuyiController&);
  InputDeviceStateChangedRuyiController() : PacketId(0), ChannelId(0), DeviceId(), KeyPress(0), AnalogL2(0), AnalogR2(0), AnalogLeftJoyX(0), AnalogLeftJoyY(0), AnalogRightJoyX(0), AnalogRightJoyY(0) {
  }

  virtual ~InputDeviceStateChangedRuyiController() throw();
  int64_t PacketId;
  int32_t ChannelId;
  std::string DeviceId;
  int32_t KeyPress;
  int8_t AnalogL2;
  int8_t AnalogR2;
  int8_t AnalogLeftJoyX;
  int8_t AnalogLeftJoyY;
  int8_t AnalogRightJoyX;
  int8_t AnalogRightJoyY;
  RuyiInputStateChanged Changed;

  _InputDeviceStateChangedRuyiController__isset __isset;

  void __set_PacketId(const int64_t val);

  void __set_ChannelId(const int32_t val);

  void __set_DeviceId(const std::string& val);

  void __set_KeyPress(const int32_t val);

  void __set_AnalogL2(const int8_t val);

  void __set_AnalogR2(const int8_t val);

  void __set_AnalogLeftJoyX(const int8_t val);

  void __set_AnalogLeftJoyY(const int8_t val);

  void __set_AnalogRightJoyX(const int8_t val);

  void __set_AnalogRightJoyY(const int8_t val);

  void __set_Changed(const RuyiInputStateChanged& val);

  bool operator == (const InputDeviceStateChangedRuyiController & rhs) const
  {
    if (!(PacketId == rhs.PacketId))
      return false;
    if (!(ChannelId == rhs.ChannelId))
      return false;
    if (!(DeviceId == rhs.DeviceId))
      return false;
    if (!(KeyPress == rhs.KeyPress))
      return false;
    if (!(AnalogL2 == rhs.AnalogL2))
      return false;
    if (!(AnalogR2 == rhs.AnalogR2))
      return false;
    if (!(AnalogLeftJoyX == rhs.AnalogLeftJoyX))
      return false;
    if (!(AnalogLeftJoyY == rhs.AnalogLeftJoyY))
      return false;
    if (!(AnalogRightJoyX == rhs.AnalogRightJoyX))
      return false;
    if (!(AnalogRightJoyY == rhs.AnalogRightJoyY))
      return false;
    if (!(Changed == rhs.Changed))
      return false;
    return true;
  }
  bool operator != (const InputDeviceStateChangedRuyiController &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceStateChangedRuyiController & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceStateChangedRuyiController &a, InputDeviceStateChangedRuyiController &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceStateChangedRuyiController& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InputDeviceStateChanged__isset {
  _InputDeviceStateChanged__isset() : header(false), x360(false), dgamepad(false), djoystick(false), dkeyboard(false), dmouse(false), ruyicontroller(false) {}
  bool header :1;
  bool x360 :1;
  bool dgamepad :1;
  bool djoystick :1;
  bool dkeyboard :1;
  bool dmouse :1;
  bool ruyicontroller :1;
} _InputDeviceStateChanged__isset;

class InputDeviceStateChanged : public virtual ::apache::thrift::TBase {
 public:

  InputDeviceStateChanged(const InputDeviceStateChanged&);
  InputDeviceStateChanged& operator=(const InputDeviceStateChanged&);
  InputDeviceStateChanged() {
  }

  virtual ~InputDeviceStateChanged() throw();
  InputDeviceEventHeader header;
  InputDeviceStateChangedX360 x360;
  InputDeviceStateChangedGamepad dgamepad;
  InputDeviceStateChangedJoystick djoystick;
  InputDeviceStateChangedKeyboard dkeyboard;
  InputDeviceStateChangedMouse dmouse;
  InputDeviceStateChangedRuyiController ruyicontroller;

  _InputDeviceStateChanged__isset __isset;

  void __set_header(const InputDeviceEventHeader& val);

  void __set_x360(const InputDeviceStateChangedX360& val);

  void __set_dgamepad(const InputDeviceStateChangedGamepad& val);

  void __set_djoystick(const InputDeviceStateChangedJoystick& val);

  void __set_dkeyboard(const InputDeviceStateChangedKeyboard& val);

  void __set_dmouse(const InputDeviceStateChangedMouse& val);

  void __set_ruyicontroller(const InputDeviceStateChangedRuyiController& val);

  bool operator == (const InputDeviceStateChanged & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    if (!(x360 == rhs.x360))
      return false;
    if (!(dgamepad == rhs.dgamepad))
      return false;
    if (!(djoystick == rhs.djoystick))
      return false;
    if (!(dkeyboard == rhs.dkeyboard))
      return false;
    if (!(dmouse == rhs.dmouse))
      return false;
    if (!(ruyicontroller == rhs.ruyicontroller))
      return false;
    return true;
  }
  bool operator != (const InputDeviceStateChanged &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputDeviceStateChanged & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputDeviceStateChanged &a, InputDeviceStateChanged &b);

inline std::ostream& operator<<(std::ostream& out, const InputDeviceStateChanged& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
