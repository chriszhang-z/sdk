/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InputManagerService_H
#define InputManagerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "InputManagerSDKServices_types.h"

namespace Ruyi { namespace SDK { namespace InputManager {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class InputManagerServiceIf {
 public:
  virtual ~InputManagerServiceIf() {}
  virtual bool SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time) = 0;
};

class InputManagerServiceIfFactory {
 public:
  typedef InputManagerServiceIf Handler;

  virtual ~InputManagerServiceIfFactory() {}

  virtual InputManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InputManagerServiceIf* /* handler */) = 0;
};

class InputManagerServiceIfSingletonFactory : virtual public InputManagerServiceIfFactory {
 public:
  InputManagerServiceIfSingletonFactory(const boost::shared_ptr<InputManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~InputManagerServiceIfSingletonFactory() {}

  virtual InputManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(InputManagerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<InputManagerServiceIf> iface_;
};

class InputManagerServiceNull : virtual public InputManagerServiceIf {
 public:
  virtual ~InputManagerServiceNull() {}
  bool SetRuyiControllerStatus(const int8_t /* channel */, const bool /* enableR */, const bool /* enableG */, const bool /* enableB */, const bool /* enableMotor1 */, const bool /* enableMotor2 */, const bool /* shutdown */, const int8_t /* RValue */, const int8_t /* GValue */, const int8_t /* BValue */, const int8_t /* motor1Value */, const int8_t /* motor1Time */, const int8_t /* motor2Value */, const int8_t /* motor2Time */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _InputManagerService_SetRuyiControllerStatus_args__isset {
  _InputManagerService_SetRuyiControllerStatus_args__isset() : channel(false), enableR(false), enableG(false), enableB(false), enableMotor1(false), enableMotor2(false), shutdown(false), RValue(false), GValue(false), BValue(false), motor1Value(false), motor1Time(false), motor2Value(false), motor2Time(false) {}
  bool channel :1;
  bool enableR :1;
  bool enableG :1;
  bool enableB :1;
  bool enableMotor1 :1;
  bool enableMotor2 :1;
  bool shutdown :1;
  bool RValue :1;
  bool GValue :1;
  bool BValue :1;
  bool motor1Value :1;
  bool motor1Time :1;
  bool motor2Value :1;
  bool motor2Time :1;
} _InputManagerService_SetRuyiControllerStatus_args__isset;

class InputManagerService_SetRuyiControllerStatus_args {
 public:

  InputManagerService_SetRuyiControllerStatus_args(const InputManagerService_SetRuyiControllerStatus_args&);
  InputManagerService_SetRuyiControllerStatus_args& operator=(const InputManagerService_SetRuyiControllerStatus_args&);
  InputManagerService_SetRuyiControllerStatus_args() : channel(0), enableR(0), enableG(0), enableB(0), enableMotor1(0), enableMotor2(0), shutdown(0), RValue(0), GValue(0), BValue(0), motor1Value(0), motor1Time(0), motor2Value(0), motor2Time(0) {
  }

  virtual ~InputManagerService_SetRuyiControllerStatus_args() throw();
  int8_t channel;
  bool enableR;
  bool enableG;
  bool enableB;
  bool enableMotor1;
  bool enableMotor2;
  bool shutdown;
  int8_t RValue;
  int8_t GValue;
  int8_t BValue;
  int8_t motor1Value;
  int8_t motor1Time;
  int8_t motor2Value;
  int8_t motor2Time;

  _InputManagerService_SetRuyiControllerStatus_args__isset __isset;

  void __set_channel(const int8_t val);

  void __set_enableR(const bool val);

  void __set_enableG(const bool val);

  void __set_enableB(const bool val);

  void __set_enableMotor1(const bool val);

  void __set_enableMotor2(const bool val);

  void __set_shutdown(const bool val);

  void __set_RValue(const int8_t val);

  void __set_GValue(const int8_t val);

  void __set_BValue(const int8_t val);

  void __set_motor1Value(const int8_t val);

  void __set_motor1Time(const int8_t val);

  void __set_motor2Value(const int8_t val);

  void __set_motor2Time(const int8_t val);

  bool operator == (const InputManagerService_SetRuyiControllerStatus_args & rhs) const
  {
    if (!(channel == rhs.channel))
      return false;
    if (!(enableR == rhs.enableR))
      return false;
    if (!(enableG == rhs.enableG))
      return false;
    if (!(enableB == rhs.enableB))
      return false;
    if (!(enableMotor1 == rhs.enableMotor1))
      return false;
    if (!(enableMotor2 == rhs.enableMotor2))
      return false;
    if (!(shutdown == rhs.shutdown))
      return false;
    if (!(RValue == rhs.RValue))
      return false;
    if (!(GValue == rhs.GValue))
      return false;
    if (!(BValue == rhs.BValue))
      return false;
    if (!(motor1Value == rhs.motor1Value))
      return false;
    if (!(motor1Time == rhs.motor1Time))
      return false;
    if (!(motor2Value == rhs.motor2Value))
      return false;
    if (!(motor2Time == rhs.motor2Time))
      return false;
    return true;
  }
  bool operator != (const InputManagerService_SetRuyiControllerStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputManagerService_SetRuyiControllerStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InputManagerService_SetRuyiControllerStatus_pargs {
 public:


  virtual ~InputManagerService_SetRuyiControllerStatus_pargs() throw();
  const int8_t* channel;
  const bool* enableR;
  const bool* enableG;
  const bool* enableB;
  const bool* enableMotor1;
  const bool* enableMotor2;
  const bool* shutdown;
  const int8_t* RValue;
  const int8_t* GValue;
  const int8_t* BValue;
  const int8_t* motor1Value;
  const int8_t* motor1Time;
  const int8_t* motor2Value;
  const int8_t* motor2Time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InputManagerService_SetRuyiControllerStatus_result__isset {
  _InputManagerService_SetRuyiControllerStatus_result__isset() : success(false) {}
  bool success :1;
} _InputManagerService_SetRuyiControllerStatus_result__isset;

class InputManagerService_SetRuyiControllerStatus_result {
 public:

  InputManagerService_SetRuyiControllerStatus_result(const InputManagerService_SetRuyiControllerStatus_result&);
  InputManagerService_SetRuyiControllerStatus_result& operator=(const InputManagerService_SetRuyiControllerStatus_result&);
  InputManagerService_SetRuyiControllerStatus_result() : success(0) {
  }

  virtual ~InputManagerService_SetRuyiControllerStatus_result() throw();
  bool success;

  _InputManagerService_SetRuyiControllerStatus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InputManagerService_SetRuyiControllerStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InputManagerService_SetRuyiControllerStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputManagerService_SetRuyiControllerStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InputManagerService_SetRuyiControllerStatus_presult__isset {
  _InputManagerService_SetRuyiControllerStatus_presult__isset() : success(false) {}
  bool success :1;
} _InputManagerService_SetRuyiControllerStatus_presult__isset;

class InputManagerService_SetRuyiControllerStatus_presult {
 public:


  virtual ~InputManagerService_SetRuyiControllerStatus_presult() throw();
  bool* success;

  _InputManagerService_SetRuyiControllerStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InputManagerServiceClient : virtual public InputManagerServiceIf {
 public:
  InputManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InputManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time);
  void send_SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time);
  bool recv_SetRuyiControllerStatus();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InputManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<InputManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (InputManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SetRuyiControllerStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InputManagerServiceProcessor(boost::shared_ptr<InputManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["SetRuyiControllerStatus"] = &InputManagerServiceProcessor::process_SetRuyiControllerStatus;
  }

  virtual ~InputManagerServiceProcessor() {}
};

class InputManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InputManagerServiceProcessorFactory(const ::boost::shared_ptr< InputManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InputManagerServiceIfFactory > handlerFactory_;
};

class InputManagerServiceMultiface : virtual public InputManagerServiceIf {
 public:
  InputManagerServiceMultiface(std::vector<boost::shared_ptr<InputManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InputManagerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InputManagerServiceIf> > ifaces_;
  InputManagerServiceMultiface() {}
  void add(boost::shared_ptr<InputManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetRuyiControllerStatus(channel, enableR, enableG, enableB, enableMotor1, enableMotor2, shutdown, RValue, GValue, BValue, motor1Value, motor1Time, motor2Value, motor2Time);
    }
    return ifaces_[i]->SetRuyiControllerStatus(channel, enableR, enableG, enableB, enableMotor1, enableMotor2, shutdown, RValue, GValue, BValue, motor1Value, motor1Time, motor2Value, motor2Time);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class InputManagerServiceConcurrentClient : virtual public InputManagerServiceIf {
 public:
  InputManagerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InputManagerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time);
  int32_t send_SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time);
  bool recv_SetRuyiControllerStatus(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}} // namespace

#endif
