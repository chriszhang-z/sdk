/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "InputManagerSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace InputManager {


InputDeviceEventHeader::~InputDeviceEventHeader() throw() {
}


void InputDeviceEventHeader::__set_headerType(const int32_t val) {
  this->headerType = val;
}

void InputDeviceEventHeader::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void InputDeviceEventHeader::__set_deviceType(const int32_t val) {
  this->deviceType = val;
}

uint32_t InputDeviceEventHeader::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->headerType);
          this->__isset.headerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceType);
          this->__isset.deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceEventHeader::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceEventHeader");

  xfer += oprot->writeFieldBegin("headerType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->headerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->deviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceEventHeader &a, InputDeviceEventHeader &b) {
  using ::std::swap;
  swap(a.headerType, b.headerType);
  swap(a.deviceId, b.deviceId);
  swap(a.deviceType, b.deviceType);
  swap(a.__isset, b.__isset);
}

InputDeviceEventHeader::InputDeviceEventHeader(const InputDeviceEventHeader& other0) {
  headerType = other0.headerType;
  deviceId = other0.deviceId;
  deviceType = other0.deviceType;
  __isset = other0.__isset;
}
InputDeviceEventHeader& InputDeviceEventHeader::operator=(const InputDeviceEventHeader& other1) {
  headerType = other1.headerType;
  deviceId = other1.deviceId;
  deviceType = other1.deviceType;
  __isset = other1.__isset;
  return *this;
}
void InputDeviceEventHeader::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceEventHeader(";
  out << "headerType=" << to_string(headerType);
  out << ", " << "deviceId=" << to_string(deviceId);
  out << ", " << "deviceType=" << to_string(deviceType);
  out << ")";
}


InputDeviceConnectionChanged::~InputDeviceConnectionChanged() throw() {
}


void InputDeviceConnectionChanged::__set_header(const InputDeviceEventHeader& val) {
  this->header = val;
}

void InputDeviceConnectionChanged::__set_isConnected(const bool val) {
  this->isConnected = val;
}

uint32_t InputDeviceConnectionChanged::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isConnected);
          this->__isset.isConnected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceConnectionChanged::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceConnectionChanged");

  xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->header.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isConnected", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isConnected);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceConnectionChanged &a, InputDeviceConnectionChanged &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.isConnected, b.isConnected);
  swap(a.__isset, b.__isset);
}

InputDeviceConnectionChanged::InputDeviceConnectionChanged(const InputDeviceConnectionChanged& other2) {
  header = other2.header;
  isConnected = other2.isConnected;
  __isset = other2.__isset;
}
InputDeviceConnectionChanged& InputDeviceConnectionChanged::operator=(const InputDeviceConnectionChanged& other3) {
  header = other3.header;
  isConnected = other3.isConnected;
  __isset = other3.__isset;
  return *this;
}
void InputDeviceConnectionChanged::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceConnectionChanged(";
  out << "header=" << to_string(header);
  out << ", " << "isConnected=" << to_string(isConnected);
  out << ")";
}


RuyiInputStateChanged::~RuyiInputStateChanged() throw() {
}


void RuyiInputStateChanged::__set_keyPressEvent(const std::vector<RuyiInputEvent> & val) {
  this->keyPressEvent = val;
}

void RuyiInputStateChanged::__set_analogEvent(const std::vector<RuyiInputEvent> & val) {
  this->analogEvent = val;
}

uint32_t RuyiInputStateChanged::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keyPressEvent.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->keyPressEvent.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->keyPressEvent[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.keyPressEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->analogEvent.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->analogEvent.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += this->analogEvent[_i13].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.analogEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputStateChanged::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputStateChanged");

  xfer += oprot->writeFieldBegin("keyPressEvent", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->keyPressEvent.size()));
    std::vector<RuyiInputEvent> ::const_iterator _iter14;
    for (_iter14 = this->keyPressEvent.begin(); _iter14 != this->keyPressEvent.end(); ++_iter14)
    {
      xfer += (*_iter14).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analogEvent", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->analogEvent.size()));
    std::vector<RuyiInputEvent> ::const_iterator _iter15;
    for (_iter15 = this->analogEvent.begin(); _iter15 != this->analogEvent.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputStateChanged &a, RuyiInputStateChanged &b) {
  using ::std::swap;
  swap(a.keyPressEvent, b.keyPressEvent);
  swap(a.analogEvent, b.analogEvent);
  swap(a.__isset, b.__isset);
}

RuyiInputStateChanged::RuyiInputStateChanged(const RuyiInputStateChanged& other16) {
  keyPressEvent = other16.keyPressEvent;
  analogEvent = other16.analogEvent;
  __isset = other16.__isset;
}
RuyiInputStateChanged& RuyiInputStateChanged::operator=(const RuyiInputStateChanged& other17) {
  keyPressEvent = other17.keyPressEvent;
  analogEvent = other17.analogEvent;
  __isset = other17.__isset;
  return *this;
}
void RuyiInputStateChanged::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputStateChanged(";
  out << "keyPressEvent=" << to_string(keyPressEvent);
  out << ", " << "analogEvent=" << to_string(analogEvent);
  out << ")";
}


InputDeviceStateChangedX360::~InputDeviceStateChangedX360() throw() {
}


void InputDeviceStateChangedX360::__set_PacketNumber(const int64_t val) {
  this->PacketNumber = val;
}

void InputDeviceStateChangedX360::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void InputDeviceStateChangedX360::__set_LeftThumbDeadZone(const int16_t val) {
  this->LeftThumbDeadZone = val;
}

void InputDeviceStateChangedX360::__set_RightThumbDeadZone(const int16_t val) {
  this->RightThumbDeadZone = val;
}

void InputDeviceStateChangedX360::__set_Buttons(const int32_t val) {
  this->Buttons = val;
}

void InputDeviceStateChangedX360::__set_LeftTrigger(const int8_t val) {
  this->LeftTrigger = val;
}

void InputDeviceStateChangedX360::__set_RightTrigger(const int8_t val) {
  this->RightTrigger = val;
}

void InputDeviceStateChangedX360::__set_LeftThumbX(const int16_t val) {
  this->LeftThumbX = val;
}

void InputDeviceStateChangedX360::__set_LeftThumbY(const int16_t val) {
  this->LeftThumbY = val;
}

void InputDeviceStateChangedX360::__set_RightThumbX(const int16_t val) {
  this->RightThumbX = val;
}

void InputDeviceStateChangedX360::__set_RightThumbY(const int16_t val) {
  this->RightThumbY = val;
}

void InputDeviceStateChangedX360::__set_Changed(const RuyiInputStateChanged& val) {
  this->Changed = val;
}

uint32_t InputDeviceStateChangedX360::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->PacketNumber);
          this->__isset.PacketNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->LeftThumbDeadZone);
          this->__isset.LeftThumbDeadZone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->RightThumbDeadZone);
          this->__isset.RightThumbDeadZone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Buttons);
          this->__isset.Buttons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->LeftTrigger);
          this->__isset.LeftTrigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->RightTrigger);
          this->__isset.RightTrigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->LeftThumbX);
          this->__isset.LeftThumbX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->LeftThumbY);
          this->__isset.LeftThumbY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->RightThumbX);
          this->__isset.RightThumbX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->RightThumbY);
          this->__isset.RightThumbY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Changed.read(iprot);
          this->__isset.Changed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceStateChangedX360::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceStateChangedX360");

  xfer += oprot->writeFieldBegin("PacketNumber", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->PacketNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftThumbDeadZone", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->LeftThumbDeadZone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightThumbDeadZone", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->RightThumbDeadZone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Buttons", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Buttons);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftTrigger", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->LeftTrigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightTrigger", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->RightTrigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftThumbX", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->LeftThumbX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftThumbY", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->LeftThumbY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightThumbX", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->RightThumbX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightThumbY", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->RightThumbY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Changed", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Changed.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceStateChangedX360 &a, InputDeviceStateChangedX360 &b) {
  using ::std::swap;
  swap(a.PacketNumber, b.PacketNumber);
  swap(a.DeviceId, b.DeviceId);
  swap(a.LeftThumbDeadZone, b.LeftThumbDeadZone);
  swap(a.RightThumbDeadZone, b.RightThumbDeadZone);
  swap(a.Buttons, b.Buttons);
  swap(a.LeftTrigger, b.LeftTrigger);
  swap(a.RightTrigger, b.RightTrigger);
  swap(a.LeftThumbX, b.LeftThumbX);
  swap(a.LeftThumbY, b.LeftThumbY);
  swap(a.RightThumbX, b.RightThumbX);
  swap(a.RightThumbY, b.RightThumbY);
  swap(a.Changed, b.Changed);
  swap(a.__isset, b.__isset);
}

InputDeviceStateChangedX360::InputDeviceStateChangedX360(const InputDeviceStateChangedX360& other18) {
  PacketNumber = other18.PacketNumber;
  DeviceId = other18.DeviceId;
  LeftThumbDeadZone = other18.LeftThumbDeadZone;
  RightThumbDeadZone = other18.RightThumbDeadZone;
  Buttons = other18.Buttons;
  LeftTrigger = other18.LeftTrigger;
  RightTrigger = other18.RightTrigger;
  LeftThumbX = other18.LeftThumbX;
  LeftThumbY = other18.LeftThumbY;
  RightThumbX = other18.RightThumbX;
  RightThumbY = other18.RightThumbY;
  Changed = other18.Changed;
  __isset = other18.__isset;
}
InputDeviceStateChangedX360& InputDeviceStateChangedX360::operator=(const InputDeviceStateChangedX360& other19) {
  PacketNumber = other19.PacketNumber;
  DeviceId = other19.DeviceId;
  LeftThumbDeadZone = other19.LeftThumbDeadZone;
  RightThumbDeadZone = other19.RightThumbDeadZone;
  Buttons = other19.Buttons;
  LeftTrigger = other19.LeftTrigger;
  RightTrigger = other19.RightTrigger;
  LeftThumbX = other19.LeftThumbX;
  LeftThumbY = other19.LeftThumbY;
  RightThumbX = other19.RightThumbX;
  RightThumbY = other19.RightThumbY;
  Changed = other19.Changed;
  __isset = other19.__isset;
  return *this;
}
void InputDeviceStateChangedX360::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceStateChangedX360(";
  out << "PacketNumber=" << to_string(PacketNumber);
  out << ", " << "DeviceId=" << to_string(DeviceId);
  out << ", " << "LeftThumbDeadZone=" << to_string(LeftThumbDeadZone);
  out << ", " << "RightThumbDeadZone=" << to_string(RightThumbDeadZone);
  out << ", " << "Buttons=" << to_string(Buttons);
  out << ", " << "LeftTrigger=" << to_string(LeftTrigger);
  out << ", " << "RightTrigger=" << to_string(RightTrigger);
  out << ", " << "LeftThumbX=" << to_string(LeftThumbX);
  out << ", " << "LeftThumbY=" << to_string(LeftThumbY);
  out << ", " << "RightThumbX=" << to_string(RightThumbX);
  out << ", " << "RightThumbY=" << to_string(RightThumbY);
  out << ", " << "Changed=" << to_string(Changed);
  out << ")";
}


InputDeviceStateChangedGamepad::~InputDeviceStateChangedGamepad() throw() {
}


void InputDeviceStateChangedGamepad::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void InputDeviceStateChangedGamepad::__set_Value(const int32_t val) {
  this->Value = val;
}

void InputDeviceStateChangedGamepad::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void InputDeviceStateChangedGamepad::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void InputDeviceStateChangedGamepad::__set_Offset(const int16_t val) {
  this->Offset = val;
}

uint32_t InputDeviceStateChangedGamepad::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Offset);
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceStateChangedGamepad::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceStateChangedGamepad");

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceStateChangedGamepad &a, InputDeviceStateChangedGamepad &b) {
  using ::std::swap;
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.__isset, b.__isset);
}

InputDeviceStateChangedGamepad::InputDeviceStateChangedGamepad(const InputDeviceStateChangedGamepad& other20) {
  RawOffset = other20.RawOffset;
  Value = other20.Value;
  Timestamp = other20.Timestamp;
  Sequence = other20.Sequence;
  Offset = other20.Offset;
  __isset = other20.__isset;
}
InputDeviceStateChangedGamepad& InputDeviceStateChangedGamepad::operator=(const InputDeviceStateChangedGamepad& other21) {
  RawOffset = other21.RawOffset;
  Value = other21.Value;
  Timestamp = other21.Timestamp;
  Sequence = other21.Sequence;
  Offset = other21.Offset;
  __isset = other21.__isset;
  return *this;
}
void InputDeviceStateChangedGamepad::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceStateChangedGamepad(";
  out << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ")";
}


InputDeviceStateChangedJoystick::~InputDeviceStateChangedJoystick() throw() {
}


void InputDeviceStateChangedJoystick::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void InputDeviceStateChangedJoystick::__set_Value(const int32_t val) {
  this->Value = val;
}

void InputDeviceStateChangedJoystick::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void InputDeviceStateChangedJoystick::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void InputDeviceStateChangedJoystick::__set_Offset(const int16_t val) {
  this->Offset = val;
}

uint32_t InputDeviceStateChangedJoystick::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Offset);
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceStateChangedJoystick::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceStateChangedJoystick");

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceStateChangedJoystick &a, InputDeviceStateChangedJoystick &b) {
  using ::std::swap;
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.__isset, b.__isset);
}

InputDeviceStateChangedJoystick::InputDeviceStateChangedJoystick(const InputDeviceStateChangedJoystick& other22) {
  RawOffset = other22.RawOffset;
  Value = other22.Value;
  Timestamp = other22.Timestamp;
  Sequence = other22.Sequence;
  Offset = other22.Offset;
  __isset = other22.__isset;
}
InputDeviceStateChangedJoystick& InputDeviceStateChangedJoystick::operator=(const InputDeviceStateChangedJoystick& other23) {
  RawOffset = other23.RawOffset;
  Value = other23.Value;
  Timestamp = other23.Timestamp;
  Sequence = other23.Sequence;
  Offset = other23.Offset;
  __isset = other23.__isset;
  return *this;
}
void InputDeviceStateChangedJoystick::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceStateChangedJoystick(";
  out << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ")";
}


InputDeviceStateChangedKeyboard::~InputDeviceStateChangedKeyboard() throw() {
}


void InputDeviceStateChangedKeyboard::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void InputDeviceStateChangedKeyboard::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void InputDeviceStateChangedKeyboard::__set_Value(const int32_t val) {
  this->Value = val;
}

void InputDeviceStateChangedKeyboard::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void InputDeviceStateChangedKeyboard::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void InputDeviceStateChangedKeyboard::__set_Key(const int8_t val) {
  this->Key = val;
}

void InputDeviceStateChangedKeyboard::__set_IsPressed(const bool val) {
  this->IsPressed = val;
}

void InputDeviceStateChangedKeyboard::__set_IsReleased(const bool val) {
  this->IsReleased = val;
}

uint32_t InputDeviceStateChangedKeyboard::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Key);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsPressed);
          this->__isset.IsPressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsReleased);
          this->__isset.IsReleased = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceStateChangedKeyboard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceStateChangedKeyboard");

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsPressed", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->IsPressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsReleased", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->IsReleased);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceStateChangedKeyboard &a, InputDeviceStateChangedKeyboard &b) {
  using ::std::swap;
  swap(a.DeviceId, b.DeviceId);
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Key, b.Key);
  swap(a.IsPressed, b.IsPressed);
  swap(a.IsReleased, b.IsReleased);
  swap(a.__isset, b.__isset);
}

InputDeviceStateChangedKeyboard::InputDeviceStateChangedKeyboard(const InputDeviceStateChangedKeyboard& other24) {
  DeviceId = other24.DeviceId;
  RawOffset = other24.RawOffset;
  Value = other24.Value;
  Timestamp = other24.Timestamp;
  Sequence = other24.Sequence;
  Key = other24.Key;
  IsPressed = other24.IsPressed;
  IsReleased = other24.IsReleased;
  __isset = other24.__isset;
}
InputDeviceStateChangedKeyboard& InputDeviceStateChangedKeyboard::operator=(const InputDeviceStateChangedKeyboard& other25) {
  DeviceId = other25.DeviceId;
  RawOffset = other25.RawOffset;
  Value = other25.Value;
  Timestamp = other25.Timestamp;
  Sequence = other25.Sequence;
  Key = other25.Key;
  IsPressed = other25.IsPressed;
  IsReleased = other25.IsReleased;
  __isset = other25.__isset;
  return *this;
}
void InputDeviceStateChangedKeyboard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceStateChangedKeyboard(";
  out << "DeviceId=" << to_string(DeviceId);
  out << ", " << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Key=" << to_string(Key);
  out << ", " << "IsPressed=" << to_string(IsPressed);
  out << ", " << "IsReleased=" << to_string(IsReleased);
  out << ")";
}


InputDeviceStateChangedMouse::~InputDeviceStateChangedMouse() throw() {
}


void InputDeviceStateChangedMouse::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void InputDeviceStateChangedMouse::__set_Value(const int32_t val) {
  this->Value = val;
}

void InputDeviceStateChangedMouse::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void InputDeviceStateChangedMouse::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void InputDeviceStateChangedMouse::__set_Offset(const int8_t val) {
  this->Offset = val;
}

void InputDeviceStateChangedMouse::__set_IsButton(const bool val) {
  this->IsButton = val;
}

uint32_t InputDeviceStateChangedMouse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Offset);
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsButton);
          this->__isset.IsButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceStateChangedMouse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceStateChangedMouse");

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsButton", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->IsButton);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceStateChangedMouse &a, InputDeviceStateChangedMouse &b) {
  using ::std::swap;
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.IsButton, b.IsButton);
  swap(a.__isset, b.__isset);
}

InputDeviceStateChangedMouse::InputDeviceStateChangedMouse(const InputDeviceStateChangedMouse& other26) {
  RawOffset = other26.RawOffset;
  Value = other26.Value;
  Timestamp = other26.Timestamp;
  Sequence = other26.Sequence;
  Offset = other26.Offset;
  IsButton = other26.IsButton;
  __isset = other26.__isset;
}
InputDeviceStateChangedMouse& InputDeviceStateChangedMouse::operator=(const InputDeviceStateChangedMouse& other27) {
  RawOffset = other27.RawOffset;
  Value = other27.Value;
  Timestamp = other27.Timestamp;
  Sequence = other27.Sequence;
  Offset = other27.Offset;
  IsButton = other27.IsButton;
  __isset = other27.__isset;
  return *this;
}
void InputDeviceStateChangedMouse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceStateChangedMouse(";
  out << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ", " << "IsButton=" << to_string(IsButton);
  out << ")";
}


InputActionTriggered::~InputActionTriggered() throw() {
}


void InputActionTriggered::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void InputActionTriggered::__set_name(const std::string& val) {
  this->name = val;
}

void InputActionTriggered::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void InputActionTriggered::__set_events(const std::vector<RuyiInputEvent> & val) {
  this->events = val;
}

uint32_t InputActionTriggered::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->events.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->events[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputActionTriggered::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputActionTriggered");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector<RuyiInputEvent> ::const_iterator _iter33;
    for (_iter33 = this->events.begin(); _iter33 != this->events.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputActionTriggered &a, InputActionTriggered &b) {
  using ::std::swap;
  swap(a.deviceId, b.deviceId);
  swap(a.name, b.name);
  swap(a.timestamp, b.timestamp);
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

InputActionTriggered::InputActionTriggered(const InputActionTriggered& other34) {
  deviceId = other34.deviceId;
  name = other34.name;
  timestamp = other34.timestamp;
  events = other34.events;
  __isset = other34.__isset;
}
InputActionTriggered& InputActionTriggered::operator=(const InputActionTriggered& other35) {
  deviceId = other35.deviceId;
  name = other35.name;
  timestamp = other35.timestamp;
  events = other35.events;
  __isset = other35.__isset;
  return *this;
}
void InputActionTriggered::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputActionTriggered(";
  out << "deviceId=" << to_string(deviceId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "events=" << to_string(events);
  out << ")";
}


RuyiInputEvent::~RuyiInputEvent() throw() {
}


void RuyiInputEvent::__set_EventId(const int64_t val) {
  this->EventId = val;
}

void RuyiInputEvent::__set_DeviceType(const int8_t val) {
  this->DeviceType = val;
}

void RuyiInputEvent::__set_Key(const int32_t val) {
  this->Key = val;
}

void RuyiInputEvent::__set_NewValue(const int8_t val) {
  this->NewValue = val;
}

void RuyiInputEvent::__set_LastValue(const int8_t val) {
  this->LastValue = val;
}

uint32_t RuyiInputEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->EventId);
          this->__isset.EventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->DeviceType);
          this->__isset.DeviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Key);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->NewValue);
          this->__isset.NewValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->LastValue);
          this->__isset.LastValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiInputEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiInputEvent");

  xfer += oprot->writeFieldBegin("EventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->EventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DeviceType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->DeviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("NewValue", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->NewValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LastValue", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->LastValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiInputEvent &a, RuyiInputEvent &b) {
  using ::std::swap;
  swap(a.EventId, b.EventId);
  swap(a.DeviceType, b.DeviceType);
  swap(a.Key, b.Key);
  swap(a.NewValue, b.NewValue);
  swap(a.LastValue, b.LastValue);
  swap(a.__isset, b.__isset);
}

RuyiInputEvent::RuyiInputEvent(const RuyiInputEvent& other36) {
  EventId = other36.EventId;
  DeviceType = other36.DeviceType;
  Key = other36.Key;
  NewValue = other36.NewValue;
  LastValue = other36.LastValue;
  __isset = other36.__isset;
}
RuyiInputEvent& RuyiInputEvent::operator=(const RuyiInputEvent& other37) {
  EventId = other37.EventId;
  DeviceType = other37.DeviceType;
  Key = other37.Key;
  NewValue = other37.NewValue;
  LastValue = other37.LastValue;
  __isset = other37.__isset;
  return *this;
}
void RuyiInputEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiInputEvent(";
  out << "EventId=" << to_string(EventId);
  out << ", " << "DeviceType=" << to_string(DeviceType);
  out << ", " << "Key=" << to_string(Key);
  out << ", " << "NewValue=" << to_string(NewValue);
  out << ", " << "LastValue=" << to_string(LastValue);
  out << ")";
}


InputDeviceStateChangedRuyiController::~InputDeviceStateChangedRuyiController() throw() {
}


void InputDeviceStateChangedRuyiController::__set_PacketId(const int64_t val) {
  this->PacketId = val;
}

void InputDeviceStateChangedRuyiController::__set_ChannelId(const int32_t val) {
  this->ChannelId = val;
}

void InputDeviceStateChangedRuyiController::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void InputDeviceStateChangedRuyiController::__set_KeyPress(const int32_t val) {
  this->KeyPress = val;
}

void InputDeviceStateChangedRuyiController::__set_AnalogL2(const int8_t val) {
  this->AnalogL2 = val;
}

void InputDeviceStateChangedRuyiController::__set_AnalogR2(const int8_t val) {
  this->AnalogR2 = val;
}

void InputDeviceStateChangedRuyiController::__set_AnalogLeftJoyX(const int8_t val) {
  this->AnalogLeftJoyX = val;
}

void InputDeviceStateChangedRuyiController::__set_AnalogLeftJoyY(const int8_t val) {
  this->AnalogLeftJoyY = val;
}

void InputDeviceStateChangedRuyiController::__set_AnalogRightJoyX(const int8_t val) {
  this->AnalogRightJoyX = val;
}

void InputDeviceStateChangedRuyiController::__set_AnalogRightJoyY(const int8_t val) {
  this->AnalogRightJoyY = val;
}

void InputDeviceStateChangedRuyiController::__set_Changed(const RuyiInputStateChanged& val) {
  this->Changed = val;
}

uint32_t InputDeviceStateChangedRuyiController::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->PacketId);
          this->__isset.PacketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ChannelId);
          this->__isset.ChannelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->KeyPress);
          this->__isset.KeyPress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogL2);
          this->__isset.AnalogL2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogR2);
          this->__isset.AnalogR2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogLeftJoyX);
          this->__isset.AnalogLeftJoyX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogLeftJoyY);
          this->__isset.AnalogLeftJoyY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogRightJoyX);
          this->__isset.AnalogRightJoyX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->AnalogRightJoyY);
          this->__isset.AnalogRightJoyY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Changed.read(iprot);
          this->__isset.Changed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceStateChangedRuyiController::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceStateChangedRuyiController");

  xfer += oprot->writeFieldBegin("PacketId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->PacketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ChannelId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ChannelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyPress", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->KeyPress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogL2", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->AnalogL2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogR2", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->AnalogR2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogLeftJoyX", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->AnalogLeftJoyX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogLeftJoyY", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte(this->AnalogLeftJoyY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogRightJoyX", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->AnalogRightJoyX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnalogRightJoyY", ::apache::thrift::protocol::T_BYTE, 10);
  xfer += oprot->writeByte(this->AnalogRightJoyY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Changed", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->Changed.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceStateChangedRuyiController &a, InputDeviceStateChangedRuyiController &b) {
  using ::std::swap;
  swap(a.PacketId, b.PacketId);
  swap(a.ChannelId, b.ChannelId);
  swap(a.DeviceId, b.DeviceId);
  swap(a.KeyPress, b.KeyPress);
  swap(a.AnalogL2, b.AnalogL2);
  swap(a.AnalogR2, b.AnalogR2);
  swap(a.AnalogLeftJoyX, b.AnalogLeftJoyX);
  swap(a.AnalogLeftJoyY, b.AnalogLeftJoyY);
  swap(a.AnalogRightJoyX, b.AnalogRightJoyX);
  swap(a.AnalogRightJoyY, b.AnalogRightJoyY);
  swap(a.Changed, b.Changed);
  swap(a.__isset, b.__isset);
}

InputDeviceStateChangedRuyiController::InputDeviceStateChangedRuyiController(const InputDeviceStateChangedRuyiController& other38) {
  PacketId = other38.PacketId;
  ChannelId = other38.ChannelId;
  DeviceId = other38.DeviceId;
  KeyPress = other38.KeyPress;
  AnalogL2 = other38.AnalogL2;
  AnalogR2 = other38.AnalogR2;
  AnalogLeftJoyX = other38.AnalogLeftJoyX;
  AnalogLeftJoyY = other38.AnalogLeftJoyY;
  AnalogRightJoyX = other38.AnalogRightJoyX;
  AnalogRightJoyY = other38.AnalogRightJoyY;
  Changed = other38.Changed;
  __isset = other38.__isset;
}
InputDeviceStateChangedRuyiController& InputDeviceStateChangedRuyiController::operator=(const InputDeviceStateChangedRuyiController& other39) {
  PacketId = other39.PacketId;
  ChannelId = other39.ChannelId;
  DeviceId = other39.DeviceId;
  KeyPress = other39.KeyPress;
  AnalogL2 = other39.AnalogL2;
  AnalogR2 = other39.AnalogR2;
  AnalogLeftJoyX = other39.AnalogLeftJoyX;
  AnalogLeftJoyY = other39.AnalogLeftJoyY;
  AnalogRightJoyX = other39.AnalogRightJoyX;
  AnalogRightJoyY = other39.AnalogRightJoyY;
  Changed = other39.Changed;
  __isset = other39.__isset;
  return *this;
}
void InputDeviceStateChangedRuyiController::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceStateChangedRuyiController(";
  out << "PacketId=" << to_string(PacketId);
  out << ", " << "ChannelId=" << to_string(ChannelId);
  out << ", " << "DeviceId=" << to_string(DeviceId);
  out << ", " << "KeyPress=" << to_string(KeyPress);
  out << ", " << "AnalogL2=" << to_string(AnalogL2);
  out << ", " << "AnalogR2=" << to_string(AnalogR2);
  out << ", " << "AnalogLeftJoyX=" << to_string(AnalogLeftJoyX);
  out << ", " << "AnalogLeftJoyY=" << to_string(AnalogLeftJoyY);
  out << ", " << "AnalogRightJoyX=" << to_string(AnalogRightJoyX);
  out << ", " << "AnalogRightJoyY=" << to_string(AnalogRightJoyY);
  out << ", " << "Changed=" << to_string(Changed);
  out << ")";
}


InputDeviceStateChanged::~InputDeviceStateChanged() throw() {
}


void InputDeviceStateChanged::__set_header(const InputDeviceEventHeader& val) {
  this->header = val;
}

void InputDeviceStateChanged::__set_x360(const InputDeviceStateChangedX360& val) {
  this->x360 = val;
}

void InputDeviceStateChanged::__set_dgamepad(const InputDeviceStateChangedGamepad& val) {
  this->dgamepad = val;
}

void InputDeviceStateChanged::__set_djoystick(const InputDeviceStateChangedJoystick& val) {
  this->djoystick = val;
}

void InputDeviceStateChanged::__set_dkeyboard(const InputDeviceStateChangedKeyboard& val) {
  this->dkeyboard = val;
}

void InputDeviceStateChanged::__set_dmouse(const InputDeviceStateChangedMouse& val) {
  this->dmouse = val;
}

void InputDeviceStateChanged::__set_ruyicontroller(const InputDeviceStateChangedRuyiController& val) {
  this->ruyicontroller = val;
}

uint32_t InputDeviceStateChanged::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->x360.read(iprot);
          this->__isset.x360 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dgamepad.read(iprot);
          this->__isset.dgamepad = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->djoystick.read(iprot);
          this->__isset.djoystick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dkeyboard.read(iprot);
          this->__isset.dkeyboard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dmouse.read(iprot);
          this->__isset.dmouse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruyicontroller.read(iprot);
          this->__isset.ruyicontroller = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputDeviceStateChanged::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputDeviceStateChanged");

  xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->header.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x360", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->x360.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dgamepad", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->dgamepad.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("djoystick", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->djoystick.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dkeyboard", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->dkeyboard.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dmouse", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->dmouse.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ruyicontroller", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->ruyicontroller.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputDeviceStateChanged &a, InputDeviceStateChanged &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.x360, b.x360);
  swap(a.dgamepad, b.dgamepad);
  swap(a.djoystick, b.djoystick);
  swap(a.dkeyboard, b.dkeyboard);
  swap(a.dmouse, b.dmouse);
  swap(a.ruyicontroller, b.ruyicontroller);
  swap(a.__isset, b.__isset);
}

InputDeviceStateChanged::InputDeviceStateChanged(const InputDeviceStateChanged& other40) {
  header = other40.header;
  x360 = other40.x360;
  dgamepad = other40.dgamepad;
  djoystick = other40.djoystick;
  dkeyboard = other40.dkeyboard;
  dmouse = other40.dmouse;
  ruyicontroller = other40.ruyicontroller;
  __isset = other40.__isset;
}
InputDeviceStateChanged& InputDeviceStateChanged::operator=(const InputDeviceStateChanged& other41) {
  header = other41.header;
  x360 = other41.x360;
  dgamepad = other41.dgamepad;
  djoystick = other41.djoystick;
  dkeyboard = other41.dkeyboard;
  dmouse = other41.dmouse;
  ruyicontroller = other41.ruyicontroller;
  __isset = other41.__isset;
  return *this;
}
void InputDeviceStateChanged::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputDeviceStateChanged(";
  out << "header=" << to_string(header);
  out << ", " << "x360=" << to_string(x360);
  out << ", " << "dgamepad=" << to_string(dgamepad);
  out << ", " << "djoystick=" << to_string(djoystick);
  out << ", " << "dkeyboard=" << to_string(dkeyboard);
  out << ", " << "dmouse=" << to_string(dmouse);
  out << ", " << "ruyicontroller=" << to_string(ruyicontroller);
  out << ")";
}

}}} // namespace
