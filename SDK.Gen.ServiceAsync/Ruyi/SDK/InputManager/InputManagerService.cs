/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.InputManager
{
  public partial class InputManagerService
  {
    public interface IAsync
    {
      Task<bool> SetRuyiControllerStatusAsync(sbyte channel, bool enableR, bool enableG, bool enableB, bool enableMotor1, bool enableMotor2, bool shutdown, sbyte RValue, sbyte GValue, sbyte BValue, sbyte motor1Value, sbyte motor1Time, sbyte motor2Value, sbyte motor2Time, CancellationToken cancellationToken);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async Task<bool> SetRuyiControllerStatusAsync(sbyte channel, bool enableR, bool enableG, bool enableB, bool enableMotor1, bool enableMotor2, bool shutdown, sbyte RValue, sbyte GValue, sbyte BValue, sbyte motor1Value, sbyte motor1Time, sbyte motor2Value, sbyte motor2Time, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetRuyiControllerStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SetRuyiControllerStatusArgs();
        args.Channel = channel;
        args.EnableR = enableR;
        args.EnableG = enableG;
        args.EnableB = enableB;
        args.EnableMotor1 = enableMotor1;
        args.EnableMotor2 = enableMotor2;
        args.Shutdown = shutdown;
        args.RValue = RValue;
        args.GValue = GValue;
        args.BValue = BValue;
        args.Motor1Value = motor1Value;
        args.Motor1Time = motor1Time;
        args.Motor2Value = motor2Value;
        args.Motor2Time = motor2Time;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SetRuyiControllerStatusResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetRuyiControllerStatus failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private IAsync _iAsync;

      public AsyncProcessor(IAsync iAsync)
      {
        if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

        _iAsync = iAsync;
        processMap_["SetRuyiControllerStatus"] = SetRuyiControllerStatus_ProcessAsync;
      }

      protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async Task SetRuyiControllerStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SetRuyiControllerStatusArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SetRuyiControllerStatusResult();
        try
        {
          result.Success = await _iAsync.SetRuyiControllerStatusAsync(args.Channel, args.EnableR, args.EnableG, args.EnableB, args.EnableMotor1, args.EnableMotor2, args.Shutdown, args.RValue, args.GValue, args.BValue, args.Motor1Value, args.Motor1Time, args.Motor2Value, args.Motor2Time, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SetRuyiControllerStatus", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetRuyiControllerStatus", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }


    public partial class SetRuyiControllerStatusArgs : TBase
    {
      private sbyte _channel;
      private bool _enableR;
      private bool _enableG;
      private bool _enableB;
      private bool _enableMotor1;
      private bool _enableMotor2;
      private bool _shutdown;
      private sbyte _RValue;
      private sbyte _GValue;
      private sbyte _BValue;
      private sbyte _motor1Value;
      private sbyte _motor1Time;
      private sbyte _motor2Value;
      private sbyte _motor2Time;

      public sbyte Channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }

      public bool EnableR
      {
        get
        {
          return _enableR;
        }
        set
        {
          __isset.enableR = true;
          this._enableR = value;
        }
      }

      public bool EnableG
      {
        get
        {
          return _enableG;
        }
        set
        {
          __isset.enableG = true;
          this._enableG = value;
        }
      }

      public bool EnableB
      {
        get
        {
          return _enableB;
        }
        set
        {
          __isset.enableB = true;
          this._enableB = value;
        }
      }

      public bool EnableMotor1
      {
        get
        {
          return _enableMotor1;
        }
        set
        {
          __isset.enableMotor1 = true;
          this._enableMotor1 = value;
        }
      }

      public bool EnableMotor2
      {
        get
        {
          return _enableMotor2;
        }
        set
        {
          __isset.enableMotor2 = true;
          this._enableMotor2 = value;
        }
      }

      public bool Shutdown
      {
        get
        {
          return _shutdown;
        }
        set
        {
          __isset.shutdown = true;
          this._shutdown = value;
        }
      }

      public sbyte RValue
      {
        get
        {
          return _RValue;
        }
        set
        {
          __isset.RValue = true;
          this._RValue = value;
        }
      }

      public sbyte GValue
      {
        get
        {
          return _GValue;
        }
        set
        {
          __isset.GValue = true;
          this._GValue = value;
        }
      }

      public sbyte BValue
      {
        get
        {
          return _BValue;
        }
        set
        {
          __isset.BValue = true;
          this._BValue = value;
        }
      }

      public sbyte Motor1Value
      {
        get
        {
          return _motor1Value;
        }
        set
        {
          __isset.motor1Value = true;
          this._motor1Value = value;
        }
      }

      public sbyte Motor1Time
      {
        get
        {
          return _motor1Time;
        }
        set
        {
          __isset.motor1Time = true;
          this._motor1Time = value;
        }
      }

      public sbyte Motor2Value
      {
        get
        {
          return _motor2Value;
        }
        set
        {
          __isset.motor2Value = true;
          this._motor2Value = value;
        }
      }

      public sbyte Motor2Time
      {
        get
        {
          return _motor2Time;
        }
        set
        {
          __isset.motor2Time = true;
          this._motor2Time = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool channel;
        public bool enableR;
        public bool enableG;
        public bool enableB;
        public bool enableMotor1;
        public bool enableMotor2;
        public bool shutdown;
        public bool RValue;
        public bool GValue;
        public bool BValue;
        public bool motor1Value;
        public bool motor1Time;
        public bool motor2Value;
        public bool motor2Time;
      }

      public SetRuyiControllerStatusArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Byte)
                {
                  Channel = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  EnableR = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  EnableG = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  EnableB = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Bool)
                {
                  EnableMotor1 = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.Bool)
                {
                  EnableMotor2 = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.Bool)
                {
                  Shutdown = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 8:
                if (field.Type == TType.Byte)
                {
                  RValue = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 9:
                if (field.Type == TType.Byte)
                {
                  GValue = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 10:
                if (field.Type == TType.Byte)
                {
                  BValue = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 11:
                if (field.Type == TType.Byte)
                {
                  Motor1Value = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 12:
                if (field.Type == TType.Byte)
                {
                  Motor1Time = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 13:
                if (field.Type == TType.Byte)
                {
                  Motor2Value = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 14:
                if (field.Type == TType.Byte)
                {
                  Motor2Time = await iprot.ReadByteAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetRuyiControllerStatus_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.channel)
          {
            field.Name = "channel";
            field.Type = TType.Byte;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(Channel, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.enableR)
          {
            field.Name = "enableR";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(EnableR, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.enableG)
          {
            field.Name = "enableG";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(EnableG, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.enableB)
          {
            field.Name = "enableB";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(EnableB, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.enableMotor1)
          {
            field.Name = "enableMotor1";
            field.Type = TType.Bool;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(EnableMotor1, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.enableMotor2)
          {
            field.Name = "enableMotor2";
            field.Type = TType.Bool;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(EnableMotor2, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.shutdown)
          {
            field.Name = "shutdown";
            field.Type = TType.Bool;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Shutdown, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.RValue)
          {
            field.Name = "RValue";
            field.Type = TType.Byte;
            field.ID = 8;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(RValue, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.GValue)
          {
            field.Name = "GValue";
            field.Type = TType.Byte;
            field.ID = 9;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(GValue, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.BValue)
          {
            field.Name = "BValue";
            field.Type = TType.Byte;
            field.ID = 10;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(BValue, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.motor1Value)
          {
            field.Name = "motor1Value";
            field.Type = TType.Byte;
            field.ID = 11;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(Motor1Value, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.motor1Time)
          {
            field.Name = "motor1Time";
            field.Type = TType.Byte;
            field.ID = 12;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(Motor1Time, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.motor2Value)
          {
            field.Name = "motor2Value";
            field.Type = TType.Byte;
            field.ID = 13;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(Motor2Value, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.motor2Time)
          {
            field.Name = "motor2Time";
            field.Type = TType.Byte;
            field.ID = 14;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteByteAsync(Motor2Time, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetRuyiControllerStatus_args(");
        bool __first = true;
        if (__isset.channel)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Channel: ");
          sb.Append(Channel);
        }
        if (__isset.enableR)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EnableR: ");
          sb.Append(EnableR);
        }
        if (__isset.enableG)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EnableG: ");
          sb.Append(EnableG);
        }
        if (__isset.enableB)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EnableB: ");
          sb.Append(EnableB);
        }
        if (__isset.enableMotor1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EnableMotor1: ");
          sb.Append(EnableMotor1);
        }
        if (__isset.enableMotor2)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EnableMotor2: ");
          sb.Append(EnableMotor2);
        }
        if (__isset.shutdown)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Shutdown: ");
          sb.Append(Shutdown);
        }
        if (__isset.RValue)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RValue: ");
          sb.Append(RValue);
        }
        if (__isset.GValue)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GValue: ");
          sb.Append(GValue);
        }
        if (__isset.BValue)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("BValue: ");
          sb.Append(BValue);
        }
        if (__isset.motor1Value)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Motor1Value: ");
          sb.Append(Motor1Value);
        }
        if (__isset.motor1Time)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Motor1Time: ");
          sb.Append(Motor1Time);
        }
        if (__isset.motor2Value)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Motor2Value: ");
          sb.Append(Motor2Value);
        }
        if (__isset.motor2Time)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Motor2Time: ");
          sb.Append(Motor2Time);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SetRuyiControllerStatusResult : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SetRuyiControllerStatusResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetRuyiControllerStatus_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetRuyiControllerStatus_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }

  }
}
