/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.BrainCloudApi
{
  public partial class BrainCloudService
  {
    public interface IAsync
    {
      /// <summary>
      /// Creates an instance of an asynchronous match.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_CreateMatchAsync(string jsonOpponentIds, string pushNotificationMessage, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Creates an instance of an asynchronous match with an initial turn.
      /// </summary>
      /// <param name="jsonOpponentIds">JSON string identifying the opponent platform and id for this match.Platforms are identified as:BC - a brainCloud profile idFB - a Facebook idAn exmaple of this string would be:[    {        "platform": "BC",        "id": "some-braincloud-profile"    },    {        "platform": "FB",        "id": "some-facebook-id"    }]</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string defining what the other player will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_CreateMatchWithInitialTurnAsync(string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Submits a turn for the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonMatchState">JSON string blob provided by the caller</param>
      /// <param name="pushNotificationMessage">Optional push notification message to send to the other party.Refer to the Push Notification functions for the syntax required.</param>
      /// <param name="nextPlayer">Optionally, force the next player player to be a specific player</param>
      /// <param name="jsonSummary">Optional JSON string that other players will see as a summary of the game when listing their games</param>
      /// <param name="jsonStatistics">Optional JSON string blob provided by the caller</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_SubmitTurnAsync(string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Allows the current player (only) to update Summary data without having to submit a whole turn.
      /// </summary>
      /// <param name="ownerId">Match owner identfier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="version">Game state version to ensure turns are submitted once and in order</param>
      /// <param name="jsonSummary">JSON string provided by the caller that other players will see as a summary of the game when listing their games</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_UpdateMatchSummaryDataAsync(string ownerId, string matchId, long version, string jsonSummary, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Marks the given match as complete.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_CompleteMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the current state of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_ReadMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the match history of the given match.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_ReadMatchHistoryAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns all matches that are NOT in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_FindMatchesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns all matches that are in a COMPLETE state for which the player is involved.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_FindCompleteMatchesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Marks the given match as abandoned.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_AbandonMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Removes the match and match history from the server. DEBUG ONLY, in production it is recommended
      /// the user leave it as completed.
      /// </summary>
      /// <param name="ownerId">Match owner identifier</param>
      /// <param name="matchId">Match identifier</param>
      /// <param name="clientIndex"></param>
      Task<string> AsyncMatch_DeleteMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Used to create the anonymous installation id for the brainCloud profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Authentication_GenerateAnonymousIdAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Initialize - initializes the identity service with a saved
      /// anonymous installation id and most recently used profile id
      /// </summary>
      /// <param name="profileId">The id of the profile id that was most recently used by the app (on this device)</param>
      /// <param name="anonymousId">The anonymous installation id that was generated for this device</param>
      /// <param name="clientIndex"></param>
      Task Authentication_InitializeAsync(string profileId, string anonymousId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Used to clear the saved profile id - to use in cases when the user is
      /// attempting to switch to a different app profile.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task Authentication_ClearSavedProfileIDAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Authenticate a user anonymously with brainCloud - used for apps that don't want to bother
      /// the user to login, or for users who are sensitive to their privacy
      /// </summary>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      Task<string> Authentication_AuthenticateAnonymousAsync(bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Authenticate the user with a custom Email and Password.  Note that the client app
      /// is responsible for collecting (and storing) the e-mail and potentially password
      /// (for convenience) in the client data.  For the greatest security,
      /// force the user to re-enter their password at each login.
      /// (Or at least give them that option).
      /// </summary>
      /// <param name="email">The e-mail address of the user</param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      Task<string> Authentication_AuthenticateEmailPasswordAsync(string email, string password, bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Authenticate the user using a userId and password (without any validation on the userId).
      /// Similar to AuthenticateEmailPassword - except that that method has additional features to
      /// allow for e-mail validation, password resets, etc.
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="password">The password of the user</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      Task<string> Authentication_AuthenticateUniversalAsync(string userId, string password, bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Authenticate the user via cloud code (which in turn validates the supplied credentials against an external system).
      /// This allows the developer to extend brainCloud authentication to support other backend authentication systems.
      /// </summary>
      /// <param name="userId">The user id</param>
      /// <param name="token">The user token (password etc)</param>
      /// <param name="externalAuthName">The name of the cloud script to call for external authentication</param>
      /// <param name="forceCreate">Should a new profile be created for this user if the account does not exist?</param>
      /// <param name="clientIndex"></param>
      Task<string> Authentication_AuthenticateExternalAsync(string userId, string token, string externalAuthName, bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reset Email password - Sends a password reset email to the specified address
      /// </summary>
      /// <param name="externalId">The email address to send the reset email to.</param>
      /// <param name="clientIndex"></param>
      Task<string> Authentication_ResetEmailPasswordAsync(string externalId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Enable logging of brainCloud transactions (comms etc)
      /// </summary>
      /// <param name="enable">True if logging is to be enabled</param>
      /// <param name="clientIndex"></param>
      Task Client_EnableLoggingAsync(bool enable, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Resets all messages and calls to the server
      /// </summary>
      /// <param name="clientIndex"></param>
      Task Client_ResetCommunicationAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the packet timeouts using a list of integers that
      /// represent timeout values for each packet retry. The
      /// first item in the list represents the timeout for the first packet
      /// attempt, the second for the second packet attempt, and so on.
      /// 
      /// The number of entries in this array determines how many packet
      /// retries will occur.
      /// 
      /// By default, the packet timeout array is {10, 10, 10}
      /// 
      /// Note that this method does not change the timeout for authentication
      /// packets (use SetAuthenticationPacketTimeout method).
      /// </summary>
      /// <param name="timeouts">An array of packet timeouts.</param>
      /// <param name="clientIndex"></param>
      Task Client_SetPacketTimeoutsAsync(List<int> timeouts, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the packet timeouts back to default.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task Client_SetPacketTimeoutsToDefaultAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the list of packet timeouts.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<List<int>> Client_GetPacketTimeoutsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      Task Client_SetAuthenticationPacketTimeoutAsync(int timeoutSecs, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets the authentication packet timeout which is tracked separately
      /// from all other packets. Note that authentication packets are never
      /// retried and so this value represents the total time a client would
      /// wait to receive a reply to an authentication API call. By default
      /// this timeout is set to 15 seconds.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<int> Client_GetAuthenticationPacketTimeoutAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the low transfer rate timeout in secs
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<int> Client_GetUploadLowTransferRateTimeoutAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the timeout in seconds of a low speed upload
      /// (i.e. transfer rate which is underneath the low transfer rate threshold).
      /// By default this is set to 120 secs.Setting this value to 0 will
      /// turn off the timeout. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="timeoutSecs"></param>
      /// <param name="clientIndex"></param>
      Task Client_SetUploadLowTransferRateTimeoutAsync(int timeoutSecs, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the low transfer rate threshold in bytes/sec
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<int> Client_GetUploadLowTransferRateThresholdAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the low transfer rate threshold of an upload in bytes/sec.
      /// If the transfer rate dips below the given threshold longer
      /// than the specified timeout, the transfer will fail.
      /// By default this is set to 50 bytes/sec. Note that this timeout method
      /// does not work on Unity mobile platforms.
      /// </summary>
      /// <param name="bytesPerSec">The low transfer rate threshold in bytes/sec</param>
      /// <param name="clientIndex"></param>
      Task Client_SetUploadLowTransferRateThresholdAsync(int bytesPerSec, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Enables the timeout message caching which is disabled by default.
      /// Once enabled, if a client side timeout is encountered
      /// (i.e. brainCloud server is unreachable presumably due to the client
      /// network being down) the SDK will do the following:
      /// 
      /// 1 - cache the currently queued messages to brainCloud
      /// 2 - call the network error callback
      /// 3 - then expect the app to call either:
      ///     a) RetryCachedMessages() to retry sending to brainCloud
      ///     b) FlushCachedMessages() to dump all messages in the queue.
      /// 
      /// Between steps 2 and 3, the app can prompt the user to retry connecting
      /// to brainCloud to determine whether to follow path 3a or 3b.
      /// 
      /// Note that if path 3a is followed, and another timeout is encountered,
      /// the process will begin all over again from step 1.
      /// 
      /// WARNING - the brainCloud SDK will cache *all* API calls sent
      /// when a timeout is encountered if this mechanism is enabled.
      /// This effectively freezes all communication with brainCloud.
      /// Apps must call either RetryCachedMessages() or FlushCachedMessages()
      /// for the brainCloud SDK to resume sending messages.
      /// ResetCommunication() will also clear the message cache.
      /// </summary>
      /// <param name="enabled">True if message should be cached on timeout</param>
      /// <param name="clientIndex"></param>
      Task Client_EnableNetworkErrorMessageCachingAsync(bool enabled, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Attempts to resend any cached messages. If no messages are in the cache,
      /// this method does nothing.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task Client_RetryCachedMessagesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Flushes the cached messages to resume API call processing. This will dump
      /// all of the cached messages in the queue.
      /// </summary>
      /// <param name="sendApiErrorCallbacks">If set to true API error callbacks willbe called for every cached message with statusCode CLIENT_NETWORK_ERROR and reasonCode CLIENT_NETWORK_ERROR_TIMEOUT.</param>
      /// <param name="clientIndex"></param>
      Task Client_FlushCachedMessagesAsync(bool sendApiErrorCallbacks, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Inserts a marker which will tell the brainCloud comms layer
      /// to close the message bundle off at this point. Any messages queued
      /// before this method was called will likely be bundled together in
      /// the next send to the server.
      /// 
      /// To ensure that only a single message is sent to the server you would
      /// do something like this:
      /// 
      /// InsertEndOfMessageBundleMarker()
      /// SomeApiCall()
      /// InsertEndOfMessageBundleMarker()
      /// </summary>
      /// <param name="clientIndex"></param>
      Task Client_InsertEndOfMessageBundleMarkerAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the country code sent to brainCloud when a user authenticates.
      /// Will override any auto detected country.
      /// </summary>
      /// <param name="countryCode">ISO 3166-1 two-letter country code</param>
      /// <param name="clientIndex"></param>
      Task Client_OverrideCountryCodeAsync(string countryCode, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the language code sent to brainCloud when a user authenticates.
      /// If the language is set to a non-ISO 639-1 standard value the game default will be used instead.
      /// Will override any auto detected language.
      /// </summary>
      /// <param name="languageCode">ISO 639-1 two-letter language code</param>
      /// <param name="clientIndex"></param>
      Task Client_OverrideLanguageCodeAsync(string languageCode, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the sessionId or empty string if no session present.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Client_GetSessionIdAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns true if the user is currently authenticated.
      /// If a session time out or session invalidation is returned from executing a
      /// sever API call, this flag will reset back to false.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<bool> Client_IsAuthenticatedAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns true if brainCloud has been initialized.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<bool> Client_IsInitializedAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId"></param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      Task Client_Initialize_SSSAsync(string secretKey, string appId, string appVersion, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method initializes the BrainCloudClient.
      /// </summary>
      /// <param name="serverURL">The URL to the brainCloud server</param>
      /// <param name="secretKey">The secret key for your app</param>
      /// <param name="appId">The app id</param>
      /// <param name="appVersion">The app version</param>
      /// <param name="clientIndex"></param>
      Task Client_Initialize_SSSSAsync(string serverURL, string secretKey, string appId, string appVersion, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Initialize the identity aspects of brainCloud.
      /// </summary>
      /// <param name="profileId">The profile id</param>
      /// <param name="anonymousId">The anonymous id</param>
      /// <param name="clientIndex"></param>
      Task Client_InitializeIdentityAsync(string profileId, string anonymousId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Update method needs to be called regularly in order
      /// to process incoming and outgoing messages.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task Client_UpdateAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Creates custom data stream page event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      Task<string> DataStream_CustomPageEventAsync(string eventName, string jsonEventProperties, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Creates custom data stream screen event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      Task<string> DataStream_CustomScreenEventAsync(string eventName, string jsonEventProperties, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Creates custom data stream track event
      /// </summary>
      /// <param name="eventName">The name of the event</param>
      /// <param name="jsonEventProperties">The properties of the event</param>
      /// <param name="clientIndex"></param>
      Task<string> DataStream_CustomTrackEventAsync(string eventName, string jsonEventProperties, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_CreateEntityAsync(string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all user entities that match the given type.
      /// </summary>
      /// <param name="entityType">The entity type to search for</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetEntitiesByTypeAsync(string entityType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method updates a new entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies defaultpermissions which make the entity readable/writeable by only the user.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_UpdateEntityAsync(string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method updates a shared entity owned by another user. This operation results in the entity
      /// data being completely replaced by the passed in JSON string.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="targetProfileId">The id of the entity's owner</param>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_UpdateSharedEntityAsync(string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method deletes the given entity on the server.
      /// </summary>
      /// <param name="entityId">The id of the entity to update</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_DeleteEntityAsync(string entityId, int version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method updates a singleton entity on the server. This operation results in the entity
      /// data being completely replaced by the passed in JSON string. If the entity doesn't exist it is created.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="jsonEntityData">The entity's data as a json string.</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_UpdateSingletonAsync(string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method deletes the given singleton on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="version">Current version of the entity. If the version of theentity on the server does not match the version passed in, theserver operation will fail. Use -1 to skip version checking.</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_DeleteSingletonAsync(string entityType, int version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method to get a specific entity.
      /// </summary>
      /// <param name="entityId">The id of the entity</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetEntityAsync(string entityId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves a singleton entity on the server. If the entity doesn't exist, null is returned.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetSingletonAsync(string entityType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns a shared entity for the given profile and entity ID.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The the profile ID of the user who owns the entity</param>
      /// <param name="entityId">The ID of the entity that will be retrieved</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetSharedEntityForProfileIdAsync(string profileId, string entityId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all shared entities for the given profile id.
      /// An entity is shared if its ACL allows for the currently logged
      /// in user to read the data.
      /// </summary>
      /// <param name="profileId">The profile id to retrieve shared entities for</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetSharedEntitiesForProfileIdAsync(string profileId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetListAsync(string whereJson, string orderByJson, int maxReturn, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets list of shared entities for the specified user based on type and/or where clause
      /// </summary>
      /// <param name="profileId">The profile ID to retrieve shared entities for</param>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetSharedEntitiesListForProfileIdAsync(string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetListCountAsync(string whereJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method uses a paging system to iterate through user entities.
      /// After retrieving a page of entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_GetPageOffsetAsync(string context, int pageOffset, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Partial increment of entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_IncrementUserEntityDataAsync(string entityId, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Partial increment of shared entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="targetProfileId">Profile ID of the entity owner</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      Task<string> Entity_IncrementSharedUserEntityDataAsync(string entityId, string targetProfileId, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends an event to the designated profile id with the attached json data.
      /// Any events that have been sent to a user will show up in their
      /// incoming event mailbox. If the recordLocally flag is set to true,
      /// a copy of this event (with the exact same event id) will be stored
      /// in the sending user's "sent" event mailbox.
      /// </summary>
      /// <param name="toProfileId">The id of the user who is being sent the event</param>
      /// <param name="eventType">The user-defined type of the event.</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      Task<string> Event_SendEventAsync(string toProfileId, string eventType, string jsonEventData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Updates an event in the user's incoming event mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="jsonEventData">The user-defined data for this event encoded in JSON.</param>
      /// <param name="clientIndex"></param>
      Task<string> Event_UpdateIncomingEventDataAsync(string evId, string jsonEventData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Delete an event out of the user's incoming mailbox.
      /// </summary>
      /// <param name="evId">The event id</param>
      /// <param name="clientIndex"></param>
      Task<string> Event_DeleteIncomingEventAsync(string evId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Get the events currently queued for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Event_GetEventsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Prepares a user file upload. On success the file will begin uploading
      /// to the brainCloud server.To be informed of success/failure of the upload
      /// register an IFileUploadCallback with the BrainCloudClient class.
      /// </summary>
      /// <param name="cloudPath">The desired cloud path of the file</param>
      /// <param name="cloudFilename">The desired cloud fileName of the file</param>
      /// <param name="shareable">True if the file is shareable</param>
      /// <param name="replaceIfExists">Whether to replace file if it exists</param>
      /// <param name="localPath">The path and fileName of the local file</param>
      /// <param name="clientIndex"></param>
      Task<string> File_UploadFileAsync(string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method cancels an upload. If an IFileUploadCallback has been registered with the BrainCloudClient class,
      /// the fileUploadFailed callback method will be called once the upload has been canceled.
      /// NOTE: The upload will still continue in the background on versions of Unity before 5.3
      /// and on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">Upload ID of the file to cancel</param>
      /// <param name="clientIndex"></param>
      Task File_CancelUploadAsync(string uploadId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the progress of the given upload from 0.0 to 1.0 or -1 if upload not found.
      /// NOTE: This will always return 1 on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      Task<double> File_GetUploadProgressAsync(string uploadId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the number of bytes uploaded or -1 if upload not found.
      /// NOTE: This will always return the total bytes to transfer on Unity mobile platforms.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      Task<long> File_GetUploadBytesTransferredAsync(string uploadId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the total number of bytes that will be uploaded or -1 if upload not found.
      /// </summary>
      /// <param name="uploadId">The id of the upload</param>
      /// <param name="clientIndex"></param>
      Task<long> File_GetUploadTotalBytesToTransferAsync(string uploadId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// List all user files
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> File_ListUserFiles_SFOAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// List user files from the given cloud path
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      Task<string> File_ListUserFiles_SNSFOAsync(string cloudPath, bool recurse, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Deletes a single user file.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFileName"></param>
      /// <param name="clientIndex"></param>
      Task<string> File_DeleteUserFileAsync(string cloudPath, string cloudFileName, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Delete multiple user files
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="recurse">Whether to recurse down the path</param>
      /// <param name="clientIndex"></param>
      Task<string> File_DeleteUserFilesAsync(string cloudPath, bool recurse, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the CDN URL for a file object.
      /// </summary>
      /// <param name="cloudPath">File path</param>
      /// <param name="cloudFilename">Name of file</param>
      /// <param name="clientIndex"></param>
      Task<string> File_GetCDNUrlAsync(string cloudPath, string cloudFilename, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieves profile information for the partial matches of the specified text.
      /// </summary>
      /// <param name="searchText">Universal ID text on which to search.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_FindUserByUniversalIdAsync(string searchText, int maxResults, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieves profile information of the specified user.
      /// </summary>
      /// <param name="externalId">External id of the user to find</param>
      /// <param name="authenticationType">The authentication type used for the user's ID</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_GetProfileInfoForCredentialAsync(string externalId, string authenticationType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieves profile information for the specified external auth user.
      /// </summary>
      /// <param name="externalId">External id of the friend to find</param>
      /// <param name="externalAuthType">The external authentication type used for this friend's external id</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_GetProfileInfoForExternalAuthIdAsync(string externalId, string externalAuthType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieves the external ID for the specified user profile ID on the specified social platform.
      /// </summary>
      /// <param name="profileId">Profile (user) ID.</param>
      /// <param name="authenticationType">Associated authentication type.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_GetExternalIdForProfileIdAsync(string profileId, string authenticationType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns a particular entity of a particular friend.
      /// </summary>
      /// <param name="entityId">Id of entity to retrieve.</param>
      /// <param name="friendId">Profile Id of friend who owns entity.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_ReadFriendEntityAsync(string entityId, string friendId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns entities of all friends based on type and/or subtype.
      /// </summary>
      /// <param name="entityType">Types of entities to retrieve.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_ReadFriendsEntitiesAsync(string entityType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns user state of a particular friend.
      /// </summary>
      /// <param name="friendId">Profile Id of friend to retrieve user state for.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_ReadFriendUserStateAsync(string friendId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns user state of a particular user.
      /// </summary>
      /// <param name="profileId">Profile Id of user to retrieve player state for.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_GetSummaryDataForProfileIdAsync(string profileId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Finds a list of users matching the search text by performing an exact
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The string to search for.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_FindUsersByExactNameAsync(string searchText, int maxResults, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Finds a list of users matching the search text by performing a substring
      /// search of all user names.
      /// </summary>
      /// <param name="searchText">The substring to search for. Minimum length of 3 characters.</param>
      /// <param name="maxResults">Maximum number of results to return.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_FindUsersBySubstrNameAsync(string searchText, int maxResults, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieves a list of user and friend platform information for all friends of the current user.
      /// </summary>
      /// <param name="friendPlatform">Friend platform to query.</param>
      /// <param name="includeSummaryData">True if including summary data; false otherwise.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_ListFriendsAsync(Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Links the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_AddFriendsAsync(List<string> profileIds, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Unlinks the current user and the specified users as brainCloud friends.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_RemoveFriendsAsync(List<string> profileIds, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Get users online status
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs.</param>
      /// <param name="clientIndex"></param>
      Task<string> Friend_GetUsersOnlineStatusAsync(List<string> profileIds, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves all gamification data for the player.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadAllGamificationAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves all milestones defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadMilestonesAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read all of the achievements defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadAchievementsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all defined xp levels and any rewards associated
      /// with those xp levels.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadXpLevelsMetaDataAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrives the list of achieved achievements.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadAchievedAchievementsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves the list of completed milestones.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadCompletedMilestonesAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves the list of in progress milestones
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadInProgressMilestonesAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves milestones of the given category.
      /// </summary>
      /// <param name="category">The milestone category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadMilestonesByCategoryAsync(string category, bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method will award the achievements specified. On success, this will
      /// call AwardThirdPartyAchievement to hook into the client-side Achievement
      /// service (ie GameCentre, Facebook etc).
      /// </summary>
      /// <param name="achievementIds">A collection of achievement ids to award</param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_AwardAchievementsAsync(List<string> achievementIds, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves all of the quests defined for the game.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all completed quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadCompletedQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all in progress quests.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadInProgressQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all quests that haven't been started.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadNotStartedQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all quests with status.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadQuestsWithStatusAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all quests with a basic percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadQuestsWithBasicPercentageAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all quests with a complex percentage.
      /// </summary>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadQuestsWithComplexPercentageAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all quests for the given category.
      /// </summary>
      /// <param name="category">The quest category</param>
      /// <param name="includeMetaData"></param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ReadQuestsByCategoryAsync(string category, bool includeMetaData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the specified milestones' statuses to LOCKED.
      /// </summary>
      /// <param name="milestoneIds">List of milestones to reset</param>
      /// <param name="clientIndex"></param>
      Task<string> Gamification_ResetMilestonesAsync(List<string> milestoneIds, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method reads all the global properties of the game
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> GlobalApp_ReadPropertiesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method creates a new entity on the server.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_CreateEntityAsync(string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method creates a new entity on the server with an indexed id.
      /// </summary>
      /// <param name="entityType">The entity type as defined by the user</param>
      /// <param name="indexedId">A secondary ID that will be indexed</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json. A null acl implies default</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_CreateEntityWithIndexedIdAsync(string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method updates an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityData">The entity's data as a json string</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_UpdateEntityAsync(string entityId, int version, string jsonEntityData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method updates an existing entity's Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="jsonEntityAcl">The entity's access control list as json.</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_UpdateEntityAclAsync(string entityId, int version, string jsonEntityAcl, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method updates an existing entity's time to live on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to update</param>
      /// <param name="timeToLive">Sets expiry time for entity in milliseconds if > 0</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_UpdateEntityTimeToLiveAsync(string entityId, int version, long timeToLive, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method deletes an existing entity on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity to delete</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_DeleteEntityAsync(string entityId, int version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method reads an existing entity from the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_ReadEntityAsync(string entityId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets list of entities from the server base on type and/or where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="orderByJson">Sort order</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_GetListAsync(string whereJson, string orderByJson, int maxReturn, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets list of entities from the server base on indexed id
      /// </summary>
      /// <param name="entityIndexedId">The entity indexed Id</param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_GetListByIndexedIdAsync(string entityIndexedId, int maxReturn, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets a count of entities based on the where clause
      /// </summary>
      /// <param name="whereJson">Mongo style query string</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_GetListCountAsync(string whereJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method uses a paging system to iterate through Global Entities.
      /// After retrieving a page of Global Entities with this method,
      /// use GetPageOffset() to retrieve previous or next pages.
      /// </summary>
      /// <param name="jsonContext">The json context for the page request.See the portal appendix documentation for format</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_GetPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method to retrieve previous or next pages after having called
      /// the GetPage method.
      /// </summary>
      /// <param name="context">The context string returned from the server from a previous callto GetPage() or GetPageOffset()</param>
      /// <param name="pageOffset">The positive or negative page offset to fetch. Uses the last pageretrieved using the context string to determine a starting point.</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_GetPageOffsetAsync(string context, int pageOffset, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Partial increment of global entity data field items. Partial set of items incremented as specified.
      /// </summary>
      /// <param name="entityId">The entity to increment</param>
      /// <param name="jsonData">The subset of data to increment</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_IncrementGlobalEntityDataAsync(string entityId, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets a list of up to randomCount randomly selected entities from the server based on the where condition and specified maximum return count.
      /// </summary>
      /// <param name="whereJson"></param>
      /// <param name="maxReturn">The maximum number of entities to return</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_GetRandomEntitiesMatchingAsync(string whereJson, int maxReturn, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method updates an existing entity's Owner and Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="ownerId">The owner ID</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_UpdateEntityOwnerAndAclAsync(string entityId, long version, string ownerId, string acl, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method clears the owner id of an existing entity and sets the Acl on the server.
      /// </summary>
      /// <param name="entityId">The entity ID</param>
      /// <param name="version">The version of the entity</param>
      /// <param name="acl">The entity's access control list</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalEntity_MakeSystemEntityAsync(string entityId, long version, string acl, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns all of the global statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> GlobalStatistics_ReadAllGlobalStatsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reads a subset of global statistics as defined by the input JSON.
      /// </summary>
      /// <param name="globalStats">A list containing the statistics to read</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalStatistics_ReadGlobalStatsSubsetAsync(List<string> globalStats, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves the global statistics for the given category.
      /// </summary>
      /// <param name="category">The global statistics category</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalStatistics_ReadGlobalStatsForCategoryAsync(string category, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Atomically increment (or decrement) global statistics.
      /// Global statistics are defined through the brainCloud portal.
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalStatistics_IncrementGlobalStatsAsync(string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      Task<string> GlobalStatistics_ProcessStatisticsAsync(Dictionary<string, string> statisticsData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Accept an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_AcceptGroupInvitationAsync(string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Add a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being added.</param>
      /// <param name="role">Role of the member being added.</param>
      /// <param name="jsonAttributes">Attributes of the member being added.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_AddGroupMemberAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Approve an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ApproveGroupJoinRequestAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Automatically join an open group that matches the search criteria and has space available.
      /// </summary>
      /// <param name="groupType">Name of the associated group type.</param>
      /// <param name="autoJoinStrategy">Selection strategy to employ when there are multiple matches</param>
      /// <param name="dataQueryJson">Query parameters (optional)</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_AutoJoinGroupAsync(string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Cancel an outstanding invitation to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_CancelGroupInvitationAsync(string groupId, string profileId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Create a group.
      /// </summary>
      /// <param name="name">Name of the group.</param>
      /// <param name="groupType">Name of the type of group.</param>
      /// <param name="isOpenGroup">true if group is open; false if closed.</param>
      /// <param name="acl">The group's access control list. A null ACL implies default.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="jsonOwnerAttributes">Attributes for the group owner (current user).</param>
      /// <param name="jsonDefaultMemberAttributes">Default attributes for group members.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_CreateGroupAsync(string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Create a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityType"></param>
      /// <param name="isOwnedByGroupMember">true if entity is owned by a member; false if owned by the entire group.</param>
      /// <param name="acl">Access control list for the group entity.</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_CreateGroupEntityAsync(string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Delete a group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Current version of the group</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_DeleteGroupAsync(string groupId, long version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Delete a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_DeleteGroupEntityAsync(string groupId, string entityId, long version, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read information on groups to which the current user belongs.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Group_GetMyGroupsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Increment elements for the group's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_IncrementGroupDataAsync(string groupId, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Increment elements for the group entity's data field.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="jsonData">Partial data map with incremental values.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_IncrementGroupEntityDataAsync(string groupId, string entityId, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Invite a member to the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being invited.</param>
      /// <param name="role">Role of the member being invited.</param>
      /// <param name="jsonAttributes">Attributes of the member being invited.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_InviteGroupMemberAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Join an open group or request to join a closed group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_JoinGroupAsync(string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Leave a group in which the user is a member.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_LeaveGroupAsync(string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve a page of group summary information based on the specified context.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ListGroupsPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve a page of group summary information based on the encoded context
      /// and specified page offset.
      /// </summary>
      /// <param name="context">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ListGroupsPageByOffsetAsync(string context, int pageOffset, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read information on groups to which the specified user belongs.  Access is subject to restrictions.
      /// </summary>
      /// <param name="profileId">User to read groups for</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ListGroupsWithMemberAsync(string profileId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ReadGroupAsync(string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read the data of the specified group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ReadGroupDataAsync(string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="jsonContext">Query context.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ReadGroupEntitiesPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read a page of group entity information.
      /// </summary>
      /// <param name="encodedContext">Encoded reference query context.</param>
      /// <param name="pageOffset">Number of pages by which to offset the query.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ReadGroupEntitiesPageByOffsetAsync(string encodedContext, int pageOffset, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read the specified group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ReadGroupEntityAsync(string groupId, string entityId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read the members of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_ReadGroupMembersAsync(string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reject an outstanding invitation to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_RejectGroupInvitationAsync(string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reject an outstanding request to join the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the invitation being deleted.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_RejectGroupJoinRequestAsync(string groupId, string profileId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Remove a member from the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being deleted.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_RemoveGroupMemberAsync(string groupId, string profileId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Updates a group's data.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="version">Version to verify.</param>
      /// <param name="jsonData">Data to apply.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_UpdateGroupDataAsync(string groupId, long version, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Update a group entity.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="entityId">ID of the entity.</param>
      /// <param name="version">The current version of the group entity (for concurrency checking).</param>
      /// <param name="jsonData">Custom application data.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_UpdateGroupEntityDataAsync(string groupId, string entityId, long version, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Update a member of the group.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="profileId">Profile ID of the member being updated.</param>
      /// <param name="role">Role of the member being updated (optional).</param>
      /// <param name="jsonAttributes">Attributes of the member being updated (optional).</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_UpdateGroupMemberAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Updates a group's name.
      /// </summary>
      /// <param name="groupId">ID of the group.</param>
      /// <param name="name">Name to apply.</param>
      /// <param name="clientIndex"></param>
      Task<string> Group_UpdateGroupNameAsync(string groupId, string name, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Attach a Email and Password identity to the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_AttachEmailIdentityAsync(string email, string password, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_MergeEmailIdentityAsync(string email, string password, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Detach the e-mail identity from the current profile
      /// </summary>
      /// <param name="email">The user's e-mail address</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_DetachEmailIdentityAsync(string email, bool continueAnon, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Attach a Universal (userId + password) identity to the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_AttachUniversalIdentityAsync(string userId, string password, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Merge the profile associated with the provided e=mail with the current profile.
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="password">The user's password</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_MergeUniversalIdentityAsync(string userId, string password, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Detach the universal identity from the current profile
      /// </summary>
      /// <param name="userId">The user's userId</param>
      /// <param name="continueAnon">Proceed even if the profile will revert to anonymous?</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_DetachUniversalIdentityAsync(string userId, bool continueAnon, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Switch to a Child Profile
      /// </summary>
      /// <param name="childProfileId">The profileId of the child profile to switch toIf null and forceCreate is true a new profile will be created</param>
      /// <param name="childAppId">The appId of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if it does not exist?</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_SwitchToChildProfileAsync(string childProfileId, string childAppId, bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Switches to the child profile of an app when only one profile exists
      /// If multiple profiles exist this returns an error
      /// </summary>
      /// <param name="childAppId">The App ID of the child game to switch to</param>
      /// <param name="forceCreate">Should a new profile be created if one does not exist?</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_SwitchToSingletonChildProfileAsync(string childAppId, bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Attach a new identity to a parent app
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_AttachParentWithIdentityAsync(string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Switch to a Parent Profile
      /// </summary>
      /// <param name="parentLevelName">The level of the parent to switch to</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_SwitchToParentProfileAsync(string parentLevelName, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Detaches parent from this user's profile
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Identity_DetachParentAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns a list of all child profiles in child Apps
      /// </summary>
      /// <param name="includeSummaryData">Whether to return the summary friend data along with this call</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_GetChildProfilesAsync(bool includeSummaryData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve list of identities
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Identity_GetIdentitiesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve list of expired identities
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Identity_GetExpiredIdentitiesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Refreshes an identity for this user
      /// </summary>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_RefreshIdentityAsync(string externalId, string authenticationToken, string authenticationType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Allows email identity email address to be changed
      /// </summary>
      /// <param name="oldEmailAddress">Old email address</param>
      /// <param name="password">Password for identity</param>
      /// <param name="newEmailAddress">New email address</param>
      /// <param name="updateContactEmail">Whether to update contact email in profile</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_ChangeEmailIdentityAsync(string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Attaches a peer identity to this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="externalId">User ID</param>
      /// <param name="authenticationToken">Password or client side token</param>
      /// <param name="authenticationType">Type of authentication</param>
      /// <param name="externalAuthName">Optional - if using AuthenticationType of external</param>
      /// <param name="forceCreate">If the profile does not exist, should it be created?</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_AttachPeerProfileAsync(string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Detaches a peer identity from this user's profile
      /// </summary>
      /// <param name="peer">Name of the peer to connect to</param>
      /// <param name="clientIndex"></param>
      Task<string> Identity_DetachPeerAsync(string peer, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieves a list of attached peer profiles
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Identity_GetPeerProfilesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a simple text email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="subject">The email subject</param>
      /// <param name="body">The email body</param>
      /// <param name="clientIndex"></param>
      Task<string> Mail_SendBasicEmailAsync(string profileId, string subject, string body, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends an advanced email to the specified user
      /// </summary>
      /// <param name="profileId"></param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      Task<string> Mail_SendAdvancedEmailAsync(string profileId, string jsonServiceParams, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends an advanced email to the specified email address
      /// </summary>
      /// <param name="emailAddress">The address to send the email to</param>
      /// <param name="jsonServiceParams">Parameters to send to the email service. See the documentation fora full list. http://getbraincloud.com/apidocs/apiref/#capi-mail</param>
      /// <param name="clientIndex"></param>
      Task<string> Mail_SendAdvancedEmailByAddressAsync(string emailAddress, string jsonServiceParams, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read match making record
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_ReadAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets player rating
      /// </summary>
      /// <param name="playerRating">The new player rating.</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_SetPlayerRatingAsync(long playerRating, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Resets player rating
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_ResetPlayerRatingAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Increments player rating
      /// </summary>
      /// <param name="increment">The increment amount</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_IncrementPlayerRatingAsync(long increment, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Decrements player rating
      /// </summary>
      /// <param name="decrement">The decrement amount</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_DecrementPlayerRatingAsync(long decrement, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Turns shield on
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_TurnShieldOnAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Turns shield on for the specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to turn the shield on for</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_TurnShieldOnForAsync(int minutes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Turns shield off
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_TurnShieldOffAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Increases the shield on time by specified number of minutes
      /// </summary>
      /// <param name="minutes">Number of minutes to increase the shield time for</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_IncrementShieldOnForAsync(int minutes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets the shield expiry for the given player id. Passing in a null player id
      /// will return the shield expiry for the current player. The value returned is
      /// the time in UTC millis when the shield will expire.
      /// </summary>
      /// <param name="playerId">The player id or use null to retrieve for the current player</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_GetShieldExpiryAsync(string playerId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Finds matchmaking enabled players
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_FindPlayersAsync(long rangeDelta, long numMatches, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Finds matchmaking enabled players with additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_FindPlayersWithAttributesAsync(long rangeDelta, long numMatches, string jsonAttributes, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_FindPlayersUsingFilterAsync(long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Finds matchmaking enabled players using a cloud code filter
      /// and additional attributes
      /// </summary>
      /// <param name="rangeDelta">The range delta</param>
      /// <param name="numMatches">The maximum number of matches to return</param>
      /// <param name="jsonAttributes">Attributes match criteria</param>
      /// <param name="jsonExtraParms">Parameters to pass to the CloudCode filter script</param>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_FindPlayersWithAttributesUsingFilterAsync(long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Enables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_EnableMatchMakingAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Disables Match Making for the Player
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> MatchMaking_DisableMatchMakingAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Starts a match
      /// </summary>
      /// <param name="otherPlayerId">The player to start a match with</param>
      /// <param name="rangeDelta">The range delta used for the initial match search</param>
      /// <param name="clientIndex"></param>
      Task<string> OneWayMatch_StartMatchAsync(string otherPlayerId, long rangeDelta, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Cancels a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the start match</param>
      /// <param name="clientIndex"></param>
      Task<string> OneWayMatch_CancelMatchAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Completes a match
      /// </summary>
      /// <param name="playbackStreamId">The playback stream id returned in the initial start match</param>
      /// <param name="clientIndex"></param>
      Task<string> OneWayMatch_CompleteMatchAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Starts a stream
      /// </summary>
      /// <param name="targetPlayerId">The player to start a stream with</param>
      /// <param name="includeSharedData">Whether to include shared data in the stream</param>
      /// <param name="clientIndex"></param>
      Task<string> PlaybackStream_StartStreamAsync(string targetPlayerId, bool includeSharedData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reads a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      Task<string> PlaybackStream_ReadStreamAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Ends a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      Task<string> PlaybackStream_EndStreamAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Deletes a stream
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="clientIndex"></param>
      Task<string> PlaybackStream_DeleteStreamAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Adds a stream event
      /// </summary>
      /// <param name="playbackStreamId">Identifies the stream to read</param>
      /// <param name="eventData">Describes the event</param>
      /// <param name="summary">Current summary data as of this event</param>
      /// <param name="clientIndex"></param>
      Task<string> PlaybackStream_AddEventAsync(string playbackStreamId, string eventData, string summary, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets recent streams for initiating player
      /// </summary>
      /// <param name="initiatingPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      Task<string> PlaybackStream_GetRecentStreamsForInitiatingPlayerAsync(string initiatingPlayerId, int maxNumStreams, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets recent streams for target player
      /// </summary>
      /// <param name="targetPlayerId">The player that started the stream</param>
      /// <param name="maxNumStreams">The player that started the stream</param>
      /// <param name="clientIndex"></param>
      Task<string> PlaybackStream_GetRecentStreamsForTargetPlayerAsync(string targetPlayerId, int maxNumStreams, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read the state of the currently logged in user.
      /// This method returns a JSON object describing most of the
      /// player's data: entities, statistics, level, currency.
      /// Apps will typically call this method after authenticating to get an
      /// up-to-date view of the user's data.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_ReadUserStateAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Completely deletes the user record and all data fully owned
      /// by the user. After calling this method, the user will need
      /// to re-authenticate and create a new profile.
      /// This is mostly used for debugging/qa.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_DeleteUserAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// This method will delete *most* data for the currently logged in user.
      /// Data which is not deleted includes: currency, credentials, and
      /// purchase transactions. ResetUser is different from DeleteUser in that
      /// the player record will continue to exist after the reset (so the user
      /// does not need to re-authenticate).
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_ResetUserAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Logs user out of server.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_LogoutAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the user name.
      /// </summary>
      /// <param name="userName">The name of the user</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_UpdateUserNameAsync(string userName, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Updates the "friend summary data" associated with the logged in user.
      /// Some operations will return this summary data. For instance the social
      /// leaderboards will return the player's score in the leaderboard along
      /// with the friend summary data. Generally this data is used to provide
      /// a quick overview of the player without requiring a separate API call
      /// to read their public stats or entity data.
      /// </summary>
      /// <param name="jsonSummaryData">A JSON string defining the summary data.For example:{  "xp":123,  "level":12,  "highScore":45123}</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_UpdateSummaryFriendDataAsync(string jsonSummaryData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve the user's attributes.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_GetAttributesAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Update user's attributes.
      /// </summary>
      /// <param name="jsonAttributes">Single layer json string that is a set of key-value pairs</param>
      /// <param name="wipeExisting">Whether to wipe existing attributes prior to update.</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_UpdateAttributesAsync(string jsonAttributes, bool wipeExisting, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Remove user's attributes.
      /// </summary>
      /// <param name="attributeNames">List of attribute names.</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_RemoveAttributesAsync(List<string> attributeNames, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Updates player's picture URL.
      /// </summary>
      /// <param name="pictureUrl">URL to apply.</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_UpdateUserPictureUrlAsync(string pictureUrl, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Update the user's contact email.
      /// Note this is unrelated to email authentication.
      /// </summary>
      /// <param name="contactEmail">Updated email</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerState_UpdateContactEmailAsync(string contactEmail, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Read all available user statistics.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_ReadAllUserStatsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reads a subset of user statistics as defined by the input JSON.
      /// </summary>
      /// <param name="playerStats"></param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_ReadUserStatsSubsetAsync(List<string> playerStats, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method retrieves the user statistics for the given category.
      /// </summary>
      /// <param name="category">The user statistics category</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_ReadUserStatsForCategoryAsync(string category, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reset all of the statistics for this user back to their initial value.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_ResetAllUserStatsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="jsonData">The JSON encoded data to be sent to the server as follows:{  stat1: 10,  stat2: -5.5,}would increment stat1 by 10 and decrement stat2 by 5.5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_IncrementUserStats_SSFOAsync(string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Atomically increment (or decrement) user statistics.
      /// Any rewards that are triggered from user statistic increments
      /// will be considered. User statistics are defined through the brainCloud portal.
      /// Note also that the "xpCapped" property is returned (true/false depending on whether
      /// the xp cap is turned on and whether the user has hit it).
      /// </summary>
      /// <param name="dictData">Stats name and their increments:{ {"stat1", 10}, {"stat1", -5}}would increment stat1 by 10 and decrement stat2 by 5.For the full statistics grammer see the api.braincloudservers.com site.There are many more complex operations supported such as:{  stat1:INC_TO_LIMIT#9#30}which increments stat1 by 9 up to a limit of 30.</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_IncrementUserStats_DSFOAsync(Dictionary<string, string> dictData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Apply statistics grammar to a partial set of statistics.
      /// </summary>
      /// <param name="statisticsData">Example data to be passed to method:{    "DEAD_CATS": "RESET",    "LIVES_LEFT": "SET#9",    "MICE_KILLED": "INC#2",    "DOG_SCARE_BONUS_POINTS": "INC#10",    "TREES_CLIMBED": 1}</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_ProcessStatisticsAsync(Dictionary<string, string> statisticsData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns JSON representing the next experience level for the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_GetNextExperienceLevelAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Increments the user's experience. If the user goes up a level,
      /// the new level details will be returned along with a list of rewards.
      /// </summary>
      /// <param name="xpValue">The amount to increase the user's experience by</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_IncrementExperiencePointsAsync(int xpValue, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sets the user's experience to an absolute value. Note that this
      /// is simply a set and will not reward the user if their level changes
      /// as a result.
      /// </summary>
      /// <param name="xpValue">The amount to set the the player's experience to</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatistics_SetExperiencePointsAsync(int xpValue, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Trigger an event server side that will increase the user statistics.
      /// This may cause one or more awards to be sent back to the user -
      /// could be achievements, experience, etc. Achievements will be sent by this
      /// client library to the appropriate awards service (Apple Game Center, etc).
      /// 
      /// This mechanism supercedes the PlayerStatisticsService API methods, since
      /// PlayerStatisticsService API method only update the raw statistics without
      /// triggering the rewards.
      /// </summary>
      /// <param name="eventName"></param>
      /// <param name="eventMultiplier"></param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatisticsEvent_TriggerStatsEventAsync(string eventName, int eventMultiplier, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// See documentation for TriggerStatsEvent for more
      /// documentation.
      /// </summary>
      /// <param name="jsonData">jsonData[  {    "eventName": "event1",    "eventMultiplier": 1  },  {    "eventName": "event2",    "eventMultiplier": 1  }]</param>
      /// <param name="clientIndex"></param>
      Task<string> PlayerStatisticsEvent_TriggerStatsEventsAsync(string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets the player's currency for the given currency type
      /// or all currency types if null passed in.
      /// </summary>
      /// <param name="currencyType">The currency type to retrieve or nullif all currency types are being requested.</param>
      /// <param name="clientIndex"></param>
      Task<string> Product_GetCurrencyAsync(string currencyType, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="clientIndex"></param>
      Task<string> Product_GetSalesInventoryAsync(string platform, string userCurrency, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method gets the active sales inventory for the passed-in
      /// currency type and category.
      /// </summary>
      /// <param name="platform">The store platform. Valid stores are:- itunes- facebook- appworld- steam- windows- windowsPhone- googlePlay</param>
      /// <param name="userCurrency">The currency to retrieve the salesinventory for. This is only used for Steam and Facebook stores.</param>
      /// <param name="category">The product category</param>
      /// <param name="clientIndex"></param>
      Task<string> Product_GetSalesInventoryByCategoryAsync(string platform, string userCurrency, string category, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Verify Microsoft Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="receipt">Receipt XML</param>
      /// <param name="clientIndex"></param>
      Task<string> Product_VerifyMicrosoftReceiptAsync(string receipt, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the eligible promotions for the player.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Product_GetEligiblePromotionsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Verify ITunes Receipt. On success, the player will be awarded the
      /// associated currencies.
      /// </summary>
      /// <param name="base64EncReceiptData">Base64 encoded receipt data</param>
      /// <param name="clientIndex"></param>
      Task<string> Product_VerifyItunesReceiptAsync(string base64EncReceiptData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Checks supplied text for profanity.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      Task<string> Profanity_ProfanityCheckAsync(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Replaces the characters of profanity text with a passed character(s).
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="replaceSymbol">The text to replace individual characters of profanity text with</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      Task<string> Profanity_ProfanityReplaceTextAsync(string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Checks supplied text for profanity and returns a list of bad wors.
      /// </summary>
      /// <param name="text">The text to check</param>
      /// <param name="languages">Optional comma delimited list of two character language codes</param>
      /// <param name="flagEmail">Optional processing of email addresses</param>
      /// <param name="flagPhone">Optional processing of phone numbers</param>
      /// <param name="flagUrls">Optional processing of urls</param>
      /// <param name="clientIndex"></param>
      Task<string> Profanity_ProfanityIdentifyBadWordsAsync(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Deregisters all device tokens currently registered to the user.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_DeregisterAllPushNotificationDeviceTokensAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Deregisters the given device token from the server to disable this device
      /// from receiving push notifications.
      /// </summary>
      /// <param name="platform">The device platform being registered.</param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_DeregisterPushNotificationDeviceTokenAsync(string platform, string token, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Registers the given device token with the server to enable this device
      /// to receive push notifications.
      /// </summary>
      /// <param name="platform"></param>
      /// <param name="token">The platform-dependant device token needed for push notifications.</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_RegisterPushNotificationDeviceTokenAsync(string platform, string token, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a simple push notification based on the passed in message.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="message">Text of the push notification</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendSimplePushNotificationAsync(string toProfileId, string message, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendRichPushNotificationAsync(string toProfileId, int notificationTemplateId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a notification to a user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// NOTE: It is possible to send a push notification to oneself.
      /// </summary>
      /// <param name="toProfileId">The braincloud profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendRichPushNotificationWithParamsAsync(string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="notificationTemplateId">Id of the notification template</param>
      /// <param name="substitutionsJson">JSON defining the substitution params to use with the template</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendTemplatedPushNotificationToGroupAsync(string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
      /// Includes JSON defining the substitution params to use with the template.
      /// See the Portal documentation for more info.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendNormalizedPushNotificationToGroupAsync(string groupId, string alertContentJson, string customDataJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_ScheduleRawPushNotificationUTCAsync(string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Schedules raw notifications based on user local time.
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_ScheduleRawPushNotificationMinutesAsync(string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a raw push notification to a target user.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendRawPushNotificationAsync(string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a raw push notification to a target list of users.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendRawPushNotificationBatchAsync(List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a raw push notification to a target group.
      /// </summary>
      /// <param name="groupId">Target group</param>
      /// <param name="fcmContent">Valid Fcm data content</param>
      /// <param name="iosContent">Valid ios data content</param>
      /// <param name="facebookContent">Facebook template string</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendRawPushNotificationToGroupAsync(string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_ScheduleNormalizedPushNotificationUTCAsync(string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Schedules a normalized push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_ScheduleNormalizedPushNotificationMinutesAsync(string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="startTime">Start time of sending the push notification</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_ScheduleRichPushNotificationUTCAsync(string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Schedules a rich push notification to a user
      /// </summary>
      /// <param name="profileId">The profileId of the user to receive the notification</param>
      /// <param name="notificationTemplateId">Body and title of alert</param>
      /// <param name="substitutionsJson">Optional custom data</param>
      /// <param name="minutesFromNow">Minutes from now to send the push notification</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_ScheduleRichPushNotificationMinutesAsync(string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a notification to a user consisting of alert content and custom data.
      /// </summary>
      /// <param name="toProfileId">The profileId of the user to receive the notification</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendNormalizedPushNotificationAsync(string toProfileId, string alertContentJson, string customDataJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Sends a notification to multiple users consisting of alert content and custom data.
      /// </summary>
      /// <param name="profileIds">Collection of profile IDs to send the notification to</param>
      /// <param name="alertContentJson">Body and title of alert</param>
      /// <param name="customDataJson">Optional custom data</param>
      /// <param name="clientIndex"></param>
      Task<string> PushNotification_SendNormalizedPushNotificationBatchAsync(List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Executes a script on the server.
      /// </summary>
      /// <param name="scriptName">The name of the script to be run</param>
      /// <param name="jsonScriptData">Data to be sent to the script in json format</param>
      /// <param name="clientIndex"></param>
      Task<string> Script_RunScriptAsync(string scriptName, string jsonScriptData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="startDateInUTC">The start date as a DateTime object</param>
      /// <param name="clientIndex"></param>
      Task<string> Script_ScheduleRunScriptUTCAsync(string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Allows cloud script executions to be scheduled
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="minutesFromNow">Number of minutes from now to run script</param>
      /// <param name="clientIndex"></param>
      Task<string> Script_ScheduleRunScriptMinutesAsync(string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Run a cloud script in a parent app
      /// </summary>
      /// <param name="scriptName">Name of script</param>
      /// <param name="jsonScriptData">JSON bundle to pass to script</param>
      /// <param name="parentLevel">The level name of the parent to run the script from</param>
      /// <param name="clientIndex"></param>
      Task<string> Script_RunParentScriptAsync(string scriptName, string jsonScriptData, string parentLevel, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Cancels a scheduled cloud code script
      /// </summary>
      /// <param name="jobId">ID of script job to cancel</param>
      /// <param name="clientIndex"></param>
      Task<string> Script_CancelScheduledScriptAsync(string jobId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Runs a script from the context of a peer
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      Task<string> Script_RunPeerScriptAsync(string scriptName, string jsonScriptData, string peer, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Runs a script asynchronously from the context of a peer
      /// This operation does not wait for the script to complete before returning
      /// </summary>
      /// <param name="scriptName">The name of the script to run</param>
      /// <param name="jsonScriptData">JSON data to pass into the script</param>
      /// <param name="peer">Identifies the peer</param>
      /// <param name="clientIndex"></param>
      Task<string> Script_RunPeerScriptAsynchAsync(string scriptName, string jsonScriptData, string peer, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns the social leaderboard. A player's social leaderboard is
      /// comprised of players who are recognized as being your friend.
      /// For now, this applies solely to Facebook connected players who are
      /// friends with the logged in player (who also must be Facebook connected).
      /// In the future this will expand to other identification means (such as
      /// Game Centre, Google circles etc).
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score. The currently logged in player will also
      /// be returned in the social leaderboard.
      /// 
      /// Note: If no friends have played the game, the bestScore, createdAt, updatedAt
      /// will contain NULL.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetSocialLeaderboardAsync(string leaderboardId, bool replaceName, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Reads multiple social leaderboards.
      /// </summary>
      /// <param name="leaderboardIds">Array of leaderboard id strings</param>
      /// <param name="leaderboardResultCount">Maximum count of entries to return for each leaderboard.</param>
      /// <param name="replaceName">If true, the currently logged in player's name will be replacedby the string "You".</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetMultiSocialLeaderboardAsync(List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns a page of global leaderboard results.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// 
      /// Note: This method allows the client to retrieve pages from within the global leaderboard list
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGlobalLeaderboardPageAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns a page of global leaderboard results. By using a non-current version id,
      /// the user can retrieve a historical leaderboard. See GetGlobalLeaderboardVersions method
      /// to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="startIndex">The index at which to start the page.</param>
      /// <param name="endIndex">The index at which to end the page.</param>
      /// <param name="versionId">The historical version to retrieve.</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGlobalLeaderboardPageByVersionAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// 
      /// Leaderboards entries contain the player's score and optionally, some user-defined
      /// data associated with the score.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGlobalLeaderboardViewAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns a view of global leaderboard results that centers on the current player.
      /// By using a non-current version id, the user can retrieve a historical leaderboard.
      /// See GetGlobalLeaderboardVersions method to retrieve the version id.
      /// </summary>
      /// <param name="leaderboardId">The id of the leaderboard to retrieve.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="versionId">The historial version to retrieve. Use -1 for current leaderboard.</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGlobalLeaderboardViewByVersionAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets the global leaderboard versions.
      /// </summary>
      /// <param name="leaderboardId">In_leaderboard identifier.</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGlobalLeaderboardVersionsAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve the social leaderboard for a group.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to read</param>
      /// <param name="groupId">The group ID</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGroupSocialLeaderboardAsync(string leaderboardId, string groupId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// 
      /// Note that the behaviour of posting a score can be modified in
      /// the brainCloud portal. By default, the server will only keep
      /// the player's best score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_PostScoreToLeaderboardAsync(string leaderboardId, long score, string jsonData, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Removes a player's score from the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_RemovePlayerScoreAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Post the players score to the given social leaderboard.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationType">Type of rotation</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_PostScoreToDynamicLeaderboardAsync(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Post the players score to the given social leaderboard with a rotation type of DAYS.
      /// Pass leaderboard config data to dynamically create if necessary.
      /// You can optionally send a user-defined json string of data
      /// with the posted score. This string could include information
      /// relevant to the posted score.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard to post to</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData"></param>
      /// <param name="leaderboardType">leaderboard type</param>
      /// <param name="rotationReset">Date to reset the leaderboard UTC</param>
      /// <param name="retainedCount">How many rotations to keep</param>
      /// <param name="numDaysToRotate">How many days between each rotation</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_PostScoreToDynamicLeaderboardDaysAsync(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve the social leaderboard for a list of players.
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="profileIds">The IDs of the players</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetPlayersSocialLeaderboardAsync(string leaderboardId, List<string> profileIds, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Retrieve a list of all leaderboards
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_ListLeaderboardsAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGlobalLeaderboardEntryCountAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets the number of entries in a global leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets a player's score from a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The ID of the leaderboard</param>
      /// <param name="versionId">The version of the leaderboard. Use -1 for current.</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetPlayerScoreAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Gets a player's score from multiple leaderboards
      /// </summary>
      /// <param name="leaderboardIds">A collection of leaderboardIds to retrieve scores from</param>
      /// <param name="clientIndex"></param>
      Task<string> SocialLeaderboard_GetPlayerScoresFromLeaderboardsAsync(List<string> leaderboardIds, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Method returns the server time in UTC. This is in UNIX millis time format.
      /// For instance 1396378241893 represents 2014-04-01 2:50:41.893 in GMT-4.
      /// </summary>
      /// <param name="clientIndex"></param>
      Task<string> Time_ReadServerTimeAsync(int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Processes any outstanding rewards for the given player
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament to claim rewards for.Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_ClaimTournamentRewardAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Get tournament status associated with a leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_GetTournamentStatusAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Join the specified tournament.
      /// Any entry fees will be automatically collected.
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="tournamentCode">Tournament to join</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_JoinTournamentAsync(string leaderboardId, string tournamentCode, long initialScore, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Removes player's score from tournament leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_LeaveTournamentAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Post the users score to the leaderboard
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_PostTournamentScoreAsync(string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Post the users score to the leaderboard and returns the results
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="score">The score to post</param>
      /// <param name="jsonData">Optional data attached to the leaderboard entry</param>
      /// <param name="roundStartedTime">Time the user started the match resulting in the scorebeing posted.</param>
      /// <param name="sort">Sort key Sort order of page.</param>
      /// <param name="beforeCount">The count of number of players before the current player to include.</param>
      /// <param name="afterCount">The count of number of players after the current player to include.</param>
      /// <param name="initialScore">The initial score for players first joining a tournamentUsually 0, unless leaderboard is LOW_VALUE</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_PostTournamentScoreWithResultsAsync(string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the user's expected reward based on the current scores
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_ViewCurrentRewardAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken);

      /// <summary>
      /// Returns the user's reward from a finished tournament
      /// </summary>
      /// <param name="leaderboardId">The leaderboard for the tournament</param>
      /// <param name="versionId">Version of the tournament. Use -1 for the latest version.</param>
      /// <param name="clientIndex"></param>
      Task<string> Tournament_ViewRewardAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken);

      Task<string> Patch_GetGameManifestAsync(string gameId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ShareVideoAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ShareScreenshotAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ShareAchievementAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ShareAppAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ShareChannelAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ShareLinkAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ShareGameGuideAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ReadSocialFeedAsync(int skip, int limit, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ReadFilteredSocialFeedAsync(int skip, int limit, List<string> playerIds, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ReadFriendsSocialFeedAsync(int skip, int limit, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_PostCommentAsync(int timestamp, string parentId, string content, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_PostCommentReplyAsync(int timestamp, string parentId, string content, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ReadCommentsAsync(int skip, int limit, string parentId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_ReadCommentRepliesAsync(int skip, int limit, string parentId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_LikeCommentAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_LikeActivityAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_UnlikeCommentAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_UnlikeActivityAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_SetFeedVisibilityAsync(string visibility, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_BlockPlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_HidePlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_UnblockPlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken);

      Task<string> SocialFeed_UnhidePlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken);

      Task<string> Telemetry_StartTelemetrySessionAsync(int timestamp, int clientIndex, CancellationToken cancellationToken);

      Task<string> Telemetry_EndTelemetrySessionAsync(string telemetrySessionId, int timestamp, int clientIndex, CancellationToken cancellationToken);

      Task<string> Telemetry_LogTelemetryEventAsync(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex, CancellationToken cancellationToken);

      Task<string> Telemetry_StartTelemetryEventAsync(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex, CancellationToken cancellationToken);

      Task<string> Telemetry_EndTelemetryEventAsync(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex, CancellationToken cancellationToken);

      Task<string> File_DownloadFileAsync(string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex, CancellationToken cancellationToken);

      Task<string> File_GetDownloadInfoAsync(string cloudPath, string cloudFilename, int clientIndex, CancellationToken cancellationToken);

      Task<string> File_CancelDownloadAsync(string cloudPath, string cloudFilename, int clientIndex, CancellationToken cancellationToken);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async Task<string> AsyncMatch_CreateMatchAsync(string jsonOpponentIds, string pushNotificationMessage, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_CreateMatchAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_CreateMatchArgs();
        args.JsonOpponentIds = jsonOpponentIds;
        args.PushNotificationMessage = pushNotificationMessage;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_CreateMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_CreateMatchAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_CreateMatchWithInitialTurnAsync(string jsonOpponentIds, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_CreateMatchWithInitialTurnAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_CreateMatchWithInitialTurnArgs();
        args.JsonOpponentIds = jsonOpponentIds;
        args.JsonMatchState = jsonMatchState;
        args.PushNotificationMessage = pushNotificationMessage;
        args.NextPlayer = nextPlayer;
        args.JsonSummary = jsonSummary;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_CreateMatchWithInitialTurnResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_CreateMatchWithInitialTurnAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_SubmitTurnAsync(string ownerId, string matchId, long version, string jsonMatchState, string pushNotificationMessage, string nextPlayer, string jsonSummary, string jsonStatistics, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_SubmitTurnAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_SubmitTurnArgs();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.Version = version;
        args.JsonMatchState = jsonMatchState;
        args.PushNotificationMessage = pushNotificationMessage;
        args.NextPlayer = nextPlayer;
        args.JsonSummary = jsonSummary;
        args.JsonStatistics = jsonStatistics;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_SubmitTurnResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_SubmitTurnAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_UpdateMatchSummaryDataAsync(string ownerId, string matchId, long version, string jsonSummary, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_UpdateMatchSummaryDataAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_UpdateMatchSummaryDataArgs();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.Version = version;
        args.JsonSummary = jsonSummary;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_UpdateMatchSummaryDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_UpdateMatchSummaryDataAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_CompleteMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_CompleteMatchAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_CompleteMatchArgs();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_CompleteMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_CompleteMatchAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_ReadMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_ReadMatchAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_ReadMatchArgs();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_ReadMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_ReadMatchAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_ReadMatchHistoryAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_ReadMatchHistoryAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_ReadMatchHistoryArgs();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_ReadMatchHistoryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_ReadMatchHistoryAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_FindMatchesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_FindMatchesAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_FindMatchesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_FindMatchesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_FindMatchesAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_FindCompleteMatchesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_FindCompleteMatchesAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_FindCompleteMatchesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_FindCompleteMatchesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_FindCompleteMatchesAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_AbandonMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_AbandonMatchAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_AbandonMatchArgs();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_AbandonMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_AbandonMatchAsync failed: unknown result");
      }

      public async Task<string> AsyncMatch_DeleteMatchAsync(string ownerId, string matchId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AsyncMatch_DeleteMatchAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new AsyncMatch_DeleteMatchArgs();
        args.OwnerId = ownerId;
        args.MatchId = matchId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new AsyncMatch_DeleteMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AsyncMatch_DeleteMatchAsync failed: unknown result");
      }

      public async Task<string> Authentication_GenerateAnonymousIdAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_GenerateAnonymousId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_GenerateAnonymousIdArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_GenerateAnonymousIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_GenerateAnonymousId failed: unknown result");
      }

      public async Task Authentication_InitializeAsync(string profileId, string anonymousId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_Initialize", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_InitializeArgs();
        args.ProfileId = profileId;
        args.AnonymousId = anonymousId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_InitializeResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Authentication_ClearSavedProfileIDAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_ClearSavedProfileID", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_ClearSavedProfileIDArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_ClearSavedProfileIDResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<string> Authentication_AuthenticateAnonymousAsync(bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateAnonymous", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_AuthenticateAnonymousArgs();
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_AuthenticateAnonymousResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateAnonymous failed: unknown result");
      }

      public async Task<string> Authentication_AuthenticateEmailPasswordAsync(string email, string password, bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateEmailPassword", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_AuthenticateEmailPasswordArgs();
        args.Email = email;
        args.Password = password;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_AuthenticateEmailPasswordResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateEmailPassword failed: unknown result");
      }

      public async Task<string> Authentication_AuthenticateUniversalAsync(string userId, string password, bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateUniversal", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_AuthenticateUniversalArgs();
        args.UserId = userId;
        args.Password = password;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_AuthenticateUniversalResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateUniversal failed: unknown result");
      }

      public async Task<string> Authentication_AuthenticateExternalAsync(string userId, string token, string externalAuthName, bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateExternal", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_AuthenticateExternalArgs();
        args.UserId = userId;
        args.Token = token;
        args.ExternalAuthName = externalAuthName;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_AuthenticateExternalResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_AuthenticateExternal failed: unknown result");
      }

      public async Task<string> Authentication_ResetEmailPasswordAsync(string externalId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Authentication_ResetEmailPassword", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Authentication_ResetEmailPasswordArgs();
        args.ExternalId = externalId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Authentication_ResetEmailPasswordResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authentication_ResetEmailPassword failed: unknown result");
      }

      public async Task Client_EnableLoggingAsync(bool enable, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_EnableLogging", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_EnableLoggingArgs();
        args.Enable = enable;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_EnableLoggingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_ResetCommunicationAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_ResetCommunication", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_ResetCommunicationArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_ResetCommunicationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_SetPacketTimeoutsAsync(List<int> timeouts, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_SetPacketTimeouts", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_SetPacketTimeoutsArgs();
        args.Timeouts = timeouts;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_SetPacketTimeoutsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_SetPacketTimeoutsToDefaultAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_SetPacketTimeoutsToDefault", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_SetPacketTimeoutsToDefaultArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_SetPacketTimeoutsToDefaultResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<List<int>> Client_GetPacketTimeoutsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_GetPacketTimeouts", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_GetPacketTimeoutsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_GetPacketTimeoutsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetPacketTimeouts failed: unknown result");
      }

      public async Task Client_SetAuthenticationPacketTimeoutAsync(int timeoutSecs, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_SetAuthenticationPacketTimeout", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_SetAuthenticationPacketTimeoutArgs();
        args.TimeoutSecs = timeoutSecs;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_SetAuthenticationPacketTimeoutResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<int> Client_GetAuthenticationPacketTimeoutAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_GetAuthenticationPacketTimeout", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_GetAuthenticationPacketTimeoutArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_GetAuthenticationPacketTimeoutResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetAuthenticationPacketTimeout failed: unknown result");
      }

      public async Task<int> Client_GetUploadLowTransferRateTimeoutAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_GetUploadLowTransferRateTimeout", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_GetUploadLowTransferRateTimeoutArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_GetUploadLowTransferRateTimeoutResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetUploadLowTransferRateTimeout failed: unknown result");
      }

      public async Task Client_SetUploadLowTransferRateTimeoutAsync(int timeoutSecs, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_SetUploadLowTransferRateTimeout", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_SetUploadLowTransferRateTimeoutArgs();
        args.TimeoutSecs = timeoutSecs;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_SetUploadLowTransferRateTimeoutResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<int> Client_GetUploadLowTransferRateThresholdAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_GetUploadLowTransferRateThreshold", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_GetUploadLowTransferRateThresholdArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_GetUploadLowTransferRateThresholdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetUploadLowTransferRateThreshold failed: unknown result");
      }

      public async Task Client_SetUploadLowTransferRateThresholdAsync(int bytesPerSec, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_SetUploadLowTransferRateThreshold", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_SetUploadLowTransferRateThresholdArgs();
        args.BytesPerSec = bytesPerSec;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_SetUploadLowTransferRateThresholdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_EnableNetworkErrorMessageCachingAsync(bool enabled, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_EnableNetworkErrorMessageCaching", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_EnableNetworkErrorMessageCachingArgs();
        args.Enabled = enabled;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_EnableNetworkErrorMessageCachingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_RetryCachedMessagesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_RetryCachedMessages", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_RetryCachedMessagesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_RetryCachedMessagesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_FlushCachedMessagesAsync(bool sendApiErrorCallbacks, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_FlushCachedMessages", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_FlushCachedMessagesArgs();
        args.SendApiErrorCallbacks = sendApiErrorCallbacks;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_FlushCachedMessagesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_InsertEndOfMessageBundleMarkerAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_InsertEndOfMessageBundleMarker", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_InsertEndOfMessageBundleMarkerArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_InsertEndOfMessageBundleMarkerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_OverrideCountryCodeAsync(string countryCode, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_OverrideCountryCode", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_OverrideCountryCodeArgs();
        args.CountryCode = countryCode;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_OverrideCountryCodeResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_OverrideLanguageCodeAsync(string languageCode, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_OverrideLanguageCode", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_OverrideLanguageCodeArgs();
        args.LanguageCode = languageCode;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_OverrideLanguageCodeResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<string> Client_GetSessionIdAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_GetSessionId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_GetSessionIdArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_GetSessionIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_GetSessionId failed: unknown result");
      }

      public async Task<bool> Client_IsAuthenticatedAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_IsAuthenticated", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_IsAuthenticatedArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_IsAuthenticatedResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_IsAuthenticated failed: unknown result");
      }

      public async Task<bool> Client_IsInitializedAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_IsInitialized", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_IsInitializedArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_IsInitializedResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Client_IsInitialized failed: unknown result");
      }

      public async Task Client_Initialize_SSSAsync(string secretKey, string appId, string appVersion, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_Initialize_SSS", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_Initialize_SSSArgs();
        args.SecretKey = secretKey;
        args.AppId = appId;
        args.AppVersion = appVersion;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_Initialize_SSSResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_Initialize_SSSSAsync(string serverURL, string secretKey, string appId, string appVersion, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_Initialize_SSSS", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_Initialize_SSSSArgs();
        args.ServerURL = serverURL;
        args.SecretKey = secretKey;
        args.AppId = appId;
        args.AppVersion = appVersion;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_Initialize_SSSSResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_InitializeIdentityAsync(string profileId, string anonymousId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_InitializeIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_InitializeIdentityArgs();
        args.ProfileId = profileId;
        args.AnonymousId = anonymousId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_InitializeIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task Client_UpdateAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Client_Update", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Client_UpdateArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Client_UpdateResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<string> DataStream_CustomPageEventAsync(string eventName, string jsonEventProperties, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DataStream_CustomPageEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new DataStream_CustomPageEventArgs();
        args.EventName = eventName;
        args.JsonEventProperties = jsonEventProperties;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new DataStream_CustomPageEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DataStream_CustomPageEvent failed: unknown result");
      }

      public async Task<string> DataStream_CustomScreenEventAsync(string eventName, string jsonEventProperties, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DataStream_CustomScreenEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new DataStream_CustomScreenEventArgs();
        args.EventName = eventName;
        args.JsonEventProperties = jsonEventProperties;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new DataStream_CustomScreenEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DataStream_CustomScreenEvent failed: unknown result");
      }

      public async Task<string> DataStream_CustomTrackEventAsync(string eventName, string jsonEventProperties, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DataStream_CustomTrackEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new DataStream_CustomTrackEventArgs();
        args.EventName = eventName;
        args.JsonEventProperties = jsonEventProperties;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new DataStream_CustomTrackEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DataStream_CustomTrackEvent failed: unknown result");
      }

      public async Task<string> Entity_CreateEntityAsync(string entityType, string jsonEntityData, string jsonEntityAcl, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_CreateEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_CreateEntityArgs();
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.JsonEntityAcl = jsonEntityAcl;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_CreateEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_CreateEntity failed: unknown result");
      }

      public async Task<string> Entity_GetEntitiesByTypeAsync(string entityType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetEntitiesByType", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetEntitiesByTypeArgs();
        args.EntityType = entityType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetEntitiesByTypeResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetEntitiesByType failed: unknown result");
      }

      public async Task<string> Entity_UpdateEntityAsync(string entityId, string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_UpdateEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_UpdateEntityArgs();
        args.EntityId = entityId;
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.JsonEntityAcl = jsonEntityAcl;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_UpdateEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_UpdateEntity failed: unknown result");
      }

      public async Task<string> Entity_UpdateSharedEntityAsync(string entityId, string targetProfileId, string entityType, string jsonEntityData, int version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_UpdateSharedEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_UpdateSharedEntityArgs();
        args.EntityId = entityId;
        args.TargetProfileId = targetProfileId;
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_UpdateSharedEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_UpdateSharedEntity failed: unknown result");
      }

      public async Task<string> Entity_DeleteEntityAsync(string entityId, int version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_DeleteEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_DeleteEntityArgs();
        args.EntityId = entityId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_DeleteEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_DeleteEntity failed: unknown result");
      }

      public async Task<string> Entity_UpdateSingletonAsync(string entityType, string jsonEntityData, string jsonEntityAcl, int version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_UpdateSingleton", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_UpdateSingletonArgs();
        args.EntityType = entityType;
        args.JsonEntityData = jsonEntityData;
        args.JsonEntityAcl = jsonEntityAcl;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_UpdateSingletonResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_UpdateSingleton failed: unknown result");
      }

      public async Task<string> Entity_DeleteSingletonAsync(string entityType, int version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_DeleteSingleton", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_DeleteSingletonArgs();
        args.EntityType = entityType;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_DeleteSingletonResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_DeleteSingleton failed: unknown result");
      }

      public async Task<string> Entity_GetEntityAsync(string entityId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetEntityArgs();
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetEntity failed: unknown result");
      }

      public async Task<string> Entity_GetSingletonAsync(string entityType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetSingleton", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetSingletonArgs();
        args.EntityType = entityType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetSingletonResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSingleton failed: unknown result");
      }

      public async Task<string> Entity_GetSharedEntityForProfileIdAsync(string profileId, string entityId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntityForProfileId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetSharedEntityForProfileIdArgs();
        args.ProfileId = profileId;
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetSharedEntityForProfileIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSharedEntityForProfileId failed: unknown result");
      }

      public async Task<string> Entity_GetSharedEntitiesForProfileIdAsync(string profileId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntitiesForProfileId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetSharedEntitiesForProfileIdArgs();
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetSharedEntitiesForProfileIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSharedEntitiesForProfileId failed: unknown result");
      }

      public async Task<string> Entity_GetListAsync(string whereJson, string orderByJson, int maxReturn, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetList", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetListArgs();
        args.WhereJson = whereJson;
        args.OrderByJson = orderByJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetListResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetList failed: unknown result");
      }

      public async Task<string> Entity_GetSharedEntitiesListForProfileIdAsync(string profileId, string whereJson, string orderByJson, int maxReturn, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntitiesListForProfileId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetSharedEntitiesListForProfileIdArgs();
        args.ProfileId = profileId;
        args.WhereJson = whereJson;
        args.OrderByJson = orderByJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetSharedEntitiesListForProfileIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetSharedEntitiesListForProfileId failed: unknown result");
      }

      public async Task<string> Entity_GetListCountAsync(string whereJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetListCount", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetListCountArgs();
        args.WhereJson = whereJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetListCountResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetListCount failed: unknown result");
      }

      public async Task<string> Entity_GetPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetPage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetPageArgs();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetPageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetPage failed: unknown result");
      }

      public async Task<string> Entity_GetPageOffsetAsync(string context, int pageOffset, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_GetPageOffset", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_GetPageOffsetArgs();
        args.Context = context;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_GetPageOffsetResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_GetPageOffset failed: unknown result");
      }

      public async Task<string> Entity_IncrementUserEntityDataAsync(string entityId, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_IncrementUserEntityData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_IncrementUserEntityDataArgs();
        args.EntityId = entityId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_IncrementUserEntityDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_IncrementUserEntityData failed: unknown result");
      }

      public async Task<string> Entity_IncrementSharedUserEntityDataAsync(string entityId, string targetProfileId, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Entity_IncrementSharedUserEntityData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Entity_IncrementSharedUserEntityDataArgs();
        args.EntityId = entityId;
        args.TargetProfileId = targetProfileId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Entity_IncrementSharedUserEntityDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Entity_IncrementSharedUserEntityData failed: unknown result");
      }

      public async Task<string> Event_SendEventAsync(string toProfileId, string eventType, string jsonEventData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Event_SendEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Event_SendEventArgs();
        args.ToProfileId = toProfileId;
        args.EventType = eventType;
        args.JsonEventData = jsonEventData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Event_SendEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_SendEvent failed: unknown result");
      }

      public async Task<string> Event_UpdateIncomingEventDataAsync(string evId, string jsonEventData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Event_UpdateIncomingEventData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Event_UpdateIncomingEventDataArgs();
        args.EvId = evId;
        args.JsonEventData = jsonEventData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Event_UpdateIncomingEventDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_UpdateIncomingEventData failed: unknown result");
      }

      public async Task<string> Event_DeleteIncomingEventAsync(string evId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Event_DeleteIncomingEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Event_DeleteIncomingEventArgs();
        args.EvId = evId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Event_DeleteIncomingEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_DeleteIncomingEvent failed: unknown result");
      }

      public async Task<string> Event_GetEventsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Event_GetEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Event_GetEventsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Event_GetEventsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Event_GetEvents failed: unknown result");
      }

      public async Task<string> File_UploadFileAsync(string cloudPath, string cloudFilename, bool shareable, bool replaceIfExists, string localPath, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_UploadFile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_UploadFileArgs();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.Shareable = shareable;
        args.ReplaceIfExists = replaceIfExists;
        args.LocalPath = localPath;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_UploadFileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_UploadFile failed: unknown result");
      }

      public async Task File_CancelUploadAsync(string uploadId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_CancelUpload", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_CancelUploadArgs();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_CancelUploadResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<double> File_GetUploadProgressAsync(string uploadId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_GetUploadProgress", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_GetUploadProgressArgs();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_GetUploadProgressResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetUploadProgress failed: unknown result");
      }

      public async Task<long> File_GetUploadBytesTransferredAsync(string uploadId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_GetUploadBytesTransferred", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_GetUploadBytesTransferredArgs();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_GetUploadBytesTransferredResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetUploadBytesTransferred failed: unknown result");
      }

      public async Task<long> File_GetUploadTotalBytesToTransferAsync(string uploadId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_GetUploadTotalBytesToTransfer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_GetUploadTotalBytesToTransferArgs();
        args.UploadId = uploadId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_GetUploadTotalBytesToTransferResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetUploadTotalBytesToTransfer failed: unknown result");
      }

      public async Task<string> File_ListUserFiles_SFOAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_ListUserFiles_SFO", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_ListUserFiles_SFOArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_ListUserFiles_SFOResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_ListUserFiles_SFO failed: unknown result");
      }

      public async Task<string> File_ListUserFiles_SNSFOAsync(string cloudPath, bool recurse, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_ListUserFiles_SNSFO", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_ListUserFiles_SNSFOArgs();
        args.CloudPath = cloudPath;
        args.Recurse = recurse;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_ListUserFiles_SNSFOResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_ListUserFiles_SNSFO failed: unknown result");
      }

      public async Task<string> File_DeleteUserFileAsync(string cloudPath, string cloudFileName, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_DeleteUserFile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_DeleteUserFileArgs();
        args.CloudPath = cloudPath;
        args.CloudFileName = cloudFileName;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_DeleteUserFileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_DeleteUserFile failed: unknown result");
      }

      public async Task<string> File_DeleteUserFilesAsync(string cloudPath, bool recurse, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_DeleteUserFiles", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_DeleteUserFilesArgs();
        args.CloudPath = cloudPath;
        args.Recurse = recurse;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_DeleteUserFilesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_DeleteUserFiles failed: unknown result");
      }

      public async Task<string> File_GetCDNUrlAsync(string cloudPath, string cloudFilename, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_GetCDNUrl", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_GetCDNUrlArgs();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_GetCDNUrlResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetCDNUrl failed: unknown result");
      }

      public async Task<string> Friend_FindUserByUniversalIdAsync(string searchText, int maxResults, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_FindUserByUniversalId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_FindUserByUniversalIdArgs();
        args.SearchText = searchText;
        args.MaxResults = maxResults;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_FindUserByUniversalIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_FindUserByUniversalId failed: unknown result");
      }

      public async Task<string> Friend_GetProfileInfoForCredentialAsync(string externalId, string authenticationType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_GetProfileInfoForCredential", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_GetProfileInfoForCredentialArgs();
        args.ExternalId = externalId;
        args.AuthenticationType = authenticationType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_GetProfileInfoForCredentialResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetProfileInfoForCredential failed: unknown result");
      }

      public async Task<string> Friend_GetProfileInfoForExternalAuthIdAsync(string externalId, string externalAuthType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_GetProfileInfoForExternalAuthId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_GetProfileInfoForExternalAuthIdArgs();
        args.ExternalId = externalId;
        args.ExternalAuthType = externalAuthType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_GetProfileInfoForExternalAuthIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetProfileInfoForExternalAuthId failed: unknown result");
      }

      public async Task<string> Friend_GetExternalIdForProfileIdAsync(string profileId, string authenticationType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_GetExternalIdForProfileId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_GetExternalIdForProfileIdArgs();
        args.ProfileId = profileId;
        args.AuthenticationType = authenticationType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_GetExternalIdForProfileIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetExternalIdForProfileId failed: unknown result");
      }

      public async Task<string> Friend_ReadFriendEntityAsync(string entityId, string friendId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_ReadFriendEntityArgs();
        args.EntityId = entityId;
        args.FriendId = friendId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_ReadFriendEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ReadFriendEntity failed: unknown result");
      }

      public async Task<string> Friend_ReadFriendsEntitiesAsync(string entityType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendsEntities", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_ReadFriendsEntitiesArgs();
        args.EntityType = entityType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_ReadFriendsEntitiesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ReadFriendsEntities failed: unknown result");
      }

      public async Task<string> Friend_ReadFriendUserStateAsync(string friendId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendUserState", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_ReadFriendUserStateArgs();
        args.FriendId = friendId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_ReadFriendUserStateResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ReadFriendUserState failed: unknown result");
      }

      public async Task<string> Friend_GetSummaryDataForProfileIdAsync(string profileId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_GetSummaryDataForProfileId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_GetSummaryDataForProfileIdArgs();
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_GetSummaryDataForProfileIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetSummaryDataForProfileId failed: unknown result");
      }

      public async Task<string> Friend_FindUsersByExactNameAsync(string searchText, int maxResults, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_FindUsersByExactName", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_FindUsersByExactNameArgs();
        args.SearchText = searchText;
        args.MaxResults = maxResults;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_FindUsersByExactNameResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_FindUsersByExactName failed: unknown result");
      }

      public async Task<string> Friend_FindUsersBySubstrNameAsync(string searchText, int maxResults, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_FindUsersBySubstrName", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_FindUsersBySubstrNameArgs();
        args.SearchText = searchText;
        args.MaxResults = maxResults;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_FindUsersBySubstrNameResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_FindUsersBySubstrName failed: unknown result");
      }

      public async Task<string> Friend_ListFriendsAsync(Ruyi.SDK.BrainCloudApi.FriendPlatform friendPlatform, bool includeSummaryData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_ListFriends", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_ListFriendsArgs();
        args.FriendPlatform = friendPlatform;
        args.IncludeSummaryData = includeSummaryData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_ListFriendsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_ListFriends failed: unknown result");
      }

      public async Task<string> Friend_AddFriendsAsync(List<string> profileIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_AddFriends", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_AddFriendsArgs();
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_AddFriendsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_AddFriends failed: unknown result");
      }

      public async Task<string> Friend_RemoveFriendsAsync(List<string> profileIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_RemoveFriends", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_RemoveFriendsArgs();
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_RemoveFriendsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_RemoveFriends failed: unknown result");
      }

      public async Task<string> Friend_GetUsersOnlineStatusAsync(List<string> profileIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Friend_GetUsersOnlineStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Friend_GetUsersOnlineStatusArgs();
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Friend_GetUsersOnlineStatusResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Friend_GetUsersOnlineStatus failed: unknown result");
      }

      public async Task<string> Gamification_ReadAllGamificationAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadAllGamification", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadAllGamificationArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadAllGamificationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadAllGamification failed: unknown result");
      }

      public async Task<string> Gamification_ReadMilestonesAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadMilestones", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadMilestonesArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadMilestonesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadMilestones failed: unknown result");
      }

      public async Task<string> Gamification_ReadAchievementsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadAchievements", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadAchievementsArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadAchievementsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadAchievements failed: unknown result");
      }

      public async Task<string> Gamification_ReadXpLevelsMetaDataAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadXpLevelsMetaData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadXpLevelsMetaDataArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadXpLevelsMetaDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadXpLevelsMetaData failed: unknown result");
      }

      public async Task<string> Gamification_ReadAchievedAchievementsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadAchievedAchievements", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadAchievedAchievementsArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadAchievedAchievementsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadAchievedAchievements failed: unknown result");
      }

      public async Task<string> Gamification_ReadCompletedMilestonesAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadCompletedMilestones", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadCompletedMilestonesArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadCompletedMilestonesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadCompletedMilestones failed: unknown result");
      }

      public async Task<string> Gamification_ReadInProgressMilestonesAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadInProgressMilestones", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadInProgressMilestonesArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadInProgressMilestonesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadInProgressMilestones failed: unknown result");
      }

      public async Task<string> Gamification_ReadMilestonesByCategoryAsync(string category, bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadMilestonesByCategory", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadMilestonesByCategoryArgs();
        args.Category = category;
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadMilestonesByCategoryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadMilestonesByCategory failed: unknown result");
      }

      public async Task<string> Gamification_AwardAchievementsAsync(List<string> achievementIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_AwardAchievements", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_AwardAchievementsArgs();
        args.AchievementIds = achievementIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_AwardAchievementsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_AwardAchievements failed: unknown result");
      }

      public async Task<string> Gamification_ReadQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuests", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadQuestsArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadQuestsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuests failed: unknown result");
      }

      public async Task<string> Gamification_ReadCompletedQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadCompletedQuests", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadCompletedQuestsArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadCompletedQuestsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadCompletedQuests failed: unknown result");
      }

      public async Task<string> Gamification_ReadInProgressQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadInProgressQuests", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadInProgressQuestsArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadInProgressQuestsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadInProgressQuests failed: unknown result");
      }

      public async Task<string> Gamification_ReadNotStartedQuestsAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadNotStartedQuests", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadNotStartedQuestsArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadNotStartedQuestsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadNotStartedQuests failed: unknown result");
      }

      public async Task<string> Gamification_ReadQuestsWithStatusAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadQuestsWithStatusArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadQuestsWithStatusResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsWithStatus failed: unknown result");
      }

      public async Task<string> Gamification_ReadQuestsWithBasicPercentageAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithBasicPercentage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadQuestsWithBasicPercentageArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadQuestsWithBasicPercentageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsWithBasicPercentage failed: unknown result");
      }

      public async Task<string> Gamification_ReadQuestsWithComplexPercentageAsync(bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithComplexPercentage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadQuestsWithComplexPercentageArgs();
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadQuestsWithComplexPercentageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsWithComplexPercentage failed: unknown result");
      }

      public async Task<string> Gamification_ReadQuestsByCategoryAsync(string category, bool includeMetaData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsByCategory", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ReadQuestsByCategoryArgs();
        args.Category = category;
        args.IncludeMetaData = includeMetaData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ReadQuestsByCategoryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ReadQuestsByCategory failed: unknown result");
      }

      public async Task<string> Gamification_ResetMilestonesAsync(List<string> milestoneIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Gamification_ResetMilestones", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Gamification_ResetMilestonesArgs();
        args.MilestoneIds = milestoneIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Gamification_ResetMilestonesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Gamification_ResetMilestones failed: unknown result");
      }

      public async Task<string> GlobalApp_ReadPropertiesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalApp_ReadProperties", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalApp_ReadPropertiesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalApp_ReadPropertiesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalApp_ReadProperties failed: unknown result");
      }

      public async Task<string> GlobalEntity_CreateEntityAsync(string entityType, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_CreateEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_CreateEntityArgs();
        args.EntityType = entityType;
        args.TimeToLive = timeToLive;
        args.JsonEntityAcl = jsonEntityAcl;
        args.JsonEntityData = jsonEntityData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_CreateEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_CreateEntity failed: unknown result");
      }

      public async Task<string> GlobalEntity_CreateEntityWithIndexedIdAsync(string entityType, string indexedId, long timeToLive, string jsonEntityAcl, string jsonEntityData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_CreateEntityWithIndexedId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_CreateEntityWithIndexedIdArgs();
        args.EntityType = entityType;
        args.IndexedId = indexedId;
        args.TimeToLive = timeToLive;
        args.JsonEntityAcl = jsonEntityAcl;
        args.JsonEntityData = jsonEntityData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_CreateEntityWithIndexedIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_CreateEntityWithIndexedId failed: unknown result");
      }

      public async Task<string> GlobalEntity_UpdateEntityAsync(string entityId, int version, string jsonEntityData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_UpdateEntityArgs();
        args.EntityId = entityId;
        args.Version = version;
        args.JsonEntityData = jsonEntityData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_UpdateEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntity failed: unknown result");
      }

      public async Task<string> GlobalEntity_UpdateEntityAclAsync(string entityId, int version, string jsonEntityAcl, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityAcl", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_UpdateEntityAclArgs();
        args.EntityId = entityId;
        args.Version = version;
        args.JsonEntityAcl = jsonEntityAcl;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_UpdateEntityAclResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntityAcl failed: unknown result");
      }

      public async Task<string> GlobalEntity_UpdateEntityTimeToLiveAsync(string entityId, int version, long timeToLive, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityTimeToLive", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_UpdateEntityTimeToLiveArgs();
        args.EntityId = entityId;
        args.Version = version;
        args.TimeToLive = timeToLive;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_UpdateEntityTimeToLiveResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntityTimeToLive failed: unknown result");
      }

      public async Task<string> GlobalEntity_DeleteEntityAsync(string entityId, int version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_DeleteEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_DeleteEntityArgs();
        args.EntityId = entityId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_DeleteEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_DeleteEntity failed: unknown result");
      }

      public async Task<string> GlobalEntity_ReadEntityAsync(string entityId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_ReadEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_ReadEntityArgs();
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_ReadEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_ReadEntity failed: unknown result");
      }

      public async Task<string> GlobalEntity_GetListAsync(string whereJson, string orderByJson, int maxReturn, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetList", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_GetListArgs();
        args.WhereJson = whereJson;
        args.OrderByJson = orderByJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_GetListResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetList failed: unknown result");
      }

      public async Task<string> GlobalEntity_GetListByIndexedIdAsync(string entityIndexedId, int maxReturn, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetListByIndexedId", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_GetListByIndexedIdArgs();
        args.EntityIndexedId = entityIndexedId;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_GetListByIndexedIdResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetListByIndexedId failed: unknown result");
      }

      public async Task<string> GlobalEntity_GetListCountAsync(string whereJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetListCount", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_GetListCountArgs();
        args.WhereJson = whereJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_GetListCountResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetListCount failed: unknown result");
      }

      public async Task<string> GlobalEntity_GetPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetPage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_GetPageArgs();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_GetPageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetPage failed: unknown result");
      }

      public async Task<string> GlobalEntity_GetPageOffsetAsync(string context, int pageOffset, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetPageOffset", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_GetPageOffsetArgs();
        args.Context = context;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_GetPageOffsetResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetPageOffset failed: unknown result");
      }

      public async Task<string> GlobalEntity_IncrementGlobalEntityDataAsync(string entityId, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_IncrementGlobalEntityData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_IncrementGlobalEntityDataArgs();
        args.EntityId = entityId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_IncrementGlobalEntityDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_IncrementGlobalEntityData failed: unknown result");
      }

      public async Task<string> GlobalEntity_GetRandomEntitiesMatchingAsync(string whereJson, int maxReturn, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetRandomEntitiesMatching", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_GetRandomEntitiesMatchingArgs();
        args.WhereJson = whereJson;
        args.MaxReturn = maxReturn;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_GetRandomEntitiesMatchingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_GetRandomEntitiesMatching failed: unknown result");
      }

      public async Task<string> GlobalEntity_UpdateEntityOwnerAndAclAsync(string entityId, long version, string ownerId, string acl, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityOwnerAndAcl", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_UpdateEntityOwnerAndAclArgs();
        args.EntityId = entityId;
        args.Version = version;
        args.OwnerId = ownerId;
        args.Acl = acl;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_UpdateEntityOwnerAndAclResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_UpdateEntityOwnerAndAcl failed: unknown result");
      }

      public async Task<string> GlobalEntity_MakeSystemEntityAsync(string entityId, long version, string acl, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalEntity_MakeSystemEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalEntity_MakeSystemEntityArgs();
        args.EntityId = entityId;
        args.Version = version;
        args.Acl = acl;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalEntity_MakeSystemEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalEntity_MakeSystemEntity failed: unknown result");
      }

      public async Task<string> GlobalStatistics_ReadAllGlobalStatsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadAllGlobalStats", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalStatistics_ReadAllGlobalStatsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalStatistics_ReadAllGlobalStatsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ReadAllGlobalStats failed: unknown result");
      }

      public async Task<string> GlobalStatistics_ReadGlobalStatsSubsetAsync(List<string> globalStats, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadGlobalStatsSubset", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalStatistics_ReadGlobalStatsSubsetArgs();
        args.GlobalStats = globalStats;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalStatistics_ReadGlobalStatsSubsetResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ReadGlobalStatsSubset failed: unknown result");
      }

      public async Task<string> GlobalStatistics_ReadGlobalStatsForCategoryAsync(string category, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadGlobalStatsForCategory", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalStatistics_ReadGlobalStatsForCategoryArgs();
        args.Category = category;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalStatistics_ReadGlobalStatsForCategoryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ReadGlobalStatsForCategory failed: unknown result");
      }

      public async Task<string> GlobalStatistics_IncrementGlobalStatsAsync(string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalStatistics_IncrementGlobalStats", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalStatistics_IncrementGlobalStatsArgs();
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalStatistics_IncrementGlobalStatsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_IncrementGlobalStats failed: unknown result");
      }

      public async Task<string> GlobalStatistics_ProcessStatisticsAsync(Dictionary<string, string> statisticsData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ProcessStatistics", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GlobalStatistics_ProcessStatisticsArgs();
        args.StatisticsData = statisticsData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GlobalStatistics_ProcessStatisticsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GlobalStatistics_ProcessStatistics failed: unknown result");
      }

      public async Task<string> Group_AcceptGroupInvitationAsync(string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_AcceptGroupInvitation", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_AcceptGroupInvitationArgs();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_AcceptGroupInvitationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_AcceptGroupInvitation failed: unknown result");
      }

      public async Task<string> Group_AddGroupMemberAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_AddGroupMember", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_AddGroupMemberArgs();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_AddGroupMemberResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_AddGroupMember failed: unknown result");
      }

      public async Task<string> Group_ApproveGroupJoinRequestAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ApproveGroupJoinRequest", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ApproveGroupJoinRequestArgs();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ApproveGroupJoinRequestResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ApproveGroupJoinRequest failed: unknown result");
      }

      public async Task<string> Group_AutoJoinGroupAsync(string groupType, Ruyi.SDK.BrainCloudApi.AutoJoinStrategy autoJoinStrategy, string dataQueryJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_AutoJoinGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_AutoJoinGroupArgs();
        args.GroupType = groupType;
        args.AutoJoinStrategy = autoJoinStrategy;
        args.DataQueryJson = dataQueryJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_AutoJoinGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_AutoJoinGroup failed: unknown result");
      }

      public async Task<string> Group_CancelGroupInvitationAsync(string groupId, string profileId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_CancelGroupInvitation", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_CancelGroupInvitationArgs();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_CancelGroupInvitationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_CancelGroupInvitation failed: unknown result");
      }

      public async Task<string> Group_CreateGroupAsync(string name, string groupType, bool isOpenGroup, string acl, string jsonData, string jsonOwnerAttributes, string jsonDefaultMemberAttributes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_CreateGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_CreateGroupArgs();
        args.Name = name;
        args.GroupType = groupType;
        args.IsOpenGroup = isOpenGroup;
        args.Acl = acl;
        args.JsonData = jsonData;
        args.JsonOwnerAttributes = jsonOwnerAttributes;
        args.JsonDefaultMemberAttributes = jsonDefaultMemberAttributes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_CreateGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_CreateGroup failed: unknown result");
      }

      public async Task<string> Group_CreateGroupEntityAsync(string groupId, string entityType, bool isOwnedByGroupMember, string acl, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_CreateGroupEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_CreateGroupEntityArgs();
        args.GroupId = groupId;
        args.EntityType = entityType;
        args.IsOwnedByGroupMember = isOwnedByGroupMember;
        args.Acl = acl;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_CreateGroupEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_CreateGroupEntity failed: unknown result");
      }

      public async Task<string> Group_DeleteGroupAsync(string groupId, long version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_DeleteGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_DeleteGroupArgs();
        args.GroupId = groupId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_DeleteGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_DeleteGroup failed: unknown result");
      }

      public async Task<string> Group_DeleteGroupEntityAsync(string groupId, string entityId, long version, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_DeleteGroupEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_DeleteGroupEntityArgs();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.Version = version;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_DeleteGroupEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_DeleteGroupEntity failed: unknown result");
      }

      public async Task<string> Group_GetMyGroupsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_GetMyGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_GetMyGroupsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_GetMyGroupsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_GetMyGroups failed: unknown result");
      }

      public async Task<string> Group_IncrementGroupDataAsync(string groupId, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_IncrementGroupData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_IncrementGroupDataArgs();
        args.GroupId = groupId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_IncrementGroupDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_IncrementGroupData failed: unknown result");
      }

      public async Task<string> Group_IncrementGroupEntityDataAsync(string groupId, string entityId, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_IncrementGroupEntityData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_IncrementGroupEntityDataArgs();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_IncrementGroupEntityDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_IncrementGroupEntityData failed: unknown result");
      }

      public async Task<string> Group_InviteGroupMemberAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_InviteGroupMember", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_InviteGroupMemberArgs();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_InviteGroupMemberResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_InviteGroupMember failed: unknown result");
      }

      public async Task<string> Group_JoinGroupAsync(string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_JoinGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_JoinGroupArgs();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_JoinGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_JoinGroup failed: unknown result");
      }

      public async Task<string> Group_LeaveGroupAsync(string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_LeaveGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_LeaveGroupArgs();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_LeaveGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_LeaveGroup failed: unknown result");
      }

      public async Task<string> Group_ListGroupsPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ListGroupsPage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ListGroupsPageArgs();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ListGroupsPageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ListGroupsPage failed: unknown result");
      }

      public async Task<string> Group_ListGroupsPageByOffsetAsync(string context, int pageOffset, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ListGroupsPageByOffset", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ListGroupsPageByOffsetArgs();
        args.Context = context;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ListGroupsPageByOffsetResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ListGroupsPageByOffset failed: unknown result");
      }

      public async Task<string> Group_ListGroupsWithMemberAsync(string profileId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ListGroupsWithMember", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ListGroupsWithMemberArgs();
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ListGroupsWithMemberResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ListGroupsWithMember failed: unknown result");
      }

      public async Task<string> Group_ReadGroupAsync(string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ReadGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ReadGroupArgs();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ReadGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroup failed: unknown result");
      }

      public async Task<string> Group_ReadGroupDataAsync(string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ReadGroupData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ReadGroupDataArgs();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ReadGroupDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupData failed: unknown result");
      }

      public async Task<string> Group_ReadGroupEntitiesPageAsync(string jsonContext, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntitiesPage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ReadGroupEntitiesPageArgs();
        args.JsonContext = jsonContext;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ReadGroupEntitiesPageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupEntitiesPage failed: unknown result");
      }

      public async Task<string> Group_ReadGroupEntitiesPageByOffsetAsync(string encodedContext, int pageOffset, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntitiesPageByOffset", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ReadGroupEntitiesPageByOffsetArgs();
        args.EncodedContext = encodedContext;
        args.PageOffset = pageOffset;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ReadGroupEntitiesPageByOffsetResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupEntitiesPageByOffset failed: unknown result");
      }

      public async Task<string> Group_ReadGroupEntityAsync(string groupId, string entityId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ReadGroupEntityArgs();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ReadGroupEntityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupEntity failed: unknown result");
      }

      public async Task<string> Group_ReadGroupMembersAsync(string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_ReadGroupMembers", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_ReadGroupMembersArgs();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_ReadGroupMembersResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_ReadGroupMembers failed: unknown result");
      }

      public async Task<string> Group_RejectGroupInvitationAsync(string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_RejectGroupInvitation", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_RejectGroupInvitationArgs();
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_RejectGroupInvitationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_RejectGroupInvitation failed: unknown result");
      }

      public async Task<string> Group_RejectGroupJoinRequestAsync(string groupId, string profileId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_RejectGroupJoinRequest", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_RejectGroupJoinRequestArgs();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_RejectGroupJoinRequestResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_RejectGroupJoinRequest failed: unknown result");
      }

      public async Task<string> Group_RemoveGroupMemberAsync(string groupId, string profileId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_RemoveGroupMember", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_RemoveGroupMemberArgs();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_RemoveGroupMemberResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_RemoveGroupMember failed: unknown result");
      }

      public async Task<string> Group_UpdateGroupDataAsync(string groupId, long version, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_UpdateGroupDataArgs();
        args.GroupId = groupId;
        args.Version = version;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_UpdateGroupDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupData failed: unknown result");
      }

      public async Task<string> Group_UpdateGroupEntityDataAsync(string groupId, string entityId, long version, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupEntityData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_UpdateGroupEntityDataArgs();
        args.GroupId = groupId;
        args.EntityId = entityId;
        args.Version = version;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_UpdateGroupEntityDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupEntityData failed: unknown result");
      }

      public async Task<string> Group_UpdateGroupMemberAsync(string groupId, string profileId, Ruyi.SDK.BrainCloudApi.Role role, string jsonAttributes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupMember", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_UpdateGroupMemberArgs();
        args.GroupId = groupId;
        args.ProfileId = profileId;
        args.Role = role;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_UpdateGroupMemberResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupMember failed: unknown result");
      }

      public async Task<string> Group_UpdateGroupNameAsync(string groupId, string name, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupName", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Group_UpdateGroupNameArgs();
        args.GroupId = groupId;
        args.Name = name;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Group_UpdateGroupNameResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Group_UpdateGroupName failed: unknown result");
      }

      public async Task<string> Identity_AttachEmailIdentityAsync(string email, string password, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_AttachEmailIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_AttachEmailIdentityArgs();
        args.Email = email;
        args.Password = password;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_AttachEmailIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachEmailIdentity failed: unknown result");
      }

      public async Task<string> Identity_MergeEmailIdentityAsync(string email, string password, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_MergeEmailIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_MergeEmailIdentityArgs();
        args.Email = email;
        args.Password = password;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_MergeEmailIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_MergeEmailIdentity failed: unknown result");
      }

      public async Task<string> Identity_DetachEmailIdentityAsync(string email, bool continueAnon, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_DetachEmailIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_DetachEmailIdentityArgs();
        args.Email = email;
        args.ContinueAnon = continueAnon;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_DetachEmailIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachEmailIdentity failed: unknown result");
      }

      public async Task<string> Identity_AttachUniversalIdentityAsync(string userId, string password, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_AttachUniversalIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_AttachUniversalIdentityArgs();
        args.UserId = userId;
        args.Password = password;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_AttachUniversalIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachUniversalIdentity failed: unknown result");
      }

      public async Task<string> Identity_MergeUniversalIdentityAsync(string userId, string password, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_MergeUniversalIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_MergeUniversalIdentityArgs();
        args.UserId = userId;
        args.Password = password;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_MergeUniversalIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_MergeUniversalIdentity failed: unknown result");
      }

      public async Task<string> Identity_DetachUniversalIdentityAsync(string userId, bool continueAnon, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_DetachUniversalIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_DetachUniversalIdentityArgs();
        args.UserId = userId;
        args.ContinueAnon = continueAnon;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_DetachUniversalIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachUniversalIdentity failed: unknown result");
      }

      public async Task<string> Identity_SwitchToChildProfileAsync(string childProfileId, string childAppId, bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_SwitchToChildProfile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_SwitchToChildProfileArgs();
        args.ChildProfileId = childProfileId;
        args.ChildAppId = childAppId;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_SwitchToChildProfileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_SwitchToChildProfile failed: unknown result");
      }

      public async Task<string> Identity_SwitchToSingletonChildProfileAsync(string childAppId, bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_SwitchToSingletonChildProfile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_SwitchToSingletonChildProfileArgs();
        args.ChildAppId = childAppId;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_SwitchToSingletonChildProfileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_SwitchToSingletonChildProfile failed: unknown result");
      }

      public async Task<string> Identity_AttachParentWithIdentityAsync(string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_AttachParentWithIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_AttachParentWithIdentityArgs();
        args.ExternalId = externalId;
        args.AuthenticationToken = authenticationToken;
        args.AuthenticationType = authenticationType;
        args.ExternalAuthName = externalAuthName;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_AttachParentWithIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachParentWithIdentity failed: unknown result");
      }

      public async Task<string> Identity_SwitchToParentProfileAsync(string parentLevelName, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_SwitchToParentProfile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_SwitchToParentProfileArgs();
        args.ParentLevelName = parentLevelName;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_SwitchToParentProfileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_SwitchToParentProfile failed: unknown result");
      }

      public async Task<string> Identity_DetachParentAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_DetachParent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_DetachParentArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_DetachParentResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachParent failed: unknown result");
      }

      public async Task<string> Identity_GetChildProfilesAsync(bool includeSummaryData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_GetChildProfiles", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_GetChildProfilesArgs();
        args.IncludeSummaryData = includeSummaryData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_GetChildProfilesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetChildProfiles failed: unknown result");
      }

      public async Task<string> Identity_GetIdentitiesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_GetIdentities", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_GetIdentitiesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_GetIdentitiesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetIdentities failed: unknown result");
      }

      public async Task<string> Identity_GetExpiredIdentitiesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_GetExpiredIdentities", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_GetExpiredIdentitiesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_GetExpiredIdentitiesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetExpiredIdentities failed: unknown result");
      }

      public async Task<string> Identity_RefreshIdentityAsync(string externalId, string authenticationToken, string authenticationType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_RefreshIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_RefreshIdentityArgs();
        args.ExternalId = externalId;
        args.AuthenticationToken = authenticationToken;
        args.AuthenticationType = authenticationType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_RefreshIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_RefreshIdentity failed: unknown result");
      }

      public async Task<string> Identity_ChangeEmailIdentityAsync(string oldEmailAddress, string password, string newEmailAddress, bool updateContactEmail, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_ChangeEmailIdentity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_ChangeEmailIdentityArgs();
        args.OldEmailAddress = oldEmailAddress;
        args.Password = password;
        args.NewEmailAddress = newEmailAddress;
        args.UpdateContactEmail = updateContactEmail;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_ChangeEmailIdentityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_ChangeEmailIdentity failed: unknown result");
      }

      public async Task<string> Identity_AttachPeerProfileAsync(string peer, string externalId, string authenticationToken, string authenticationType, string externalAuthName, bool forceCreate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_AttachPeerProfile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_AttachPeerProfileArgs();
        args.Peer = peer;
        args.ExternalId = externalId;
        args.AuthenticationToken = authenticationToken;
        args.AuthenticationType = authenticationType;
        args.ExternalAuthName = externalAuthName;
        args.ForceCreate = forceCreate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_AttachPeerProfileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_AttachPeerProfile failed: unknown result");
      }

      public async Task<string> Identity_DetachPeerAsync(string peer, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_DetachPeer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_DetachPeerArgs();
        args.Peer = peer;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_DetachPeerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_DetachPeer failed: unknown result");
      }

      public async Task<string> Identity_GetPeerProfilesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Identity_GetPeerProfiles", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Identity_GetPeerProfilesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Identity_GetPeerProfilesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Identity_GetPeerProfiles failed: unknown result");
      }

      public async Task<string> Mail_SendBasicEmailAsync(string profileId, string subject, string body, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Mail_SendBasicEmail", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Mail_SendBasicEmailArgs();
        args.ProfileId = profileId;
        args.Subject = subject;
        args.Body = body;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Mail_SendBasicEmailResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Mail_SendBasicEmail failed: unknown result");
      }

      public async Task<string> Mail_SendAdvancedEmailAsync(string profileId, string jsonServiceParams, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Mail_SendAdvancedEmail", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Mail_SendAdvancedEmailArgs();
        args.ProfileId = profileId;
        args.JsonServiceParams = jsonServiceParams;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Mail_SendAdvancedEmailResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Mail_SendAdvancedEmail failed: unknown result");
      }

      public async Task<string> Mail_SendAdvancedEmailByAddressAsync(string emailAddress, string jsonServiceParams, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Mail_SendAdvancedEmailByAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Mail_SendAdvancedEmailByAddressArgs();
        args.EmailAddress = emailAddress;
        args.JsonServiceParams = jsonServiceParams;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Mail_SendAdvancedEmailByAddressResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Mail_SendAdvancedEmailByAddress failed: unknown result");
      }

      public async Task<string> MatchMaking_ReadAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_ReadArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_ReadResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_Read failed: unknown result");
      }

      public async Task<string> MatchMaking_SetPlayerRatingAsync(long playerRating, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_SetPlayerRating", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_SetPlayerRatingArgs();
        args.PlayerRating = playerRating;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_SetPlayerRatingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_SetPlayerRating failed: unknown result");
      }

      public async Task<string> MatchMaking_ResetPlayerRatingAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_ResetPlayerRating", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_ResetPlayerRatingArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_ResetPlayerRatingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_ResetPlayerRating failed: unknown result");
      }

      public async Task<string> MatchMaking_IncrementPlayerRatingAsync(long increment, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_IncrementPlayerRating", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_IncrementPlayerRatingArgs();
        args.Increment = increment;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_IncrementPlayerRatingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_IncrementPlayerRating failed: unknown result");
      }

      public async Task<string> MatchMaking_DecrementPlayerRatingAsync(long decrement, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_DecrementPlayerRating", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_DecrementPlayerRatingArgs();
        args.Decrement = decrement;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_DecrementPlayerRatingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_DecrementPlayerRating failed: unknown result");
      }

      public async Task<string> MatchMaking_TurnShieldOnAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOn", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_TurnShieldOnArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_TurnShieldOnResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_TurnShieldOn failed: unknown result");
      }

      public async Task<string> MatchMaking_TurnShieldOnForAsync(int minutes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOnFor", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_TurnShieldOnForArgs();
        args.Minutes = minutes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_TurnShieldOnForResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_TurnShieldOnFor failed: unknown result");
      }

      public async Task<string> MatchMaking_TurnShieldOffAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOff", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_TurnShieldOffArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_TurnShieldOffResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_TurnShieldOff failed: unknown result");
      }

      public async Task<string> MatchMaking_IncrementShieldOnForAsync(int minutes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_IncrementShieldOnFor", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_IncrementShieldOnForArgs();
        args.Minutes = minutes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_IncrementShieldOnForResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_IncrementShieldOnFor failed: unknown result");
      }

      public async Task<string> MatchMaking_GetShieldExpiryAsync(string playerId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_GetShieldExpiry", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_GetShieldExpiryArgs();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_GetShieldExpiryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_GetShieldExpiry failed: unknown result");
      }

      public async Task<string> MatchMaking_FindPlayersAsync(long rangeDelta, long numMatches, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayers", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_FindPlayersArgs();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_FindPlayersResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayers failed: unknown result");
      }

      public async Task<string> MatchMaking_FindPlayersWithAttributesAsync(long rangeDelta, long numMatches, string jsonAttributes, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersWithAttributes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_FindPlayersWithAttributesArgs();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.JsonAttributes = jsonAttributes;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_FindPlayersWithAttributesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayersWithAttributes failed: unknown result");
      }

      public async Task<string> MatchMaking_FindPlayersUsingFilterAsync(long rangeDelta, long numMatches, string jsonExtraParms, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersUsingFilter", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_FindPlayersUsingFilterArgs();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.JsonExtraParms = jsonExtraParms;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_FindPlayersUsingFilterResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayersUsingFilter failed: unknown result");
      }

      public async Task<string> MatchMaking_FindPlayersWithAttributesUsingFilterAsync(long rangeDelta, long numMatches, string jsonAttributes, string jsonExtraParms, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersWithAttributesUsingFilter", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_FindPlayersWithAttributesUsingFilterArgs();
        args.RangeDelta = rangeDelta;
        args.NumMatches = numMatches;
        args.JsonAttributes = jsonAttributes;
        args.JsonExtraParms = jsonExtraParms;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_FindPlayersWithAttributesUsingFilterResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_FindPlayersWithAttributesUsingFilter failed: unknown result");
      }

      public async Task<string> MatchMaking_EnableMatchMakingAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_EnableMatchMaking", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_EnableMatchMakingArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_EnableMatchMakingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_EnableMatchMaking failed: unknown result");
      }

      public async Task<string> MatchMaking_DisableMatchMakingAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MatchMaking_DisableMatchMaking", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new MatchMaking_DisableMatchMakingArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new MatchMaking_DisableMatchMakingResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MatchMaking_DisableMatchMaking failed: unknown result");
      }

      public async Task<string> OneWayMatch_StartMatchAsync(string otherPlayerId, long rangeDelta, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OneWayMatch_StartMatch", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new OneWayMatch_StartMatchArgs();
        args.OtherPlayerId = otherPlayerId;
        args.RangeDelta = rangeDelta;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new OneWayMatch_StartMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OneWayMatch_StartMatch failed: unknown result");
      }

      public async Task<string> OneWayMatch_CancelMatchAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OneWayMatch_CancelMatch", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new OneWayMatch_CancelMatchArgs();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new OneWayMatch_CancelMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OneWayMatch_CancelMatch failed: unknown result");
      }

      public async Task<string> OneWayMatch_CompleteMatchAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OneWayMatch_CompleteMatch", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new OneWayMatch_CompleteMatchArgs();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new OneWayMatch_CompleteMatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OneWayMatch_CompleteMatch failed: unknown result");
      }

      public async Task<string> PlaybackStream_StartStreamAsync(string targetPlayerId, bool includeSharedData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlaybackStream_StartStream", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlaybackStream_StartStreamArgs();
        args.TargetPlayerId = targetPlayerId;
        args.IncludeSharedData = includeSharedData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlaybackStream_StartStreamResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_StartStream failed: unknown result");
      }

      public async Task<string> PlaybackStream_ReadStreamAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlaybackStream_ReadStream", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlaybackStream_ReadStreamArgs();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlaybackStream_ReadStreamResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_ReadStream failed: unknown result");
      }

      public async Task<string> PlaybackStream_EndStreamAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlaybackStream_EndStream", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlaybackStream_EndStreamArgs();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlaybackStream_EndStreamResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_EndStream failed: unknown result");
      }

      public async Task<string> PlaybackStream_DeleteStreamAsync(string playbackStreamId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlaybackStream_DeleteStream", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlaybackStream_DeleteStreamArgs();
        args.PlaybackStreamId = playbackStreamId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlaybackStream_DeleteStreamResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_DeleteStream failed: unknown result");
      }

      public async Task<string> PlaybackStream_AddEventAsync(string playbackStreamId, string eventData, string summary, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlaybackStream_AddEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlaybackStream_AddEventArgs();
        args.PlaybackStreamId = playbackStreamId;
        args.EventData = eventData;
        args.Summary = summary;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlaybackStream_AddEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_AddEvent failed: unknown result");
      }

      public async Task<string> PlaybackStream_GetRecentStreamsForInitiatingPlayerAsync(string initiatingPlayerId, int maxNumStreams, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlaybackStream_GetRecentStreamsForInitiatingPlayer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlaybackStream_GetRecentStreamsForInitiatingPlayerArgs();
        args.InitiatingPlayerId = initiatingPlayerId;
        args.MaxNumStreams = maxNumStreams;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlaybackStream_GetRecentStreamsForInitiatingPlayerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_GetRecentStreamsForInitiatingPlayer failed: unknown result");
      }

      public async Task<string> PlaybackStream_GetRecentStreamsForTargetPlayerAsync(string targetPlayerId, int maxNumStreams, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlaybackStream_GetRecentStreamsForTargetPlayer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlaybackStream_GetRecentStreamsForTargetPlayerArgs();
        args.TargetPlayerId = targetPlayerId;
        args.MaxNumStreams = maxNumStreams;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlaybackStream_GetRecentStreamsForTargetPlayerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaybackStream_GetRecentStreamsForTargetPlayer failed: unknown result");
      }

      public async Task<string> PlayerState_ReadUserStateAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_ReadUserState", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_ReadUserStateArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_ReadUserStateResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_ReadUserState failed: unknown result");
      }

      public async Task<string> PlayerState_DeleteUserAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_DeleteUser", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_DeleteUserArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_DeleteUserResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_DeleteUser failed: unknown result");
      }

      public async Task<string> PlayerState_ResetUserAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_ResetUser", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_ResetUserArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_ResetUserResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_ResetUser failed: unknown result");
      }

      public async Task<string> PlayerState_LogoutAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_Logout", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_LogoutArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_LogoutResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_Logout failed: unknown result");
      }

      public async Task<string> PlayerState_UpdateUserNameAsync(string userName, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateUserName", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_UpdateUserNameArgs();
        args.UserName = userName;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_UpdateUserNameResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateUserName failed: unknown result");
      }

      public async Task<string> PlayerState_UpdateSummaryFriendDataAsync(string jsonSummaryData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateSummaryFriendData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_UpdateSummaryFriendDataArgs();
        args.JsonSummaryData = jsonSummaryData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_UpdateSummaryFriendDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateSummaryFriendData failed: unknown result");
      }

      public async Task<string> PlayerState_GetAttributesAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_GetAttributes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_GetAttributesArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_GetAttributesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_GetAttributes failed: unknown result");
      }

      public async Task<string> PlayerState_UpdateAttributesAsync(string jsonAttributes, bool wipeExisting, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateAttributes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_UpdateAttributesArgs();
        args.JsonAttributes = jsonAttributes;
        args.WipeExisting = wipeExisting;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_UpdateAttributesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateAttributes failed: unknown result");
      }

      public async Task<string> PlayerState_RemoveAttributesAsync(List<string> attributeNames, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_RemoveAttributes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_RemoveAttributesArgs();
        args.AttributeNames = attributeNames;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_RemoveAttributesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_RemoveAttributes failed: unknown result");
      }

      public async Task<string> PlayerState_UpdateUserPictureUrlAsync(string pictureUrl, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateUserPictureUrl", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_UpdateUserPictureUrlArgs();
        args.PictureUrl = pictureUrl;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_UpdateUserPictureUrlResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateUserPictureUrl failed: unknown result");
      }

      public async Task<string> PlayerState_UpdateContactEmailAsync(string contactEmail, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateContactEmail", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerState_UpdateContactEmailArgs();
        args.ContactEmail = contactEmail;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerState_UpdateContactEmailResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerState_UpdateContactEmail failed: unknown result");
      }

      public async Task<string> PlayerStatistics_ReadAllUserStatsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadAllUserStats", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_ReadAllUserStatsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_ReadAllUserStatsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ReadAllUserStats failed: unknown result");
      }

      public async Task<string> PlayerStatistics_ReadUserStatsSubsetAsync(List<string> playerStats, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadUserStatsSubset", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_ReadUserStatsSubsetArgs();
        args.PlayerStats = playerStats;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_ReadUserStatsSubsetResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ReadUserStatsSubset failed: unknown result");
      }

      public async Task<string> PlayerStatistics_ReadUserStatsForCategoryAsync(string category, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadUserStatsForCategory", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_ReadUserStatsForCategoryArgs();
        args.Category = category;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_ReadUserStatsForCategoryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ReadUserStatsForCategory failed: unknown result");
      }

      public async Task<string> PlayerStatistics_ResetAllUserStatsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ResetAllUserStats", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_ResetAllUserStatsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_ResetAllUserStatsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ResetAllUserStats failed: unknown result");
      }

      public async Task<string> PlayerStatistics_IncrementUserStats_SSFOAsync(string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementUserStats_SSFO", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_IncrementUserStats_SSFOArgs();
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_IncrementUserStats_SSFOResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_IncrementUserStats_SSFO failed: unknown result");
      }

      public async Task<string> PlayerStatistics_IncrementUserStats_DSFOAsync(Dictionary<string, string> dictData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementUserStats_DSFO", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_IncrementUserStats_DSFOArgs();
        args.DictData = dictData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_IncrementUserStats_DSFOResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_IncrementUserStats_DSFO failed: unknown result");
      }

      public async Task<string> PlayerStatistics_ProcessStatisticsAsync(Dictionary<string, string> statisticsData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ProcessStatistics", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_ProcessStatisticsArgs();
        args.StatisticsData = statisticsData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_ProcessStatisticsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_ProcessStatistics failed: unknown result");
      }

      public async Task<string> PlayerStatistics_GetNextExperienceLevelAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_GetNextExperienceLevel", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_GetNextExperienceLevelArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_GetNextExperienceLevelResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_GetNextExperienceLevel failed: unknown result");
      }

      public async Task<string> PlayerStatistics_IncrementExperiencePointsAsync(int xpValue, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementExperiencePoints", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_IncrementExperiencePointsArgs();
        args.XpValue = xpValue;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_IncrementExperiencePointsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_IncrementExperiencePoints failed: unknown result");
      }

      public async Task<string> PlayerStatistics_SetExperiencePointsAsync(int xpValue, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatistics_SetExperiencePoints", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatistics_SetExperiencePointsArgs();
        args.XpValue = xpValue;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatistics_SetExperiencePointsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatistics_SetExperiencePoints failed: unknown result");
      }

      public async Task<string> PlayerStatisticsEvent_TriggerStatsEventAsync(string eventName, int eventMultiplier, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatisticsEvent_TriggerStatsEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatisticsEvent_TriggerStatsEventArgs();
        args.EventName = eventName;
        args.EventMultiplier = eventMultiplier;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatisticsEvent_TriggerStatsEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatisticsEvent_TriggerStatsEvent failed: unknown result");
      }

      public async Task<string> PlayerStatisticsEvent_TriggerStatsEventsAsync(string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PlayerStatisticsEvent_TriggerStatsEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PlayerStatisticsEvent_TriggerStatsEventsArgs();
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PlayerStatisticsEvent_TriggerStatsEventsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerStatisticsEvent_TriggerStatsEvents failed: unknown result");
      }

      public async Task<string> Product_GetCurrencyAsync(string currencyType, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Product_GetCurrency", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Product_GetCurrencyArgs();
        args.CurrencyType = currencyType;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Product_GetCurrencyResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetCurrency failed: unknown result");
      }

      public async Task<string> Product_GetSalesInventoryAsync(string platform, string userCurrency, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Product_GetSalesInventory", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Product_GetSalesInventoryArgs();
        args.Platform = platform;
        args.UserCurrency = userCurrency;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Product_GetSalesInventoryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetSalesInventory failed: unknown result");
      }

      public async Task<string> Product_GetSalesInventoryByCategoryAsync(string platform, string userCurrency, string category, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Product_GetSalesInventoryByCategory", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Product_GetSalesInventoryByCategoryArgs();
        args.Platform = platform;
        args.UserCurrency = userCurrency;
        args.Category = category;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Product_GetSalesInventoryByCategoryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetSalesInventoryByCategory failed: unknown result");
      }

      public async Task<string> Product_VerifyMicrosoftReceiptAsync(string receipt, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Product_VerifyMicrosoftReceipt", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Product_VerifyMicrosoftReceiptArgs();
        args.Receipt = receipt;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Product_VerifyMicrosoftReceiptResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_VerifyMicrosoftReceipt failed: unknown result");
      }

      public async Task<string> Product_GetEligiblePromotionsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Product_GetEligiblePromotions", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Product_GetEligiblePromotionsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Product_GetEligiblePromotionsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_GetEligiblePromotions failed: unknown result");
      }

      public async Task<string> Product_VerifyItunesReceiptAsync(string base64EncReceiptData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Product_VerifyItunesReceipt", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Product_VerifyItunesReceiptArgs();
        args.Base64EncReceiptData = base64EncReceiptData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Product_VerifyItunesReceiptResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Product_VerifyItunesReceipt failed: unknown result");
      }

      public async Task<string> Profanity_ProfanityCheckAsync(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityCheck", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Profanity_ProfanityCheckArgs();
        args.Text = text;
        args.Languages = languages;
        args.FlagEmail = flagEmail;
        args.FlagPhone = flagPhone;
        args.FlagUrls = flagUrls;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Profanity_ProfanityCheckResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Profanity_ProfanityCheck failed: unknown result");
      }

      public async Task<string> Profanity_ProfanityReplaceTextAsync(string text, string replaceSymbol, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityReplaceText", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Profanity_ProfanityReplaceTextArgs();
        args.Text = text;
        args.ReplaceSymbol = replaceSymbol;
        args.Languages = languages;
        args.FlagEmail = flagEmail;
        args.FlagPhone = flagPhone;
        args.FlagUrls = flagUrls;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Profanity_ProfanityReplaceTextResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Profanity_ProfanityReplaceText failed: unknown result");
      }

      public async Task<string> Profanity_ProfanityIdentifyBadWordsAsync(string text, string languages, bool flagEmail, bool flagPhone, bool flagUrls, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityIdentifyBadWords", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Profanity_ProfanityIdentifyBadWordsArgs();
        args.Text = text;
        args.Languages = languages;
        args.FlagEmail = flagEmail;
        args.FlagPhone = flagPhone;
        args.FlagUrls = flagUrls;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Profanity_ProfanityIdentifyBadWordsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Profanity_ProfanityIdentifyBadWords failed: unknown result");
      }

      public async Task<string> PushNotification_DeregisterAllPushNotificationDeviceTokensAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_DeregisterAllPushNotificationDeviceTokens", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_DeregisterAllPushNotificationDeviceTokensArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_DeregisterAllPushNotificationDeviceTokensResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_DeregisterAllPushNotificationDeviceTokens failed: unknown result");
      }

      public async Task<string> PushNotification_DeregisterPushNotificationDeviceTokenAsync(string platform, string token, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_DeregisterPushNotificationDeviceToken", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_DeregisterPushNotificationDeviceTokenArgs();
        args.Platform = platform;
        args.Token = token;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_DeregisterPushNotificationDeviceTokenResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_DeregisterPushNotificationDeviceToken failed: unknown result");
      }

      public async Task<string> PushNotification_RegisterPushNotificationDeviceTokenAsync(string platform, string token, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_RegisterPushNotificationDeviceToken", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_RegisterPushNotificationDeviceTokenArgs();
        args.Platform = platform;
        args.Token = token;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_RegisterPushNotificationDeviceTokenResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_RegisterPushNotificationDeviceToken failed: unknown result");
      }

      public async Task<string> PushNotification_SendSimplePushNotificationAsync(string toProfileId, string message, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendSimplePushNotification", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendSimplePushNotificationArgs();
        args.ToProfileId = toProfileId;
        args.Message = message;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendSimplePushNotificationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendSimplePushNotification failed: unknown result");
      }

      public async Task<string> PushNotification_SendRichPushNotificationAsync(string toProfileId, int notificationTemplateId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendRichPushNotification", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendRichPushNotificationArgs();
        args.ToProfileId = toProfileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendRichPushNotificationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRichPushNotification failed: unknown result");
      }

      public async Task<string> PushNotification_SendRichPushNotificationWithParamsAsync(string toProfileId, int notificationTemplateId, string substitutionJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendRichPushNotificationWithParams", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendRichPushNotificationWithParamsArgs();
        args.ToProfileId = toProfileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionJson = substitutionJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendRichPushNotificationWithParamsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRichPushNotificationWithParams failed: unknown result");
      }

      public async Task<string> PushNotification_SendTemplatedPushNotificationToGroupAsync(string groupId, int notificationTemplateId, string substitutionsJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendTemplatedPushNotificationToGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendTemplatedPushNotificationToGroupArgs();
        args.GroupId = groupId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionsJson = substitutionsJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendTemplatedPushNotificationToGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendTemplatedPushNotificationToGroup failed: unknown result");
      }

      public async Task<string> PushNotification_SendNormalizedPushNotificationToGroupAsync(string groupId, string alertContentJson, string customDataJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotificationToGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendNormalizedPushNotificationToGroupArgs();
        args.GroupId = groupId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendNormalizedPushNotificationToGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendNormalizedPushNotificationToGroup failed: unknown result");
      }

      public async Task<string> PushNotification_ScheduleRawPushNotificationUTCAsync(string profileId, string fcmContent, string iosContent, string facebookContent, int startTime, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRawPushNotificationUTC", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_ScheduleRawPushNotificationUTCArgs();
        args.ProfileId = profileId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.StartTime = startTime;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_ScheduleRawPushNotificationUTCResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRawPushNotificationUTC failed: unknown result");
      }

      public async Task<string> PushNotification_ScheduleRawPushNotificationMinutesAsync(string profileId, string fcmContent, string iosContent, string facebookContent, int minutesFromNow, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRawPushNotificationMinutes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_ScheduleRawPushNotificationMinutesArgs();
        args.ProfileId = profileId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_ScheduleRawPushNotificationMinutesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRawPushNotificationMinutes failed: unknown result");
      }

      public async Task<string> PushNotification_SendRawPushNotificationAsync(string toProfileId, string fcmContent, string iosContent, string facebookContent, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotification", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendRawPushNotificationArgs();
        args.ToProfileId = toProfileId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendRawPushNotificationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRawPushNotification failed: unknown result");
      }

      public async Task<string> PushNotification_SendRawPushNotificationBatchAsync(List<string> profileIds, string fcmContent, string iosContent, string facebookContent, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotificationBatch", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendRawPushNotificationBatchArgs();
        args.ProfileIds = profileIds;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendRawPushNotificationBatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRawPushNotificationBatch failed: unknown result");
      }

      public async Task<string> PushNotification_SendRawPushNotificationToGroupAsync(string groupId, string fcmContent, string iosContent, string facebookContent, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotificationToGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendRawPushNotificationToGroupArgs();
        args.GroupId = groupId;
        args.FcmContent = fcmContent;
        args.IosContent = iosContent;
        args.FacebookContent = facebookContent;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendRawPushNotificationToGroupResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendRawPushNotificationToGroup failed: unknown result");
      }

      public async Task<string> PushNotification_ScheduleNormalizedPushNotificationUTCAsync(string profileId, string alertContentJson, string customDataJson, int startTime, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleNormalizedPushNotificationUTC", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_ScheduleNormalizedPushNotificationUTCArgs();
        args.ProfileId = profileId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.StartTime = startTime;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_ScheduleNormalizedPushNotificationUTCResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleNormalizedPushNotificationUTC failed: unknown result");
      }

      public async Task<string> PushNotification_ScheduleNormalizedPushNotificationMinutesAsync(string profileId, string alertContentJson, string customDataJson, int minutesFromNow, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleNormalizedPushNotificationMinutes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_ScheduleNormalizedPushNotificationMinutesArgs();
        args.ProfileId = profileId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_ScheduleNormalizedPushNotificationMinutesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleNormalizedPushNotificationMinutes failed: unknown result");
      }

      public async Task<string> PushNotification_ScheduleRichPushNotificationUTCAsync(string profileId, int notificationTemplateId, string substitutionsJson, int startTime, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRichPushNotificationUTC", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_ScheduleRichPushNotificationUTCArgs();
        args.ProfileId = profileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionsJson = substitutionsJson;
        args.StartTime = startTime;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_ScheduleRichPushNotificationUTCResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRichPushNotificationUTC failed: unknown result");
      }

      public async Task<string> PushNotification_ScheduleRichPushNotificationMinutesAsync(string profileId, int notificationTemplateId, string substitutionsJson, int minutesFromNow, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRichPushNotificationMinutes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_ScheduleRichPushNotificationMinutesArgs();
        args.ProfileId = profileId;
        args.NotificationTemplateId = notificationTemplateId;
        args.SubstitutionsJson = substitutionsJson;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_ScheduleRichPushNotificationMinutesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_ScheduleRichPushNotificationMinutes failed: unknown result");
      }

      public async Task<string> PushNotification_SendNormalizedPushNotificationAsync(string toProfileId, string alertContentJson, string customDataJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotification", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendNormalizedPushNotificationArgs();
        args.ToProfileId = toProfileId;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendNormalizedPushNotificationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendNormalizedPushNotification failed: unknown result");
      }

      public async Task<string> PushNotification_SendNormalizedPushNotificationBatchAsync(List<string> profileIds, string alertContentJson, string customDataJson, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotificationBatch", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new PushNotification_SendNormalizedPushNotificationBatchArgs();
        args.ProfileIds = profileIds;
        args.AlertContentJson = alertContentJson;
        args.CustomDataJson = customDataJson;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new PushNotification_SendNormalizedPushNotificationBatchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushNotification_SendNormalizedPushNotificationBatch failed: unknown result");
      }

      public async Task<string> Script_RunScriptAsync(string scriptName, string jsonScriptData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Script_RunScript", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Script_RunScriptArgs();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Script_RunScriptResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunScript failed: unknown result");
      }

      public async Task<string> Script_ScheduleRunScriptUTCAsync(string scriptName, string jsonScriptData, long startDateInUTC, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Script_ScheduleRunScriptUTC", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Script_ScheduleRunScriptUTCArgs();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.StartDateInUTC = startDateInUTC;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Script_ScheduleRunScriptUTCResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_ScheduleRunScriptUTC failed: unknown result");
      }

      public async Task<string> Script_ScheduleRunScriptMinutesAsync(string scriptName, string jsonScriptData, long minutesFromNow, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Script_ScheduleRunScriptMinutes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Script_ScheduleRunScriptMinutesArgs();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.MinutesFromNow = minutesFromNow;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Script_ScheduleRunScriptMinutesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_ScheduleRunScriptMinutes failed: unknown result");
      }

      public async Task<string> Script_RunParentScriptAsync(string scriptName, string jsonScriptData, string parentLevel, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Script_RunParentScript", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Script_RunParentScriptArgs();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.ParentLevel = parentLevel;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Script_RunParentScriptResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunParentScript failed: unknown result");
      }

      public async Task<string> Script_CancelScheduledScriptAsync(string jobId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Script_CancelScheduledScript", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Script_CancelScheduledScriptArgs();
        args.JobId = jobId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Script_CancelScheduledScriptResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_CancelScheduledScript failed: unknown result");
      }

      public async Task<string> Script_RunPeerScriptAsync(string scriptName, string jsonScriptData, string peer, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Script_RunPeerScript", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Script_RunPeerScriptArgs();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.Peer = peer;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Script_RunPeerScriptResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunPeerScript failed: unknown result");
      }

      public async Task<string> Script_RunPeerScriptAsynchAsync(string scriptName, string jsonScriptData, string peer, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Script_RunPeerScriptAsynchAsync", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Script_RunPeerScriptAsynchArgs();
        args.ScriptName = scriptName;
        args.JsonScriptData = jsonScriptData;
        args.Peer = peer;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Script_RunPeerScriptAsynchResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Script_RunPeerScriptAsynchAsync failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetSocialLeaderboardAsync(string leaderboardId, bool replaceName, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetSocialLeaderboard", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetSocialLeaderboardArgs();
        args.LeaderboardId = leaderboardId;
        args.ReplaceName = replaceName;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetSocialLeaderboardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetSocialLeaderboard failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetMultiSocialLeaderboardAsync(List<string> leaderboardIds, int leaderboardResultCount, bool replaceName, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetMultiSocialLeaderboard", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetMultiSocialLeaderboardArgs();
        args.LeaderboardIds = leaderboardIds;
        args.LeaderboardResultCount = leaderboardResultCount;
        args.ReplaceName = replaceName;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetMultiSocialLeaderboardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetMultiSocialLeaderboard failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGlobalLeaderboardPageAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGlobalLeaderboardPageArgs();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.StartIndex = startIndex;
        args.EndIndex = endIndex;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGlobalLeaderboardPageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardPage failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGlobalLeaderboardPageByVersionAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int startIndex, int endIndex, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPageByVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGlobalLeaderboardPageByVersionArgs();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.StartIndex = startIndex;
        args.EndIndex = endIndex;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGlobalLeaderboardPageByVersionResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardPageByVersion failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGlobalLeaderboardViewAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardView", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGlobalLeaderboardViewArgs();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.BeforeCount = beforeCount;
        args.AfterCount = afterCount;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGlobalLeaderboardViewResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardView failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGlobalLeaderboardViewByVersionAsync(string leaderboardId, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardViewByVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGlobalLeaderboardViewByVersionArgs();
        args.LeaderboardId = leaderboardId;
        args.Sort = sort;
        args.BeforeCount = beforeCount;
        args.AfterCount = afterCount;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGlobalLeaderboardViewByVersionResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardViewByVersion failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGlobalLeaderboardVersionsAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardVersions", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGlobalLeaderboardVersionsArgs();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGlobalLeaderboardVersionsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardVersions failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGroupSocialLeaderboardAsync(string leaderboardId, string groupId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGroupSocialLeaderboard", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGroupSocialLeaderboardArgs();
        args.LeaderboardId = leaderboardId;
        args.GroupId = groupId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGroupSocialLeaderboardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGroupSocialLeaderboard failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_PostScoreToLeaderboardAsync(string leaderboardId, long score, string jsonData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToLeaderboard", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_PostScoreToLeaderboardArgs();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_PostScoreToLeaderboardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_PostScoreToLeaderboard failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_RemovePlayerScoreAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_RemovePlayerScore", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_RemovePlayerScoreArgs();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_RemovePlayerScoreResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_RemovePlayerScore failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_PostScoreToDynamicLeaderboardAsync(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, Ruyi.SDK.BrainCloudApi.RotationType rotationType, long rotationReset, int retainedCount, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboard", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_PostScoreToDynamicLeaderboardArgs();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.LeaderboardType = leaderboardType;
        args.RotationType = rotationType;
        args.RotationReset = rotationReset;
        args.RetainedCount = retainedCount;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_PostScoreToDynamicLeaderboardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_PostScoreToDynamicLeaderboard failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_PostScoreToDynamicLeaderboardDaysAsync(string leaderboardId, long score, string jsonData, Ruyi.SDK.BrainCloudApi.SocialLeaderboardType leaderboardType, long rotationReset, int retainedCount, int numDaysToRotate, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboardDays", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_PostScoreToDynamicLeaderboardDaysArgs();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.LeaderboardType = leaderboardType;
        args.RotationReset = rotationReset;
        args.RetainedCount = retainedCount;
        args.NumDaysToRotate = numDaysToRotate;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_PostScoreToDynamicLeaderboardDaysResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_PostScoreToDynamicLeaderboardDays failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetPlayersSocialLeaderboardAsync(string leaderboardId, List<string> profileIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayersSocialLeaderboard", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetPlayersSocialLeaderboardArgs();
        args.LeaderboardId = leaderboardId;
        args.ProfileIds = profileIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetPlayersSocialLeaderboardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetPlayersSocialLeaderboard failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_ListLeaderboardsAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_ListLeaderboards", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_ListLeaderboardsArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_ListLeaderboardsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_ListLeaderboards failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGlobalLeaderboardEntryCountAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCount", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGlobalLeaderboardEntryCountArgs();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGlobalLeaderboardEntryCountResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardEntryCount failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionArgs();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetPlayerScoreAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayerScore", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetPlayerScoreArgs();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetPlayerScoreResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetPlayerScore failed: unknown result");
      }

      public async Task<string> SocialLeaderboard_GetPlayerScoresFromLeaderboardsAsync(List<string> leaderboardIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayerScoresFromLeaderboards", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialLeaderboard_GetPlayerScoresFromLeaderboardsArgs();
        args.LeaderboardIds = leaderboardIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialLeaderboard_GetPlayerScoresFromLeaderboardsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialLeaderboard_GetPlayerScoresFromLeaderboards failed: unknown result");
      }

      public async Task<string> Time_ReadServerTimeAsync(int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Time_ReadServerTime", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Time_ReadServerTimeArgs();
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Time_ReadServerTimeResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Time_ReadServerTime failed: unknown result");
      }

      public async Task<string> Tournament_ClaimTournamentRewardAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_ClaimTournamentReward", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_ClaimTournamentRewardArgs();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_ClaimTournamentRewardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_ClaimTournamentReward failed: unknown result");
      }

      public async Task<string> Tournament_GetTournamentStatusAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_GetTournamentStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_GetTournamentStatusArgs();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_GetTournamentStatusResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_GetTournamentStatus failed: unknown result");
      }

      public async Task<string> Tournament_JoinTournamentAsync(string leaderboardId, string tournamentCode, long initialScore, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_JoinTournament", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_JoinTournamentArgs();
        args.LeaderboardId = leaderboardId;
        args.TournamentCode = tournamentCode;
        args.InitialScore = initialScore;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_JoinTournamentResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_JoinTournament failed: unknown result");
      }

      public async Task<string> Tournament_LeaveTournamentAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_LeaveTournament", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_LeaveTournamentArgs();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_LeaveTournamentResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_LeaveTournament failed: unknown result");
      }

      public async Task<string> Tournament_PostTournamentScoreAsync(string leaderboardId, long score, string jsonData, long roundStartedTime, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_PostTournamentScore", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_PostTournamentScoreArgs();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.RoundStartedTime = roundStartedTime;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_PostTournamentScoreResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_PostTournamentScore failed: unknown result");
      }

      public async Task<string> Tournament_PostTournamentScoreWithResultsAsync(string leaderboardId, long score, string jsonData, long roundStartedTime, Ruyi.SDK.BrainCloudApi.SortOrder sort, int beforeCount, int afterCount, long initialScore, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_PostTournamentScoreWithResults", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_PostTournamentScoreWithResultsArgs();
        args.LeaderboardId = leaderboardId;
        args.Score = score;
        args.JsonData = jsonData;
        args.RoundStartedTime = roundStartedTime;
        args.Sort = sort;
        args.BeforeCount = beforeCount;
        args.AfterCount = afterCount;
        args.InitialScore = initialScore;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_PostTournamentScoreWithResultsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_PostTournamentScoreWithResults failed: unknown result");
      }

      public async Task<string> Tournament_ViewCurrentRewardAsync(string leaderboardId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_ViewCurrentReward", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_ViewCurrentRewardArgs();
        args.LeaderboardId = leaderboardId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_ViewCurrentRewardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_ViewCurrentReward failed: unknown result");
      }

      public async Task<string> Tournament_ViewRewardAsync(string leaderboardId, int versionId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Tournament_ViewReward", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Tournament_ViewRewardArgs();
        args.LeaderboardId = leaderboardId;
        args.VersionId = versionId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Tournament_ViewRewardResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tournament_ViewReward failed: unknown result");
      }

      public async Task<string> Patch_GetGameManifestAsync(string gameId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Patch_GetGameManifest", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Patch_GetGameManifestArgs();
        args.GameId = gameId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Patch_GetGameManifestResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Patch_GetGameManifest failed: unknown result");
      }

      public async Task<string> SocialFeed_ShareVideoAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareVideo", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ShareVideoArgs();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ShareVideoResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareVideo failed: unknown result");
      }

      public async Task<string> SocialFeed_ShareScreenshotAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareScreenshot", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ShareScreenshotArgs();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ShareScreenshotResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareScreenshot failed: unknown result");
      }

      public async Task<string> SocialFeed_ShareAchievementAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareAchievement", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ShareAchievementArgs();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ShareAchievementResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareAchievement failed: unknown result");
      }

      public async Task<string> SocialFeed_ShareAppAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareApp", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ShareAppArgs();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ShareAppResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareApp failed: unknown result");
      }

      public async Task<string> SocialFeed_ShareChannelAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareChannel", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ShareChannelArgs();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ShareChannelResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareChannel failed: unknown result");
      }

      public async Task<string> SocialFeed_ShareLinkAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareLink", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ShareLinkArgs();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ShareLinkResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareLink failed: unknown result");
      }

      public async Task<string> SocialFeed_ShareGameGuideAsync(int timestamp, string resource, List<string> tagged, List<string> show, List<string> block, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareGameGuide", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ShareGameGuideArgs();
        args.Timestamp = timestamp;
        args.Resource = resource;
        args.Tagged = tagged;
        args.Show = show;
        args.Block = block;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ShareGameGuideResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ShareGameGuide failed: unknown result");
      }

      public async Task<string> SocialFeed_ReadSocialFeedAsync(int skip, int limit, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadSocialFeed", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ReadSocialFeedArgs();
        args.Skip = skip;
        args.Limit = limit;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ReadSocialFeedResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadSocialFeed failed: unknown result");
      }

      public async Task<string> SocialFeed_ReadFilteredSocialFeedAsync(int skip, int limit, List<string> playerIds, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadFilteredSocialFeed", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ReadFilteredSocialFeedArgs();
        args.Skip = skip;
        args.Limit = limit;
        args.PlayerIds = playerIds;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ReadFilteredSocialFeedResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadFilteredSocialFeed failed: unknown result");
      }

      public async Task<string> SocialFeed_ReadFriendsSocialFeedAsync(int skip, int limit, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadFriendsSocialFeed", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ReadFriendsSocialFeedArgs();
        args.Skip = skip;
        args.Limit = limit;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ReadFriendsSocialFeedResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadFriendsSocialFeed failed: unknown result");
      }

      public async Task<string> SocialFeed_PostCommentAsync(int timestamp, string parentId, string content, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_PostComment", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_PostCommentArgs();
        args.Timestamp = timestamp;
        args.ParentId = parentId;
        args.Content = content;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_PostCommentResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_PostComment failed: unknown result");
      }

      public async Task<string> SocialFeed_PostCommentReplyAsync(int timestamp, string parentId, string content, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_PostCommentReply", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_PostCommentReplyArgs();
        args.Timestamp = timestamp;
        args.ParentId = parentId;
        args.Content = content;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_PostCommentReplyResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_PostCommentReply failed: unknown result");
      }

      public async Task<string> SocialFeed_ReadCommentsAsync(int skip, int limit, string parentId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadComments", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ReadCommentsArgs();
        args.Skip = skip;
        args.Limit = limit;
        args.ParentId = parentId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ReadCommentsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadComments failed: unknown result");
      }

      public async Task<string> SocialFeed_ReadCommentRepliesAsync(int skip, int limit, string parentId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadCommentReplies", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_ReadCommentRepliesArgs();
        args.Skip = skip;
        args.Limit = limit;
        args.ParentId = parentId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_ReadCommentRepliesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_ReadCommentReplies failed: unknown result");
      }

      public async Task<string> SocialFeed_LikeCommentAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_LikeComment", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_LikeCommentArgs();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_LikeCommentResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_LikeComment failed: unknown result");
      }

      public async Task<string> SocialFeed_LikeActivityAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_LikeActivity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_LikeActivityArgs();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_LikeActivityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_LikeActivity failed: unknown result");
      }

      public async Task<string> SocialFeed_UnlikeCommentAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_UnlikeComment", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_UnlikeCommentArgs();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_UnlikeCommentResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnlikeComment failed: unknown result");
      }

      public async Task<string> SocialFeed_UnlikeActivityAsync(string socialFeedId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_UnlikeActivity", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_UnlikeActivityArgs();
        args.SocialFeedId = socialFeedId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_UnlikeActivityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnlikeActivity failed: unknown result");
      }

      public async Task<string> SocialFeed_SetFeedVisibilityAsync(string visibility, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_SetFeedVisibility", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_SetFeedVisibilityArgs();
        args.Visibility = visibility;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_SetFeedVisibilityResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_SetFeedVisibility failed: unknown result");
      }

      public async Task<string> SocialFeed_BlockPlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_BlockPlayer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_BlockPlayerArgs();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_BlockPlayerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_BlockPlayer failed: unknown result");
      }

      public async Task<string> SocialFeed_HidePlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_HidePlayer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_HidePlayerArgs();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_HidePlayerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_HidePlayer failed: unknown result");
      }

      public async Task<string> SocialFeed_UnblockPlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_UnblockPlayer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_UnblockPlayerArgs();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_UnblockPlayerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnblockPlayer failed: unknown result");
      }

      public async Task<string> SocialFeed_UnhidePlayerAsync(string playerId, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SocialFeed_UnhidePlayer", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SocialFeed_UnhidePlayerArgs();
        args.PlayerId = playerId;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SocialFeed_UnhidePlayerResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SocialFeed_UnhidePlayer failed: unknown result");
      }

      public async Task<string> Telemetry_StartTelemetrySessionAsync(int timestamp, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Telemetry_StartTelemetrySession", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Telemetry_StartTelemetrySessionArgs();
        args.Timestamp = timestamp;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Telemetry_StartTelemetrySessionResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_StartTelemetrySession failed: unknown result");
      }

      public async Task<string> Telemetry_EndTelemetrySessionAsync(string telemetrySessionId, int timestamp, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Telemetry_EndTelemetrySession", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Telemetry_EndTelemetrySessionArgs();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Telemetry_EndTelemetrySessionResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_EndTelemetrySession failed: unknown result");
      }

      public async Task<string> Telemetry_LogTelemetryEventAsync(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Telemetry_LogTelemetryEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Telemetry_LogTelemetryEventArgs();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.EventType = eventType;
        args.ParticipantId = participantId;
        args.CustomData = customData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Telemetry_LogTelemetryEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_LogTelemetryEvent failed: unknown result");
      }

      public async Task<string> Telemetry_StartTelemetryEventAsync(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Telemetry_StartTelemetryEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Telemetry_StartTelemetryEventArgs();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.EventType = eventType;
        args.ParticipantId = participantId;
        args.CustomData = customData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Telemetry_StartTelemetryEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_StartTelemetryEvent failed: unknown result");
      }

      public async Task<string> Telemetry_EndTelemetryEventAsync(string telemetrySessionId, int timestamp, string eventType, string participantId, Dictionary<string, string> customData, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Telemetry_EndTelemetryEvent", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new Telemetry_EndTelemetryEventArgs();
        args.TelemetrySessionId = telemetrySessionId;
        args.Timestamp = timestamp;
        args.EventType = eventType;
        args.ParticipantId = participantId;
        args.CustomData = customData;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new Telemetry_EndTelemetryEventResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Telemetry_EndTelemetryEvent failed: unknown result");
      }

      public async Task<string> File_DownloadFileAsync(string cloudPath, string cloudFilename, bool replaceIfExists, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_DownloadFile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_DownloadFileArgs();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ReplaceIfExists = replaceIfExists;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_DownloadFileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_DownloadFile failed: unknown result");
      }

      public async Task<string> File_GetDownloadInfoAsync(string cloudPath, string cloudFilename, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_GetDownloadInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_GetDownloadInfoArgs();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_GetDownloadInfoResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_GetDownloadInfo failed: unknown result");
      }

      public async Task<string> File_CancelDownloadAsync(string cloudPath, string cloudFilename, int clientIndex, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("File_CancelDownload", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new File_CancelDownloadArgs();
        args.CloudPath = cloudPath;
        args.CloudFilename = cloudFilename;
        args.ClientIndex = clientIndex;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new File_CancelDownloadResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "File_CancelDownload failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private IAsync _iAsync;

      public AsyncProcessor(IAsync iAsync)
      {
        if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

        _iAsync = iAsync;
        processMap_["AsyncMatch_CreateMatchAsync"] = AsyncMatch_CreateMatch_ProcessAsync;
        processMap_["AsyncMatch_CreateMatchWithInitialTurnAsync"] = AsyncMatch_CreateMatchWithInitialTurn_ProcessAsync;
        processMap_["AsyncMatch_SubmitTurnAsync"] = AsyncMatch_SubmitTurn_ProcessAsync;
        processMap_["AsyncMatch_UpdateMatchSummaryDataAsync"] = AsyncMatch_UpdateMatchSummaryData_ProcessAsync;
        processMap_["AsyncMatch_CompleteMatchAsync"] = AsyncMatch_CompleteMatch_ProcessAsync;
        processMap_["AsyncMatch_ReadMatchAsync"] = AsyncMatch_ReadMatch_ProcessAsync;
        processMap_["AsyncMatch_ReadMatchHistoryAsync"] = AsyncMatch_ReadMatchHistory_ProcessAsync;
        processMap_["AsyncMatch_FindMatchesAsync"] = AsyncMatch_FindMatches_ProcessAsync;
        processMap_["AsyncMatch_FindCompleteMatchesAsync"] = AsyncMatch_FindCompleteMatches_ProcessAsync;
        processMap_["AsyncMatch_AbandonMatchAsync"] = AsyncMatch_AbandonMatch_ProcessAsync;
        processMap_["AsyncMatch_DeleteMatchAsync"] = AsyncMatch_DeleteMatch_ProcessAsync;
        processMap_["Authentication_GenerateAnonymousId"] = Authentication_GenerateAnonymousId_ProcessAsync;
        processMap_["Authentication_Initialize"] = Authentication_Initialize_ProcessAsync;
        processMap_["Authentication_ClearSavedProfileID"] = Authentication_ClearSavedProfileID_ProcessAsync;
        processMap_["Authentication_AuthenticateAnonymous"] = Authentication_AuthenticateAnonymous_ProcessAsync;
        processMap_["Authentication_AuthenticateEmailPassword"] = Authentication_AuthenticateEmailPassword_ProcessAsync;
        processMap_["Authentication_AuthenticateUniversal"] = Authentication_AuthenticateUniversal_ProcessAsync;
        processMap_["Authentication_AuthenticateExternal"] = Authentication_AuthenticateExternal_ProcessAsync;
        processMap_["Authentication_ResetEmailPassword"] = Authentication_ResetEmailPassword_ProcessAsync;
        processMap_["Client_EnableLogging"] = Client_EnableLogging_ProcessAsync;
        processMap_["Client_ResetCommunication"] = Client_ResetCommunication_ProcessAsync;
        processMap_["Client_SetPacketTimeouts"] = Client_SetPacketTimeouts_ProcessAsync;
        processMap_["Client_SetPacketTimeoutsToDefault"] = Client_SetPacketTimeoutsToDefault_ProcessAsync;
        processMap_["Client_GetPacketTimeouts"] = Client_GetPacketTimeouts_ProcessAsync;
        processMap_["Client_SetAuthenticationPacketTimeout"] = Client_SetAuthenticationPacketTimeout_ProcessAsync;
        processMap_["Client_GetAuthenticationPacketTimeout"] = Client_GetAuthenticationPacketTimeout_ProcessAsync;
        processMap_["Client_GetUploadLowTransferRateTimeout"] = Client_GetUploadLowTransferRateTimeout_ProcessAsync;
        processMap_["Client_SetUploadLowTransferRateTimeout"] = Client_SetUploadLowTransferRateTimeout_ProcessAsync;
        processMap_["Client_GetUploadLowTransferRateThreshold"] = Client_GetUploadLowTransferRateThreshold_ProcessAsync;
        processMap_["Client_SetUploadLowTransferRateThreshold"] = Client_SetUploadLowTransferRateThreshold_ProcessAsync;
        processMap_["Client_EnableNetworkErrorMessageCaching"] = Client_EnableNetworkErrorMessageCaching_ProcessAsync;
        processMap_["Client_RetryCachedMessages"] = Client_RetryCachedMessages_ProcessAsync;
        processMap_["Client_FlushCachedMessages"] = Client_FlushCachedMessages_ProcessAsync;
        processMap_["Client_InsertEndOfMessageBundleMarker"] = Client_InsertEndOfMessageBundleMarker_ProcessAsync;
        processMap_["Client_OverrideCountryCode"] = Client_OverrideCountryCode_ProcessAsync;
        processMap_["Client_OverrideLanguageCode"] = Client_OverrideLanguageCode_ProcessAsync;
        processMap_["Client_GetSessionId"] = Client_GetSessionId_ProcessAsync;
        processMap_["Client_IsAuthenticated"] = Client_IsAuthenticated_ProcessAsync;
        processMap_["Client_IsInitialized"] = Client_IsInitialized_ProcessAsync;
        processMap_["Client_Initialize_SSS"] = Client_Initialize_SSS_ProcessAsync;
        processMap_["Client_Initialize_SSSS"] = Client_Initialize_SSSS_ProcessAsync;
        processMap_["Client_InitializeIdentity"] = Client_InitializeIdentity_ProcessAsync;
        processMap_["Client_Update"] = Client_Update_ProcessAsync;
        processMap_["DataStream_CustomPageEvent"] = DataStream_CustomPageEvent_ProcessAsync;
        processMap_["DataStream_CustomScreenEvent"] = DataStream_CustomScreenEvent_ProcessAsync;
        processMap_["DataStream_CustomTrackEvent"] = DataStream_CustomTrackEvent_ProcessAsync;
        processMap_["Entity_CreateEntity"] = Entity_CreateEntity_ProcessAsync;
        processMap_["Entity_GetEntitiesByType"] = Entity_GetEntitiesByType_ProcessAsync;
        processMap_["Entity_UpdateEntity"] = Entity_UpdateEntity_ProcessAsync;
        processMap_["Entity_UpdateSharedEntity"] = Entity_UpdateSharedEntity_ProcessAsync;
        processMap_["Entity_DeleteEntity"] = Entity_DeleteEntity_ProcessAsync;
        processMap_["Entity_UpdateSingleton"] = Entity_UpdateSingleton_ProcessAsync;
        processMap_["Entity_DeleteSingleton"] = Entity_DeleteSingleton_ProcessAsync;
        processMap_["Entity_GetEntity"] = Entity_GetEntity_ProcessAsync;
        processMap_["Entity_GetSingleton"] = Entity_GetSingleton_ProcessAsync;
        processMap_["Entity_GetSharedEntityForProfileId"] = Entity_GetSharedEntityForProfileId_ProcessAsync;
        processMap_["Entity_GetSharedEntitiesForProfileId"] = Entity_GetSharedEntitiesForProfileId_ProcessAsync;
        processMap_["Entity_GetList"] = Entity_GetList_ProcessAsync;
        processMap_["Entity_GetSharedEntitiesListForProfileId"] = Entity_GetSharedEntitiesListForProfileId_ProcessAsync;
        processMap_["Entity_GetListCount"] = Entity_GetListCount_ProcessAsync;
        processMap_["Entity_GetPage"] = Entity_GetPage_ProcessAsync;
        processMap_["Entity_GetPageOffset"] = Entity_GetPageOffset_ProcessAsync;
        processMap_["Entity_IncrementUserEntityData"] = Entity_IncrementUserEntityData_ProcessAsync;
        processMap_["Entity_IncrementSharedUserEntityData"] = Entity_IncrementSharedUserEntityData_ProcessAsync;
        processMap_["Event_SendEvent"] = Event_SendEvent_ProcessAsync;
        processMap_["Event_UpdateIncomingEventData"] = Event_UpdateIncomingEventData_ProcessAsync;
        processMap_["Event_DeleteIncomingEvent"] = Event_DeleteIncomingEvent_ProcessAsync;
        processMap_["Event_GetEvents"] = Event_GetEvents_ProcessAsync;
        processMap_["File_UploadFile"] = File_UploadFile_ProcessAsync;
        processMap_["File_CancelUpload"] = File_CancelUpload_ProcessAsync;
        processMap_["File_GetUploadProgress"] = File_GetUploadProgress_ProcessAsync;
        processMap_["File_GetUploadBytesTransferred"] = File_GetUploadBytesTransferred_ProcessAsync;
        processMap_["File_GetUploadTotalBytesToTransfer"] = File_GetUploadTotalBytesToTransfer_ProcessAsync;
        processMap_["File_ListUserFiles_SFO"] = File_ListUserFiles_SFO_ProcessAsync;
        processMap_["File_ListUserFiles_SNSFO"] = File_ListUserFiles_SNSFO_ProcessAsync;
        processMap_["File_DeleteUserFile"] = File_DeleteUserFile_ProcessAsync;
        processMap_["File_DeleteUserFiles"] = File_DeleteUserFiles_ProcessAsync;
        processMap_["File_GetCDNUrl"] = File_GetCDNUrl_ProcessAsync;
        processMap_["Friend_FindUserByUniversalId"] = Friend_FindUserByUniversalId_ProcessAsync;
        processMap_["Friend_GetProfileInfoForCredential"] = Friend_GetProfileInfoForCredential_ProcessAsync;
        processMap_["Friend_GetProfileInfoForExternalAuthId"] = Friend_GetProfileInfoForExternalAuthId_ProcessAsync;
        processMap_["Friend_GetExternalIdForProfileId"] = Friend_GetExternalIdForProfileId_ProcessAsync;
        processMap_["Friend_ReadFriendEntity"] = Friend_ReadFriendEntity_ProcessAsync;
        processMap_["Friend_ReadFriendsEntities"] = Friend_ReadFriendsEntities_ProcessAsync;
        processMap_["Friend_ReadFriendUserState"] = Friend_ReadFriendUserState_ProcessAsync;
        processMap_["Friend_GetSummaryDataForProfileId"] = Friend_GetSummaryDataForProfileId_ProcessAsync;
        processMap_["Friend_FindUsersByExactName"] = Friend_FindUsersByExactName_ProcessAsync;
        processMap_["Friend_FindUsersBySubstrName"] = Friend_FindUsersBySubstrName_ProcessAsync;
        processMap_["Friend_ListFriends"] = Friend_ListFriends_ProcessAsync;
        processMap_["Friend_AddFriends"] = Friend_AddFriends_ProcessAsync;
        processMap_["Friend_RemoveFriends"] = Friend_RemoveFriends_ProcessAsync;
        processMap_["Friend_GetUsersOnlineStatus"] = Friend_GetUsersOnlineStatus_ProcessAsync;
        processMap_["Gamification_ReadAllGamification"] = Gamification_ReadAllGamification_ProcessAsync;
        processMap_["Gamification_ReadMilestones"] = Gamification_ReadMilestones_ProcessAsync;
        processMap_["Gamification_ReadAchievements"] = Gamification_ReadAchievements_ProcessAsync;
        processMap_["Gamification_ReadXpLevelsMetaData"] = Gamification_ReadXpLevelsMetaData_ProcessAsync;
        processMap_["Gamification_ReadAchievedAchievements"] = Gamification_ReadAchievedAchievements_ProcessAsync;
        processMap_["Gamification_ReadCompletedMilestones"] = Gamification_ReadCompletedMilestones_ProcessAsync;
        processMap_["Gamification_ReadInProgressMilestones"] = Gamification_ReadInProgressMilestones_ProcessAsync;
        processMap_["Gamification_ReadMilestonesByCategory"] = Gamification_ReadMilestonesByCategory_ProcessAsync;
        processMap_["Gamification_AwardAchievements"] = Gamification_AwardAchievements_ProcessAsync;
        processMap_["Gamification_ReadQuests"] = Gamification_ReadQuests_ProcessAsync;
        processMap_["Gamification_ReadCompletedQuests"] = Gamification_ReadCompletedQuests_ProcessAsync;
        processMap_["Gamification_ReadInProgressQuests"] = Gamification_ReadInProgressQuests_ProcessAsync;
        processMap_["Gamification_ReadNotStartedQuests"] = Gamification_ReadNotStartedQuests_ProcessAsync;
        processMap_["Gamification_ReadQuestsWithStatus"] = Gamification_ReadQuestsWithStatus_ProcessAsync;
        processMap_["Gamification_ReadQuestsWithBasicPercentage"] = Gamification_ReadQuestsWithBasicPercentage_ProcessAsync;
        processMap_["Gamification_ReadQuestsWithComplexPercentage"] = Gamification_ReadQuestsWithComplexPercentage_ProcessAsync;
        processMap_["Gamification_ReadQuestsByCategory"] = Gamification_ReadQuestsByCategory_ProcessAsync;
        processMap_["Gamification_ResetMilestones"] = Gamification_ResetMilestones_ProcessAsync;
        processMap_["GlobalApp_ReadProperties"] = GlobalApp_ReadProperties_ProcessAsync;
        processMap_["GlobalEntity_CreateEntity"] = GlobalEntity_CreateEntity_ProcessAsync;
        processMap_["GlobalEntity_CreateEntityWithIndexedId"] = GlobalEntity_CreateEntityWithIndexedId_ProcessAsync;
        processMap_["GlobalEntity_UpdateEntity"] = GlobalEntity_UpdateEntity_ProcessAsync;
        processMap_["GlobalEntity_UpdateEntityAcl"] = GlobalEntity_UpdateEntityAcl_ProcessAsync;
        processMap_["GlobalEntity_UpdateEntityTimeToLive"] = GlobalEntity_UpdateEntityTimeToLive_ProcessAsync;
        processMap_["GlobalEntity_DeleteEntity"] = GlobalEntity_DeleteEntity_ProcessAsync;
        processMap_["GlobalEntity_ReadEntity"] = GlobalEntity_ReadEntity_ProcessAsync;
        processMap_["GlobalEntity_GetList"] = GlobalEntity_GetList_ProcessAsync;
        processMap_["GlobalEntity_GetListByIndexedId"] = GlobalEntity_GetListByIndexedId_ProcessAsync;
        processMap_["GlobalEntity_GetListCount"] = GlobalEntity_GetListCount_ProcessAsync;
        processMap_["GlobalEntity_GetPage"] = GlobalEntity_GetPage_ProcessAsync;
        processMap_["GlobalEntity_GetPageOffset"] = GlobalEntity_GetPageOffset_ProcessAsync;
        processMap_["GlobalEntity_IncrementGlobalEntityData"] = GlobalEntity_IncrementGlobalEntityData_ProcessAsync;
        processMap_["GlobalEntity_GetRandomEntitiesMatching"] = GlobalEntity_GetRandomEntitiesMatching_ProcessAsync;
        processMap_["GlobalEntity_UpdateEntityOwnerAndAcl"] = GlobalEntity_UpdateEntityOwnerAndAcl_ProcessAsync;
        processMap_["GlobalEntity_MakeSystemEntity"] = GlobalEntity_MakeSystemEntity_ProcessAsync;
        processMap_["GlobalStatistics_ReadAllGlobalStats"] = GlobalStatistics_ReadAllGlobalStats_ProcessAsync;
        processMap_["GlobalStatistics_ReadGlobalStatsSubset"] = GlobalStatistics_ReadGlobalStatsSubset_ProcessAsync;
        processMap_["GlobalStatistics_ReadGlobalStatsForCategory"] = GlobalStatistics_ReadGlobalStatsForCategory_ProcessAsync;
        processMap_["GlobalStatistics_IncrementGlobalStats"] = GlobalStatistics_IncrementGlobalStats_ProcessAsync;
        processMap_["GlobalStatistics_ProcessStatistics"] = GlobalStatistics_ProcessStatistics_ProcessAsync;
        processMap_["Group_AcceptGroupInvitation"] = Group_AcceptGroupInvitation_ProcessAsync;
        processMap_["Group_AddGroupMember"] = Group_AddGroupMember_ProcessAsync;
        processMap_["Group_ApproveGroupJoinRequest"] = Group_ApproveGroupJoinRequest_ProcessAsync;
        processMap_["Group_AutoJoinGroup"] = Group_AutoJoinGroup_ProcessAsync;
        processMap_["Group_CancelGroupInvitation"] = Group_CancelGroupInvitation_ProcessAsync;
        processMap_["Group_CreateGroup"] = Group_CreateGroup_ProcessAsync;
        processMap_["Group_CreateGroupEntity"] = Group_CreateGroupEntity_ProcessAsync;
        processMap_["Group_DeleteGroup"] = Group_DeleteGroup_ProcessAsync;
        processMap_["Group_DeleteGroupEntity"] = Group_DeleteGroupEntity_ProcessAsync;
        processMap_["Group_GetMyGroups"] = Group_GetMyGroups_ProcessAsync;
        processMap_["Group_IncrementGroupData"] = Group_IncrementGroupData_ProcessAsync;
        processMap_["Group_IncrementGroupEntityData"] = Group_IncrementGroupEntityData_ProcessAsync;
        processMap_["Group_InviteGroupMember"] = Group_InviteGroupMember_ProcessAsync;
        processMap_["Group_JoinGroup"] = Group_JoinGroup_ProcessAsync;
        processMap_["Group_LeaveGroup"] = Group_LeaveGroup_ProcessAsync;
        processMap_["Group_ListGroupsPage"] = Group_ListGroupsPage_ProcessAsync;
        processMap_["Group_ListGroupsPageByOffset"] = Group_ListGroupsPageByOffset_ProcessAsync;
        processMap_["Group_ListGroupsWithMember"] = Group_ListGroupsWithMember_ProcessAsync;
        processMap_["Group_ReadGroup"] = Group_ReadGroup_ProcessAsync;
        processMap_["Group_ReadGroupData"] = Group_ReadGroupData_ProcessAsync;
        processMap_["Group_ReadGroupEntitiesPage"] = Group_ReadGroupEntitiesPage_ProcessAsync;
        processMap_["Group_ReadGroupEntitiesPageByOffset"] = Group_ReadGroupEntitiesPageByOffset_ProcessAsync;
        processMap_["Group_ReadGroupEntity"] = Group_ReadGroupEntity_ProcessAsync;
        processMap_["Group_ReadGroupMembers"] = Group_ReadGroupMembers_ProcessAsync;
        processMap_["Group_RejectGroupInvitation"] = Group_RejectGroupInvitation_ProcessAsync;
        processMap_["Group_RejectGroupJoinRequest"] = Group_RejectGroupJoinRequest_ProcessAsync;
        processMap_["Group_RemoveGroupMember"] = Group_RemoveGroupMember_ProcessAsync;
        processMap_["Group_UpdateGroupData"] = Group_UpdateGroupData_ProcessAsync;
        processMap_["Group_UpdateGroupEntityData"] = Group_UpdateGroupEntityData_ProcessAsync;
        processMap_["Group_UpdateGroupMember"] = Group_UpdateGroupMember_ProcessAsync;
        processMap_["Group_UpdateGroupName"] = Group_UpdateGroupName_ProcessAsync;
        processMap_["Identity_AttachEmailIdentity"] = Identity_AttachEmailIdentity_ProcessAsync;
        processMap_["Identity_MergeEmailIdentity"] = Identity_MergeEmailIdentity_ProcessAsync;
        processMap_["Identity_DetachEmailIdentity"] = Identity_DetachEmailIdentity_ProcessAsync;
        processMap_["Identity_AttachUniversalIdentity"] = Identity_AttachUniversalIdentity_ProcessAsync;
        processMap_["Identity_MergeUniversalIdentity"] = Identity_MergeUniversalIdentity_ProcessAsync;
        processMap_["Identity_DetachUniversalIdentity"] = Identity_DetachUniversalIdentity_ProcessAsync;
        processMap_["Identity_SwitchToChildProfile"] = Identity_SwitchToChildProfile_ProcessAsync;
        processMap_["Identity_SwitchToSingletonChildProfile"] = Identity_SwitchToSingletonChildProfile_ProcessAsync;
        processMap_["Identity_AttachParentWithIdentity"] = Identity_AttachParentWithIdentity_ProcessAsync;
        processMap_["Identity_SwitchToParentProfile"] = Identity_SwitchToParentProfile_ProcessAsync;
        processMap_["Identity_DetachParent"] = Identity_DetachParent_ProcessAsync;
        processMap_["Identity_GetChildProfiles"] = Identity_GetChildProfiles_ProcessAsync;
        processMap_["Identity_GetIdentities"] = Identity_GetIdentities_ProcessAsync;
        processMap_["Identity_GetExpiredIdentities"] = Identity_GetExpiredIdentities_ProcessAsync;
        processMap_["Identity_RefreshIdentity"] = Identity_RefreshIdentity_ProcessAsync;
        processMap_["Identity_ChangeEmailIdentity"] = Identity_ChangeEmailIdentity_ProcessAsync;
        processMap_["Identity_AttachPeerProfile"] = Identity_AttachPeerProfile_ProcessAsync;
        processMap_["Identity_DetachPeer"] = Identity_DetachPeer_ProcessAsync;
        processMap_["Identity_GetPeerProfiles"] = Identity_GetPeerProfiles_ProcessAsync;
        processMap_["Mail_SendBasicEmail"] = Mail_SendBasicEmail_ProcessAsync;
        processMap_["Mail_SendAdvancedEmail"] = Mail_SendAdvancedEmail_ProcessAsync;
        processMap_["Mail_SendAdvancedEmailByAddress"] = Mail_SendAdvancedEmailByAddress_ProcessAsync;
        processMap_["MatchMaking_Read"] = MatchMaking_Read_ProcessAsync;
        processMap_["MatchMaking_SetPlayerRating"] = MatchMaking_SetPlayerRating_ProcessAsync;
        processMap_["MatchMaking_ResetPlayerRating"] = MatchMaking_ResetPlayerRating_ProcessAsync;
        processMap_["MatchMaking_IncrementPlayerRating"] = MatchMaking_IncrementPlayerRating_ProcessAsync;
        processMap_["MatchMaking_DecrementPlayerRating"] = MatchMaking_DecrementPlayerRating_ProcessAsync;
        processMap_["MatchMaking_TurnShieldOn"] = MatchMaking_TurnShieldOn_ProcessAsync;
        processMap_["MatchMaking_TurnShieldOnFor"] = MatchMaking_TurnShieldOnFor_ProcessAsync;
        processMap_["MatchMaking_TurnShieldOff"] = MatchMaking_TurnShieldOff_ProcessAsync;
        processMap_["MatchMaking_IncrementShieldOnFor"] = MatchMaking_IncrementShieldOnFor_ProcessAsync;
        processMap_["MatchMaking_GetShieldExpiry"] = MatchMaking_GetShieldExpiry_ProcessAsync;
        processMap_["MatchMaking_FindPlayers"] = MatchMaking_FindPlayers_ProcessAsync;
        processMap_["MatchMaking_FindPlayersWithAttributes"] = MatchMaking_FindPlayersWithAttributes_ProcessAsync;
        processMap_["MatchMaking_FindPlayersUsingFilter"] = MatchMaking_FindPlayersUsingFilter_ProcessAsync;
        processMap_["MatchMaking_FindPlayersWithAttributesUsingFilter"] = MatchMaking_FindPlayersWithAttributesUsingFilter_ProcessAsync;
        processMap_["MatchMaking_EnableMatchMaking"] = MatchMaking_EnableMatchMaking_ProcessAsync;
        processMap_["MatchMaking_DisableMatchMaking"] = MatchMaking_DisableMatchMaking_ProcessAsync;
        processMap_["OneWayMatch_StartMatch"] = OneWayMatch_StartMatch_ProcessAsync;
        processMap_["OneWayMatch_CancelMatch"] = OneWayMatch_CancelMatch_ProcessAsync;
        processMap_["OneWayMatch_CompleteMatch"] = OneWayMatch_CompleteMatch_ProcessAsync;
        processMap_["PlaybackStream_StartStream"] = PlaybackStream_StartStream_ProcessAsync;
        processMap_["PlaybackStream_ReadStream"] = PlaybackStream_ReadStream_ProcessAsync;
        processMap_["PlaybackStream_EndStream"] = PlaybackStream_EndStream_ProcessAsync;
        processMap_["PlaybackStream_DeleteStream"] = PlaybackStream_DeleteStream_ProcessAsync;
        processMap_["PlaybackStream_AddEvent"] = PlaybackStream_AddEvent_ProcessAsync;
        processMap_["PlaybackStream_GetRecentStreamsForInitiatingPlayer"] = PlaybackStream_GetRecentStreamsForInitiatingPlayer_ProcessAsync;
        processMap_["PlaybackStream_GetRecentStreamsForTargetPlayer"] = PlaybackStream_GetRecentStreamsForTargetPlayer_ProcessAsync;
        processMap_["PlayerState_ReadUserState"] = PlayerState_ReadUserState_ProcessAsync;
        processMap_["PlayerState_DeleteUser"] = PlayerState_DeleteUser_ProcessAsync;
        processMap_["PlayerState_ResetUser"] = PlayerState_ResetUser_ProcessAsync;
        processMap_["PlayerState_Logout"] = PlayerState_Logout_ProcessAsync;
        processMap_["PlayerState_UpdateUserName"] = PlayerState_UpdateUserName_ProcessAsync;
        processMap_["PlayerState_UpdateSummaryFriendData"] = PlayerState_UpdateSummaryFriendData_ProcessAsync;
        processMap_["PlayerState_GetAttributes"] = PlayerState_GetAttributes_ProcessAsync;
        processMap_["PlayerState_UpdateAttributes"] = PlayerState_UpdateAttributes_ProcessAsync;
        processMap_["PlayerState_RemoveAttributes"] = PlayerState_RemoveAttributes_ProcessAsync;
        processMap_["PlayerState_UpdateUserPictureUrl"] = PlayerState_UpdateUserPictureUrl_ProcessAsync;
        processMap_["PlayerState_UpdateContactEmail"] = PlayerState_UpdateContactEmail_ProcessAsync;
        processMap_["PlayerStatistics_ReadAllUserStats"] = PlayerStatistics_ReadAllUserStats_ProcessAsync;
        processMap_["PlayerStatistics_ReadUserStatsSubset"] = PlayerStatistics_ReadUserStatsSubset_ProcessAsync;
        processMap_["PlayerStatistics_ReadUserStatsForCategory"] = PlayerStatistics_ReadUserStatsForCategory_ProcessAsync;
        processMap_["PlayerStatistics_ResetAllUserStats"] = PlayerStatistics_ResetAllUserStats_ProcessAsync;
        processMap_["PlayerStatistics_IncrementUserStats_SSFO"] = PlayerStatistics_IncrementUserStats_SSFO_ProcessAsync;
        processMap_["PlayerStatistics_IncrementUserStats_DSFO"] = PlayerStatistics_IncrementUserStats_DSFO_ProcessAsync;
        processMap_["PlayerStatistics_ProcessStatistics"] = PlayerStatistics_ProcessStatistics_ProcessAsync;
        processMap_["PlayerStatistics_GetNextExperienceLevel"] = PlayerStatistics_GetNextExperienceLevel_ProcessAsync;
        processMap_["PlayerStatistics_IncrementExperiencePoints"] = PlayerStatistics_IncrementExperiencePoints_ProcessAsync;
        processMap_["PlayerStatistics_SetExperiencePoints"] = PlayerStatistics_SetExperiencePoints_ProcessAsync;
        processMap_["PlayerStatisticsEvent_TriggerStatsEvent"] = PlayerStatisticsEvent_TriggerStatsEvent_ProcessAsync;
        processMap_["PlayerStatisticsEvent_TriggerStatsEvents"] = PlayerStatisticsEvent_TriggerStatsEvents_ProcessAsync;
        processMap_["Product_GetCurrency"] = Product_GetCurrency_ProcessAsync;
        processMap_["Product_GetSalesInventory"] = Product_GetSalesInventory_ProcessAsync;
        processMap_["Product_GetSalesInventoryByCategory"] = Product_GetSalesInventoryByCategory_ProcessAsync;
        processMap_["Product_VerifyMicrosoftReceipt"] = Product_VerifyMicrosoftReceipt_ProcessAsync;
        processMap_["Product_GetEligiblePromotions"] = Product_GetEligiblePromotions_ProcessAsync;
        processMap_["Product_VerifyItunesReceipt"] = Product_VerifyItunesReceipt_ProcessAsync;
        processMap_["Profanity_ProfanityCheck"] = Profanity_ProfanityCheck_ProcessAsync;
        processMap_["Profanity_ProfanityReplaceText"] = Profanity_ProfanityReplaceText_ProcessAsync;
        processMap_["Profanity_ProfanityIdentifyBadWords"] = Profanity_ProfanityIdentifyBadWords_ProcessAsync;
        processMap_["PushNotification_DeregisterAllPushNotificationDeviceTokens"] = PushNotification_DeregisterAllPushNotificationDeviceTokens_ProcessAsync;
        processMap_["PushNotification_DeregisterPushNotificationDeviceToken"] = PushNotification_DeregisterPushNotificationDeviceToken_ProcessAsync;
        processMap_["PushNotification_RegisterPushNotificationDeviceToken"] = PushNotification_RegisterPushNotificationDeviceToken_ProcessAsync;
        processMap_["PushNotification_SendSimplePushNotification"] = PushNotification_SendSimplePushNotification_ProcessAsync;
        processMap_["PushNotification_SendRichPushNotification"] = PushNotification_SendRichPushNotification_ProcessAsync;
        processMap_["PushNotification_SendRichPushNotificationWithParams"] = PushNotification_SendRichPushNotificationWithParams_ProcessAsync;
        processMap_["PushNotification_SendTemplatedPushNotificationToGroup"] = PushNotification_SendTemplatedPushNotificationToGroup_ProcessAsync;
        processMap_["PushNotification_SendNormalizedPushNotificationToGroup"] = PushNotification_SendNormalizedPushNotificationToGroup_ProcessAsync;
        processMap_["PushNotification_ScheduleRawPushNotificationUTC"] = PushNotification_ScheduleRawPushNotificationUTC_ProcessAsync;
        processMap_["PushNotification_ScheduleRawPushNotificationMinutes"] = PushNotification_ScheduleRawPushNotificationMinutes_ProcessAsync;
        processMap_["PushNotification_SendRawPushNotification"] = PushNotification_SendRawPushNotification_ProcessAsync;
        processMap_["PushNotification_SendRawPushNotificationBatch"] = PushNotification_SendRawPushNotificationBatch_ProcessAsync;
        processMap_["PushNotification_SendRawPushNotificationToGroup"] = PushNotification_SendRawPushNotificationToGroup_ProcessAsync;
        processMap_["PushNotification_ScheduleNormalizedPushNotificationUTC"] = PushNotification_ScheduleNormalizedPushNotificationUTC_ProcessAsync;
        processMap_["PushNotification_ScheduleNormalizedPushNotificationMinutes"] = PushNotification_ScheduleNormalizedPushNotificationMinutes_ProcessAsync;
        processMap_["PushNotification_ScheduleRichPushNotificationUTC"] = PushNotification_ScheduleRichPushNotificationUTC_ProcessAsync;
        processMap_["PushNotification_ScheduleRichPushNotificationMinutes"] = PushNotification_ScheduleRichPushNotificationMinutes_ProcessAsync;
        processMap_["PushNotification_SendNormalizedPushNotification"] = PushNotification_SendNormalizedPushNotification_ProcessAsync;
        processMap_["PushNotification_SendNormalizedPushNotificationBatch"] = PushNotification_SendNormalizedPushNotificationBatch_ProcessAsync;
        processMap_["Script_RunScript"] = Script_RunScript_ProcessAsync;
        processMap_["Script_ScheduleRunScriptUTC"] = Script_ScheduleRunScriptUTC_ProcessAsync;
        processMap_["Script_ScheduleRunScriptMinutes"] = Script_ScheduleRunScriptMinutes_ProcessAsync;
        processMap_["Script_RunParentScript"] = Script_RunParentScript_ProcessAsync;
        processMap_["Script_CancelScheduledScript"] = Script_CancelScheduledScript_ProcessAsync;
        processMap_["Script_RunPeerScript"] = Script_RunPeerScript_ProcessAsync;
        processMap_["Script_RunPeerScriptAsynchAsync"] = Script_RunPeerScriptAsynch_ProcessAsync;
        processMap_["SocialLeaderboard_GetSocialLeaderboard"] = SocialLeaderboard_GetSocialLeaderboard_ProcessAsync;
        processMap_["SocialLeaderboard_GetMultiSocialLeaderboard"] = SocialLeaderboard_GetMultiSocialLeaderboard_ProcessAsync;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardPage"] = SocialLeaderboard_GetGlobalLeaderboardPage_ProcessAsync;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardPageByVersion"] = SocialLeaderboard_GetGlobalLeaderboardPageByVersion_ProcessAsync;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardView"] = SocialLeaderboard_GetGlobalLeaderboardView_ProcessAsync;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardViewByVersion"] = SocialLeaderboard_GetGlobalLeaderboardViewByVersion_ProcessAsync;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardVersions"] = SocialLeaderboard_GetGlobalLeaderboardVersions_ProcessAsync;
        processMap_["SocialLeaderboard_GetGroupSocialLeaderboard"] = SocialLeaderboard_GetGroupSocialLeaderboard_ProcessAsync;
        processMap_["SocialLeaderboard_PostScoreToLeaderboard"] = SocialLeaderboard_PostScoreToLeaderboard_ProcessAsync;
        processMap_["SocialLeaderboard_RemovePlayerScore"] = SocialLeaderboard_RemovePlayerScore_ProcessAsync;
        processMap_["SocialLeaderboard_PostScoreToDynamicLeaderboard"] = SocialLeaderboard_PostScoreToDynamicLeaderboard_ProcessAsync;
        processMap_["SocialLeaderboard_PostScoreToDynamicLeaderboardDays"] = SocialLeaderboard_PostScoreToDynamicLeaderboardDays_ProcessAsync;
        processMap_["SocialLeaderboard_GetPlayersSocialLeaderboard"] = SocialLeaderboard_GetPlayersSocialLeaderboard_ProcessAsync;
        processMap_["SocialLeaderboard_ListLeaderboards"] = SocialLeaderboard_ListLeaderboards_ProcessAsync;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardEntryCount"] = SocialLeaderboard_GetGlobalLeaderboardEntryCount_ProcessAsync;
        processMap_["SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion"] = SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_ProcessAsync;
        processMap_["SocialLeaderboard_GetPlayerScore"] = SocialLeaderboard_GetPlayerScore_ProcessAsync;
        processMap_["SocialLeaderboard_GetPlayerScoresFromLeaderboards"] = SocialLeaderboard_GetPlayerScoresFromLeaderboards_ProcessAsync;
        processMap_["Time_ReadServerTime"] = Time_ReadServerTime_ProcessAsync;
        processMap_["Tournament_ClaimTournamentReward"] = Tournament_ClaimTournamentReward_ProcessAsync;
        processMap_["Tournament_GetTournamentStatus"] = Tournament_GetTournamentStatus_ProcessAsync;
        processMap_["Tournament_JoinTournament"] = Tournament_JoinTournament_ProcessAsync;
        processMap_["Tournament_LeaveTournament"] = Tournament_LeaveTournament_ProcessAsync;
        processMap_["Tournament_PostTournamentScore"] = Tournament_PostTournamentScore_ProcessAsync;
        processMap_["Tournament_PostTournamentScoreWithResults"] = Tournament_PostTournamentScoreWithResults_ProcessAsync;
        processMap_["Tournament_ViewCurrentReward"] = Tournament_ViewCurrentReward_ProcessAsync;
        processMap_["Tournament_ViewReward"] = Tournament_ViewReward_ProcessAsync;
        processMap_["Patch_GetGameManifest"] = Patch_GetGameManifest_ProcessAsync;
        processMap_["SocialFeed_ShareVideo"] = SocialFeed_ShareVideo_ProcessAsync;
        processMap_["SocialFeed_ShareScreenshot"] = SocialFeed_ShareScreenshot_ProcessAsync;
        processMap_["SocialFeed_ShareAchievement"] = SocialFeed_ShareAchievement_ProcessAsync;
        processMap_["SocialFeed_ShareApp"] = SocialFeed_ShareApp_ProcessAsync;
        processMap_["SocialFeed_ShareChannel"] = SocialFeed_ShareChannel_ProcessAsync;
        processMap_["SocialFeed_ShareLink"] = SocialFeed_ShareLink_ProcessAsync;
        processMap_["SocialFeed_ShareGameGuide"] = SocialFeed_ShareGameGuide_ProcessAsync;
        processMap_["SocialFeed_ReadSocialFeed"] = SocialFeed_ReadSocialFeed_ProcessAsync;
        processMap_["SocialFeed_ReadFilteredSocialFeed"] = SocialFeed_ReadFilteredSocialFeed_ProcessAsync;
        processMap_["SocialFeed_ReadFriendsSocialFeed"] = SocialFeed_ReadFriendsSocialFeed_ProcessAsync;
        processMap_["SocialFeed_PostComment"] = SocialFeed_PostComment_ProcessAsync;
        processMap_["SocialFeed_PostCommentReply"] = SocialFeed_PostCommentReply_ProcessAsync;
        processMap_["SocialFeed_ReadComments"] = SocialFeed_ReadComments_ProcessAsync;
        processMap_["SocialFeed_ReadCommentReplies"] = SocialFeed_ReadCommentReplies_ProcessAsync;
        processMap_["SocialFeed_LikeComment"] = SocialFeed_LikeComment_ProcessAsync;
        processMap_["SocialFeed_LikeActivity"] = SocialFeed_LikeActivity_ProcessAsync;
        processMap_["SocialFeed_UnlikeComment"] = SocialFeed_UnlikeComment_ProcessAsync;
        processMap_["SocialFeed_UnlikeActivity"] = SocialFeed_UnlikeActivity_ProcessAsync;
        processMap_["SocialFeed_SetFeedVisibility"] = SocialFeed_SetFeedVisibility_ProcessAsync;
        processMap_["SocialFeed_BlockPlayer"] = SocialFeed_BlockPlayer_ProcessAsync;
        processMap_["SocialFeed_HidePlayer"] = SocialFeed_HidePlayer_ProcessAsync;
        processMap_["SocialFeed_UnblockPlayer"] = SocialFeed_UnblockPlayer_ProcessAsync;
        processMap_["SocialFeed_UnhidePlayer"] = SocialFeed_UnhidePlayer_ProcessAsync;
        processMap_["Telemetry_StartTelemetrySession"] = Telemetry_StartTelemetrySession_ProcessAsync;
        processMap_["Telemetry_EndTelemetrySession"] = Telemetry_EndTelemetrySession_ProcessAsync;
        processMap_["Telemetry_LogTelemetryEvent"] = Telemetry_LogTelemetryEvent_ProcessAsync;
        processMap_["Telemetry_StartTelemetryEvent"] = Telemetry_StartTelemetryEvent_ProcessAsync;
        processMap_["Telemetry_EndTelemetryEvent"] = Telemetry_EndTelemetryEvent_ProcessAsync;
        processMap_["File_DownloadFile"] = File_DownloadFile_ProcessAsync;
        processMap_["File_GetDownloadInfo"] = File_GetDownloadInfo_ProcessAsync;
        processMap_["File_CancelDownload"] = File_CancelDownload_ProcessAsync;
      }

      protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async Task AsyncMatch_CreateMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_CreateMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_CreateMatchResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_CreateMatchAsync(args.JsonOpponentIds, args.PushNotificationMessage, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_CreateMatchAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_CreateMatchAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_CreateMatchWithInitialTurn_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_CreateMatchWithInitialTurnArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_CreateMatchWithInitialTurnResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_CreateMatchWithInitialTurnAsync(args.JsonOpponentIds, args.JsonMatchState, args.PushNotificationMessage, args.NextPlayer, args.JsonSummary, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_CreateMatchWithInitialTurnAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_CreateMatchWithInitialTurnAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_SubmitTurn_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_SubmitTurnArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_SubmitTurnResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_SubmitTurnAsync(args.OwnerId, args.MatchId, args.Version, args.JsonMatchState, args.PushNotificationMessage, args.NextPlayer, args.JsonSummary, args.JsonStatistics, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_SubmitTurnAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_SubmitTurnAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_UpdateMatchSummaryData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_UpdateMatchSummaryDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_UpdateMatchSummaryDataResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_UpdateMatchSummaryDataAsync(args.OwnerId, args.MatchId, args.Version, args.JsonSummary, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_UpdateMatchSummaryDataAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_UpdateMatchSummaryDataAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_CompleteMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_CompleteMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_CompleteMatchResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_CompleteMatchAsync(args.OwnerId, args.MatchId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_CompleteMatchAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_CompleteMatchAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_ReadMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_ReadMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_ReadMatchResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_ReadMatchAsync(args.OwnerId, args.MatchId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_ReadMatchAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_ReadMatchAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_ReadMatchHistory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_ReadMatchHistoryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_ReadMatchHistoryResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_ReadMatchHistoryAsync(args.OwnerId, args.MatchId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_ReadMatchHistoryAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_ReadMatchHistoryAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_FindMatches_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_FindMatchesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_FindMatchesResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_FindMatchesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_FindMatchesAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_FindMatchesAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_FindCompleteMatches_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_FindCompleteMatchesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_FindCompleteMatchesResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_FindCompleteMatchesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_FindCompleteMatchesAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_FindCompleteMatchesAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_AbandonMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_AbandonMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_AbandonMatchResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_AbandonMatchAsync(args.OwnerId, args.MatchId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_AbandonMatchAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_AbandonMatchAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task AsyncMatch_DeleteMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new AsyncMatch_DeleteMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new AsyncMatch_DeleteMatchResult();
        try
        {
          result.Success = await _iAsync.AsyncMatch_DeleteMatchAsync(args.OwnerId, args.MatchId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_DeleteMatchAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AsyncMatch_DeleteMatchAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_GenerateAnonymousId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_GenerateAnonymousIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_GenerateAnonymousIdResult();
        try
        {
          result.Success = await _iAsync.Authentication_GenerateAnonymousIdAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_GenerateAnonymousId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_GenerateAnonymousId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_Initialize_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_InitializeArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_InitializeResult();
        try
        {
          await _iAsync.Authentication_InitializeAsync(args.ProfileId, args.AnonymousId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_Initialize", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_Initialize", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_ClearSavedProfileID_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_ClearSavedProfileIDArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_ClearSavedProfileIDResult();
        try
        {
          await _iAsync.Authentication_ClearSavedProfileIDAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_ClearSavedProfileID", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_ClearSavedProfileID", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_AuthenticateAnonymous_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_AuthenticateAnonymousArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_AuthenticateAnonymousResult();
        try
        {
          result.Success = await _iAsync.Authentication_AuthenticateAnonymousAsync(args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateAnonymous", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateAnonymous", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_AuthenticateEmailPassword_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_AuthenticateEmailPasswordArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_AuthenticateEmailPasswordResult();
        try
        {
          result.Success = await _iAsync.Authentication_AuthenticateEmailPasswordAsync(args.Email, args.Password, args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateEmailPassword", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateEmailPassword", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_AuthenticateUniversal_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_AuthenticateUniversalArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_AuthenticateUniversalResult();
        try
        {
          result.Success = await _iAsync.Authentication_AuthenticateUniversalAsync(args.UserId, args.Password, args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateUniversal", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateUniversal", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_AuthenticateExternal_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_AuthenticateExternalArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_AuthenticateExternalResult();
        try
        {
          result.Success = await _iAsync.Authentication_AuthenticateExternalAsync(args.UserId, args.Token, args.ExternalAuthName, args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateExternal", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_AuthenticateExternal", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Authentication_ResetEmailPassword_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Authentication_ResetEmailPasswordArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Authentication_ResetEmailPasswordResult();
        try
        {
          result.Success = await _iAsync.Authentication_ResetEmailPasswordAsync(args.ExternalId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_ResetEmailPassword", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Authentication_ResetEmailPassword", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_EnableLogging_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_EnableLoggingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_EnableLoggingResult();
        try
        {
          await _iAsync.Client_EnableLoggingAsync(args.Enable, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_EnableLogging", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_EnableLogging", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_ResetCommunication_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_ResetCommunicationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_ResetCommunicationResult();
        try
        {
          await _iAsync.Client_ResetCommunicationAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_ResetCommunication", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_ResetCommunication", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_SetPacketTimeouts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_SetPacketTimeoutsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_SetPacketTimeoutsResult();
        try
        {
          await _iAsync.Client_SetPacketTimeoutsAsync(args.Timeouts, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetPacketTimeouts", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetPacketTimeouts", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_SetPacketTimeoutsToDefault_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_SetPacketTimeoutsToDefaultArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_SetPacketTimeoutsToDefaultResult();
        try
        {
          await _iAsync.Client_SetPacketTimeoutsToDefaultAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetPacketTimeoutsToDefault", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetPacketTimeoutsToDefault", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_GetPacketTimeouts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_GetPacketTimeoutsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_GetPacketTimeoutsResult();
        try
        {
          result.Success = await _iAsync.Client_GetPacketTimeoutsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetPacketTimeouts", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetPacketTimeouts", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_SetAuthenticationPacketTimeout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_SetAuthenticationPacketTimeoutArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_SetAuthenticationPacketTimeoutResult();
        try
        {
          await _iAsync.Client_SetAuthenticationPacketTimeoutAsync(args.TimeoutSecs, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetAuthenticationPacketTimeout", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetAuthenticationPacketTimeout", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_GetAuthenticationPacketTimeout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_GetAuthenticationPacketTimeoutArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_GetAuthenticationPacketTimeoutResult();
        try
        {
          result.Success = await _iAsync.Client_GetAuthenticationPacketTimeoutAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetAuthenticationPacketTimeout", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetAuthenticationPacketTimeout", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_GetUploadLowTransferRateTimeout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_GetUploadLowTransferRateTimeoutArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_GetUploadLowTransferRateTimeoutResult();
        try
        {
          result.Success = await _iAsync.Client_GetUploadLowTransferRateTimeoutAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetUploadLowTransferRateTimeout", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetUploadLowTransferRateTimeout", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_SetUploadLowTransferRateTimeout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_SetUploadLowTransferRateTimeoutArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_SetUploadLowTransferRateTimeoutResult();
        try
        {
          await _iAsync.Client_SetUploadLowTransferRateTimeoutAsync(args.TimeoutSecs, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetUploadLowTransferRateTimeout", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetUploadLowTransferRateTimeout", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_GetUploadLowTransferRateThreshold_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_GetUploadLowTransferRateThresholdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_GetUploadLowTransferRateThresholdResult();
        try
        {
          result.Success = await _iAsync.Client_GetUploadLowTransferRateThresholdAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetUploadLowTransferRateThreshold", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetUploadLowTransferRateThreshold", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_SetUploadLowTransferRateThreshold_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_SetUploadLowTransferRateThresholdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_SetUploadLowTransferRateThresholdResult();
        try
        {
          await _iAsync.Client_SetUploadLowTransferRateThresholdAsync(args.BytesPerSec, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetUploadLowTransferRateThreshold", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_SetUploadLowTransferRateThreshold", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_EnableNetworkErrorMessageCaching_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_EnableNetworkErrorMessageCachingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_EnableNetworkErrorMessageCachingResult();
        try
        {
          await _iAsync.Client_EnableNetworkErrorMessageCachingAsync(args.Enabled, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_EnableNetworkErrorMessageCaching", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_EnableNetworkErrorMessageCaching", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_RetryCachedMessages_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_RetryCachedMessagesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_RetryCachedMessagesResult();
        try
        {
          await _iAsync.Client_RetryCachedMessagesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_RetryCachedMessages", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_RetryCachedMessages", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_FlushCachedMessages_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_FlushCachedMessagesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_FlushCachedMessagesResult();
        try
        {
          await _iAsync.Client_FlushCachedMessagesAsync(args.SendApiErrorCallbacks, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_FlushCachedMessages", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_FlushCachedMessages", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_InsertEndOfMessageBundleMarker_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_InsertEndOfMessageBundleMarkerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_InsertEndOfMessageBundleMarkerResult();
        try
        {
          await _iAsync.Client_InsertEndOfMessageBundleMarkerAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_InsertEndOfMessageBundleMarker", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_InsertEndOfMessageBundleMarker", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_OverrideCountryCode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_OverrideCountryCodeArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_OverrideCountryCodeResult();
        try
        {
          await _iAsync.Client_OverrideCountryCodeAsync(args.CountryCode, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_OverrideCountryCode", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_OverrideCountryCode", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_OverrideLanguageCode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_OverrideLanguageCodeArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_OverrideLanguageCodeResult();
        try
        {
          await _iAsync.Client_OverrideLanguageCodeAsync(args.LanguageCode, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_OverrideLanguageCode", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_OverrideLanguageCode", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_GetSessionId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_GetSessionIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_GetSessionIdResult();
        try
        {
          result.Success = await _iAsync.Client_GetSessionIdAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetSessionId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_GetSessionId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_IsAuthenticated_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_IsAuthenticatedArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_IsAuthenticatedResult();
        try
        {
          result.Success = await _iAsync.Client_IsAuthenticatedAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_IsAuthenticated", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_IsAuthenticated", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_IsInitialized_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_IsInitializedArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_IsInitializedResult();
        try
        {
          result.Success = await _iAsync.Client_IsInitializedAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_IsInitialized", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_IsInitialized", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_Initialize_SSS_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_Initialize_SSSArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_Initialize_SSSResult();
        try
        {
          await _iAsync.Client_Initialize_SSSAsync(args.SecretKey, args.AppId, args.AppVersion, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_Initialize_SSS", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_Initialize_SSS", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_Initialize_SSSS_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_Initialize_SSSSArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_Initialize_SSSSResult();
        try
        {
          await _iAsync.Client_Initialize_SSSSAsync(args.ServerURL, args.SecretKey, args.AppId, args.AppVersion, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_Initialize_SSSS", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_Initialize_SSSS", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_InitializeIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_InitializeIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_InitializeIdentityResult();
        try
        {
          await _iAsync.Client_InitializeIdentityAsync(args.ProfileId, args.AnonymousId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_InitializeIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_InitializeIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Client_Update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Client_UpdateArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Client_UpdateResult();
        try
        {
          await _iAsync.Client_UpdateAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Client_Update", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Client_Update", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task DataStream_CustomPageEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new DataStream_CustomPageEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new DataStream_CustomPageEventResult();
        try
        {
          result.Success = await _iAsync.DataStream_CustomPageEventAsync(args.EventName, args.JsonEventProperties, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DataStream_CustomPageEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DataStream_CustomPageEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task DataStream_CustomScreenEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new DataStream_CustomScreenEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new DataStream_CustomScreenEventResult();
        try
        {
          result.Success = await _iAsync.DataStream_CustomScreenEventAsync(args.EventName, args.JsonEventProperties, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DataStream_CustomScreenEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DataStream_CustomScreenEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task DataStream_CustomTrackEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new DataStream_CustomTrackEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new DataStream_CustomTrackEventResult();
        try
        {
          result.Success = await _iAsync.DataStream_CustomTrackEventAsync(args.EventName, args.JsonEventProperties, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DataStream_CustomTrackEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DataStream_CustomTrackEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_CreateEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_CreateEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_CreateEntityResult();
        try
        {
          result.Success = await _iAsync.Entity_CreateEntityAsync(args.EntityType, args.JsonEntityData, args.JsonEntityAcl, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_CreateEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_CreateEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetEntitiesByType_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetEntitiesByTypeArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetEntitiesByTypeResult();
        try
        {
          result.Success = await _iAsync.Entity_GetEntitiesByTypeAsync(args.EntityType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetEntitiesByType", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetEntitiesByType", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_UpdateEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_UpdateEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_UpdateEntityResult();
        try
        {
          result.Success = await _iAsync.Entity_UpdateEntityAsync(args.EntityId, args.EntityType, args.JsonEntityData, args.JsonEntityAcl, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_UpdateEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_UpdateEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_UpdateSharedEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_UpdateSharedEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_UpdateSharedEntityResult();
        try
        {
          result.Success = await _iAsync.Entity_UpdateSharedEntityAsync(args.EntityId, args.TargetProfileId, args.EntityType, args.JsonEntityData, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_UpdateSharedEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_UpdateSharedEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_DeleteEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_DeleteEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_DeleteEntityResult();
        try
        {
          result.Success = await _iAsync.Entity_DeleteEntityAsync(args.EntityId, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_DeleteEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_DeleteEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_UpdateSingleton_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_UpdateSingletonArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_UpdateSingletonResult();
        try
        {
          result.Success = await _iAsync.Entity_UpdateSingletonAsync(args.EntityType, args.JsonEntityData, args.JsonEntityAcl, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_UpdateSingleton", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_UpdateSingleton", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_DeleteSingleton_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_DeleteSingletonArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_DeleteSingletonResult();
        try
        {
          result.Success = await _iAsync.Entity_DeleteSingletonAsync(args.EntityType, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_DeleteSingleton", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_DeleteSingleton", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetEntityResult();
        try
        {
          result.Success = await _iAsync.Entity_GetEntityAsync(args.EntityId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetSingleton_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetSingletonArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetSingletonResult();
        try
        {
          result.Success = await _iAsync.Entity_GetSingletonAsync(args.EntityType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSingleton", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSingleton", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetSharedEntityForProfileId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetSharedEntityForProfileIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetSharedEntityForProfileIdResult();
        try
        {
          result.Success = await _iAsync.Entity_GetSharedEntityForProfileIdAsync(args.ProfileId, args.EntityId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntityForProfileId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntityForProfileId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetSharedEntitiesForProfileId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetSharedEntitiesForProfileIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetSharedEntitiesForProfileIdResult();
        try
        {
          result.Success = await _iAsync.Entity_GetSharedEntitiesForProfileIdAsync(args.ProfileId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntitiesForProfileId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntitiesForProfileId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetListArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetListResult();
        try
        {
          result.Success = await _iAsync.Entity_GetListAsync(args.WhereJson, args.OrderByJson, args.MaxReturn, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetList", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetList", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetSharedEntitiesListForProfileId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetSharedEntitiesListForProfileIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetSharedEntitiesListForProfileIdResult();
        try
        {
          result.Success = await _iAsync.Entity_GetSharedEntitiesListForProfileIdAsync(args.ProfileId, args.WhereJson, args.OrderByJson, args.MaxReturn, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntitiesListForProfileId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetSharedEntitiesListForProfileId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetListCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetListCountArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetListCountResult();
        try
        {
          result.Success = await _iAsync.Entity_GetListCountAsync(args.WhereJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetListCount", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetListCount", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetPage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetPageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetPageResult();
        try
        {
          result.Success = await _iAsync.Entity_GetPageAsync(args.JsonContext, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetPage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetPage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_GetPageOffset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_GetPageOffsetArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_GetPageOffsetResult();
        try
        {
          result.Success = await _iAsync.Entity_GetPageOffsetAsync(args.Context, args.PageOffset, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetPageOffset", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_GetPageOffset", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_IncrementUserEntityData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_IncrementUserEntityDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_IncrementUserEntityDataResult();
        try
        {
          result.Success = await _iAsync.Entity_IncrementUserEntityDataAsync(args.EntityId, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_IncrementUserEntityData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_IncrementUserEntityData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Entity_IncrementSharedUserEntityData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Entity_IncrementSharedUserEntityDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Entity_IncrementSharedUserEntityDataResult();
        try
        {
          result.Success = await _iAsync.Entity_IncrementSharedUserEntityDataAsync(args.EntityId, args.TargetProfileId, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_IncrementSharedUserEntityData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Entity_IncrementSharedUserEntityData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Event_SendEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Event_SendEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Event_SendEventResult();
        try
        {
          result.Success = await _iAsync.Event_SendEventAsync(args.ToProfileId, args.EventType, args.JsonEventData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Event_SendEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Event_SendEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Event_UpdateIncomingEventData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Event_UpdateIncomingEventDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Event_UpdateIncomingEventDataResult();
        try
        {
          result.Success = await _iAsync.Event_UpdateIncomingEventDataAsync(args.EvId, args.JsonEventData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Event_UpdateIncomingEventData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Event_UpdateIncomingEventData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Event_DeleteIncomingEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Event_DeleteIncomingEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Event_DeleteIncomingEventResult();
        try
        {
          result.Success = await _iAsync.Event_DeleteIncomingEventAsync(args.EvId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Event_DeleteIncomingEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Event_DeleteIncomingEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Event_GetEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Event_GetEventsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Event_GetEventsResult();
        try
        {
          result.Success = await _iAsync.Event_GetEventsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Event_GetEvents", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Event_GetEvents", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_UploadFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_UploadFileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_UploadFileResult();
        try
        {
          result.Success = await _iAsync.File_UploadFileAsync(args.CloudPath, args.CloudFilename, args.Shareable, args.ReplaceIfExists, args.LocalPath, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_UploadFile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_UploadFile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_CancelUpload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_CancelUploadArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_CancelUploadResult();
        try
        {
          await _iAsync.File_CancelUploadAsync(args.UploadId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_CancelUpload", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_CancelUpload", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_GetUploadProgress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_GetUploadProgressArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_GetUploadProgressResult();
        try
        {
          result.Success = await _iAsync.File_GetUploadProgressAsync(args.UploadId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetUploadProgress", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetUploadProgress", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_GetUploadBytesTransferred_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_GetUploadBytesTransferredArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_GetUploadBytesTransferredResult();
        try
        {
          result.Success = await _iAsync.File_GetUploadBytesTransferredAsync(args.UploadId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetUploadBytesTransferred", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetUploadBytesTransferred", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_GetUploadTotalBytesToTransfer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_GetUploadTotalBytesToTransferArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_GetUploadTotalBytesToTransferResult();
        try
        {
          result.Success = await _iAsync.File_GetUploadTotalBytesToTransferAsync(args.UploadId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetUploadTotalBytesToTransfer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetUploadTotalBytesToTransfer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_ListUserFiles_SFO_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_ListUserFiles_SFOArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_ListUserFiles_SFOResult();
        try
        {
          result.Success = await _iAsync.File_ListUserFiles_SFOAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_ListUserFiles_SFO", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_ListUserFiles_SFO", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_ListUserFiles_SNSFO_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_ListUserFiles_SNSFOArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_ListUserFiles_SNSFOResult();
        try
        {
          result.Success = await _iAsync.File_ListUserFiles_SNSFOAsync(args.CloudPath, args.Recurse, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_ListUserFiles_SNSFO", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_ListUserFiles_SNSFO", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_DeleteUserFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_DeleteUserFileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_DeleteUserFileResult();
        try
        {
          result.Success = await _iAsync.File_DeleteUserFileAsync(args.CloudPath, args.CloudFileName, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_DeleteUserFile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_DeleteUserFile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_DeleteUserFiles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_DeleteUserFilesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_DeleteUserFilesResult();
        try
        {
          result.Success = await _iAsync.File_DeleteUserFilesAsync(args.CloudPath, args.Recurse, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_DeleteUserFiles", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_DeleteUserFiles", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_GetCDNUrl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_GetCDNUrlArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_GetCDNUrlResult();
        try
        {
          result.Success = await _iAsync.File_GetCDNUrlAsync(args.CloudPath, args.CloudFilename, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetCDNUrl", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetCDNUrl", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_FindUserByUniversalId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_FindUserByUniversalIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_FindUserByUniversalIdResult();
        try
        {
          result.Success = await _iAsync.Friend_FindUserByUniversalIdAsync(args.SearchText, args.MaxResults, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_FindUserByUniversalId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_FindUserByUniversalId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_GetProfileInfoForCredential_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_GetProfileInfoForCredentialArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_GetProfileInfoForCredentialResult();
        try
        {
          result.Success = await _iAsync.Friend_GetProfileInfoForCredentialAsync(args.ExternalId, args.AuthenticationType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetProfileInfoForCredential", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetProfileInfoForCredential", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_GetProfileInfoForExternalAuthId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_GetProfileInfoForExternalAuthIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_GetProfileInfoForExternalAuthIdResult();
        try
        {
          result.Success = await _iAsync.Friend_GetProfileInfoForExternalAuthIdAsync(args.ExternalId, args.ExternalAuthType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetProfileInfoForExternalAuthId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetProfileInfoForExternalAuthId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_GetExternalIdForProfileId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_GetExternalIdForProfileIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_GetExternalIdForProfileIdResult();
        try
        {
          result.Success = await _iAsync.Friend_GetExternalIdForProfileIdAsync(args.ProfileId, args.AuthenticationType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetExternalIdForProfileId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetExternalIdForProfileId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_ReadFriendEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_ReadFriendEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_ReadFriendEntityResult();
        try
        {
          result.Success = await _iAsync.Friend_ReadFriendEntityAsync(args.EntityId, args.FriendId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_ReadFriendsEntities_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_ReadFriendsEntitiesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_ReadFriendsEntitiesResult();
        try
        {
          result.Success = await _iAsync.Friend_ReadFriendsEntitiesAsync(args.EntityType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendsEntities", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendsEntities", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_ReadFriendUserState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_ReadFriendUserStateArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_ReadFriendUserStateResult();
        try
        {
          result.Success = await _iAsync.Friend_ReadFriendUserStateAsync(args.FriendId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendUserState", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ReadFriendUserState", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_GetSummaryDataForProfileId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_GetSummaryDataForProfileIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_GetSummaryDataForProfileIdResult();
        try
        {
          result.Success = await _iAsync.Friend_GetSummaryDataForProfileIdAsync(args.ProfileId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetSummaryDataForProfileId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetSummaryDataForProfileId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_FindUsersByExactName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_FindUsersByExactNameArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_FindUsersByExactNameResult();
        try
        {
          result.Success = await _iAsync.Friend_FindUsersByExactNameAsync(args.SearchText, args.MaxResults, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_FindUsersByExactName", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_FindUsersByExactName", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_FindUsersBySubstrName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_FindUsersBySubstrNameArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_FindUsersBySubstrNameResult();
        try
        {
          result.Success = await _iAsync.Friend_FindUsersBySubstrNameAsync(args.SearchText, args.MaxResults, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_FindUsersBySubstrName", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_FindUsersBySubstrName", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_ListFriends_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_ListFriendsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_ListFriendsResult();
        try
        {
          result.Success = await _iAsync.Friend_ListFriendsAsync(args.FriendPlatform, args.IncludeSummaryData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ListFriends", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_ListFriends", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_AddFriends_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_AddFriendsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_AddFriendsResult();
        try
        {
          result.Success = await _iAsync.Friend_AddFriendsAsync(args.ProfileIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_AddFriends", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_AddFriends", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_RemoveFriends_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_RemoveFriendsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_RemoveFriendsResult();
        try
        {
          result.Success = await _iAsync.Friend_RemoveFriendsAsync(args.ProfileIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_RemoveFriends", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_RemoveFriends", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Friend_GetUsersOnlineStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Friend_GetUsersOnlineStatusArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Friend_GetUsersOnlineStatusResult();
        try
        {
          result.Success = await _iAsync.Friend_GetUsersOnlineStatusAsync(args.ProfileIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetUsersOnlineStatus", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Friend_GetUsersOnlineStatus", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadAllGamification_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadAllGamificationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadAllGamificationResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadAllGamificationAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadAllGamification", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadAllGamification", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadMilestones_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadMilestonesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadMilestonesResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadMilestonesAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadMilestones", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadMilestones", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadAchievements_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadAchievementsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadAchievementsResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadAchievementsAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadAchievements", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadAchievements", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadXpLevelsMetaData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadXpLevelsMetaDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadXpLevelsMetaDataResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadXpLevelsMetaDataAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadXpLevelsMetaData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadXpLevelsMetaData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadAchievedAchievements_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadAchievedAchievementsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadAchievedAchievementsResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadAchievedAchievementsAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadAchievedAchievements", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadAchievedAchievements", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadCompletedMilestones_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadCompletedMilestonesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadCompletedMilestonesResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadCompletedMilestonesAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadCompletedMilestones", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadCompletedMilestones", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadInProgressMilestones_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadInProgressMilestonesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadInProgressMilestonesResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadInProgressMilestonesAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadInProgressMilestones", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadInProgressMilestones", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadMilestonesByCategory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadMilestonesByCategoryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadMilestonesByCategoryResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadMilestonesByCategoryAsync(args.Category, args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadMilestonesByCategory", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadMilestonesByCategory", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_AwardAchievements_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_AwardAchievementsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_AwardAchievementsResult();
        try
        {
          result.Success = await _iAsync.Gamification_AwardAchievementsAsync(args.AchievementIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_AwardAchievements", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_AwardAchievements", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadQuests_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadQuestsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadQuestsResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadQuestsAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuests", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuests", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadCompletedQuests_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadCompletedQuestsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadCompletedQuestsResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadCompletedQuestsAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadCompletedQuests", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadCompletedQuests", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadInProgressQuests_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadInProgressQuestsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadInProgressQuestsResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadInProgressQuestsAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadInProgressQuests", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadInProgressQuests", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadNotStartedQuests_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadNotStartedQuestsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadNotStartedQuestsResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadNotStartedQuestsAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadNotStartedQuests", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadNotStartedQuests", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadQuestsWithStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadQuestsWithStatusArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadQuestsWithStatusResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadQuestsWithStatusAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithStatus", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithStatus", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadQuestsWithBasicPercentage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadQuestsWithBasicPercentageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadQuestsWithBasicPercentageResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadQuestsWithBasicPercentageAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithBasicPercentage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithBasicPercentage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadQuestsWithComplexPercentage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadQuestsWithComplexPercentageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadQuestsWithComplexPercentageResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadQuestsWithComplexPercentageAsync(args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithComplexPercentage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsWithComplexPercentage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ReadQuestsByCategory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ReadQuestsByCategoryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ReadQuestsByCategoryResult();
        try
        {
          result.Success = await _iAsync.Gamification_ReadQuestsByCategoryAsync(args.Category, args.IncludeMetaData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsByCategory", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ReadQuestsByCategory", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Gamification_ResetMilestones_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Gamification_ResetMilestonesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Gamification_ResetMilestonesResult();
        try
        {
          result.Success = await _iAsync.Gamification_ResetMilestonesAsync(args.MilestoneIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ResetMilestones", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Gamification_ResetMilestones", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalApp_ReadProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalApp_ReadPropertiesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalApp_ReadPropertiesResult();
        try
        {
          result.Success = await _iAsync.GlobalApp_ReadPropertiesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalApp_ReadProperties", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalApp_ReadProperties", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_CreateEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_CreateEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_CreateEntityResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_CreateEntityAsync(args.EntityType, args.TimeToLive, args.JsonEntityAcl, args.JsonEntityData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_CreateEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_CreateEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_CreateEntityWithIndexedId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_CreateEntityWithIndexedIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_CreateEntityWithIndexedIdResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_CreateEntityWithIndexedIdAsync(args.EntityType, args.IndexedId, args.TimeToLive, args.JsonEntityAcl, args.JsonEntityData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_CreateEntityWithIndexedId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_CreateEntityWithIndexedId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_UpdateEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_UpdateEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_UpdateEntityResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_UpdateEntityAsync(args.EntityId, args.Version, args.JsonEntityData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_UpdateEntityAcl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_UpdateEntityAclArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_UpdateEntityAclResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_UpdateEntityAclAsync(args.EntityId, args.Version, args.JsonEntityAcl, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityAcl", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityAcl", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_UpdateEntityTimeToLive_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_UpdateEntityTimeToLiveArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_UpdateEntityTimeToLiveResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_UpdateEntityTimeToLiveAsync(args.EntityId, args.Version, args.TimeToLive, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityTimeToLive", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityTimeToLive", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_DeleteEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_DeleteEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_DeleteEntityResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_DeleteEntityAsync(args.EntityId, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_DeleteEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_DeleteEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_ReadEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_ReadEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_ReadEntityResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_ReadEntityAsync(args.EntityId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_ReadEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_ReadEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_GetList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_GetListArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_GetListResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_GetListAsync(args.WhereJson, args.OrderByJson, args.MaxReturn, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetList", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetList", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_GetListByIndexedId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_GetListByIndexedIdArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_GetListByIndexedIdResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_GetListByIndexedIdAsync(args.EntityIndexedId, args.MaxReturn, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetListByIndexedId", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetListByIndexedId", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_GetListCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_GetListCountArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_GetListCountResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_GetListCountAsync(args.WhereJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetListCount", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetListCount", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_GetPage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_GetPageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_GetPageResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_GetPageAsync(args.JsonContext, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetPage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetPage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_GetPageOffset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_GetPageOffsetArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_GetPageOffsetResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_GetPageOffsetAsync(args.Context, args.PageOffset, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetPageOffset", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetPageOffset", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_IncrementGlobalEntityData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_IncrementGlobalEntityDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_IncrementGlobalEntityDataResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_IncrementGlobalEntityDataAsync(args.EntityId, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_IncrementGlobalEntityData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_IncrementGlobalEntityData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_GetRandomEntitiesMatching_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_GetRandomEntitiesMatchingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_GetRandomEntitiesMatchingResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_GetRandomEntitiesMatchingAsync(args.WhereJson, args.MaxReturn, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetRandomEntitiesMatching", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_GetRandomEntitiesMatching", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_UpdateEntityOwnerAndAcl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_UpdateEntityOwnerAndAclArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_UpdateEntityOwnerAndAclResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_UpdateEntityOwnerAndAclAsync(args.EntityId, args.Version, args.OwnerId, args.Acl, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityOwnerAndAcl", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_UpdateEntityOwnerAndAcl", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalEntity_MakeSystemEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalEntity_MakeSystemEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalEntity_MakeSystemEntityResult();
        try
        {
          result.Success = await _iAsync.GlobalEntity_MakeSystemEntityAsync(args.EntityId, args.Version, args.Acl, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_MakeSystemEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalEntity_MakeSystemEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalStatistics_ReadAllGlobalStats_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalStatistics_ReadAllGlobalStatsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalStatistics_ReadAllGlobalStatsResult();
        try
        {
          result.Success = await _iAsync.GlobalStatistics_ReadAllGlobalStatsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadAllGlobalStats", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadAllGlobalStats", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalStatistics_ReadGlobalStatsSubset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalStatistics_ReadGlobalStatsSubsetArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalStatistics_ReadGlobalStatsSubsetResult();
        try
        {
          result.Success = await _iAsync.GlobalStatistics_ReadGlobalStatsSubsetAsync(args.GlobalStats, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadGlobalStatsSubset", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadGlobalStatsSubset", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalStatistics_ReadGlobalStatsForCategory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalStatistics_ReadGlobalStatsForCategoryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalStatistics_ReadGlobalStatsForCategoryResult();
        try
        {
          result.Success = await _iAsync.GlobalStatistics_ReadGlobalStatsForCategoryAsync(args.Category, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadGlobalStatsForCategory", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ReadGlobalStatsForCategory", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalStatistics_IncrementGlobalStats_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalStatistics_IncrementGlobalStatsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalStatistics_IncrementGlobalStatsResult();
        try
        {
          result.Success = await _iAsync.GlobalStatistics_IncrementGlobalStatsAsync(args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_IncrementGlobalStats", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_IncrementGlobalStats", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GlobalStatistics_ProcessStatistics_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GlobalStatistics_ProcessStatisticsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GlobalStatistics_ProcessStatisticsResult();
        try
        {
          result.Success = await _iAsync.GlobalStatistics_ProcessStatisticsAsync(args.StatisticsData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ProcessStatistics", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GlobalStatistics_ProcessStatistics", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_AcceptGroupInvitation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_AcceptGroupInvitationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_AcceptGroupInvitationResult();
        try
        {
          result.Success = await _iAsync.Group_AcceptGroupInvitationAsync(args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_AcceptGroupInvitation", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_AcceptGroupInvitation", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_AddGroupMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_AddGroupMemberArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_AddGroupMemberResult();
        try
        {
          result.Success = await _iAsync.Group_AddGroupMemberAsync(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_AddGroupMember", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_AddGroupMember", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ApproveGroupJoinRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ApproveGroupJoinRequestArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ApproveGroupJoinRequestResult();
        try
        {
          result.Success = await _iAsync.Group_ApproveGroupJoinRequestAsync(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ApproveGroupJoinRequest", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ApproveGroupJoinRequest", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_AutoJoinGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_AutoJoinGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_AutoJoinGroupResult();
        try
        {
          result.Success = await _iAsync.Group_AutoJoinGroupAsync(args.GroupType, args.AutoJoinStrategy, args.DataQueryJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_AutoJoinGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_AutoJoinGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_CancelGroupInvitation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_CancelGroupInvitationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_CancelGroupInvitationResult();
        try
        {
          result.Success = await _iAsync.Group_CancelGroupInvitationAsync(args.GroupId, args.ProfileId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_CancelGroupInvitation", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_CancelGroupInvitation", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_CreateGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_CreateGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_CreateGroupResult();
        try
        {
          result.Success = await _iAsync.Group_CreateGroupAsync(args.Name, args.GroupType, args.IsOpenGroup, args.Acl, args.JsonData, args.JsonOwnerAttributes, args.JsonDefaultMemberAttributes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_CreateGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_CreateGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_CreateGroupEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_CreateGroupEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_CreateGroupEntityResult();
        try
        {
          result.Success = await _iAsync.Group_CreateGroupEntityAsync(args.GroupId, args.EntityType, args.IsOwnedByGroupMember, args.Acl, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_CreateGroupEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_CreateGroupEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_DeleteGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_DeleteGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_DeleteGroupResult();
        try
        {
          result.Success = await _iAsync.Group_DeleteGroupAsync(args.GroupId, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_DeleteGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_DeleteGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_DeleteGroupEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_DeleteGroupEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_DeleteGroupEntityResult();
        try
        {
          result.Success = await _iAsync.Group_DeleteGroupEntityAsync(args.GroupId, args.EntityId, args.Version, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_DeleteGroupEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_DeleteGroupEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_GetMyGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_GetMyGroupsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_GetMyGroupsResult();
        try
        {
          result.Success = await _iAsync.Group_GetMyGroupsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_GetMyGroups", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_GetMyGroups", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_IncrementGroupData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_IncrementGroupDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_IncrementGroupDataResult();
        try
        {
          result.Success = await _iAsync.Group_IncrementGroupDataAsync(args.GroupId, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_IncrementGroupData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_IncrementGroupData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_IncrementGroupEntityData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_IncrementGroupEntityDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_IncrementGroupEntityDataResult();
        try
        {
          result.Success = await _iAsync.Group_IncrementGroupEntityDataAsync(args.GroupId, args.EntityId, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_IncrementGroupEntityData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_IncrementGroupEntityData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_InviteGroupMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_InviteGroupMemberArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_InviteGroupMemberResult();
        try
        {
          result.Success = await _iAsync.Group_InviteGroupMemberAsync(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_InviteGroupMember", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_InviteGroupMember", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_JoinGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_JoinGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_JoinGroupResult();
        try
        {
          result.Success = await _iAsync.Group_JoinGroupAsync(args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_JoinGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_JoinGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_LeaveGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_LeaveGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_LeaveGroupResult();
        try
        {
          result.Success = await _iAsync.Group_LeaveGroupAsync(args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_LeaveGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_LeaveGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ListGroupsPage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ListGroupsPageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ListGroupsPageResult();
        try
        {
          result.Success = await _iAsync.Group_ListGroupsPageAsync(args.JsonContext, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ListGroupsPage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ListGroupsPage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ListGroupsPageByOffset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ListGroupsPageByOffsetArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ListGroupsPageByOffsetResult();
        try
        {
          result.Success = await _iAsync.Group_ListGroupsPageByOffsetAsync(args.Context, args.PageOffset, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ListGroupsPageByOffset", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ListGroupsPageByOffset", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ListGroupsWithMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ListGroupsWithMemberArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ListGroupsWithMemberResult();
        try
        {
          result.Success = await _iAsync.Group_ListGroupsWithMemberAsync(args.ProfileId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ListGroupsWithMember", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ListGroupsWithMember", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ReadGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ReadGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ReadGroupResult();
        try
        {
          result.Success = await _iAsync.Group_ReadGroupAsync(args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ReadGroupData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ReadGroupDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ReadGroupDataResult();
        try
        {
          result.Success = await _iAsync.Group_ReadGroupDataAsync(args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ReadGroupEntitiesPage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ReadGroupEntitiesPageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ReadGroupEntitiesPageResult();
        try
        {
          result.Success = await _iAsync.Group_ReadGroupEntitiesPageAsync(args.JsonContext, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntitiesPage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntitiesPage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ReadGroupEntitiesPageByOffset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ReadGroupEntitiesPageByOffsetArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ReadGroupEntitiesPageByOffsetResult();
        try
        {
          result.Success = await _iAsync.Group_ReadGroupEntitiesPageByOffsetAsync(args.EncodedContext, args.PageOffset, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntitiesPageByOffset", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntitiesPageByOffset", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ReadGroupEntity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ReadGroupEntityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ReadGroupEntityResult();
        try
        {
          result.Success = await _iAsync.Group_ReadGroupEntityAsync(args.GroupId, args.EntityId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupEntity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_ReadGroupMembers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_ReadGroupMembersArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_ReadGroupMembersResult();
        try
        {
          result.Success = await _iAsync.Group_ReadGroupMembersAsync(args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupMembers", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_ReadGroupMembers", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_RejectGroupInvitation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_RejectGroupInvitationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_RejectGroupInvitationResult();
        try
        {
          result.Success = await _iAsync.Group_RejectGroupInvitationAsync(args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_RejectGroupInvitation", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_RejectGroupInvitation", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_RejectGroupJoinRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_RejectGroupJoinRequestArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_RejectGroupJoinRequestResult();
        try
        {
          result.Success = await _iAsync.Group_RejectGroupJoinRequestAsync(args.GroupId, args.ProfileId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_RejectGroupJoinRequest", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_RejectGroupJoinRequest", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_RemoveGroupMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_RemoveGroupMemberArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_RemoveGroupMemberResult();
        try
        {
          result.Success = await _iAsync.Group_RemoveGroupMemberAsync(args.GroupId, args.ProfileId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_RemoveGroupMember", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_RemoveGroupMember", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_UpdateGroupData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_UpdateGroupDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_UpdateGroupDataResult();
        try
        {
          result.Success = await _iAsync.Group_UpdateGroupDataAsync(args.GroupId, args.Version, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_UpdateGroupEntityData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_UpdateGroupEntityDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_UpdateGroupEntityDataResult();
        try
        {
          result.Success = await _iAsync.Group_UpdateGroupEntityDataAsync(args.GroupId, args.EntityId, args.Version, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupEntityData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupEntityData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_UpdateGroupMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_UpdateGroupMemberArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_UpdateGroupMemberResult();
        try
        {
          result.Success = await _iAsync.Group_UpdateGroupMemberAsync(args.GroupId, args.ProfileId, args.Role, args.JsonAttributes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupMember", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupMember", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Group_UpdateGroupName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Group_UpdateGroupNameArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Group_UpdateGroupNameResult();
        try
        {
          result.Success = await _iAsync.Group_UpdateGroupNameAsync(args.GroupId, args.Name, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupName", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Group_UpdateGroupName", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_AttachEmailIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_AttachEmailIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_AttachEmailIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_AttachEmailIdentityAsync(args.Email, args.Password, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachEmailIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachEmailIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_MergeEmailIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_MergeEmailIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_MergeEmailIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_MergeEmailIdentityAsync(args.Email, args.Password, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_MergeEmailIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_MergeEmailIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_DetachEmailIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_DetachEmailIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_DetachEmailIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_DetachEmailIdentityAsync(args.Email, args.ContinueAnon, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachEmailIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachEmailIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_AttachUniversalIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_AttachUniversalIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_AttachUniversalIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_AttachUniversalIdentityAsync(args.UserId, args.Password, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachUniversalIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachUniversalIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_MergeUniversalIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_MergeUniversalIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_MergeUniversalIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_MergeUniversalIdentityAsync(args.UserId, args.Password, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_MergeUniversalIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_MergeUniversalIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_DetachUniversalIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_DetachUniversalIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_DetachUniversalIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_DetachUniversalIdentityAsync(args.UserId, args.ContinueAnon, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachUniversalIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachUniversalIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_SwitchToChildProfile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_SwitchToChildProfileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_SwitchToChildProfileResult();
        try
        {
          result.Success = await _iAsync.Identity_SwitchToChildProfileAsync(args.ChildProfileId, args.ChildAppId, args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_SwitchToChildProfile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_SwitchToChildProfile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_SwitchToSingletonChildProfile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_SwitchToSingletonChildProfileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_SwitchToSingletonChildProfileResult();
        try
        {
          result.Success = await _iAsync.Identity_SwitchToSingletonChildProfileAsync(args.ChildAppId, args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_SwitchToSingletonChildProfile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_SwitchToSingletonChildProfile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_AttachParentWithIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_AttachParentWithIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_AttachParentWithIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_AttachParentWithIdentityAsync(args.ExternalId, args.AuthenticationToken, args.AuthenticationType, args.ExternalAuthName, args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachParentWithIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachParentWithIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_SwitchToParentProfile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_SwitchToParentProfileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_SwitchToParentProfileResult();
        try
        {
          result.Success = await _iAsync.Identity_SwitchToParentProfileAsync(args.ParentLevelName, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_SwitchToParentProfile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_SwitchToParentProfile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_DetachParent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_DetachParentArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_DetachParentResult();
        try
        {
          result.Success = await _iAsync.Identity_DetachParentAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachParent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachParent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_GetChildProfiles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_GetChildProfilesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_GetChildProfilesResult();
        try
        {
          result.Success = await _iAsync.Identity_GetChildProfilesAsync(args.IncludeSummaryData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetChildProfiles", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetChildProfiles", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_GetIdentities_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_GetIdentitiesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_GetIdentitiesResult();
        try
        {
          result.Success = await _iAsync.Identity_GetIdentitiesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetIdentities", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetIdentities", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_GetExpiredIdentities_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_GetExpiredIdentitiesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_GetExpiredIdentitiesResult();
        try
        {
          result.Success = await _iAsync.Identity_GetExpiredIdentitiesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetExpiredIdentities", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetExpiredIdentities", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_RefreshIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_RefreshIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_RefreshIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_RefreshIdentityAsync(args.ExternalId, args.AuthenticationToken, args.AuthenticationType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_RefreshIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_RefreshIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_ChangeEmailIdentity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_ChangeEmailIdentityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_ChangeEmailIdentityResult();
        try
        {
          result.Success = await _iAsync.Identity_ChangeEmailIdentityAsync(args.OldEmailAddress, args.Password, args.NewEmailAddress, args.UpdateContactEmail, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_ChangeEmailIdentity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_ChangeEmailIdentity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_AttachPeerProfile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_AttachPeerProfileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_AttachPeerProfileResult();
        try
        {
          result.Success = await _iAsync.Identity_AttachPeerProfileAsync(args.Peer, args.ExternalId, args.AuthenticationToken, args.AuthenticationType, args.ExternalAuthName, args.ForceCreate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachPeerProfile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_AttachPeerProfile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_DetachPeer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_DetachPeerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_DetachPeerResult();
        try
        {
          result.Success = await _iAsync.Identity_DetachPeerAsync(args.Peer, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachPeer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_DetachPeer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Identity_GetPeerProfiles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Identity_GetPeerProfilesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Identity_GetPeerProfilesResult();
        try
        {
          result.Success = await _iAsync.Identity_GetPeerProfilesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetPeerProfiles", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Identity_GetPeerProfiles", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Mail_SendBasicEmail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Mail_SendBasicEmailArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Mail_SendBasicEmailResult();
        try
        {
          result.Success = await _iAsync.Mail_SendBasicEmailAsync(args.ProfileId, args.Subject, args.Body, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Mail_SendBasicEmail", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Mail_SendBasicEmail", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Mail_SendAdvancedEmail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Mail_SendAdvancedEmailArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Mail_SendAdvancedEmailResult();
        try
        {
          result.Success = await _iAsync.Mail_SendAdvancedEmailAsync(args.ProfileId, args.JsonServiceParams, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Mail_SendAdvancedEmail", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Mail_SendAdvancedEmail", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Mail_SendAdvancedEmailByAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Mail_SendAdvancedEmailByAddressArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Mail_SendAdvancedEmailByAddressResult();
        try
        {
          result.Success = await _iAsync.Mail_SendAdvancedEmailByAddressAsync(args.EmailAddress, args.JsonServiceParams, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Mail_SendAdvancedEmailByAddress", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Mail_SendAdvancedEmailByAddress", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_ReadArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_ReadResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_ReadAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_Read", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_Read", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_SetPlayerRating_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_SetPlayerRatingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_SetPlayerRatingResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_SetPlayerRatingAsync(args.PlayerRating, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_SetPlayerRating", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_SetPlayerRating", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_ResetPlayerRating_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_ResetPlayerRatingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_ResetPlayerRatingResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_ResetPlayerRatingAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_ResetPlayerRating", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_ResetPlayerRating", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_IncrementPlayerRating_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_IncrementPlayerRatingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_IncrementPlayerRatingResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_IncrementPlayerRatingAsync(args.Increment, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_IncrementPlayerRating", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_IncrementPlayerRating", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_DecrementPlayerRating_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_DecrementPlayerRatingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_DecrementPlayerRatingResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_DecrementPlayerRatingAsync(args.Decrement, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_DecrementPlayerRating", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_DecrementPlayerRating", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_TurnShieldOn_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_TurnShieldOnArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_TurnShieldOnResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_TurnShieldOnAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOn", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOn", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_TurnShieldOnFor_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_TurnShieldOnForArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_TurnShieldOnForResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_TurnShieldOnForAsync(args.Minutes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOnFor", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOnFor", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_TurnShieldOff_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_TurnShieldOffArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_TurnShieldOffResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_TurnShieldOffAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOff", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_TurnShieldOff", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_IncrementShieldOnFor_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_IncrementShieldOnForArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_IncrementShieldOnForResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_IncrementShieldOnForAsync(args.Minutes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_IncrementShieldOnFor", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_IncrementShieldOnFor", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_GetShieldExpiry_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_GetShieldExpiryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_GetShieldExpiryResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_GetShieldExpiryAsync(args.PlayerId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_GetShieldExpiry", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_GetShieldExpiry", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_FindPlayers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_FindPlayersArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_FindPlayersResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_FindPlayersAsync(args.RangeDelta, args.NumMatches, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayers", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayers", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_FindPlayersWithAttributes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_FindPlayersWithAttributesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_FindPlayersWithAttributesResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_FindPlayersWithAttributesAsync(args.RangeDelta, args.NumMatches, args.JsonAttributes, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersWithAttributes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersWithAttributes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_FindPlayersUsingFilter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_FindPlayersUsingFilterArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_FindPlayersUsingFilterResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_FindPlayersUsingFilterAsync(args.RangeDelta, args.NumMatches, args.JsonExtraParms, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersUsingFilter", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersUsingFilter", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_FindPlayersWithAttributesUsingFilter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_FindPlayersWithAttributesUsingFilterArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_FindPlayersWithAttributesUsingFilterResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_FindPlayersWithAttributesUsingFilterAsync(args.RangeDelta, args.NumMatches, args.JsonAttributes, args.JsonExtraParms, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersWithAttributesUsingFilter", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_FindPlayersWithAttributesUsingFilter", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_EnableMatchMaking_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_EnableMatchMakingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_EnableMatchMakingResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_EnableMatchMakingAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_EnableMatchMaking", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_EnableMatchMaking", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task MatchMaking_DisableMatchMaking_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new MatchMaking_DisableMatchMakingArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new MatchMaking_DisableMatchMakingResult();
        try
        {
          result.Success = await _iAsync.MatchMaking_DisableMatchMakingAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_DisableMatchMaking", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MatchMaking_DisableMatchMaking", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task OneWayMatch_StartMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new OneWayMatch_StartMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new OneWayMatch_StartMatchResult();
        try
        {
          result.Success = await _iAsync.OneWayMatch_StartMatchAsync(args.OtherPlayerId, args.RangeDelta, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OneWayMatch_StartMatch", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OneWayMatch_StartMatch", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task OneWayMatch_CancelMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new OneWayMatch_CancelMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new OneWayMatch_CancelMatchResult();
        try
        {
          result.Success = await _iAsync.OneWayMatch_CancelMatchAsync(args.PlaybackStreamId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OneWayMatch_CancelMatch", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OneWayMatch_CancelMatch", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task OneWayMatch_CompleteMatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new OneWayMatch_CompleteMatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new OneWayMatch_CompleteMatchResult();
        try
        {
          result.Success = await _iAsync.OneWayMatch_CompleteMatchAsync(args.PlaybackStreamId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OneWayMatch_CompleteMatch", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OneWayMatch_CompleteMatch", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlaybackStream_StartStream_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlaybackStream_StartStreamArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlaybackStream_StartStreamResult();
        try
        {
          result.Success = await _iAsync.PlaybackStream_StartStreamAsync(args.TargetPlayerId, args.IncludeSharedData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_StartStream", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_StartStream", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlaybackStream_ReadStream_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlaybackStream_ReadStreamArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlaybackStream_ReadStreamResult();
        try
        {
          result.Success = await _iAsync.PlaybackStream_ReadStreamAsync(args.PlaybackStreamId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_ReadStream", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_ReadStream", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlaybackStream_EndStream_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlaybackStream_EndStreamArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlaybackStream_EndStreamResult();
        try
        {
          result.Success = await _iAsync.PlaybackStream_EndStreamAsync(args.PlaybackStreamId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_EndStream", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_EndStream", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlaybackStream_DeleteStream_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlaybackStream_DeleteStreamArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlaybackStream_DeleteStreamResult();
        try
        {
          result.Success = await _iAsync.PlaybackStream_DeleteStreamAsync(args.PlaybackStreamId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_DeleteStream", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_DeleteStream", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlaybackStream_AddEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlaybackStream_AddEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlaybackStream_AddEventResult();
        try
        {
          result.Success = await _iAsync.PlaybackStream_AddEventAsync(args.PlaybackStreamId, args.EventData, args.Summary, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_AddEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_AddEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlaybackStream_GetRecentStreamsForInitiatingPlayer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlaybackStream_GetRecentStreamsForInitiatingPlayerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlaybackStream_GetRecentStreamsForInitiatingPlayerResult();
        try
        {
          result.Success = await _iAsync.PlaybackStream_GetRecentStreamsForInitiatingPlayerAsync(args.InitiatingPlayerId, args.MaxNumStreams, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_GetRecentStreamsForInitiatingPlayer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_GetRecentStreamsForInitiatingPlayer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlaybackStream_GetRecentStreamsForTargetPlayer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlaybackStream_GetRecentStreamsForTargetPlayerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlaybackStream_GetRecentStreamsForTargetPlayerResult();
        try
        {
          result.Success = await _iAsync.PlaybackStream_GetRecentStreamsForTargetPlayerAsync(args.TargetPlayerId, args.MaxNumStreams, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_GetRecentStreamsForTargetPlayer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlaybackStream_GetRecentStreamsForTargetPlayer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_ReadUserState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_ReadUserStateArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_ReadUserStateResult();
        try
        {
          result.Success = await _iAsync.PlayerState_ReadUserStateAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_ReadUserState", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_ReadUserState", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_DeleteUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_DeleteUserArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_DeleteUserResult();
        try
        {
          result.Success = await _iAsync.PlayerState_DeleteUserAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_DeleteUser", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_DeleteUser", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_ResetUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_ResetUserArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_ResetUserResult();
        try
        {
          result.Success = await _iAsync.PlayerState_ResetUserAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_ResetUser", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_ResetUser", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_Logout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_LogoutArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_LogoutResult();
        try
        {
          result.Success = await _iAsync.PlayerState_LogoutAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_Logout", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_Logout", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_UpdateUserName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_UpdateUserNameArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_UpdateUserNameResult();
        try
        {
          result.Success = await _iAsync.PlayerState_UpdateUserNameAsync(args.UserName, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateUserName", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateUserName", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_UpdateSummaryFriendData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_UpdateSummaryFriendDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_UpdateSummaryFriendDataResult();
        try
        {
          result.Success = await _iAsync.PlayerState_UpdateSummaryFriendDataAsync(args.JsonSummaryData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateSummaryFriendData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateSummaryFriendData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_GetAttributes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_GetAttributesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_GetAttributesResult();
        try
        {
          result.Success = await _iAsync.PlayerState_GetAttributesAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_GetAttributes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_GetAttributes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_UpdateAttributes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_UpdateAttributesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_UpdateAttributesResult();
        try
        {
          result.Success = await _iAsync.PlayerState_UpdateAttributesAsync(args.JsonAttributes, args.WipeExisting, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateAttributes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateAttributes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_RemoveAttributes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_RemoveAttributesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_RemoveAttributesResult();
        try
        {
          result.Success = await _iAsync.PlayerState_RemoveAttributesAsync(args.AttributeNames, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_RemoveAttributes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_RemoveAttributes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_UpdateUserPictureUrl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_UpdateUserPictureUrlArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_UpdateUserPictureUrlResult();
        try
        {
          result.Success = await _iAsync.PlayerState_UpdateUserPictureUrlAsync(args.PictureUrl, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateUserPictureUrl", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateUserPictureUrl", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerState_UpdateContactEmail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerState_UpdateContactEmailArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerState_UpdateContactEmailResult();
        try
        {
          result.Success = await _iAsync.PlayerState_UpdateContactEmailAsync(args.ContactEmail, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateContactEmail", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerState_UpdateContactEmail", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_ReadAllUserStats_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_ReadAllUserStatsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_ReadAllUserStatsResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_ReadAllUserStatsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadAllUserStats", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadAllUserStats", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_ReadUserStatsSubset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_ReadUserStatsSubsetArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_ReadUserStatsSubsetResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_ReadUserStatsSubsetAsync(args.PlayerStats, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadUserStatsSubset", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadUserStatsSubset", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_ReadUserStatsForCategory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_ReadUserStatsForCategoryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_ReadUserStatsForCategoryResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_ReadUserStatsForCategoryAsync(args.Category, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadUserStatsForCategory", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ReadUserStatsForCategory", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_ResetAllUserStats_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_ResetAllUserStatsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_ResetAllUserStatsResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_ResetAllUserStatsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ResetAllUserStats", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ResetAllUserStats", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_IncrementUserStats_SSFO_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_IncrementUserStats_SSFOArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_IncrementUserStats_SSFOResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_IncrementUserStats_SSFOAsync(args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementUserStats_SSFO", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementUserStats_SSFO", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_IncrementUserStats_DSFO_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_IncrementUserStats_DSFOArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_IncrementUserStats_DSFOResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_IncrementUserStats_DSFOAsync(args.DictData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementUserStats_DSFO", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementUserStats_DSFO", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_ProcessStatistics_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_ProcessStatisticsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_ProcessStatisticsResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_ProcessStatisticsAsync(args.StatisticsData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ProcessStatistics", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_ProcessStatistics", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_GetNextExperienceLevel_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_GetNextExperienceLevelArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_GetNextExperienceLevelResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_GetNextExperienceLevelAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_GetNextExperienceLevel", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_GetNextExperienceLevel", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_IncrementExperiencePoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_IncrementExperiencePointsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_IncrementExperiencePointsResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_IncrementExperiencePointsAsync(args.XpValue, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementExperiencePoints", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_IncrementExperiencePoints", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatistics_SetExperiencePoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatistics_SetExperiencePointsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatistics_SetExperiencePointsResult();
        try
        {
          result.Success = await _iAsync.PlayerStatistics_SetExperiencePointsAsync(args.XpValue, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_SetExperiencePoints", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatistics_SetExperiencePoints", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatisticsEvent_TriggerStatsEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatisticsEvent_TriggerStatsEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatisticsEvent_TriggerStatsEventResult();
        try
        {
          result.Success = await _iAsync.PlayerStatisticsEvent_TriggerStatsEventAsync(args.EventName, args.EventMultiplier, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatisticsEvent_TriggerStatsEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatisticsEvent_TriggerStatsEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PlayerStatisticsEvent_TriggerStatsEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PlayerStatisticsEvent_TriggerStatsEventsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PlayerStatisticsEvent_TriggerStatsEventsResult();
        try
        {
          result.Success = await _iAsync.PlayerStatisticsEvent_TriggerStatsEventsAsync(args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatisticsEvent_TriggerStatsEvents", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PlayerStatisticsEvent_TriggerStatsEvents", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Product_GetCurrency_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Product_GetCurrencyArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Product_GetCurrencyResult();
        try
        {
          result.Success = await _iAsync.Product_GetCurrencyAsync(args.CurrencyType, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetCurrency", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetCurrency", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Product_GetSalesInventory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Product_GetSalesInventoryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Product_GetSalesInventoryResult();
        try
        {
          result.Success = await _iAsync.Product_GetSalesInventoryAsync(args.Platform, args.UserCurrency, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetSalesInventory", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetSalesInventory", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Product_GetSalesInventoryByCategory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Product_GetSalesInventoryByCategoryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Product_GetSalesInventoryByCategoryResult();
        try
        {
          result.Success = await _iAsync.Product_GetSalesInventoryByCategoryAsync(args.Platform, args.UserCurrency, args.Category, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetSalesInventoryByCategory", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetSalesInventoryByCategory", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Product_VerifyMicrosoftReceipt_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Product_VerifyMicrosoftReceiptArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Product_VerifyMicrosoftReceiptResult();
        try
        {
          result.Success = await _iAsync.Product_VerifyMicrosoftReceiptAsync(args.Receipt, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Product_VerifyMicrosoftReceipt", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Product_VerifyMicrosoftReceipt", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Product_GetEligiblePromotions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Product_GetEligiblePromotionsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Product_GetEligiblePromotionsResult();
        try
        {
          result.Success = await _iAsync.Product_GetEligiblePromotionsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetEligiblePromotions", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Product_GetEligiblePromotions", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Product_VerifyItunesReceipt_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Product_VerifyItunesReceiptArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Product_VerifyItunesReceiptResult();
        try
        {
          result.Success = await _iAsync.Product_VerifyItunesReceiptAsync(args.Base64EncReceiptData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Product_VerifyItunesReceipt", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Product_VerifyItunesReceipt", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Profanity_ProfanityCheck_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Profanity_ProfanityCheckArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Profanity_ProfanityCheckResult();
        try
        {
          result.Success = await _iAsync.Profanity_ProfanityCheckAsync(args.Text, args.Languages, args.FlagEmail, args.FlagPhone, args.FlagUrls, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityCheck", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityCheck", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Profanity_ProfanityReplaceText_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Profanity_ProfanityReplaceTextArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Profanity_ProfanityReplaceTextResult();
        try
        {
          result.Success = await _iAsync.Profanity_ProfanityReplaceTextAsync(args.Text, args.ReplaceSymbol, args.Languages, args.FlagEmail, args.FlagPhone, args.FlagUrls, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityReplaceText", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityReplaceText", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Profanity_ProfanityIdentifyBadWords_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Profanity_ProfanityIdentifyBadWordsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Profanity_ProfanityIdentifyBadWordsResult();
        try
        {
          result.Success = await _iAsync.Profanity_ProfanityIdentifyBadWordsAsync(args.Text, args.Languages, args.FlagEmail, args.FlagPhone, args.FlagUrls, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityIdentifyBadWords", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Profanity_ProfanityIdentifyBadWords", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_DeregisterAllPushNotificationDeviceTokens_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_DeregisterAllPushNotificationDeviceTokensArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_DeregisterAllPushNotificationDeviceTokensResult();
        try
        {
          result.Success = await _iAsync.PushNotification_DeregisterAllPushNotificationDeviceTokensAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_DeregisterAllPushNotificationDeviceTokens", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_DeregisterAllPushNotificationDeviceTokens", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_DeregisterPushNotificationDeviceToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_DeregisterPushNotificationDeviceTokenArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_DeregisterPushNotificationDeviceTokenResult();
        try
        {
          result.Success = await _iAsync.PushNotification_DeregisterPushNotificationDeviceTokenAsync(args.Platform, args.Token, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_DeregisterPushNotificationDeviceToken", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_DeregisterPushNotificationDeviceToken", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_RegisterPushNotificationDeviceToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_RegisterPushNotificationDeviceTokenArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_RegisterPushNotificationDeviceTokenResult();
        try
        {
          result.Success = await _iAsync.PushNotification_RegisterPushNotificationDeviceTokenAsync(args.Platform, args.Token, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_RegisterPushNotificationDeviceToken", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_RegisterPushNotificationDeviceToken", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendSimplePushNotification_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendSimplePushNotificationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendSimplePushNotificationResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendSimplePushNotificationAsync(args.ToProfileId, args.Message, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendSimplePushNotification", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendSimplePushNotification", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendRichPushNotification_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendRichPushNotificationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendRichPushNotificationResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendRichPushNotificationAsync(args.ToProfileId, args.NotificationTemplateId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRichPushNotification", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRichPushNotification", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendRichPushNotificationWithParams_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendRichPushNotificationWithParamsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendRichPushNotificationWithParamsResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendRichPushNotificationWithParamsAsync(args.ToProfileId, args.NotificationTemplateId, args.SubstitutionJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRichPushNotificationWithParams", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRichPushNotificationWithParams", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendTemplatedPushNotificationToGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendTemplatedPushNotificationToGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendTemplatedPushNotificationToGroupResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendTemplatedPushNotificationToGroupAsync(args.GroupId, args.NotificationTemplateId, args.SubstitutionsJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendTemplatedPushNotificationToGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendTemplatedPushNotificationToGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendNormalizedPushNotificationToGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendNormalizedPushNotificationToGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendNormalizedPushNotificationToGroupResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendNormalizedPushNotificationToGroupAsync(args.GroupId, args.AlertContentJson, args.CustomDataJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotificationToGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotificationToGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_ScheduleRawPushNotificationUTC_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_ScheduleRawPushNotificationUTCArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_ScheduleRawPushNotificationUTCResult();
        try
        {
          result.Success = await _iAsync.PushNotification_ScheduleRawPushNotificationUTCAsync(args.ProfileId, args.FcmContent, args.IosContent, args.FacebookContent, args.StartTime, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRawPushNotificationUTC", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRawPushNotificationUTC", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_ScheduleRawPushNotificationMinutes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_ScheduleRawPushNotificationMinutesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_ScheduleRawPushNotificationMinutesResult();
        try
        {
          result.Success = await _iAsync.PushNotification_ScheduleRawPushNotificationMinutesAsync(args.ProfileId, args.FcmContent, args.IosContent, args.FacebookContent, args.MinutesFromNow, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRawPushNotificationMinutes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRawPushNotificationMinutes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendRawPushNotification_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendRawPushNotificationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendRawPushNotificationResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendRawPushNotificationAsync(args.ToProfileId, args.FcmContent, args.IosContent, args.FacebookContent, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotification", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotification", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendRawPushNotificationBatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendRawPushNotificationBatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendRawPushNotificationBatchResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendRawPushNotificationBatchAsync(args.ProfileIds, args.FcmContent, args.IosContent, args.FacebookContent, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotificationBatch", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotificationBatch", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendRawPushNotificationToGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendRawPushNotificationToGroupArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendRawPushNotificationToGroupResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendRawPushNotificationToGroupAsync(args.GroupId, args.FcmContent, args.IosContent, args.FacebookContent, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotificationToGroup", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendRawPushNotificationToGroup", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_ScheduleNormalizedPushNotificationUTC_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_ScheduleNormalizedPushNotificationUTCArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_ScheduleNormalizedPushNotificationUTCResult();
        try
        {
          result.Success = await _iAsync.PushNotification_ScheduleNormalizedPushNotificationUTCAsync(args.ProfileId, args.AlertContentJson, args.CustomDataJson, args.StartTime, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleNormalizedPushNotificationUTC", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleNormalizedPushNotificationUTC", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_ScheduleNormalizedPushNotificationMinutes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_ScheduleNormalizedPushNotificationMinutesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_ScheduleNormalizedPushNotificationMinutesResult();
        try
        {
          result.Success = await _iAsync.PushNotification_ScheduleNormalizedPushNotificationMinutesAsync(args.ProfileId, args.AlertContentJson, args.CustomDataJson, args.MinutesFromNow, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleNormalizedPushNotificationMinutes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleNormalizedPushNotificationMinutes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_ScheduleRichPushNotificationUTC_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_ScheduleRichPushNotificationUTCArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_ScheduleRichPushNotificationUTCResult();
        try
        {
          result.Success = await _iAsync.PushNotification_ScheduleRichPushNotificationUTCAsync(args.ProfileId, args.NotificationTemplateId, args.SubstitutionsJson, args.StartTime, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRichPushNotificationUTC", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRichPushNotificationUTC", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_ScheduleRichPushNotificationMinutes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_ScheduleRichPushNotificationMinutesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_ScheduleRichPushNotificationMinutesResult();
        try
        {
          result.Success = await _iAsync.PushNotification_ScheduleRichPushNotificationMinutesAsync(args.ProfileId, args.NotificationTemplateId, args.SubstitutionsJson, args.MinutesFromNow, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRichPushNotificationMinutes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_ScheduleRichPushNotificationMinutes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendNormalizedPushNotification_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendNormalizedPushNotificationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendNormalizedPushNotificationResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendNormalizedPushNotificationAsync(args.ToProfileId, args.AlertContentJson, args.CustomDataJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotification", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotification", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task PushNotification_SendNormalizedPushNotificationBatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new PushNotification_SendNormalizedPushNotificationBatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new PushNotification_SendNormalizedPushNotificationBatchResult();
        try
        {
          result.Success = await _iAsync.PushNotification_SendNormalizedPushNotificationBatchAsync(args.ProfileIds, args.AlertContentJson, args.CustomDataJson, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotificationBatch", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushNotification_SendNormalizedPushNotificationBatch", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Script_RunScript_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Script_RunScriptArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Script_RunScriptResult();
        try
        {
          result.Success = await _iAsync.Script_RunScriptAsync(args.ScriptName, args.JsonScriptData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunScript", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunScript", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Script_ScheduleRunScriptUTC_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Script_ScheduleRunScriptUTCArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Script_ScheduleRunScriptUTCResult();
        try
        {
          result.Success = await _iAsync.Script_ScheduleRunScriptUTCAsync(args.ScriptName, args.JsonScriptData, args.StartDateInUTC, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Script_ScheduleRunScriptUTC", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Script_ScheduleRunScriptUTC", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Script_ScheduleRunScriptMinutes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Script_ScheduleRunScriptMinutesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Script_ScheduleRunScriptMinutesResult();
        try
        {
          result.Success = await _iAsync.Script_ScheduleRunScriptMinutesAsync(args.ScriptName, args.JsonScriptData, args.MinutesFromNow, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Script_ScheduleRunScriptMinutes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Script_ScheduleRunScriptMinutes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Script_RunParentScript_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Script_RunParentScriptArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Script_RunParentScriptResult();
        try
        {
          result.Success = await _iAsync.Script_RunParentScriptAsync(args.ScriptName, args.JsonScriptData, args.ParentLevel, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunParentScript", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunParentScript", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Script_CancelScheduledScript_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Script_CancelScheduledScriptArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Script_CancelScheduledScriptResult();
        try
        {
          result.Success = await _iAsync.Script_CancelScheduledScriptAsync(args.JobId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Script_CancelScheduledScript", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Script_CancelScheduledScript", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Script_RunPeerScript_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Script_RunPeerScriptArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Script_RunPeerScriptResult();
        try
        {
          result.Success = await _iAsync.Script_RunPeerScriptAsync(args.ScriptName, args.JsonScriptData, args.Peer, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunPeerScript", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunPeerScript", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Script_RunPeerScriptAsynch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Script_RunPeerScriptAsynchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Script_RunPeerScriptAsynchResult();
        try
        {
          result.Success = await _iAsync.Script_RunPeerScriptAsynchAsync(args.ScriptName, args.JsonScriptData, args.Peer, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunPeerScriptAsynchAsync", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Script_RunPeerScriptAsynchAsync", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetSocialLeaderboard_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetSocialLeaderboardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetSocialLeaderboardResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetSocialLeaderboardAsync(args.LeaderboardId, args.ReplaceName, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetSocialLeaderboard", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetSocialLeaderboard", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetMultiSocialLeaderboard_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetMultiSocialLeaderboardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetMultiSocialLeaderboardResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetMultiSocialLeaderboardAsync(args.LeaderboardIds, args.LeaderboardResultCount, args.ReplaceName, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetMultiSocialLeaderboard", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetMultiSocialLeaderboard", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGlobalLeaderboardPage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGlobalLeaderboardPageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGlobalLeaderboardPageResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGlobalLeaderboardPageAsync(args.LeaderboardId, args.Sort, args.StartIndex, args.EndIndex, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGlobalLeaderboardPageByVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGlobalLeaderboardPageByVersionArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGlobalLeaderboardPageByVersionResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGlobalLeaderboardPageByVersionAsync(args.LeaderboardId, args.Sort, args.StartIndex, args.EndIndex, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPageByVersion", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardPageByVersion", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGlobalLeaderboardView_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGlobalLeaderboardViewArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGlobalLeaderboardViewResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGlobalLeaderboardViewAsync(args.LeaderboardId, args.Sort, args.BeforeCount, args.AfterCount, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardView", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardView", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGlobalLeaderboardViewByVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGlobalLeaderboardViewByVersionArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGlobalLeaderboardViewByVersionResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGlobalLeaderboardViewByVersionAsync(args.LeaderboardId, args.Sort, args.BeforeCount, args.AfterCount, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardViewByVersion", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardViewByVersion", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGlobalLeaderboardVersions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGlobalLeaderboardVersionsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGlobalLeaderboardVersionsResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGlobalLeaderboardVersionsAsync(args.LeaderboardId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardVersions", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardVersions", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGroupSocialLeaderboard_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGroupSocialLeaderboardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGroupSocialLeaderboardResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGroupSocialLeaderboardAsync(args.LeaderboardId, args.GroupId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGroupSocialLeaderboard", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGroupSocialLeaderboard", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_PostScoreToLeaderboard_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_PostScoreToLeaderboardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_PostScoreToLeaderboardResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_PostScoreToLeaderboardAsync(args.LeaderboardId, args.Score, args.JsonData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToLeaderboard", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToLeaderboard", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_RemovePlayerScore_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_RemovePlayerScoreArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_RemovePlayerScoreResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_RemovePlayerScoreAsync(args.LeaderboardId, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_RemovePlayerScore", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_RemovePlayerScore", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_PostScoreToDynamicLeaderboard_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_PostScoreToDynamicLeaderboardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_PostScoreToDynamicLeaderboardResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_PostScoreToDynamicLeaderboardAsync(args.LeaderboardId, args.Score, args.JsonData, args.LeaderboardType, args.RotationType, args.RotationReset, args.RetainedCount, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboard", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboard", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_PostScoreToDynamicLeaderboardDays_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_PostScoreToDynamicLeaderboardDaysArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_PostScoreToDynamicLeaderboardDaysResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_PostScoreToDynamicLeaderboardDaysAsync(args.LeaderboardId, args.Score, args.JsonData, args.LeaderboardType, args.RotationReset, args.RetainedCount, args.NumDaysToRotate, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboardDays", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_PostScoreToDynamicLeaderboardDays", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetPlayersSocialLeaderboard_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetPlayersSocialLeaderboardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetPlayersSocialLeaderboardResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetPlayersSocialLeaderboardAsync(args.LeaderboardId, args.ProfileIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayersSocialLeaderboard", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayersSocialLeaderboard", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_ListLeaderboards_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_ListLeaderboardsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_ListLeaderboardsResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_ListLeaderboardsAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_ListLeaderboards", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_ListLeaderboards", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGlobalLeaderboardEntryCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGlobalLeaderboardEntryCountArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGlobalLeaderboardEntryCountResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGlobalLeaderboardEntryCountAsync(args.LeaderboardId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCount", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCount", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionAsync(args.LeaderboardId, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetPlayerScore_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetPlayerScoreArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetPlayerScoreResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetPlayerScoreAsync(args.LeaderboardId, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayerScore", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayerScore", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialLeaderboard_GetPlayerScoresFromLeaderboards_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialLeaderboard_GetPlayerScoresFromLeaderboardsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialLeaderboard_GetPlayerScoresFromLeaderboardsResult();
        try
        {
          result.Success = await _iAsync.SocialLeaderboard_GetPlayerScoresFromLeaderboardsAsync(args.LeaderboardIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayerScoresFromLeaderboards", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialLeaderboard_GetPlayerScoresFromLeaderboards", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Time_ReadServerTime_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Time_ReadServerTimeArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Time_ReadServerTimeResult();
        try
        {
          result.Success = await _iAsync.Time_ReadServerTimeAsync(args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Time_ReadServerTime", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Time_ReadServerTime", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_ClaimTournamentReward_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_ClaimTournamentRewardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_ClaimTournamentRewardResult();
        try
        {
          result.Success = await _iAsync.Tournament_ClaimTournamentRewardAsync(args.LeaderboardId, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_ClaimTournamentReward", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_ClaimTournamentReward", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_GetTournamentStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_GetTournamentStatusArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_GetTournamentStatusResult();
        try
        {
          result.Success = await _iAsync.Tournament_GetTournamentStatusAsync(args.LeaderboardId, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_GetTournamentStatus", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_GetTournamentStatus", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_JoinTournament_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_JoinTournamentArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_JoinTournamentResult();
        try
        {
          result.Success = await _iAsync.Tournament_JoinTournamentAsync(args.LeaderboardId, args.TournamentCode, args.InitialScore, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_JoinTournament", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_JoinTournament", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_LeaveTournament_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_LeaveTournamentArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_LeaveTournamentResult();
        try
        {
          result.Success = await _iAsync.Tournament_LeaveTournamentAsync(args.LeaderboardId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_LeaveTournament", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_LeaveTournament", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_PostTournamentScore_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_PostTournamentScoreArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_PostTournamentScoreResult();
        try
        {
          result.Success = await _iAsync.Tournament_PostTournamentScoreAsync(args.LeaderboardId, args.Score, args.JsonData, args.RoundStartedTime, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_PostTournamentScore", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_PostTournamentScore", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_PostTournamentScoreWithResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_PostTournamentScoreWithResultsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_PostTournamentScoreWithResultsResult();
        try
        {
          result.Success = await _iAsync.Tournament_PostTournamentScoreWithResultsAsync(args.LeaderboardId, args.Score, args.JsonData, args.RoundStartedTime, args.Sort, args.BeforeCount, args.AfterCount, args.InitialScore, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_PostTournamentScoreWithResults", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_PostTournamentScoreWithResults", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_ViewCurrentReward_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_ViewCurrentRewardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_ViewCurrentRewardResult();
        try
        {
          result.Success = await _iAsync.Tournament_ViewCurrentRewardAsync(args.LeaderboardId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_ViewCurrentReward", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_ViewCurrentReward", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Tournament_ViewReward_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Tournament_ViewRewardArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Tournament_ViewRewardResult();
        try
        {
          result.Success = await _iAsync.Tournament_ViewRewardAsync(args.LeaderboardId, args.VersionId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_ViewReward", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Tournament_ViewReward", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Patch_GetGameManifest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Patch_GetGameManifestArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Patch_GetGameManifestResult();
        try
        {
          result.Success = await _iAsync.Patch_GetGameManifestAsync(args.GameId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Patch_GetGameManifest", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Patch_GetGameManifest", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ShareVideo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ShareVideoArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ShareVideoResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ShareVideoAsync(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareVideo", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareVideo", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ShareScreenshot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ShareScreenshotArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ShareScreenshotResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ShareScreenshotAsync(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareScreenshot", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareScreenshot", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ShareAchievement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ShareAchievementArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ShareAchievementResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ShareAchievementAsync(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareAchievement", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareAchievement", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ShareApp_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ShareAppArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ShareAppResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ShareAppAsync(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareApp", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareApp", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ShareChannel_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ShareChannelArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ShareChannelResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ShareChannelAsync(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareChannel", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareChannel", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ShareLink_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ShareLinkArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ShareLinkResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ShareLinkAsync(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareLink", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareLink", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ShareGameGuide_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ShareGameGuideArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ShareGameGuideResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ShareGameGuideAsync(args.Timestamp, args.Resource, args.Tagged, args.Show, args.Block, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareGameGuide", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ShareGameGuide", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ReadSocialFeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ReadSocialFeedArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ReadSocialFeedResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ReadSocialFeedAsync(args.Skip, args.Limit, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadSocialFeed", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadSocialFeed", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ReadFilteredSocialFeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ReadFilteredSocialFeedArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ReadFilteredSocialFeedResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ReadFilteredSocialFeedAsync(args.Skip, args.Limit, args.PlayerIds, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadFilteredSocialFeed", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadFilteredSocialFeed", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ReadFriendsSocialFeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ReadFriendsSocialFeedArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ReadFriendsSocialFeedResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ReadFriendsSocialFeedAsync(args.Skip, args.Limit, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadFriendsSocialFeed", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadFriendsSocialFeed", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_PostComment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_PostCommentArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_PostCommentResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_PostCommentAsync(args.Timestamp, args.ParentId, args.Content, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_PostComment", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_PostComment", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_PostCommentReply_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_PostCommentReplyArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_PostCommentReplyResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_PostCommentReplyAsync(args.Timestamp, args.ParentId, args.Content, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_PostCommentReply", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_PostCommentReply", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ReadComments_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ReadCommentsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ReadCommentsResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ReadCommentsAsync(args.Skip, args.Limit, args.ParentId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadComments", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadComments", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_ReadCommentReplies_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_ReadCommentRepliesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_ReadCommentRepliesResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_ReadCommentRepliesAsync(args.Skip, args.Limit, args.ParentId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadCommentReplies", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_ReadCommentReplies", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_LikeComment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_LikeCommentArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_LikeCommentResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_LikeCommentAsync(args.SocialFeedId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_LikeComment", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_LikeComment", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_LikeActivity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_LikeActivityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_LikeActivityResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_LikeActivityAsync(args.SocialFeedId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_LikeActivity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_LikeActivity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_UnlikeComment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_UnlikeCommentArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_UnlikeCommentResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_UnlikeCommentAsync(args.SocialFeedId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnlikeComment", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnlikeComment", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_UnlikeActivity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_UnlikeActivityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_UnlikeActivityResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_UnlikeActivityAsync(args.SocialFeedId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnlikeActivity", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnlikeActivity", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_SetFeedVisibility_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_SetFeedVisibilityArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_SetFeedVisibilityResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_SetFeedVisibilityAsync(args.Visibility, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_SetFeedVisibility", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_SetFeedVisibility", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_BlockPlayer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_BlockPlayerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_BlockPlayerResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_BlockPlayerAsync(args.PlayerId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_BlockPlayer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_BlockPlayer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_HidePlayer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_HidePlayerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_HidePlayerResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_HidePlayerAsync(args.PlayerId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_HidePlayer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_HidePlayer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_UnblockPlayer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_UnblockPlayerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_UnblockPlayerResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_UnblockPlayerAsync(args.PlayerId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnblockPlayer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnblockPlayer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SocialFeed_UnhidePlayer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SocialFeed_UnhidePlayerArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SocialFeed_UnhidePlayerResult();
        try
        {
          result.Success = await _iAsync.SocialFeed_UnhidePlayerAsync(args.PlayerId, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnhidePlayer", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SocialFeed_UnhidePlayer", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Telemetry_StartTelemetrySession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Telemetry_StartTelemetrySessionArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Telemetry_StartTelemetrySessionResult();
        try
        {
          result.Success = await _iAsync.Telemetry_StartTelemetrySessionAsync(args.Timestamp, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_StartTelemetrySession", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_StartTelemetrySession", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Telemetry_EndTelemetrySession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Telemetry_EndTelemetrySessionArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Telemetry_EndTelemetrySessionResult();
        try
        {
          result.Success = await _iAsync.Telemetry_EndTelemetrySessionAsync(args.TelemetrySessionId, args.Timestamp, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_EndTelemetrySession", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_EndTelemetrySession", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Telemetry_LogTelemetryEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Telemetry_LogTelemetryEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Telemetry_LogTelemetryEventResult();
        try
        {
          result.Success = await _iAsync.Telemetry_LogTelemetryEventAsync(args.TelemetrySessionId, args.Timestamp, args.EventType, args.ParticipantId, args.CustomData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_LogTelemetryEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_LogTelemetryEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Telemetry_StartTelemetryEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Telemetry_StartTelemetryEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Telemetry_StartTelemetryEventResult();
        try
        {
          result.Success = await _iAsync.Telemetry_StartTelemetryEventAsync(args.TelemetrySessionId, args.Timestamp, args.EventType, args.ParticipantId, args.CustomData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_StartTelemetryEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_StartTelemetryEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task Telemetry_EndTelemetryEvent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new Telemetry_EndTelemetryEventArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new Telemetry_EndTelemetryEventResult();
        try
        {
          result.Success = await _iAsync.Telemetry_EndTelemetryEventAsync(args.TelemetrySessionId, args.Timestamp, args.EventType, args.ParticipantId, args.CustomData, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_EndTelemetryEvent", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Telemetry_EndTelemetryEvent", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_DownloadFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_DownloadFileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_DownloadFileResult();
        try
        {
          result.Success = await _iAsync.File_DownloadFileAsync(args.CloudPath, args.CloudFilename, args.ReplaceIfExists, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_DownloadFile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_DownloadFile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_GetDownloadInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_GetDownloadInfoArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_GetDownloadInfoResult();
        try
        {
          result.Success = await _iAsync.File_GetDownloadInfoAsync(args.CloudPath, args.CloudFilename, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetDownloadInfo", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_GetDownloadInfo", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task File_CancelDownload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new File_CancelDownloadArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new File_CancelDownloadResult();
        try
        {
          result.Success = await _iAsync.File_CancelDownloadAsync(args.CloudPath, args.CloudFilename, args.ClientIndex, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("File_CancelDownload", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("File_CancelDownload", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }


    public partial class AsyncMatch_CreateMatchArgs : TBase
    {
      private string _jsonOpponentIds;
      private string _pushNotificationMessage;
      private int _clientIndex;

      /// <summary>
      /// JSON string identifying the opponent platform and id for this match.
      /// 
      /// Platforms are identified as:
      /// BC - a brainCloud profile id
      /// FB - a Facebook id
      /// 
      /// An exmaple of this string would be:
      /// [
      ///     {
      ///         "platform": "BC",
      ///         "id": "some-braincloud-profile"
      ///     },
      ///     {
      ///         "platform": "FB",
      ///         "id": "some-facebook-id"
      ///     }
      /// ]
      /// </summary>
      public string JsonOpponentIds
      {
        get
        {
          return _jsonOpponentIds;
        }
        set
        {
          __isset.jsonOpponentIds = true;
          this._jsonOpponentIds = value;
        }
      }

      /// <summary>
      /// Optional push notification message to send to the other party.
      /// Refer to the Push Notification functions for the syntax required.
      /// </summary>
      public string PushNotificationMessage
      {
        get
        {
          return _pushNotificationMessage;
        }
        set
        {
          __isset.pushNotificationMessage = true;
          this._pushNotificationMessage = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonOpponentIds;
        public bool pushNotificationMessage;
        public bool clientIndex;
      }

      public AsyncMatch_CreateMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonOpponentIds = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  PushNotificationMessage = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_CreateMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonOpponentIds != null && __isset.jsonOpponentIds)
          {
            field.Name = "jsonOpponentIds";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonOpponentIds, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (PushNotificationMessage != null && __isset.pushNotificationMessage)
          {
            field.Name = "pushNotificationMessage";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PushNotificationMessage, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_CreateMatch_args(");
        bool __first = true;
        if (JsonOpponentIds != null && __isset.jsonOpponentIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonOpponentIds: ");
          sb.Append(JsonOpponentIds);
        }
        if (PushNotificationMessage != null && __isset.pushNotificationMessage)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PushNotificationMessage: ");
          sb.Append(PushNotificationMessage);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_CreateMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_CreateMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_CreateMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_CreateMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_CreateMatchWithInitialTurnArgs : TBase
    {
      private string _jsonOpponentIds;
      private string _jsonMatchState;
      private string _pushNotificationMessage;
      private string _nextPlayer;
      private string _jsonSummary;
      private int _clientIndex;

      /// <summary>
      /// JSON string identifying the opponent platform and id for this match.
      /// 
      /// Platforms are identified as:
      /// BC - a brainCloud profile id
      /// FB - a Facebook id
      /// 
      /// An exmaple of this string would be:
      /// [
      ///     {
      ///         "platform": "BC",
      ///         "id": "some-braincloud-profile"
      ///     },
      ///     {
      ///         "platform": "FB",
      ///         "id": "some-facebook-id"
      ///     }
      /// ]
      /// </summary>
      public string JsonOpponentIds
      {
        get
        {
          return _jsonOpponentIds;
        }
        set
        {
          __isset.jsonOpponentIds = true;
          this._jsonOpponentIds = value;
        }
      }

      /// <summary>
      /// JSON string blob provided by the caller
      /// </summary>
      public string JsonMatchState
      {
        get
        {
          return _jsonMatchState;
        }
        set
        {
          __isset.jsonMatchState = true;
          this._jsonMatchState = value;
        }
      }

      /// <summary>
      /// Optional push notification message to send to the other party.
      /// Refer to the Push Notification functions for the syntax required.
      /// </summary>
      public string PushNotificationMessage
      {
        get
        {
          return _pushNotificationMessage;
        }
        set
        {
          __isset.pushNotificationMessage = true;
          this._pushNotificationMessage = value;
        }
      }

      /// <summary>
      /// Optionally, force the next player player to be a specific player
      /// </summary>
      public string NextPlayer
      {
        get
        {
          return _nextPlayer;
        }
        set
        {
          __isset.nextPlayer = true;
          this._nextPlayer = value;
        }
      }

      /// <summary>
      /// Optional JSON string defining what the other player will see as a summary of the game when listing their games
      /// </summary>
      public string JsonSummary
      {
        get
        {
          return _jsonSummary;
        }
        set
        {
          __isset.jsonSummary = true;
          this._jsonSummary = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonOpponentIds;
        public bool jsonMatchState;
        public bool pushNotificationMessage;
        public bool nextPlayer;
        public bool jsonSummary;
        public bool clientIndex;
      }

      public AsyncMatch_CreateMatchWithInitialTurnArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonOpponentIds = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonMatchState = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  PushNotificationMessage = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  NextPlayer = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.String)
                {
                  JsonSummary = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_CreateMatchWithInitialTurn_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonOpponentIds != null && __isset.jsonOpponentIds)
          {
            field.Name = "jsonOpponentIds";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonOpponentIds, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonMatchState != null && __isset.jsonMatchState)
          {
            field.Name = "jsonMatchState";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonMatchState, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (PushNotificationMessage != null && __isset.pushNotificationMessage)
          {
            field.Name = "pushNotificationMessage";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PushNotificationMessage, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (NextPlayer != null && __isset.nextPlayer)
          {
            field.Name = "nextPlayer";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(NextPlayer, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonSummary != null && __isset.jsonSummary)
          {
            field.Name = "jsonSummary";
            field.Type = TType.String;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonSummary, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_CreateMatchWithInitialTurn_args(");
        bool __first = true;
        if (JsonOpponentIds != null && __isset.jsonOpponentIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonOpponentIds: ");
          sb.Append(JsonOpponentIds);
        }
        if (JsonMatchState != null && __isset.jsonMatchState)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonMatchState: ");
          sb.Append(JsonMatchState);
        }
        if (PushNotificationMessage != null && __isset.pushNotificationMessage)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PushNotificationMessage: ");
          sb.Append(PushNotificationMessage);
        }
        if (NextPlayer != null && __isset.nextPlayer)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NextPlayer: ");
          sb.Append(NextPlayer);
        }
        if (JsonSummary != null && __isset.jsonSummary)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonSummary: ");
          sb.Append(JsonSummary);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_CreateMatchWithInitialTurnResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_CreateMatchWithInitialTurnResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_CreateMatchWithInitialTurn_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_CreateMatchWithInitialTurn_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_SubmitTurnArgs : TBase
    {
      private string _ownerId;
      private string _matchId;
      private long _version;
      private string _jsonMatchState;
      private string _pushNotificationMessage;
      private string _nextPlayer;
      private string _jsonSummary;
      private string _jsonStatistics;
      private int _clientIndex;

      /// <summary>
      /// Match owner identfier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      /// <summary>
      /// Game state version to ensure turns are submitted once and in order
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// JSON string blob provided by the caller
      /// </summary>
      public string JsonMatchState
      {
        get
        {
          return _jsonMatchState;
        }
        set
        {
          __isset.jsonMatchState = true;
          this._jsonMatchState = value;
        }
      }

      /// <summary>
      /// Optional push notification message to send to the other party.
      /// Refer to the Push Notification functions for the syntax required.
      /// </summary>
      public string PushNotificationMessage
      {
        get
        {
          return _pushNotificationMessage;
        }
        set
        {
          __isset.pushNotificationMessage = true;
          this._pushNotificationMessage = value;
        }
      }

      /// <summary>
      /// Optionally, force the next player player to be a specific player
      /// </summary>
      public string NextPlayer
      {
        get
        {
          return _nextPlayer;
        }
        set
        {
          __isset.nextPlayer = true;
          this._nextPlayer = value;
        }
      }

      /// <summary>
      /// Optional JSON string that other players will see as a summary of the game when listing their games
      /// </summary>
      public string JsonSummary
      {
        get
        {
          return _jsonSummary;
        }
        set
        {
          __isset.jsonSummary = true;
          this._jsonSummary = value;
        }
      }

      /// <summary>
      /// Optional JSON string blob provided by the caller
      /// </summary>
      public string JsonStatistics
      {
        get
        {
          return _jsonStatistics;
        }
        set
        {
          __isset.jsonStatistics = true;
          this._jsonStatistics = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ownerId;
        public bool matchId;
        public bool version;
        public bool jsonMatchState;
        public bool pushNotificationMessage;
        public bool nextPlayer;
        public bool jsonSummary;
        public bool jsonStatistics;
        public bool clientIndex;
      }

      public AsyncMatch_SubmitTurnArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  MatchId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonMatchState = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.String)
                {
                  PushNotificationMessage = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.String)
                {
                  NextPlayer = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.String)
                {
                  JsonSummary = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 8:
                if (field.Type == TType.String)
                {
                  JsonStatistics = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 9:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_SubmitTurn_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (MatchId != null && __isset.matchId)
          {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(MatchId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonMatchState != null && __isset.jsonMatchState)
          {
            field.Name = "jsonMatchState";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonMatchState, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (PushNotificationMessage != null && __isset.pushNotificationMessage)
          {
            field.Name = "pushNotificationMessage";
            field.Type = TType.String;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PushNotificationMessage, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (NextPlayer != null && __isset.nextPlayer)
          {
            field.Name = "nextPlayer";
            field.Type = TType.String;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(NextPlayer, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonSummary != null && __isset.jsonSummary)
          {
            field.Name = "jsonSummary";
            field.Type = TType.String;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonSummary, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonStatistics != null && __isset.jsonStatistics)
          {
            field.Name = "jsonStatistics";
            field.Type = TType.String;
            field.ID = 8;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonStatistics, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 9;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_SubmitTurn_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MatchId: ");
          sb.Append(MatchId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (JsonMatchState != null && __isset.jsonMatchState)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonMatchState: ");
          sb.Append(JsonMatchState);
        }
        if (PushNotificationMessage != null && __isset.pushNotificationMessage)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PushNotificationMessage: ");
          sb.Append(PushNotificationMessage);
        }
        if (NextPlayer != null && __isset.nextPlayer)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NextPlayer: ");
          sb.Append(NextPlayer);
        }
        if (JsonSummary != null && __isset.jsonSummary)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonSummary: ");
          sb.Append(JsonSummary);
        }
        if (JsonStatistics != null && __isset.jsonStatistics)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonStatistics: ");
          sb.Append(JsonStatistics);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_SubmitTurnResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_SubmitTurnResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_SubmitTurn_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_SubmitTurn_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_UpdateMatchSummaryDataArgs : TBase
    {
      private string _ownerId;
      private string _matchId;
      private long _version;
      private string _jsonSummary;
      private int _clientIndex;

      /// <summary>
      /// Match owner identfier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      /// <summary>
      /// Game state version to ensure turns are submitted once and in order
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// JSON string provided by the caller that other players will see as a summary of the game when listing their games
      /// </summary>
      public string JsonSummary
      {
        get
        {
          return _jsonSummary;
        }
        set
        {
          __isset.jsonSummary = true;
          this._jsonSummary = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ownerId;
        public bool matchId;
        public bool version;
        public bool jsonSummary;
        public bool clientIndex;
      }

      public AsyncMatch_UpdateMatchSummaryDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  MatchId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonSummary = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_UpdateMatchSummaryData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (MatchId != null && __isset.matchId)
          {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(MatchId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonSummary != null && __isset.jsonSummary)
          {
            field.Name = "jsonSummary";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonSummary, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_UpdateMatchSummaryData_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MatchId: ");
          sb.Append(MatchId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (JsonSummary != null && __isset.jsonSummary)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonSummary: ");
          sb.Append(JsonSummary);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_UpdateMatchSummaryDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_UpdateMatchSummaryDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_UpdateMatchSummaryData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_UpdateMatchSummaryData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_CompleteMatchArgs : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_CompleteMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  MatchId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_CompleteMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (MatchId != null && __isset.matchId)
          {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(MatchId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_CompleteMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MatchId: ");
          sb.Append(MatchId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_CompleteMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_CompleteMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_CompleteMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_CompleteMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_ReadMatchArgs : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_ReadMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  MatchId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_ReadMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (MatchId != null && __isset.matchId)
          {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(MatchId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_ReadMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MatchId: ");
          sb.Append(MatchId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_ReadMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_ReadMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_ReadMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_ReadMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_ReadMatchHistoryArgs : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_ReadMatchHistoryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  MatchId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_ReadMatchHistory_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (MatchId != null && __isset.matchId)
          {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(MatchId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_ReadMatchHistory_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MatchId: ");
          sb.Append(MatchId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_ReadMatchHistoryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_ReadMatchHistoryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_ReadMatchHistory_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_ReadMatchHistory_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_FindMatchesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public AsyncMatch_FindMatchesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_FindMatches_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_FindMatches_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_FindMatchesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_FindMatchesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_FindMatches_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_FindMatches_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_FindCompleteMatchesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public AsyncMatch_FindCompleteMatchesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_FindCompleteMatches_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_FindCompleteMatches_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_FindCompleteMatchesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_FindCompleteMatchesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_FindCompleteMatches_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_FindCompleteMatches_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_AbandonMatchArgs : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_AbandonMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  MatchId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_AbandonMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (MatchId != null && __isset.matchId)
          {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(MatchId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_AbandonMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MatchId: ");
          sb.Append(MatchId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_AbandonMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_AbandonMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_AbandonMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_AbandonMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_DeleteMatchArgs : TBase
    {
      private string _ownerId;
      private string _matchId;
      private int _clientIndex;

      /// <summary>
      /// Match owner identifier
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// Match identifier
      /// </summary>
      public string MatchId
      {
        get
        {
          return _matchId;
        }
        set
        {
          __isset.matchId = true;
          this._matchId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ownerId;
        public bool matchId;
        public bool clientIndex;
      }

      public AsyncMatch_DeleteMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  MatchId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_DeleteMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (MatchId != null && __isset.matchId)
          {
            field.Name = "matchId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(MatchId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_DeleteMatch_args(");
        bool __first = true;
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (MatchId != null && __isset.matchId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MatchId: ");
          sb.Append(MatchId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class AsyncMatch_DeleteMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public AsyncMatch_DeleteMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("AsyncMatch_DeleteMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("AsyncMatch_DeleteMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_GenerateAnonymousIdArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Authentication_GenerateAnonymousIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_GenerateAnonymousId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_GenerateAnonymousId_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_GenerateAnonymousIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Authentication_GenerateAnonymousIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_GenerateAnonymousId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_GenerateAnonymousId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_InitializeArgs : TBase
    {
      private string _profileId;
      private string _anonymousId;
      private int _clientIndex;

      /// <summary>
      /// The id of the profile id that was most recently used by the app (on this device)
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The anonymous installation id that was generated for this device
      /// </summary>
      public string AnonymousId
      {
        get
        {
          return _anonymousId;
        }
        set
        {
          __isset.anonymousId = true;
          this._anonymousId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool anonymousId;
        public bool clientIndex;
      }

      public Authentication_InitializeArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AnonymousId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_Initialize_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AnonymousId != null && __isset.anonymousId)
          {
            field.Name = "anonymousId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AnonymousId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_Initialize_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (AnonymousId != null && __isset.anonymousId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AnonymousId: ");
          sb.Append(AnonymousId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_InitializeResult : TBase
    {

      public Authentication_InitializeResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_Initialize_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_Initialize_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_ClearSavedProfileIDArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Authentication_ClearSavedProfileIDArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_ClearSavedProfileID_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_ClearSavedProfileID_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_ClearSavedProfileIDResult : TBase
    {

      public Authentication_ClearSavedProfileIDResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_ClearSavedProfileID_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_ClearSavedProfileID_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateAnonymousArgs : TBase
    {
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// Should a new profile be created if it does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateAnonymousArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateAnonymous_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateAnonymous_args(");
        bool __first = true;
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateAnonymousResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Authentication_AuthenticateAnonymousResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateAnonymous_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateAnonymous_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateEmailPasswordArgs : TBase
    {
      private string _email;
      private string _password;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The e-mail address of the user
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// The password of the user
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      /// <summary>
      /// Should a new profile be created for this user if the account does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool email;
        public bool password;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateEmailPasswordArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Email = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateEmailPassword_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Email != null && __isset.email)
          {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Email, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Password != null && __isset.password)
          {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateEmailPassword_args(");
        bool __first = true;
        if (Email != null && __isset.email)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Email: ");
          sb.Append(Email);
        }
        if (Password != null && __isset.password)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Password: ");
          sb.Append(Password);
        }
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateEmailPasswordResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Authentication_AuthenticateEmailPasswordResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateEmailPassword_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateEmailPassword_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateUniversalArgs : TBase
    {
      private string _userId;
      private string _password;
      private bool _forceCreate;
      private int _clientIndex;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The password of the user
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      /// <summary>
      /// Should a new profile be created for this user if the account does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool password;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateUniversalArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateUniversal_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Password != null && __isset.password)
          {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateUniversal_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (Password != null && __isset.password)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Password: ");
          sb.Append(Password);
        }
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateUniversalResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Authentication_AuthenticateUniversalResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateUniversal_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateUniversal_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateExternalArgs : TBase
    {
      private string _userId;
      private string _token;
      private string _externalAuthName;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The user id
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The user token (password etc)
      /// </summary>
      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      /// <summary>
      /// The name of the cloud script to call for external authentication
      /// </summary>
      public string ExternalAuthName
      {
        get
        {
          return _externalAuthName;
        }
        set
        {
          __isset.externalAuthName = true;
          this._externalAuthName = value;
        }
      }

      /// <summary>
      /// Should a new profile be created for this user if the account does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool token;
        public bool externalAuthName;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Authentication_AuthenticateExternalArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Token = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  ExternalAuthName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateExternal_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Token != null && __isset.token)
          {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ExternalAuthName != null && __isset.externalAuthName)
          {
            field.Name = "externalAuthName";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalAuthName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateExternal_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (Token != null && __isset.token)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Token: ");
          sb.Append(Token);
        }
        if (ExternalAuthName != null && __isset.externalAuthName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalAuthName: ");
          sb.Append(ExternalAuthName);
        }
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_AuthenticateExternalResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Authentication_AuthenticateExternalResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_AuthenticateExternal_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_AuthenticateExternal_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_ResetEmailPasswordArgs : TBase
    {
      private string _externalId;
      private int _clientIndex;

      /// <summary>
      /// The email address to send the reset email to.
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool externalId;
        public bool clientIndex;
      }

      public Authentication_ResetEmailPasswordArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ExternalId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_ResetEmailPassword_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ExternalId != null && __isset.externalId)
          {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_ResetEmailPassword_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalId: ");
          sb.Append(ExternalId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Authentication_ResetEmailPasswordResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Authentication_ResetEmailPasswordResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Authentication_ResetEmailPassword_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Authentication_ResetEmailPassword_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_EnableLoggingArgs : TBase
    {
      private bool _enable;
      private int _clientIndex;

      /// <summary>
      /// True if logging is to be enabled
      /// </summary>
      public bool Enable
      {
        get
        {
          return _enable;
        }
        set
        {
          __isset.enable = true;
          this._enable = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool enable;
        public bool clientIndex;
      }

      public Client_EnableLoggingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  Enable = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_EnableLogging_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.enable)
          {
            field.Name = "enable";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Enable, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_EnableLogging_args(");
        bool __first = true;
        if (__isset.enable)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Enable: ");
          sb.Append(Enable);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_EnableLoggingResult : TBase
    {

      public Client_EnableLoggingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_EnableLogging_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_EnableLogging_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_ResetCommunicationArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_ResetCommunicationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_ResetCommunication_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_ResetCommunication_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_ResetCommunicationResult : TBase
    {

      public Client_ResetCommunicationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_ResetCommunication_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_ResetCommunication_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetPacketTimeoutsArgs : TBase
    {
      private List<int> _timeouts;
      private int _clientIndex;

      /// <summary>
      /// An array of packet timeouts.
      /// </summary>
      public List<int> Timeouts
      {
        get
        {
          return _timeouts;
        }
        set
        {
          __isset.timeouts = true;
          this._timeouts = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timeouts;
        public bool clientIndex;
      }

      public Client_SetPacketTimeoutsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    Timeouts = new List<int>();
                    TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      int _elem2;
                      _elem2 = await iprot.ReadI32Async(cancellationToken);
                      Timeouts.Add(_elem2);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetPacketTimeouts_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Timeouts != null && __isset.timeouts)
          {
            field.Name = "timeouts";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.I32, Timeouts.Count), cancellationToken);
              foreach (int _iter3 in Timeouts)
              {
                await oprot.WriteI32Async(_iter3, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetPacketTimeouts_args(");
        bool __first = true;
        if (Timeouts != null && __isset.timeouts)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timeouts: ");
          sb.Append(Timeouts);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetPacketTimeoutsResult : TBase
    {

      public Client_SetPacketTimeoutsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetPacketTimeouts_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetPacketTimeouts_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetPacketTimeoutsToDefaultArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_SetPacketTimeoutsToDefaultArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetPacketTimeoutsToDefault_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetPacketTimeoutsToDefault_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetPacketTimeoutsToDefaultResult : TBase
    {

      public Client_SetPacketTimeoutsToDefaultResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetPacketTimeoutsToDefault_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetPacketTimeoutsToDefault_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetPacketTimeoutsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_GetPacketTimeoutsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetPacketTimeouts_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetPacketTimeouts_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetPacketTimeoutsResult : TBase
    {
      private List<int> _success;

      public List<int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Client_GetPacketTimeoutsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    Success = new List<int>();
                    TList _list4 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      int _elem6;
                      _elem6 = await iprot.ReadI32Async(cancellationToken);
                      Success.Add(_elem6);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetPacketTimeouts_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.I32, Success.Count), cancellationToken);
                foreach (int _iter7 in Success)
                {
                  await oprot.WriteI32Async(_iter7, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetPacketTimeouts_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetAuthenticationPacketTimeoutArgs : TBase
    {
      private int _timeoutSecs;
      private int _clientIndex;

      public int TimeoutSecs
      {
        get
        {
          return _timeoutSecs;
        }
        set
        {
          __isset.timeoutSecs = true;
          this._timeoutSecs = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timeoutSecs;
        public bool clientIndex;
      }

      public Client_SetAuthenticationPacketTimeoutArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  TimeoutSecs = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetAuthenticationPacketTimeout_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timeoutSecs)
          {
            field.Name = "timeoutSecs";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(TimeoutSecs, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetAuthenticationPacketTimeout_args(");
        bool __first = true;
        if (__isset.timeoutSecs)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TimeoutSecs: ");
          sb.Append(TimeoutSecs);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetAuthenticationPacketTimeoutResult : TBase
    {

      public Client_SetAuthenticationPacketTimeoutResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetAuthenticationPacketTimeout_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetAuthenticationPacketTimeout_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetAuthenticationPacketTimeoutArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_GetAuthenticationPacketTimeoutArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetAuthenticationPacketTimeout_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetAuthenticationPacketTimeout_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetAuthenticationPacketTimeoutResult : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Client_GetAuthenticationPacketTimeoutResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetAuthenticationPacketTimeout_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetAuthenticationPacketTimeout_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetUploadLowTransferRateTimeoutArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_GetUploadLowTransferRateTimeoutArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetUploadLowTransferRateTimeout_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetUploadLowTransferRateTimeout_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetUploadLowTransferRateTimeoutResult : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Client_GetUploadLowTransferRateTimeoutResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetUploadLowTransferRateTimeout_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetUploadLowTransferRateTimeout_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetUploadLowTransferRateTimeoutArgs : TBase
    {
      private int _timeoutSecs;
      private int _clientIndex;

      public int TimeoutSecs
      {
        get
        {
          return _timeoutSecs;
        }
        set
        {
          __isset.timeoutSecs = true;
          this._timeoutSecs = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timeoutSecs;
        public bool clientIndex;
      }

      public Client_SetUploadLowTransferRateTimeoutArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  TimeoutSecs = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetUploadLowTransferRateTimeout_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timeoutSecs)
          {
            field.Name = "timeoutSecs";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(TimeoutSecs, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetUploadLowTransferRateTimeout_args(");
        bool __first = true;
        if (__isset.timeoutSecs)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TimeoutSecs: ");
          sb.Append(TimeoutSecs);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetUploadLowTransferRateTimeoutResult : TBase
    {

      public Client_SetUploadLowTransferRateTimeoutResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetUploadLowTransferRateTimeout_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetUploadLowTransferRateTimeout_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetUploadLowTransferRateThresholdArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_GetUploadLowTransferRateThresholdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetUploadLowTransferRateThreshold_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetUploadLowTransferRateThreshold_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetUploadLowTransferRateThresholdResult : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Client_GetUploadLowTransferRateThresholdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetUploadLowTransferRateThreshold_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetUploadLowTransferRateThreshold_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetUploadLowTransferRateThresholdArgs : TBase
    {
      private int _bytesPerSec;
      private int _clientIndex;

      /// <summary>
      /// The low transfer rate threshold in bytes/sec
      /// </summary>
      public int BytesPerSec
      {
        get
        {
          return _bytesPerSec;
        }
        set
        {
          __isset.bytesPerSec = true;
          this._bytesPerSec = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool bytesPerSec;
        public bool clientIndex;
      }

      public Client_SetUploadLowTransferRateThresholdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  BytesPerSec = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetUploadLowTransferRateThreshold_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.bytesPerSec)
          {
            field.Name = "bytesPerSec";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(BytesPerSec, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetUploadLowTransferRateThreshold_args(");
        bool __first = true;
        if (__isset.bytesPerSec)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("BytesPerSec: ");
          sb.Append(BytesPerSec);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_SetUploadLowTransferRateThresholdResult : TBase
    {

      public Client_SetUploadLowTransferRateThresholdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_SetUploadLowTransferRateThreshold_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_SetUploadLowTransferRateThreshold_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_EnableNetworkErrorMessageCachingArgs : TBase
    {
      private bool _enabled;
      private int _clientIndex;

      /// <summary>
      /// True if message should be cached on timeout
      /// </summary>
      public bool Enabled
      {
        get
        {
          return _enabled;
        }
        set
        {
          __isset.enabled = true;
          this._enabled = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool enabled;
        public bool clientIndex;
      }

      public Client_EnableNetworkErrorMessageCachingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  Enabled = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_EnableNetworkErrorMessageCaching_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.enabled)
          {
            field.Name = "enabled";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Enabled, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_EnableNetworkErrorMessageCaching_args(");
        bool __first = true;
        if (__isset.enabled)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Enabled: ");
          sb.Append(Enabled);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_EnableNetworkErrorMessageCachingResult : TBase
    {

      public Client_EnableNetworkErrorMessageCachingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_EnableNetworkErrorMessageCaching_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_EnableNetworkErrorMessageCaching_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_RetryCachedMessagesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_RetryCachedMessagesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_RetryCachedMessages_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_RetryCachedMessages_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_RetryCachedMessagesResult : TBase
    {

      public Client_RetryCachedMessagesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_RetryCachedMessages_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_RetryCachedMessages_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_FlushCachedMessagesArgs : TBase
    {
      private bool _sendApiErrorCallbacks;
      private int _clientIndex;

      /// <summary>
      /// If set to true API error callbacks will
      /// be called for every cached message with statusCode CLIENT_NETWORK_ERROR and reasonCode CLIENT_NETWORK_ERROR_TIMEOUT.
      /// </summary>
      public bool SendApiErrorCallbacks
      {
        get
        {
          return _sendApiErrorCallbacks;
        }
        set
        {
          __isset.sendApiErrorCallbacks = true;
          this._sendApiErrorCallbacks = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sendApiErrorCallbacks;
        public bool clientIndex;
      }

      public Client_FlushCachedMessagesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  SendApiErrorCallbacks = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_FlushCachedMessages_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.sendApiErrorCallbacks)
          {
            field.Name = "sendApiErrorCallbacks";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(SendApiErrorCallbacks, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_FlushCachedMessages_args(");
        bool __first = true;
        if (__isset.sendApiErrorCallbacks)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SendApiErrorCallbacks: ");
          sb.Append(SendApiErrorCallbacks);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_FlushCachedMessagesResult : TBase
    {

      public Client_FlushCachedMessagesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_FlushCachedMessages_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_FlushCachedMessages_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_InsertEndOfMessageBundleMarkerArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_InsertEndOfMessageBundleMarkerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_InsertEndOfMessageBundleMarker_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_InsertEndOfMessageBundleMarker_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_InsertEndOfMessageBundleMarkerResult : TBase
    {

      public Client_InsertEndOfMessageBundleMarkerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_InsertEndOfMessageBundleMarker_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_InsertEndOfMessageBundleMarker_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_OverrideCountryCodeArgs : TBase
    {
      private string _countryCode;
      private int _clientIndex;

      /// <summary>
      /// ISO 3166-1 two-letter country code
      /// </summary>
      public string CountryCode
      {
        get
        {
          return _countryCode;
        }
        set
        {
          __isset.countryCode = true;
          this._countryCode = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool countryCode;
        public bool clientIndex;
      }

      public Client_OverrideCountryCodeArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CountryCode = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_OverrideCountryCode_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CountryCode != null && __isset.countryCode)
          {
            field.Name = "countryCode";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CountryCode, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_OverrideCountryCode_args(");
        bool __first = true;
        if (CountryCode != null && __isset.countryCode)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CountryCode: ");
          sb.Append(CountryCode);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_OverrideCountryCodeResult : TBase
    {

      public Client_OverrideCountryCodeResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_OverrideCountryCode_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_OverrideCountryCode_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_OverrideLanguageCodeArgs : TBase
    {
      private string _languageCode;
      private int _clientIndex;

      /// <summary>
      /// ISO 639-1 two-letter language code
      /// </summary>
      public string LanguageCode
      {
        get
        {
          return _languageCode;
        }
        set
        {
          __isset.languageCode = true;
          this._languageCode = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool languageCode;
        public bool clientIndex;
      }

      public Client_OverrideLanguageCodeArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LanguageCode = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_OverrideLanguageCode_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LanguageCode != null && __isset.languageCode)
          {
            field.Name = "languageCode";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LanguageCode, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_OverrideLanguageCode_args(");
        bool __first = true;
        if (LanguageCode != null && __isset.languageCode)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LanguageCode: ");
          sb.Append(LanguageCode);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_OverrideLanguageCodeResult : TBase
    {

      public Client_OverrideLanguageCodeResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_OverrideLanguageCode_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_OverrideLanguageCode_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetSessionIdArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_GetSessionIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetSessionId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetSessionId_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_GetSessionIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Client_GetSessionIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_GetSessionId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_GetSessionId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_IsAuthenticatedArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_IsAuthenticatedArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_IsAuthenticated_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_IsAuthenticated_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_IsAuthenticatedResult : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Client_IsAuthenticatedResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_IsAuthenticated_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_IsAuthenticated_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_IsInitializedArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_IsInitializedArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_IsInitialized_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_IsInitialized_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_IsInitializedResult : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Client_IsInitializedResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_IsInitialized_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_IsInitialized_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_Initialize_SSSArgs : TBase
    {
      private string _secretKey;
      private string _appId;
      private string _appVersion;
      private int _clientIndex;

      /// <summary>
      /// The secret key for your app
      /// </summary>
      public string SecretKey
      {
        get
        {
          return _secretKey;
        }
        set
        {
          __isset.secretKey = true;
          this._secretKey = value;
        }
      }

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      /// <summary>
      /// The app version
      /// </summary>
      public string AppVersion
      {
        get
        {
          return _appVersion;
        }
        set
        {
          __isset.appVersion = true;
          this._appVersion = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool secretKey;
        public bool appId;
        public bool appVersion;
        public bool clientIndex;
      }

      public Client_Initialize_SSSArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SecretKey = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AppId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  AppVersion = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_Initialize_SSS_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SecretKey != null && __isset.secretKey)
          {
            field.Name = "secretKey";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SecretKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AppId != null && __isset.appId)
          {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AppId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AppVersion != null && __isset.appVersion)
          {
            field.Name = "appVersion";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AppVersion, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_Initialize_SSS_args(");
        bool __first = true;
        if (SecretKey != null && __isset.secretKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SecretKey: ");
          sb.Append(SecretKey);
        }
        if (AppId != null && __isset.appId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AppId: ");
          sb.Append(AppId);
        }
        if (AppVersion != null && __isset.appVersion)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AppVersion: ");
          sb.Append(AppVersion);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_Initialize_SSSResult : TBase
    {

      public Client_Initialize_SSSResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_Initialize_SSS_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_Initialize_SSS_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_Initialize_SSSSArgs : TBase
    {
      private string _serverURL;
      private string _secretKey;
      private string _appId;
      private string _appVersion;
      private int _clientIndex;

      /// <summary>
      /// The URL to the brainCloud server
      /// </summary>
      public string ServerURL
      {
        get
        {
          return _serverURL;
        }
        set
        {
          __isset.serverURL = true;
          this._serverURL = value;
        }
      }

      /// <summary>
      /// The secret key for your app
      /// </summary>
      public string SecretKey
      {
        get
        {
          return _secretKey;
        }
        set
        {
          __isset.secretKey = true;
          this._secretKey = value;
        }
      }

      /// <summary>
      /// The app id
      /// </summary>
      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      /// <summary>
      /// The app version
      /// </summary>
      public string AppVersion
      {
        get
        {
          return _appVersion;
        }
        set
        {
          __isset.appVersion = true;
          this._appVersion = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool serverURL;
        public bool secretKey;
        public bool appId;
        public bool appVersion;
        public bool clientIndex;
      }

      public Client_Initialize_SSSSArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ServerURL = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  SecretKey = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  AppId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  AppVersion = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_Initialize_SSSS_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ServerURL != null && __isset.serverURL)
          {
            field.Name = "serverURL";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ServerURL, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SecretKey != null && __isset.secretKey)
          {
            field.Name = "secretKey";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SecretKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AppId != null && __isset.appId)
          {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AppId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AppVersion != null && __isset.appVersion)
          {
            field.Name = "appVersion";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AppVersion, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_Initialize_SSSS_args(");
        bool __first = true;
        if (ServerURL != null && __isset.serverURL)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ServerURL: ");
          sb.Append(ServerURL);
        }
        if (SecretKey != null && __isset.secretKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SecretKey: ");
          sb.Append(SecretKey);
        }
        if (AppId != null && __isset.appId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AppId: ");
          sb.Append(AppId);
        }
        if (AppVersion != null && __isset.appVersion)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AppVersion: ");
          sb.Append(AppVersion);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_Initialize_SSSSResult : TBase
    {

      public Client_Initialize_SSSSResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_Initialize_SSSS_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_Initialize_SSSS_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_InitializeIdentityArgs : TBase
    {
      private string _profileId;
      private string _anonymousId;
      private int _clientIndex;

      /// <summary>
      /// The profile id
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The anonymous id
      /// </summary>
      public string AnonymousId
      {
        get
        {
          return _anonymousId;
        }
        set
        {
          __isset.anonymousId = true;
          this._anonymousId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool anonymousId;
        public bool clientIndex;
      }

      public Client_InitializeIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AnonymousId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_InitializeIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AnonymousId != null && __isset.anonymousId)
          {
            field.Name = "anonymousId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AnonymousId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_InitializeIdentity_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (AnonymousId != null && __isset.anonymousId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AnonymousId: ");
          sb.Append(AnonymousId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_InitializeIdentityResult : TBase
    {

      public Client_InitializeIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_InitializeIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_InitializeIdentity_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_UpdateArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Client_UpdateArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_Update_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_Update_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Client_UpdateResult : TBase
    {

      public Client_UpdateResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Client_Update_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Client_Update_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class DataStream_CustomPageEventArgs : TBase
    {
      private string _eventName;
      private string _jsonEventProperties;
      private int _clientIndex;

      /// <summary>
      /// The name of the event
      /// </summary>
      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      /// <summary>
      /// The properties of the event
      /// </summary>
      public string JsonEventProperties
      {
        get
        {
          return _jsonEventProperties;
        }
        set
        {
          __isset.jsonEventProperties = true;
          this._jsonEventProperties = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool eventName;
        public bool jsonEventProperties;
        public bool clientIndex;
      }

      public DataStream_CustomPageEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EventName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonEventProperties = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("DataStream_CustomPageEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EventName != null && __isset.eventName)
          {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEventProperties != null && __isset.jsonEventProperties)
          {
            field.Name = "jsonEventProperties";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEventProperties, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DataStream_CustomPageEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventName: ");
          sb.Append(EventName);
        }
        if (JsonEventProperties != null && __isset.jsonEventProperties)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEventProperties: ");
          sb.Append(JsonEventProperties);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class DataStream_CustomPageEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public DataStream_CustomPageEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("DataStream_CustomPageEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DataStream_CustomPageEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class DataStream_CustomScreenEventArgs : TBase
    {
      private string _eventName;
      private string _jsonEventProperties;
      private int _clientIndex;

      /// <summary>
      /// The name of the event
      /// </summary>
      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      /// <summary>
      /// The properties of the event
      /// </summary>
      public string JsonEventProperties
      {
        get
        {
          return _jsonEventProperties;
        }
        set
        {
          __isset.jsonEventProperties = true;
          this._jsonEventProperties = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool eventName;
        public bool jsonEventProperties;
        public bool clientIndex;
      }

      public DataStream_CustomScreenEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EventName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonEventProperties = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("DataStream_CustomScreenEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EventName != null && __isset.eventName)
          {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEventProperties != null && __isset.jsonEventProperties)
          {
            field.Name = "jsonEventProperties";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEventProperties, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DataStream_CustomScreenEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventName: ");
          sb.Append(EventName);
        }
        if (JsonEventProperties != null && __isset.jsonEventProperties)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEventProperties: ");
          sb.Append(JsonEventProperties);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class DataStream_CustomScreenEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public DataStream_CustomScreenEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("DataStream_CustomScreenEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DataStream_CustomScreenEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class DataStream_CustomTrackEventArgs : TBase
    {
      private string _eventName;
      private string _jsonEventProperties;
      private int _clientIndex;

      /// <summary>
      /// The name of the event
      /// </summary>
      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      /// <summary>
      /// The properties of the event
      /// </summary>
      public string JsonEventProperties
      {
        get
        {
          return _jsonEventProperties;
        }
        set
        {
          __isset.jsonEventProperties = true;
          this._jsonEventProperties = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool eventName;
        public bool jsonEventProperties;
        public bool clientIndex;
      }

      public DataStream_CustomTrackEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EventName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonEventProperties = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("DataStream_CustomTrackEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EventName != null && __isset.eventName)
          {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEventProperties != null && __isset.jsonEventProperties)
          {
            field.Name = "jsonEventProperties";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEventProperties, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DataStream_CustomTrackEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventName: ");
          sb.Append(EventName);
        }
        if (JsonEventProperties != null && __isset.jsonEventProperties)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEventProperties: ");
          sb.Append(JsonEventProperties);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class DataStream_CustomTrackEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public DataStream_CustomTrackEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("DataStream_CustomTrackEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DataStream_CustomTrackEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_CreateEntityArgs : TBase
    {
      private string _entityType;
      private string _jsonEntityData;
      private string _jsonEntityAcl;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// permissions which make the entity readable/writeable by only the user.
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool jsonEntityData;
        public bool jsonEntityAcl;
        public bool clientIndex;
      }

      public Entity_CreateEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonEntityData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonEntityAcl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_CreateEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityData != null && __isset.jsonEntityData)
          {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl)
          {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityAcl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_CreateEntity_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityData: ");
          sb.Append(JsonEntityData);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityAcl: ");
          sb.Append(JsonEntityAcl);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_CreateEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_CreateEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_CreateEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_CreateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetEntitiesByTypeArgs : TBase
    {
      private string _entityType;
      private int _clientIndex;

      /// <summary>
      /// The entity type to search for
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool clientIndex;
      }

      public Entity_GetEntitiesByTypeArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetEntitiesByType_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetEntitiesByType_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetEntitiesByTypeResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetEntitiesByTypeResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetEntitiesByType_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetEntitiesByType_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_UpdateEntityArgs : TBase
    {
      private string _entityId;
      private string _entityType;
      private string _jsonEntityData;
      private string _jsonEntityAcl;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity to update
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string.
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// permissions which make the entity readable/writeable by only the user.
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool entityType;
        public bool jsonEntityData;
        public bool jsonEntityAcl;
        public bool version;
        public bool clientIndex;
      }

      public Entity_UpdateEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonEntityData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonEntityAcl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_UpdateEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityData != null && __isset.jsonEntityData)
          {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl)
          {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityAcl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_UpdateEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityData: ");
          sb.Append(JsonEntityData);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityAcl: ");
          sb.Append(JsonEntityAcl);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_UpdateEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_UpdateEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_UpdateEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_UpdateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_UpdateSharedEntityArgs : TBase
    {
      private string _entityId;
      private string _targetProfileId;
      private string _entityType;
      private string _jsonEntityData;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity to update
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The id of the entity's owner
      /// </summary>
      public string TargetProfileId
      {
        get
        {
          return _targetProfileId;
        }
        set
        {
          __isset.targetProfileId = true;
          this._targetProfileId = value;
        }
      }

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string.
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool targetProfileId;
        public bool entityType;
        public bool jsonEntityData;
        public bool version;
        public bool clientIndex;
      }

      public Entity_UpdateSharedEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  TargetProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonEntityData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_UpdateSharedEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (TargetProfileId != null && __isset.targetProfileId)
          {
            field.Name = "targetProfileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TargetProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityData != null && __isset.jsonEntityData)
          {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_UpdateSharedEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (TargetProfileId != null && __isset.targetProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TargetProfileId: ");
          sb.Append(TargetProfileId);
        }
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityData: ");
          sb.Append(JsonEntityData);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_UpdateSharedEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_UpdateSharedEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_UpdateSharedEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_UpdateSharedEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_DeleteEntityArgs : TBase
    {
      private string _entityId;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity to update
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool version;
        public bool clientIndex;
      }

      public Entity_DeleteEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_DeleteEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_DeleteEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_DeleteEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_DeleteEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_DeleteEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_DeleteEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_UpdateSingletonArgs : TBase
    {
      private string _entityType;
      private string _jsonEntityData;
      private string _jsonEntityAcl;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string.
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool jsonEntityData;
        public bool jsonEntityAcl;
        public bool version;
        public bool clientIndex;
      }

      public Entity_UpdateSingletonArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonEntityData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonEntityAcl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_UpdateSingleton_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityData != null && __isset.jsonEntityData)
          {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl)
          {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityAcl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_UpdateSingleton_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (JsonEntityData != null && __isset.jsonEntityData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityData: ");
          sb.Append(JsonEntityData);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityAcl: ");
          sb.Append(JsonEntityAcl);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_UpdateSingletonResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_UpdateSingletonResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_UpdateSingleton_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_UpdateSingleton_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_DeleteSingletonArgs : TBase
    {
      private string _entityType;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// Current version of the entity. If the version of the
      /// entity on the server does not match the version passed in, the
      /// server operation will fail. Use -1 to skip version checking.
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool version;
        public bool clientIndex;
      }

      public Entity_DeleteSingletonArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_DeleteSingleton_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_DeleteSingleton_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_DeleteSingletonResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_DeleteSingletonResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_DeleteSingleton_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_DeleteSingleton_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetEntityArgs : TBase
    {
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// The id of the entity
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool clientIndex;
      }

      public Entity_GetEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSingletonArgs : TBase
    {
      private string _entityType;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool clientIndex;
      }

      public Entity_GetSingletonArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSingleton_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSingleton_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSingletonResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetSingletonResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSingleton_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSingleton_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSharedEntityForProfileIdArgs : TBase
    {
      private string _profileId;
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// The the profile ID of the user who owns the entity
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The ID of the entity that will be retrieved
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool entityId;
        public bool clientIndex;
      }

      public Entity_GetSharedEntityForProfileIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSharedEntityForProfileId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSharedEntityForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSharedEntityForProfileIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetSharedEntityForProfileIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSharedEntityForProfileId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSharedEntityForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSharedEntitiesForProfileIdArgs : TBase
    {
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// The profile id to retrieve shared entities for
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool clientIndex;
      }

      public Entity_GetSharedEntitiesForProfileIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSharedEntitiesForProfileId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSharedEntitiesForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSharedEntitiesForProfileIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetSharedEntitiesForProfileIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSharedEntitiesForProfileId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSharedEntitiesForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetListArgs : TBase
    {
      private string _whereJson;
      private string _orderByJson;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// Sort order
      /// </summary>
      public string OrderByJson
      {
        get
        {
          return _orderByJson;
        }
        set
        {
          __isset.orderByJson = true;
          this._orderByJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool whereJson;
        public bool orderByJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public Entity_GetListArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  WhereJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  OrderByJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  MaxReturn = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetList_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (WhereJson != null && __isset.whereJson)
          {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(WhereJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (OrderByJson != null && __isset.orderByJson)
          {
            field.Name = "orderByJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OrderByJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxReturn)
          {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxReturn, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetList_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("WhereJson: ");
          sb.Append(WhereJson);
        }
        if (OrderByJson != null && __isset.orderByJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OrderByJson: ");
          sb.Append(OrderByJson);
        }
        if (__isset.maxReturn)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxReturn: ");
          sb.Append(MaxReturn);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetListResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetListResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetList_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetList_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSharedEntitiesListForProfileIdArgs : TBase
    {
      private string _profileId;
      private string _whereJson;
      private string _orderByJson;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// The profile ID to retrieve shared entities for
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// Sort order
      /// </summary>
      public string OrderByJson
      {
        get
        {
          return _orderByJson;
        }
        set
        {
          __isset.orderByJson = true;
          this._orderByJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool whereJson;
        public bool orderByJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public Entity_GetSharedEntitiesListForProfileIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  WhereJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  OrderByJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  MaxReturn = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSharedEntitiesListForProfileId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (WhereJson != null && __isset.whereJson)
          {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(WhereJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (OrderByJson != null && __isset.orderByJson)
          {
            field.Name = "orderByJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OrderByJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxReturn)
          {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxReturn, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSharedEntitiesListForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (WhereJson != null && __isset.whereJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("WhereJson: ");
          sb.Append(WhereJson);
        }
        if (OrderByJson != null && __isset.orderByJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OrderByJson: ");
          sb.Append(OrderByJson);
        }
        if (__isset.maxReturn)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxReturn: ");
          sb.Append(MaxReturn);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetSharedEntitiesListForProfileIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetSharedEntitiesListForProfileIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetSharedEntitiesListForProfileId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetSharedEntitiesListForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetListCountArgs : TBase
    {
      private string _whereJson;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool whereJson;
        public bool clientIndex;
      }

      public Entity_GetListCountArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  WhereJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetListCount_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (WhereJson != null && __isset.whereJson)
          {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(WhereJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetListCount_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("WhereJson: ");
          sb.Append(WhereJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetListCountResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetListCountResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetListCount_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetListCount_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetPageArgs : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// The json context for the page request.
      /// See the portal appendix documentation for format
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonContext;
        public bool clientIndex;
      }

      public Entity_GetPageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonContext = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetPage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonContext != null && __isset.jsonContext)
          {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonContext, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonContext: ");
          sb.Append(JsonContext);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetPageResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetPageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetPage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetPage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetPageOffsetArgs : TBase
    {
      private string _context;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// The context string returned from the server from a previous call
      /// to GetPage() or GetPageOffset()
      /// </summary>
      public string Context
      {
        get
        {
          return _context;
        }
        set
        {
          __isset.context = true;
          this._context = value;
        }
      }

      /// <summary>
      /// The positive or negative page offset to fetch. Uses the last page
      /// retrieved using the context string to determine a starting point.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool context;
        public bool pageOffset;
        public bool clientIndex;
      }

      public Entity_GetPageOffsetArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Context = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  PageOffset = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetPageOffset_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Context != null && __isset.context)
          {
            field.Name = "context";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Context, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.pageOffset)
          {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(PageOffset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetPageOffset_args(");
        bool __first = true;
        if (Context != null && __isset.context)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Context: ");
          sb.Append(Context);
        }
        if (__isset.pageOffset)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PageOffset: ");
          sb.Append(PageOffset);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_GetPageOffsetResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_GetPageOffsetResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_GetPageOffset_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_GetPageOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_IncrementUserEntityDataArgs : TBase
    {
      private string _entityId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The entity to increment
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The subset of data to increment
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Entity_IncrementUserEntityDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_IncrementUserEntityData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_IncrementUserEntityData_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_IncrementUserEntityDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_IncrementUserEntityDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_IncrementUserEntityData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_IncrementUserEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_IncrementSharedUserEntityDataArgs : TBase
    {
      private string _entityId;
      private string _targetProfileId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The entity to increment
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Profile ID of the entity owner
      /// </summary>
      public string TargetProfileId
      {
        get
        {
          return _targetProfileId;
        }
        set
        {
          __isset.targetProfileId = true;
          this._targetProfileId = value;
        }
      }

      /// <summary>
      /// The subset of data to increment
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool targetProfileId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Entity_IncrementSharedUserEntityDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  TargetProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_IncrementSharedUserEntityData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (TargetProfileId != null && __isset.targetProfileId)
          {
            field.Name = "targetProfileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TargetProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_IncrementSharedUserEntityData_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (TargetProfileId != null && __isset.targetProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TargetProfileId: ");
          sb.Append(TargetProfileId);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Entity_IncrementSharedUserEntityDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Entity_IncrementSharedUserEntityDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Entity_IncrementSharedUserEntityData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Entity_IncrementSharedUserEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_SendEventArgs : TBase
    {
      private string _toProfileId;
      private string _eventType;
      private string _jsonEventData;
      private int _clientIndex;

      /// <summary>
      /// The id of the user who is being sent the event
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// The user-defined type of the event.
      /// </summary>
      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      /// <summary>
      /// The user-defined data for this event encoded in JSON.
      /// </summary>
      public string JsonEventData
      {
        get
        {
          return _jsonEventData;
        }
        set
        {
          __isset.jsonEventData = true;
          this._jsonEventData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool toProfileId;
        public bool eventType;
        public bool jsonEventData;
        public bool clientIndex;
      }

      public Event_SendEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ToProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EventType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonEventData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_SendEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ToProfileId != null && __isset.toProfileId)
          {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ToProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EventType != null && __isset.eventType)
          {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEventData != null && __isset.jsonEventData)
          {
            field.Name = "jsonEventData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEventData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_SendEvent_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ToProfileId: ");
          sb.Append(ToProfileId);
        }
        if (EventType != null && __isset.eventType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventType: ");
          sb.Append(EventType);
        }
        if (JsonEventData != null && __isset.jsonEventData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEventData: ");
          sb.Append(JsonEventData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_SendEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Event_SendEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_SendEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_SendEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_UpdateIncomingEventDataArgs : TBase
    {
      private string _evId;
      private string _jsonEventData;
      private int _clientIndex;

      /// <summary>
      /// The event id
      /// </summary>
      public string EvId
      {
        get
        {
          return _evId;
        }
        set
        {
          __isset.evId = true;
          this._evId = value;
        }
      }

      /// <summary>
      /// The user-defined data for this event encoded in JSON.
      /// </summary>
      public string JsonEventData
      {
        get
        {
          return _jsonEventData;
        }
        set
        {
          __isset.jsonEventData = true;
          this._jsonEventData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool evId;
        public bool jsonEventData;
        public bool clientIndex;
      }

      public Event_UpdateIncomingEventDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EvId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonEventData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_UpdateIncomingEventData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EvId != null && __isset.evId)
          {
            field.Name = "evId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EvId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEventData != null && __isset.jsonEventData)
          {
            field.Name = "jsonEventData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEventData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_UpdateIncomingEventData_args(");
        bool __first = true;
        if (EvId != null && __isset.evId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EvId: ");
          sb.Append(EvId);
        }
        if (JsonEventData != null && __isset.jsonEventData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEventData: ");
          sb.Append(JsonEventData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_UpdateIncomingEventDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Event_UpdateIncomingEventDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_UpdateIncomingEventData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_UpdateIncomingEventData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_DeleteIncomingEventArgs : TBase
    {
      private string _evId;
      private int _clientIndex;

      /// <summary>
      /// The event id
      /// </summary>
      public string EvId
      {
        get
        {
          return _evId;
        }
        set
        {
          __isset.evId = true;
          this._evId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool evId;
        public bool clientIndex;
      }

      public Event_DeleteIncomingEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EvId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_DeleteIncomingEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EvId != null && __isset.evId)
          {
            field.Name = "evId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EvId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_DeleteIncomingEvent_args(");
        bool __first = true;
        if (EvId != null && __isset.evId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EvId: ");
          sb.Append(EvId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_DeleteIncomingEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Event_DeleteIncomingEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_DeleteIncomingEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_DeleteIncomingEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_GetEventsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Event_GetEventsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_GetEvents_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_GetEvents_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Event_GetEventsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Event_GetEventsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Event_GetEvents_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Event_GetEvents_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_UploadFileArgs : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private bool _shareable;
      private bool _replaceIfExists;
      private string _localPath;
      private int _clientIndex;

      /// <summary>
      /// The desired cloud path of the file
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// The desired cloud fileName of the file
      /// </summary>
      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      /// <summary>
      /// True if the file is shareable
      /// </summary>
      public bool Shareable
      {
        get
        {
          return _shareable;
        }
        set
        {
          __isset.shareable = true;
          this._shareable = value;
        }
      }

      /// <summary>
      /// Whether to replace file if it exists
      /// </summary>
      public bool ReplaceIfExists
      {
        get
        {
          return _replaceIfExists;
        }
        set
        {
          __isset.replaceIfExists = true;
          this._replaceIfExists = value;
        }
      }

      /// <summary>
      /// The path and fileName of the local file
      /// </summary>
      public string LocalPath
      {
        get
        {
          return _localPath;
        }
        set
        {
          __isset.localPath = true;
          this._localPath = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool cloudFilename;
        public bool shareable;
        public bool replaceIfExists;
        public bool localPath;
        public bool clientIndex;
      }

      public File_UploadFileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  CloudFilename = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  Shareable = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  ReplaceIfExists = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.String)
                {
                  LocalPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_UploadFile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CloudFilename != null && __isset.cloudFilename)
          {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudFilename, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.shareable)
          {
            field.Name = "shareable";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Shareable, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.replaceIfExists)
          {
            field.Name = "replaceIfExists";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ReplaceIfExists, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (LocalPath != null && __isset.localPath)
          {
            field.Name = "localPath";
            field.Type = TType.String;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LocalPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_UploadFile_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudFilename: ");
          sb.Append(CloudFilename);
        }
        if (__isset.shareable)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Shareable: ");
          sb.Append(Shareable);
        }
        if (__isset.replaceIfExists)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReplaceIfExists: ");
          sb.Append(ReplaceIfExists);
        }
        if (LocalPath != null && __isset.localPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LocalPath: ");
          sb.Append(LocalPath);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_UploadFileResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_UploadFileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_UploadFile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_UploadFile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_CancelUploadArgs : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// Upload ID of the file to cancel
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_CancelUploadArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UploadId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_CancelUpload_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UploadId != null && __isset.uploadId)
          {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UploadId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_CancelUpload_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UploadId: ");
          sb.Append(UploadId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_CancelUploadResult : TBase
    {

      public File_CancelUploadResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_CancelUpload_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_CancelUpload_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetUploadProgressArgs : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// The id of the upload
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_GetUploadProgressArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UploadId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetUploadProgress_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UploadId != null && __isset.uploadId)
          {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UploadId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetUploadProgress_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UploadId: ");
          sb.Append(UploadId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetUploadProgressResult : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_GetUploadProgressResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double)
                {
                  Success = await iprot.ReadDoubleAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetUploadProgress_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteDoubleAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetUploadProgress_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetUploadBytesTransferredArgs : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// The id of the upload
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_GetUploadBytesTransferredArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UploadId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetUploadBytesTransferred_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UploadId != null && __isset.uploadId)
          {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UploadId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetUploadBytesTransferred_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UploadId: ");
          sb.Append(UploadId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetUploadBytesTransferredResult : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_GetUploadBytesTransferredResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetUploadBytesTransferred_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetUploadBytesTransferred_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetUploadTotalBytesToTransferArgs : TBase
    {
      private string _uploadId;
      private int _clientIndex;

      /// <summary>
      /// The id of the upload
      /// </summary>
      public string UploadId
      {
        get
        {
          return _uploadId;
        }
        set
        {
          __isset.uploadId = true;
          this._uploadId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool uploadId;
        public bool clientIndex;
      }

      public File_GetUploadTotalBytesToTransferArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UploadId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetUploadTotalBytesToTransfer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UploadId != null && __isset.uploadId)
          {
            field.Name = "uploadId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UploadId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetUploadTotalBytesToTransfer_args(");
        bool __first = true;
        if (UploadId != null && __isset.uploadId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UploadId: ");
          sb.Append(UploadId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetUploadTotalBytesToTransferResult : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_GetUploadTotalBytesToTransferResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetUploadTotalBytesToTransfer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetUploadTotalBytesToTransfer_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_ListUserFiles_SFOArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public File_ListUserFiles_SFOArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_ListUserFiles_SFO_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_ListUserFiles_SFO_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_ListUserFiles_SFOResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_ListUserFiles_SFOResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_ListUserFiles_SFO_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_ListUserFiles_SFO_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_ListUserFiles_SNSFOArgs : TBase
    {
      private string _cloudPath;
      private bool _recurse;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// Whether to recurse down the path
      /// </summary>
      public bool Recurse
      {
        get
        {
          return _recurse;
        }
        set
        {
          __isset.recurse = true;
          this._recurse = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool recurse;
        public bool clientIndex;
      }

      public File_ListUserFiles_SNSFOArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  Recurse = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_ListUserFiles_SNSFO_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.recurse)
          {
            field.Name = "recurse";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Recurse, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_ListUserFiles_SNSFO_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (__isset.recurse)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Recurse: ");
          sb.Append(Recurse);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_ListUserFiles_SNSFOResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_ListUserFiles_SNSFOResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_ListUserFiles_SNSFO_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_ListUserFiles_SNSFO_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_DeleteUserFileArgs : TBase
    {
      private string _cloudPath;
      private string _cloudFileName;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFileName
      {
        get
        {
          return _cloudFileName;
        }
        set
        {
          __isset.cloudFileName = true;
          this._cloudFileName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool cloudFileName;
        public bool clientIndex;
      }

      public File_DeleteUserFileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  CloudFileName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_DeleteUserFile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CloudFileName != null && __isset.cloudFileName)
          {
            field.Name = "cloudFileName";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudFileName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_DeleteUserFile_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (CloudFileName != null && __isset.cloudFileName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudFileName: ");
          sb.Append(CloudFileName);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_DeleteUserFileResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_DeleteUserFileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_DeleteUserFile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_DeleteUserFile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_DeleteUserFilesArgs : TBase
    {
      private string _cloudPath;
      private bool _recurse;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// Whether to recurse down the path
      /// </summary>
      public bool Recurse
      {
        get
        {
          return _recurse;
        }
        set
        {
          __isset.recurse = true;
          this._recurse = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool recurse;
        public bool clientIndex;
      }

      public File_DeleteUserFilesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  Recurse = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_DeleteUserFiles_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.recurse)
          {
            field.Name = "recurse";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Recurse, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_DeleteUserFiles_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (__isset.recurse)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Recurse: ");
          sb.Append(Recurse);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_DeleteUserFilesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_DeleteUserFilesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_DeleteUserFiles_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_DeleteUserFiles_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetCDNUrlArgs : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private int _clientIndex;

      /// <summary>
      /// File path
      /// </summary>
      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      /// <summary>
      /// Name of file
      /// </summary>
      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool cloudFilename;
        public bool clientIndex;
      }

      public File_GetCDNUrlArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  CloudFilename = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetCDNUrl_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CloudFilename != null && __isset.cloudFilename)
          {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudFilename, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetCDNUrl_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudFilename: ");
          sb.Append(CloudFilename);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetCDNUrlResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_GetCDNUrlResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetCDNUrl_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetCDNUrl_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_FindUserByUniversalIdArgs : TBase
    {
      private string _searchText;
      private int _maxResults;
      private int _clientIndex;

      /// <summary>
      /// Universal ID text on which to search.
      /// </summary>
      public string SearchText
      {
        get
        {
          return _searchText;
        }
        set
        {
          __isset.searchText = true;
          this._searchText = value;
        }
      }

      /// <summary>
      /// Maximum number of results to return.
      /// </summary>
      public int MaxResults
      {
        get
        {
          return _maxResults;
        }
        set
        {
          __isset.maxResults = true;
          this._maxResults = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool searchText;
        public bool maxResults;
        public bool clientIndex;
      }

      public Friend_FindUserByUniversalIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SearchText = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  MaxResults = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_FindUserByUniversalId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SearchText != null && __isset.searchText)
          {
            field.Name = "searchText";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SearchText, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxResults)
          {
            field.Name = "maxResults";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxResults, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_FindUserByUniversalId_args(");
        bool __first = true;
        if (SearchText != null && __isset.searchText)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SearchText: ");
          sb.Append(SearchText);
        }
        if (__isset.maxResults)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxResults: ");
          sb.Append(MaxResults);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_FindUserByUniversalIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_FindUserByUniversalIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_FindUserByUniversalId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_FindUserByUniversalId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetProfileInfoForCredentialArgs : TBase
    {
      private string _externalId;
      private string _authenticationType;
      private int _clientIndex;

      /// <summary>
      /// External id of the user to find
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// The authentication type used for the user's ID
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool externalId;
        public bool authenticationType;
        public bool clientIndex;
      }

      public Friend_GetProfileInfoForCredentialArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ExternalId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AuthenticationType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetProfileInfoForCredential_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ExternalId != null && __isset.externalId)
          {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationType != null && __isset.authenticationType)
          {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetProfileInfoForCredential_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalId: ");
          sb.Append(ExternalId);
        }
        if (AuthenticationType != null && __isset.authenticationType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationType: ");
          sb.Append(AuthenticationType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetProfileInfoForCredentialResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_GetProfileInfoForCredentialResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetProfileInfoForCredential_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetProfileInfoForCredential_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetProfileInfoForExternalAuthIdArgs : TBase
    {
      private string _externalId;
      private string _externalAuthType;
      private int _clientIndex;

      /// <summary>
      /// External id of the friend to find
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// The external authentication type used for this friend's external id
      /// </summary>
      public string ExternalAuthType
      {
        get
        {
          return _externalAuthType;
        }
        set
        {
          __isset.externalAuthType = true;
          this._externalAuthType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool externalId;
        public bool externalAuthType;
        public bool clientIndex;
      }

      public Friend_GetProfileInfoForExternalAuthIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ExternalId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ExternalAuthType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetProfileInfoForExternalAuthId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ExternalId != null && __isset.externalId)
          {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ExternalAuthType != null && __isset.externalAuthType)
          {
            field.Name = "externalAuthType";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalAuthType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetProfileInfoForExternalAuthId_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalId: ");
          sb.Append(ExternalId);
        }
        if (ExternalAuthType != null && __isset.externalAuthType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalAuthType: ");
          sb.Append(ExternalAuthType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetProfileInfoForExternalAuthIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_GetProfileInfoForExternalAuthIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetProfileInfoForExternalAuthId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetProfileInfoForExternalAuthId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetExternalIdForProfileIdArgs : TBase
    {
      private string _profileId;
      private string _authenticationType;
      private int _clientIndex;

      /// <summary>
      /// Profile (user) ID.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Associated authentication type.
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool authenticationType;
        public bool clientIndex;
      }

      public Friend_GetExternalIdForProfileIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AuthenticationType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetExternalIdForProfileId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationType != null && __isset.authenticationType)
          {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetExternalIdForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (AuthenticationType != null && __isset.authenticationType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationType: ");
          sb.Append(AuthenticationType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetExternalIdForProfileIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_GetExternalIdForProfileIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetExternalIdForProfileId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetExternalIdForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ReadFriendEntityArgs : TBase
    {
      private string _entityId;
      private string _friendId;
      private int _clientIndex;

      /// <summary>
      /// Id of entity to retrieve.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Profile Id of friend who owns entity.
      /// </summary>
      public string FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool friendId;
        public bool clientIndex;
      }

      public Friend_ReadFriendEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FriendId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ReadFriendEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FriendId != null && __isset.friendId)
          {
            field.Name = "friendId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FriendId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ReadFriendEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (FriendId != null && __isset.friendId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FriendId: ");
          sb.Append(FriendId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ReadFriendEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_ReadFriendEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ReadFriendEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ReadFriendEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ReadFriendsEntitiesArgs : TBase
    {
      private string _entityType;
      private int _clientIndex;

      /// <summary>
      /// Types of entities to retrieve.
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool clientIndex;
      }

      public Friend_ReadFriendsEntitiesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ReadFriendsEntities_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ReadFriendsEntities_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ReadFriendsEntitiesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_ReadFriendsEntitiesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ReadFriendsEntities_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ReadFriendsEntities_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ReadFriendUserStateArgs : TBase
    {
      private string _friendId;
      private int _clientIndex;

      /// <summary>
      /// Profile Id of friend to retrieve user state for.
      /// </summary>
      public string FriendId
      {
        get
        {
          return _friendId;
        }
        set
        {
          __isset.friendId = true;
          this._friendId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool friendId;
        public bool clientIndex;
      }

      public Friend_ReadFriendUserStateArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  FriendId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ReadFriendUserState_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (FriendId != null && __isset.friendId)
          {
            field.Name = "friendId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FriendId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ReadFriendUserState_args(");
        bool __first = true;
        if (FriendId != null && __isset.friendId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FriendId: ");
          sb.Append(FriendId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ReadFriendUserStateResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_ReadFriendUserStateResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ReadFriendUserState_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ReadFriendUserState_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetSummaryDataForProfileIdArgs : TBase
    {
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// Profile Id of user to retrieve player state for.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool clientIndex;
      }

      public Friend_GetSummaryDataForProfileIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetSummaryDataForProfileId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetSummaryDataForProfileId_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetSummaryDataForProfileIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_GetSummaryDataForProfileIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetSummaryDataForProfileId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetSummaryDataForProfileId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_FindUsersByExactNameArgs : TBase
    {
      private string _searchText;
      private int _maxResults;
      private int _clientIndex;

      /// <summary>
      /// The string to search for.
      /// </summary>
      public string SearchText
      {
        get
        {
          return _searchText;
        }
        set
        {
          __isset.searchText = true;
          this._searchText = value;
        }
      }

      /// <summary>
      /// Maximum number of results to return.
      /// </summary>
      public int MaxResults
      {
        get
        {
          return _maxResults;
        }
        set
        {
          __isset.maxResults = true;
          this._maxResults = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool searchText;
        public bool maxResults;
        public bool clientIndex;
      }

      public Friend_FindUsersByExactNameArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SearchText = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  MaxResults = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_FindUsersByExactName_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SearchText != null && __isset.searchText)
          {
            field.Name = "searchText";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SearchText, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxResults)
          {
            field.Name = "maxResults";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxResults, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_FindUsersByExactName_args(");
        bool __first = true;
        if (SearchText != null && __isset.searchText)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SearchText: ");
          sb.Append(SearchText);
        }
        if (__isset.maxResults)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxResults: ");
          sb.Append(MaxResults);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_FindUsersByExactNameResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_FindUsersByExactNameResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_FindUsersByExactName_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_FindUsersByExactName_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_FindUsersBySubstrNameArgs : TBase
    {
      private string _searchText;
      private int _maxResults;
      private int _clientIndex;

      /// <summary>
      /// The substring to search for. Minimum length of 3 characters.
      /// </summary>
      public string SearchText
      {
        get
        {
          return _searchText;
        }
        set
        {
          __isset.searchText = true;
          this._searchText = value;
        }
      }

      /// <summary>
      /// Maximum number of results to return.
      /// </summary>
      public int MaxResults
      {
        get
        {
          return _maxResults;
        }
        set
        {
          __isset.maxResults = true;
          this._maxResults = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool searchText;
        public bool maxResults;
        public bool clientIndex;
      }

      public Friend_FindUsersBySubstrNameArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SearchText = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  MaxResults = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_FindUsersBySubstrName_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SearchText != null && __isset.searchText)
          {
            field.Name = "searchText";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SearchText, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxResults)
          {
            field.Name = "maxResults";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxResults, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_FindUsersBySubstrName_args(");
        bool __first = true;
        if (SearchText != null && __isset.searchText)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SearchText: ");
          sb.Append(SearchText);
        }
        if (__isset.maxResults)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxResults: ");
          sb.Append(MaxResults);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_FindUsersBySubstrNameResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_FindUsersBySubstrNameResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_FindUsersBySubstrName_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_FindUsersBySubstrName_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ListFriendsArgs : TBase
    {
      private Ruyi.SDK.BrainCloudApi.FriendPlatform _friendPlatform;
      private bool _includeSummaryData;
      private int _clientIndex;

      /// <summary>
      /// Friend platform to query.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.FriendPlatform"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.FriendPlatform FriendPlatform
      {
        get
        {
          return _friendPlatform;
        }
        set
        {
          __isset.friendPlatform = true;
          this._friendPlatform = value;
        }
      }

      /// <summary>
      /// True if including summary data; false otherwise.
      /// </summary>
      public bool IncludeSummaryData
      {
        get
        {
          return _includeSummaryData;
        }
        set
        {
          __isset.includeSummaryData = true;
          this._includeSummaryData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool friendPlatform;
        public bool includeSummaryData;
        public bool clientIndex;
      }

      public Friend_ListFriendsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  FriendPlatform = (Ruyi.SDK.BrainCloudApi.FriendPlatform)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  IncludeSummaryData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ListFriends_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.friendPlatform)
          {
            field.Name = "friendPlatform";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)FriendPlatform, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.includeSummaryData)
          {
            field.Name = "includeSummaryData";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeSummaryData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ListFriends_args(");
        bool __first = true;
        if (__isset.friendPlatform)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FriendPlatform: ");
          sb.Append(FriendPlatform);
        }
        if (__isset.includeSummaryData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeSummaryData: ");
          sb.Append(IncludeSummaryData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_ListFriendsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_ListFriendsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_ListFriends_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_ListFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_AddFriendsArgs : TBase
    {
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs.
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileIds;
        public bool clientIndex;
      }

      public Friend_AddFriendsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    ProfileIds = new List<string>();
                    TList _list8 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      string _elem10;
                      _elem10 = await iprot.ReadStringAsync(cancellationToken);
                      ProfileIds.Add(_elem10);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_AddFriends_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileIds != null && __isset.profileIds)
          {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, ProfileIds.Count), cancellationToken);
              foreach (string _iter11 in ProfileIds)
              {
                await oprot.WriteStringAsync(_iter11, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_AddFriends_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileIds: ");
          sb.Append(ProfileIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_AddFriendsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_AddFriendsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_AddFriends_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_AddFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_RemoveFriendsArgs : TBase
    {
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs.
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileIds;
        public bool clientIndex;
      }

      public Friend_RemoveFriendsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    ProfileIds = new List<string>();
                    TList _list12 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      string _elem14;
                      _elem14 = await iprot.ReadStringAsync(cancellationToken);
                      ProfileIds.Add(_elem14);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_RemoveFriends_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileIds != null && __isset.profileIds)
          {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, ProfileIds.Count), cancellationToken);
              foreach (string _iter15 in ProfileIds)
              {
                await oprot.WriteStringAsync(_iter15, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_RemoveFriends_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileIds: ");
          sb.Append(ProfileIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_RemoveFriendsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_RemoveFriendsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_RemoveFriends_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_RemoveFriends_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetUsersOnlineStatusArgs : TBase
    {
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs.
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileIds;
        public bool clientIndex;
      }

      public Friend_GetUsersOnlineStatusArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    ProfileIds = new List<string>();
                    TList _list16 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      string _elem18;
                      _elem18 = await iprot.ReadStringAsync(cancellationToken);
                      ProfileIds.Add(_elem18);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetUsersOnlineStatus_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileIds != null && __isset.profileIds)
          {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, ProfileIds.Count), cancellationToken);
              foreach (string _iter19 in ProfileIds)
              {
                await oprot.WriteStringAsync(_iter19, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetUsersOnlineStatus_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileIds: ");
          sb.Append(ProfileIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Friend_GetUsersOnlineStatusResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Friend_GetUsersOnlineStatusResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Friend_GetUsersOnlineStatus_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Friend_GetUsersOnlineStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadAllGamificationArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadAllGamificationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadAllGamification_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadAllGamification_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadAllGamificationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadAllGamificationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadAllGamification_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadAllGamification_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadMilestonesArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadMilestonesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadMilestones_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadMilestones_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadMilestonesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadMilestonesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadMilestones_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadAchievementsArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadAchievementsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadAchievements_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadAchievements_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadAchievementsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadAchievementsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadAchievements_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadAchievements_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadXpLevelsMetaDataArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Gamification_ReadXpLevelsMetaDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadXpLevelsMetaData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadXpLevelsMetaData_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadXpLevelsMetaDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadXpLevelsMetaDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadXpLevelsMetaData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadXpLevelsMetaData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadAchievedAchievementsArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadAchievedAchievementsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadAchievedAchievements_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadAchievedAchievements_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadAchievedAchievementsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadAchievedAchievementsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadAchievedAchievements_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadAchievedAchievements_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadCompletedMilestonesArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadCompletedMilestonesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadCompletedMilestones_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadCompletedMilestones_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadCompletedMilestonesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadCompletedMilestonesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadCompletedMilestones_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadCompletedMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadInProgressMilestonesArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadInProgressMilestonesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadInProgressMilestones_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadInProgressMilestones_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadInProgressMilestonesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadInProgressMilestonesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadInProgressMilestones_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadInProgressMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadMilestonesByCategoryArgs : TBase
    {
      private string _category;
      private bool _includeMetaData;
      private int _clientIndex;

      /// <summary>
      /// The milestone category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool category;
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadMilestonesByCategoryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadMilestonesByCategory_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadMilestonesByCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadMilestonesByCategoryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadMilestonesByCategoryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadMilestonesByCategory_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadMilestonesByCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_AwardAchievementsArgs : TBase
    {
      private List<string> _achievementIds;
      private int _clientIndex;

      /// <summary>
      /// A collection of achievement ids to award
      /// </summary>
      public List<string> AchievementIds
      {
        get
        {
          return _achievementIds;
        }
        set
        {
          __isset.achievementIds = true;
          this._achievementIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool achievementIds;
        public bool clientIndex;
      }

      public Gamification_AwardAchievementsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    AchievementIds = new List<string>();
                    TList _list20 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      string _elem22;
                      _elem22 = await iprot.ReadStringAsync(cancellationToken);
                      AchievementIds.Add(_elem22);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_AwardAchievements_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AchievementIds != null && __isset.achievementIds)
          {
            field.Name = "achievementIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, AchievementIds.Count), cancellationToken);
              foreach (string _iter23 in AchievementIds)
              {
                await oprot.WriteStringAsync(_iter23, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_AwardAchievements_args(");
        bool __first = true;
        if (AchievementIds != null && __isset.achievementIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AchievementIds: ");
          sb.Append(AchievementIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_AwardAchievementsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_AwardAchievementsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_AwardAchievements_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_AwardAchievements_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuests_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadQuestsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuests_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadCompletedQuestsArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadCompletedQuestsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadCompletedQuests_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadCompletedQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadCompletedQuestsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadCompletedQuestsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadCompletedQuests_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadCompletedQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadInProgressQuestsArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadInProgressQuestsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadInProgressQuests_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadInProgressQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadInProgressQuestsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadInProgressQuestsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadInProgressQuests_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadInProgressQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadNotStartedQuestsArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadNotStartedQuestsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadNotStartedQuests_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadNotStartedQuests_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadNotStartedQuestsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadNotStartedQuestsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadNotStartedQuests_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadNotStartedQuests_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsWithStatusArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsWithStatusArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsWithStatus_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsWithStatus_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsWithStatusResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadQuestsWithStatusResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsWithStatus_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsWithStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsWithBasicPercentageArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsWithBasicPercentageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsWithBasicPercentage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsWithBasicPercentage_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsWithBasicPercentageResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadQuestsWithBasicPercentageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsWithBasicPercentage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsWithBasicPercentage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsWithComplexPercentageArgs : TBase
    {
      private bool _includeMetaData;
      private int _clientIndex;

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsWithComplexPercentageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsWithComplexPercentage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsWithComplexPercentage_args(");
        bool __first = true;
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsWithComplexPercentageResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadQuestsWithComplexPercentageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsWithComplexPercentage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsWithComplexPercentage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsByCategoryArgs : TBase
    {
      private string _category;
      private bool _includeMetaData;
      private int _clientIndex;

      /// <summary>
      /// The quest category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public bool IncludeMetaData
      {
        get
        {
          return _includeMetaData;
        }
        set
        {
          __isset.includeMetaData = true;
          this._includeMetaData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool category;
        public bool includeMetaData;
        public bool clientIndex;
      }

      public Gamification_ReadQuestsByCategoryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  IncludeMetaData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsByCategory_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.includeMetaData)
          {
            field.Name = "includeMetaData";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeMetaData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsByCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (__isset.includeMetaData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeMetaData: ");
          sb.Append(IncludeMetaData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ReadQuestsByCategoryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ReadQuestsByCategoryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ReadQuestsByCategory_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ReadQuestsByCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ResetMilestonesArgs : TBase
    {
      private List<string> _milestoneIds;
      private int _clientIndex;

      /// <summary>
      /// List of milestones to reset
      /// </summary>
      public List<string> MilestoneIds
      {
        get
        {
          return _milestoneIds;
        }
        set
        {
          __isset.milestoneIds = true;
          this._milestoneIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool milestoneIds;
        public bool clientIndex;
      }

      public Gamification_ResetMilestonesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    MilestoneIds = new List<string>();
                    TList _list24 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i25 = 0; _i25 < _list24.Count; ++_i25)
                    {
                      string _elem26;
                      _elem26 = await iprot.ReadStringAsync(cancellationToken);
                      MilestoneIds.Add(_elem26);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ResetMilestones_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (MilestoneIds != null && __isset.milestoneIds)
          {
            field.Name = "milestoneIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, MilestoneIds.Count), cancellationToken);
              foreach (string _iter27 in MilestoneIds)
              {
                await oprot.WriteStringAsync(_iter27, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ResetMilestones_args(");
        bool __first = true;
        if (MilestoneIds != null && __isset.milestoneIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MilestoneIds: ");
          sb.Append(MilestoneIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Gamification_ResetMilestonesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Gamification_ResetMilestonesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Gamification_ResetMilestones_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Gamification_ResetMilestones_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalApp_ReadPropertiesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public GlobalApp_ReadPropertiesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalApp_ReadProperties_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalApp_ReadProperties_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalApp_ReadPropertiesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalApp_ReadPropertiesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalApp_ReadProperties_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalApp_ReadProperties_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_CreateEntityArgs : TBase
    {
      private string _entityType;
      private long _timeToLive;
      private string _jsonEntityAcl;
      private string _jsonEntityData;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// Sets expiry time for entity in milliseconds if > 0
      /// </summary>
      public long TimeToLive
      {
        get
        {
          return _timeToLive;
        }
        set
        {
          __isset.timeToLive = true;
          this._timeToLive = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool timeToLive;
        public bool jsonEntityAcl;
        public bool jsonEntityData;
        public bool clientIndex;
      }

      public GlobalEntity_CreateEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  TimeToLive = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonEntityAcl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonEntityData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_CreateEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.timeToLive)
          {
            field.Name = "timeToLive";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(TimeToLive, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl)
          {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityAcl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityData != null && __isset.jsonEntityData)
          {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_CreateEntity_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (__isset.timeToLive)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TimeToLive: ");
          sb.Append(TimeToLive);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityAcl: ");
          sb.Append(JsonEntityAcl);
        }
        if (JsonEntityData != null && __isset.jsonEntityData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityData: ");
          sb.Append(JsonEntityData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_CreateEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_CreateEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_CreateEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_CreateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_CreateEntityWithIndexedIdArgs : TBase
    {
      private string _entityType;
      private string _indexedId;
      private long _timeToLive;
      private string _jsonEntityAcl;
      private string _jsonEntityData;
      private int _clientIndex;

      /// <summary>
      /// The entity type as defined by the user
      /// </summary>
      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// A secondary ID that will be indexed
      /// </summary>
      public string IndexedId
      {
        get
        {
          return _indexedId;
        }
        set
        {
          __isset.indexedId = true;
          this._indexedId = value;
        }
      }

      /// <summary>
      /// Sets expiry time for entity in milliseconds if > 0
      /// </summary>
      public long TimeToLive
      {
        get
        {
          return _timeToLive;
        }
        set
        {
          __isset.timeToLive = true;
          this._timeToLive = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json. A null acl implies default
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityType;
        public bool indexedId;
        public bool timeToLive;
        public bool jsonEntityAcl;
        public bool jsonEntityData;
        public bool clientIndex;
      }

      public GlobalEntity_CreateEntityWithIndexedIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  IndexedId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  TimeToLive = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonEntityAcl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.String)
                {
                  JsonEntityData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_CreateEntityWithIndexedId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (IndexedId != null && __isset.indexedId)
          {
            field.Name = "indexedId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(IndexedId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.timeToLive)
          {
            field.Name = "timeToLive";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(TimeToLive, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl)
          {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityAcl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityData != null && __isset.jsonEntityData)
          {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_CreateEntityWithIndexedId_args(");
        bool __first = true;
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (IndexedId != null && __isset.indexedId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IndexedId: ");
          sb.Append(IndexedId);
        }
        if (__isset.timeToLive)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TimeToLive: ");
          sb.Append(TimeToLive);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityAcl: ");
          sb.Append(JsonEntityAcl);
        }
        if (JsonEntityData != null && __isset.jsonEntityData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityData: ");
          sb.Append(JsonEntityData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_CreateEntityWithIndexedIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_CreateEntityWithIndexedIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_CreateEntityWithIndexedId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_CreateEntityWithIndexedId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityArgs : TBase
    {
      private string _entityId;
      private int _version;
      private string _jsonEntityData;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to update
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The entity's data as a json string
      /// </summary>
      public string JsonEntityData
      {
        get
        {
          return _jsonEntityData;
        }
        set
        {
          __isset.jsonEntityData = true;
          this._jsonEntityData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool version;
        public bool jsonEntityData;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonEntityData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityData != null && __isset.jsonEntityData)
          {
            field.Name = "jsonEntityData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (JsonEntityData != null && __isset.jsonEntityData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityData: ");
          sb.Append(JsonEntityData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_UpdateEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityAclArgs : TBase
    {
      private string _entityId;
      private int _version;
      private string _jsonEntityAcl;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to update
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The entity's access control list as json.
      /// </summary>
      public string JsonEntityAcl
      {
        get
        {
          return _jsonEntityAcl;
        }
        set
        {
          __isset.jsonEntityAcl = true;
          this._jsonEntityAcl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool version;
        public bool jsonEntityAcl;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntityAclArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonEntityAcl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntityAcl_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonEntityAcl != null && __isset.jsonEntityAcl)
          {
            field.Name = "jsonEntityAcl";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonEntityAcl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntityAcl_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (JsonEntityAcl != null && __isset.jsonEntityAcl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonEntityAcl: ");
          sb.Append(JsonEntityAcl);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityAclResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_UpdateEntityAclResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntityAcl_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntityAcl_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityTimeToLiveArgs : TBase
    {
      private string _entityId;
      private int _version;
      private long _timeToLive;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to update
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// Sets expiry time for entity in milliseconds if > 0
      /// </summary>
      public long TimeToLive
      {
        get
        {
          return _timeToLive;
        }
        set
        {
          __isset.timeToLive = true;
          this._timeToLive = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool version;
        public bool timeToLive;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntityTimeToLiveArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  TimeToLive = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntityTimeToLive_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.timeToLive)
          {
            field.Name = "timeToLive";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(TimeToLive, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntityTimeToLive_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.timeToLive)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TimeToLive: ");
          sb.Append(TimeToLive);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityTimeToLiveResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_UpdateEntityTimeToLiveResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntityTimeToLive_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntityTimeToLive_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_DeleteEntityArgs : TBase
    {
      private string _entityId;
      private int _version;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity to delete
      /// </summary>
      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool version;
        public bool clientIndex;
      }

      public GlobalEntity_DeleteEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Version = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_DeleteEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_DeleteEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_DeleteEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_DeleteEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_DeleteEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_DeleteEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_ReadEntityArgs : TBase
    {
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool clientIndex;
      }

      public GlobalEntity_ReadEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_ReadEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_ReadEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_ReadEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_ReadEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_ReadEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_ReadEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetListArgs : TBase
    {
      private string _whereJson;
      private string _orderByJson;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// Sort order
      /// </summary>
      public string OrderByJson
      {
        get
        {
          return _orderByJson;
        }
        set
        {
          __isset.orderByJson = true;
          this._orderByJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool whereJson;
        public bool orderByJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public GlobalEntity_GetListArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  WhereJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  OrderByJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  MaxReturn = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetList_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (WhereJson != null && __isset.whereJson)
          {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(WhereJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (OrderByJson != null && __isset.orderByJson)
          {
            field.Name = "orderByJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OrderByJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxReturn)
          {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxReturn, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetList_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("WhereJson: ");
          sb.Append(WhereJson);
        }
        if (OrderByJson != null && __isset.orderByJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OrderByJson: ");
          sb.Append(OrderByJson);
        }
        if (__isset.maxReturn)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxReturn: ");
          sb.Append(MaxReturn);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetListResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_GetListResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetList_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetList_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetListByIndexedIdArgs : TBase
    {
      private string _entityIndexedId;
      private int _maxReturn;
      private int _clientIndex;

      /// <summary>
      /// The entity indexed Id
      /// </summary>
      public string EntityIndexedId
      {
        get
        {
          return _entityIndexedId;
        }
        set
        {
          __isset.entityIndexedId = true;
          this._entityIndexedId = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityIndexedId;
        public bool maxReturn;
        public bool clientIndex;
      }

      public GlobalEntity_GetListByIndexedIdArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityIndexedId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  MaxReturn = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetListByIndexedId_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityIndexedId != null && __isset.entityIndexedId)
          {
            field.Name = "entityIndexedId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityIndexedId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxReturn)
          {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxReturn, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetListByIndexedId_args(");
        bool __first = true;
        if (EntityIndexedId != null && __isset.entityIndexedId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityIndexedId: ");
          sb.Append(EntityIndexedId);
        }
        if (__isset.maxReturn)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxReturn: ");
          sb.Append(MaxReturn);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetListByIndexedIdResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_GetListByIndexedIdResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetListByIndexedId_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetListByIndexedId_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetListCountArgs : TBase
    {
      private string _whereJson;
      private int _clientIndex;

      /// <summary>
      /// Mongo style query string
      /// </summary>
      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool whereJson;
        public bool clientIndex;
      }

      public GlobalEntity_GetListCountArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  WhereJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetListCount_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (WhereJson != null && __isset.whereJson)
          {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(WhereJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetListCount_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("WhereJson: ");
          sb.Append(WhereJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetListCountResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_GetListCountResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetListCount_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetListCount_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetPageArgs : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// The json context for the page request.
      /// See the portal appendix documentation for format
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonContext;
        public bool clientIndex;
      }

      public GlobalEntity_GetPageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonContext = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetPage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonContext != null && __isset.jsonContext)
          {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonContext, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonContext: ");
          sb.Append(JsonContext);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetPageResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_GetPageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetPage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetPage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetPageOffsetArgs : TBase
    {
      private string _context;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// The context string returned from the server from a previous call
      /// to GetPage() or GetPageOffset()
      /// </summary>
      public string Context
      {
        get
        {
          return _context;
        }
        set
        {
          __isset.context = true;
          this._context = value;
        }
      }

      /// <summary>
      /// The positive or negative page offset to fetch. Uses the last page
      /// retrieved using the context string to determine a starting point.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool context;
        public bool pageOffset;
        public bool clientIndex;
      }

      public GlobalEntity_GetPageOffsetArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Context = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  PageOffset = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetPageOffset_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Context != null && __isset.context)
          {
            field.Name = "context";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Context, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.pageOffset)
          {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(PageOffset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetPageOffset_args(");
        bool __first = true;
        if (Context != null && __isset.context)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Context: ");
          sb.Append(Context);
        }
        if (__isset.pageOffset)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PageOffset: ");
          sb.Append(PageOffset);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetPageOffsetResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_GetPageOffsetResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetPageOffset_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetPageOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_IncrementGlobalEntityDataArgs : TBase
    {
      private string _entityId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The entity to increment
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The subset of data to increment
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool jsonData;
        public bool clientIndex;
      }

      public GlobalEntity_IncrementGlobalEntityDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_IncrementGlobalEntityData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_IncrementGlobalEntityData_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_IncrementGlobalEntityDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_IncrementGlobalEntityDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_IncrementGlobalEntityData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_IncrementGlobalEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetRandomEntitiesMatchingArgs : TBase
    {
      private string _whereJson;
      private int _maxReturn;
      private int _clientIndex;

      public string WhereJson
      {
        get
        {
          return _whereJson;
        }
        set
        {
          __isset.whereJson = true;
          this._whereJson = value;
        }
      }

      /// <summary>
      /// The maximum number of entities to return
      /// </summary>
      public int MaxReturn
      {
        get
        {
          return _maxReturn;
        }
        set
        {
          __isset.maxReturn = true;
          this._maxReturn = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool whereJson;
        public bool maxReturn;
        public bool clientIndex;
      }

      public GlobalEntity_GetRandomEntitiesMatchingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  WhereJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  MaxReturn = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetRandomEntitiesMatching_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (WhereJson != null && __isset.whereJson)
          {
            field.Name = "whereJson";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(WhereJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxReturn)
          {
            field.Name = "maxReturn";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxReturn, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetRandomEntitiesMatching_args(");
        bool __first = true;
        if (WhereJson != null && __isset.whereJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("WhereJson: ");
          sb.Append(WhereJson);
        }
        if (__isset.maxReturn)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxReturn: ");
          sb.Append(MaxReturn);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_GetRandomEntitiesMatchingResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_GetRandomEntitiesMatchingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_GetRandomEntitiesMatching_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_GetRandomEntitiesMatching_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityOwnerAndAclArgs : TBase
    {
      private string _entityId;
      private long _version;
      private string _ownerId;
      private string _acl;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The owner ID
      /// </summary>
      public string OwnerId
      {
        get
        {
          return _ownerId;
        }
        set
        {
          __isset.ownerId = true;
          this._ownerId = value;
        }
      }

      /// <summary>
      /// The entity's access control list
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool version;
        public bool ownerId;
        public bool acl;
        public bool clientIndex;
      }

      public GlobalEntity_UpdateEntityOwnerAndAclArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  OwnerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  Acl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntityOwnerAndAcl_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (OwnerId != null && __isset.ownerId)
          {
            field.Name = "ownerId";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OwnerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Acl != null && __isset.acl)
          {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Acl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntityOwnerAndAcl_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (OwnerId != null && __isset.ownerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OwnerId: ");
          sb.Append(OwnerId);
        }
        if (Acl != null && __isset.acl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Acl: ");
          sb.Append(Acl);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_UpdateEntityOwnerAndAclResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_UpdateEntityOwnerAndAclResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_UpdateEntityOwnerAndAcl_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_UpdateEntityOwnerAndAcl_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_MakeSystemEntityArgs : TBase
    {
      private string _entityId;
      private long _version;
      private string _acl;
      private int _clientIndex;

      /// <summary>
      /// The entity ID
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The version of the entity
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// The entity's access control list
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool entityId;
        public bool version;
        public bool acl;
        public bool clientIndex;
      }

      public GlobalEntity_MakeSystemEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Acl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_MakeSystemEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Acl != null && __isset.acl)
          {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Acl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_MakeSystemEntity_args(");
        bool __first = true;
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (Acl != null && __isset.acl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Acl: ");
          sb.Append(Acl);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalEntity_MakeSystemEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalEntity_MakeSystemEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalEntity_MakeSystemEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalEntity_MakeSystemEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ReadAllGlobalStatsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public GlobalStatistics_ReadAllGlobalStatsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ReadAllGlobalStats_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ReadAllGlobalStats_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ReadAllGlobalStatsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalStatistics_ReadAllGlobalStatsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ReadAllGlobalStats_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ReadAllGlobalStats_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ReadGlobalStatsSubsetArgs : TBase
    {
      private List<string> _globalStats;
      private int _clientIndex;

      /// <summary>
      /// A list containing the statistics to read
      /// </summary>
      public List<string> GlobalStats
      {
        get
        {
          return _globalStats;
        }
        set
        {
          __isset.globalStats = true;
          this._globalStats = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool globalStats;
        public bool clientIndex;
      }

      public GlobalStatistics_ReadGlobalStatsSubsetArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    GlobalStats = new List<string>();
                    TList _list28 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i29 = 0; _i29 < _list28.Count; ++_i29)
                    {
                      string _elem30;
                      _elem30 = await iprot.ReadStringAsync(cancellationToken);
                      GlobalStats.Add(_elem30);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ReadGlobalStatsSubset_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GlobalStats != null && __isset.globalStats)
          {
            field.Name = "globalStats";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, GlobalStats.Count), cancellationToken);
              foreach (string _iter31 in GlobalStats)
              {
                await oprot.WriteStringAsync(_iter31, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsSubset_args(");
        bool __first = true;
        if (GlobalStats != null && __isset.globalStats)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GlobalStats: ");
          sb.Append(GlobalStats);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ReadGlobalStatsSubsetResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalStatistics_ReadGlobalStatsSubsetResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ReadGlobalStatsSubset_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsSubset_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ReadGlobalStatsForCategoryArgs : TBase
    {
      private string _category;
      private int _clientIndex;

      /// <summary>
      /// The global statistics category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool category;
        public bool clientIndex;
      }

      public GlobalStatistics_ReadGlobalStatsForCategoryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ReadGlobalStatsForCategory_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsForCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ReadGlobalStatsForCategoryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalStatistics_ReadGlobalStatsForCategoryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ReadGlobalStatsForCategory_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ReadGlobalStatsForCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_IncrementGlobalStatsArgs : TBase
    {
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The JSON encoded data to be sent to the server as follows:
      /// {
      ///   stat1: 10,
      ///   stat2: -5.5,
      /// }
      /// would increment stat1 by 10 and decrement stat2 by 5.5.
      /// For the full statistics grammer see the api.braincloudservers.com site.
      /// There are many more complex operations supported such as:
      /// {
      ///   stat1:INC_TO_LIMIT#9#30
      /// }
      /// which increments stat1 by 9 up to a limit of 30.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonData;
        public bool clientIndex;
      }

      public GlobalStatistics_IncrementGlobalStatsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_IncrementGlobalStats_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_IncrementGlobalStats_args(");
        bool __first = true;
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_IncrementGlobalStatsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalStatistics_IncrementGlobalStatsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_IncrementGlobalStats_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_IncrementGlobalStats_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ProcessStatisticsArgs : TBase
    {
      private Dictionary<string, string> _statisticsData;
      private int _clientIndex;

      /// <summary>
      /// Example data to be passed to method:
      /// {
      ///     "DEAD_CATS": "RESET",
      ///     "LIVES_LEFT": "SET#9",
      ///     "MICE_KILLED": "INC#2",
      ///     "DOG_SCARE_BONUS_POINTS": "INC#10",
      ///     "TREES_CLIMBED": 1
      /// }
      /// </summary>
      public Dictionary<string, string> StatisticsData
      {
        get
        {
          return _statisticsData;
        }
        set
        {
          __isset.statisticsData = true;
          this._statisticsData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool statisticsData;
        public bool clientIndex;
      }

      public GlobalStatistics_ProcessStatisticsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    StatisticsData = new Dictionary<string, string>();
                    TMap _map32 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i33 = 0; _i33 < _map32.Count; ++_i33)
                    {
                      string _key34;
                      string _val35;
                      _key34 = await iprot.ReadStringAsync(cancellationToken);
                      _val35 = await iprot.ReadStringAsync(cancellationToken);
                      StatisticsData[_key34] = _val35;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ProcessStatistics_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (StatisticsData != null && __isset.statisticsData)
          {
            field.Name = "statisticsData";
            field.Type = TType.Map;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, StatisticsData.Count), cancellationToken);
              foreach (string _iter36 in StatisticsData.Keys)
              {
                await oprot.WriteStringAsync(_iter36, cancellationToken);
                await oprot.WriteStringAsync(StatisticsData[_iter36], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ProcessStatistics_args(");
        bool __first = true;
        if (StatisticsData != null && __isset.statisticsData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StatisticsData: ");
          sb.Append(StatisticsData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GlobalStatistics_ProcessStatisticsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public GlobalStatistics_ProcessStatisticsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GlobalStatistics_ProcessStatistics_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GlobalStatistics_ProcessStatistics_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_AcceptGroupInvitationArgs : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_AcceptGroupInvitationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_AcceptGroupInvitation_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_AcceptGroupInvitation_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_AcceptGroupInvitationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_AcceptGroupInvitationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_AcceptGroupInvitation_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_AcceptGroupInvitation_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_AddGroupMemberArgs : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being added.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being added.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being added.
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_AddGroupMemberArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_AddGroupMember_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.role)
          {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Role, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonAttributes != null && __isset.jsonAttributes)
          {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_AddGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.role)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Role: ");
          sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonAttributes: ");
          sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_AddGroupMemberResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_AddGroupMemberResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_AddGroupMember_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_AddGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ApproveGroupJoinRequestArgs : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the invitation being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being invited.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being invited.
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_ApproveGroupJoinRequestArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ApproveGroupJoinRequest_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.role)
          {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Role, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonAttributes != null && __isset.jsonAttributes)
          {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ApproveGroupJoinRequest_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.role)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Role: ");
          sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonAttributes: ");
          sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ApproveGroupJoinRequestResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ApproveGroupJoinRequestResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ApproveGroupJoinRequest_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ApproveGroupJoinRequest_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_AutoJoinGroupArgs : TBase
    {
      private string _groupType;
      private Ruyi.SDK.BrainCloudApi.AutoJoinStrategy _autoJoinStrategy;
      private string _dataQueryJson;
      private int _clientIndex;

      /// <summary>
      /// Name of the associated group type.
      /// </summary>
      public string GroupType
      {
        get
        {
          return _groupType;
        }
        set
        {
          __isset.groupType = true;
          this._groupType = value;
        }
      }

      /// <summary>
      /// Selection strategy to employ when there are multiple matches
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.AutoJoinStrategy"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.AutoJoinStrategy AutoJoinStrategy
      {
        get
        {
          return _autoJoinStrategy;
        }
        set
        {
          __isset.autoJoinStrategy = true;
          this._autoJoinStrategy = value;
        }
      }

      /// <summary>
      /// Query parameters (optional)
      /// </summary>
      public string DataQueryJson
      {
        get
        {
          return _dataQueryJson;
        }
        set
        {
          __isset.dataQueryJson = true;
          this._dataQueryJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupType;
        public bool autoJoinStrategy;
        public bool dataQueryJson;
        public bool clientIndex;
      }

      public Group_AutoJoinGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  AutoJoinStrategy = (Ruyi.SDK.BrainCloudApi.AutoJoinStrategy)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  DataQueryJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_AutoJoinGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupType != null && __isset.groupType)
          {
            field.Name = "groupType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.autoJoinStrategy)
          {
            field.Name = "autoJoinStrategy";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)AutoJoinStrategy, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (DataQueryJson != null && __isset.dataQueryJson)
          {
            field.Name = "dataQueryJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(DataQueryJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_AutoJoinGroup_args(");
        bool __first = true;
        if (GroupType != null && __isset.groupType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupType: ");
          sb.Append(GroupType);
        }
        if (__isset.autoJoinStrategy)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AutoJoinStrategy: ");
          sb.Append(AutoJoinStrategy);
        }
        if (DataQueryJson != null && __isset.dataQueryJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("DataQueryJson: ");
          sb.Append(DataQueryJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_AutoJoinGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_AutoJoinGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_AutoJoinGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_AutoJoinGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_CancelGroupInvitationArgs : TBase
    {
      private string _groupId;
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the invitation being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool profileId;
        public bool clientIndex;
      }

      public Group_CancelGroupInvitationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_CancelGroupInvitation_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_CancelGroupInvitation_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_CancelGroupInvitationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_CancelGroupInvitationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_CancelGroupInvitation_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_CancelGroupInvitation_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_CreateGroupArgs : TBase
    {
      private string _name;
      private string _groupType;
      private bool _isOpenGroup;
      private string _acl;
      private string _jsonData;
      private string _jsonOwnerAttributes;
      private string _jsonDefaultMemberAttributes;
      private int _clientIndex;

      /// <summary>
      /// Name of the group.
      /// </summary>
      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      /// <summary>
      /// Name of the type of group.
      /// </summary>
      public string GroupType
      {
        get
        {
          return _groupType;
        }
        set
        {
          __isset.groupType = true;
          this._groupType = value;
        }
      }

      /// <summary>
      /// true if group is open; false if closed.
      /// </summary>
      public bool IsOpenGroup
      {
        get
        {
          return _isOpenGroup;
        }
        set
        {
          __isset.isOpenGroup = true;
          this._isOpenGroup = value;
        }
      }

      /// <summary>
      /// The group's access control list. A null ACL implies default.
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      /// <summary>
      /// Custom application data.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// Attributes for the group owner (current user).
      /// </summary>
      public string JsonOwnerAttributes
      {
        get
        {
          return _jsonOwnerAttributes;
        }
        set
        {
          __isset.jsonOwnerAttributes = true;
          this._jsonOwnerAttributes = value;
        }
      }

      /// <summary>
      /// Default attributes for group members.
      /// </summary>
      public string JsonDefaultMemberAttributes
      {
        get
        {
          return _jsonDefaultMemberAttributes;
        }
        set
        {
          __isset.jsonDefaultMemberAttributes = true;
          this._jsonDefaultMemberAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool name;
        public bool groupType;
        public bool isOpenGroup;
        public bool acl;
        public bool jsonData;
        public bool jsonOwnerAttributes;
        public bool jsonDefaultMemberAttributes;
        public bool clientIndex;
      }

      public Group_CreateGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Name = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  GroupType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  IsOpenGroup = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  Acl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.String)
                {
                  JsonOwnerAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.String)
                {
                  JsonDefaultMemberAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 8:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_CreateGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Name != null && __isset.name)
          {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Name, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (GroupType != null && __isset.groupType)
          {
            field.Name = "groupType";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.isOpenGroup)
          {
            field.Name = "isOpenGroup";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IsOpenGroup, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Acl != null && __isset.acl)
          {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Acl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonOwnerAttributes != null && __isset.jsonOwnerAttributes)
          {
            field.Name = "jsonOwnerAttributes";
            field.Type = TType.String;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonOwnerAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonDefaultMemberAttributes != null && __isset.jsonDefaultMemberAttributes)
          {
            field.Name = "jsonDefaultMemberAttributes";
            field.Type = TType.String;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonDefaultMemberAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 8;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_CreateGroup_args(");
        bool __first = true;
        if (Name != null && __isset.name)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Name: ");
          sb.Append(Name);
        }
        if (GroupType != null && __isset.groupType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupType: ");
          sb.Append(GroupType);
        }
        if (__isset.isOpenGroup)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IsOpenGroup: ");
          sb.Append(IsOpenGroup);
        }
        if (Acl != null && __isset.acl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Acl: ");
          sb.Append(Acl);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (JsonOwnerAttributes != null && __isset.jsonOwnerAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonOwnerAttributes: ");
          sb.Append(JsonOwnerAttributes);
        }
        if (JsonDefaultMemberAttributes != null && __isset.jsonDefaultMemberAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonDefaultMemberAttributes: ");
          sb.Append(JsonDefaultMemberAttributes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_CreateGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_CreateGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_CreateGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_CreateGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_CreateGroupEntityArgs : TBase
    {
      private string _groupId;
      private string _entityType;
      private bool _isOwnedByGroupMember;
      private string _acl;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string EntityType
      {
        get
        {
          return _entityType;
        }
        set
        {
          __isset.entityType = true;
          this._entityType = value;
        }
      }

      /// <summary>
      /// true if entity is owned by a member; false if owned by the entire group.
      /// </summary>
      public bool IsOwnedByGroupMember
      {
        get
        {
          return _isOwnedByGroupMember;
        }
        set
        {
          __isset.isOwnedByGroupMember = true;
          this._isOwnedByGroupMember = value;
        }
      }

      /// <summary>
      /// Access control list for the group entity.
      /// </summary>
      public string Acl
      {
        get
        {
          return _acl;
        }
        set
        {
          __isset.acl = true;
          this._acl = value;
        }
      }

      /// <summary>
      /// Custom application data.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool entityType;
        public bool isOwnedByGroupMember;
        public bool acl;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_CreateGroupEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EntityType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  IsOwnedByGroupMember = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  Acl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_CreateGroupEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityType != null && __isset.entityType)
          {
            field.Name = "entityType";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.isOwnedByGroupMember)
          {
            field.Name = "isOwnedByGroupMember";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IsOwnedByGroupMember, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Acl != null && __isset.acl)
          {
            field.Name = "acl";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Acl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_CreateGroupEntity_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (EntityType != null && __isset.entityType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityType: ");
          sb.Append(EntityType);
        }
        if (__isset.isOwnedByGroupMember)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IsOwnedByGroupMember: ");
          sb.Append(IsOwnedByGroupMember);
        }
        if (Acl != null && __isset.acl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Acl: ");
          sb.Append(Acl);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_CreateGroupEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_CreateGroupEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_CreateGroupEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_CreateGroupEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_DeleteGroupArgs : TBase
    {
      private string _groupId;
      private long _version;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Current version of the group
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool version;
        public bool clientIndex;
      }

      public Group_DeleteGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_DeleteGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_DeleteGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_DeleteGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_DeleteGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_DeleteGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_DeleteGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_DeleteGroupEntityArgs : TBase
    {
      private string _groupId;
      private string _entityId;
      private long _version;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The current version of the group entity (for concurrency checking).
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool entityId;
        public bool version;
        public bool clientIndex;
      }

      public Group_DeleteGroupEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_DeleteGroupEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_DeleteGroupEntity_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_DeleteGroupEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_DeleteGroupEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_DeleteGroupEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_DeleteGroupEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_GetMyGroupsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Group_GetMyGroupsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_GetMyGroups_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_GetMyGroups_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_GetMyGroupsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_GetMyGroupsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_GetMyGroups_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_GetMyGroups_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_IncrementGroupDataArgs : TBase
    {
      private string _groupId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Partial data map with incremental values.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_IncrementGroupDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_IncrementGroupData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_IncrementGroupData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_IncrementGroupDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_IncrementGroupDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_IncrementGroupData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_IncrementGroupData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_IncrementGroupEntityDataArgs : TBase
    {
      private string _groupId;
      private string _entityId;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// Partial data map with incremental values.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool entityId;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_IncrementGroupEntityDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_IncrementGroupEntityData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_IncrementGroupEntityData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_IncrementGroupEntityDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_IncrementGroupEntityDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_IncrementGroupEntityData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_IncrementGroupEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_InviteGroupMemberArgs : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being invited.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being invited.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being invited.
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_InviteGroupMemberArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_InviteGroupMember_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.role)
          {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Role, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonAttributes != null && __isset.jsonAttributes)
          {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_InviteGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.role)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Role: ");
          sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonAttributes: ");
          sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_InviteGroupMemberResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_InviteGroupMemberResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_InviteGroupMember_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_InviteGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_JoinGroupArgs : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_JoinGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_JoinGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_JoinGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_JoinGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_JoinGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_JoinGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_JoinGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_LeaveGroupArgs : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_LeaveGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_LeaveGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_LeaveGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_LeaveGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_LeaveGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_LeaveGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_LeaveGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ListGroupsPageArgs : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// Query context.
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonContext;
        public bool clientIndex;
      }

      public Group_ListGroupsPageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonContext = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ListGroupsPage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonContext != null && __isset.jsonContext)
          {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonContext, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ListGroupsPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonContext: ");
          sb.Append(JsonContext);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ListGroupsPageResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ListGroupsPageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ListGroupsPage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ListGroupsPage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ListGroupsPageByOffsetArgs : TBase
    {
      private string _context;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// Encoded reference query context.
      /// </summary>
      public string Context
      {
        get
        {
          return _context;
        }
        set
        {
          __isset.context = true;
          this._context = value;
        }
      }

      /// <summary>
      /// Number of pages by which to offset the query.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool context;
        public bool pageOffset;
        public bool clientIndex;
      }

      public Group_ListGroupsPageByOffsetArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Context = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  PageOffset = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ListGroupsPageByOffset_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Context != null && __isset.context)
          {
            field.Name = "context";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Context, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.pageOffset)
          {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(PageOffset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ListGroupsPageByOffset_args(");
        bool __first = true;
        if (Context != null && __isset.context)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Context: ");
          sb.Append(Context);
        }
        if (__isset.pageOffset)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PageOffset: ");
          sb.Append(PageOffset);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ListGroupsPageByOffsetResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ListGroupsPageByOffsetResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ListGroupsPageByOffset_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ListGroupsPageByOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ListGroupsWithMemberArgs : TBase
    {
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// User to read groups for
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool clientIndex;
      }

      public Group_ListGroupsWithMemberArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ListGroupsWithMember_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ListGroupsWithMember_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ListGroupsWithMemberResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ListGroupsWithMemberResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ListGroupsWithMember_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ListGroupsWithMember_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupArgs : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_ReadGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ReadGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupDataArgs : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_ReadGroupDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ReadGroupDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupEntitiesPageArgs : TBase
    {
      private string _jsonContext;
      private int _clientIndex;

      /// <summary>
      /// Query context.
      /// </summary>
      public string JsonContext
      {
        get
        {
          return _jsonContext;
        }
        set
        {
          __isset.jsonContext = true;
          this._jsonContext = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonContext;
        public bool clientIndex;
      }

      public Group_ReadGroupEntitiesPageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonContext = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupEntitiesPage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonContext != null && __isset.jsonContext)
          {
            field.Name = "jsonContext";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonContext, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupEntitiesPage_args(");
        bool __first = true;
        if (JsonContext != null && __isset.jsonContext)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonContext: ");
          sb.Append(JsonContext);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupEntitiesPageResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ReadGroupEntitiesPageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupEntitiesPage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupEntitiesPage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupEntitiesPageByOffsetArgs : TBase
    {
      private string _encodedContext;
      private int _pageOffset;
      private int _clientIndex;

      /// <summary>
      /// Encoded reference query context.
      /// </summary>
      public string EncodedContext
      {
        get
        {
          return _encodedContext;
        }
        set
        {
          __isset.encodedContext = true;
          this._encodedContext = value;
        }
      }

      /// <summary>
      /// Number of pages by which to offset the query.
      /// </summary>
      public int PageOffset
      {
        get
        {
          return _pageOffset;
        }
        set
        {
          __isset.pageOffset = true;
          this._pageOffset = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool encodedContext;
        public bool pageOffset;
        public bool clientIndex;
      }

      public Group_ReadGroupEntitiesPageByOffsetArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EncodedContext = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  PageOffset = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupEntitiesPageByOffset_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EncodedContext != null && __isset.encodedContext)
          {
            field.Name = "encodedContext";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EncodedContext, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.pageOffset)
          {
            field.Name = "pageOffset";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(PageOffset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupEntitiesPageByOffset_args(");
        bool __first = true;
        if (EncodedContext != null && __isset.encodedContext)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EncodedContext: ");
          sb.Append(EncodedContext);
        }
        if (__isset.pageOffset)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PageOffset: ");
          sb.Append(PageOffset);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupEntitiesPageByOffsetResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ReadGroupEntitiesPageByOffsetResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupEntitiesPageByOffset_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupEntitiesPageByOffset_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupEntityArgs : TBase
    {
      private string _groupId;
      private string _entityId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool entityId;
        public bool clientIndex;
      }

      public Group_ReadGroupEntityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupEntity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupEntity_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupEntityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ReadGroupEntityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupEntity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupEntity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupMembersArgs : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_ReadGroupMembersArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupMembers_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupMembers_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_ReadGroupMembersResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_ReadGroupMembersResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_ReadGroupMembers_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_ReadGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_RejectGroupInvitationArgs : TBase
    {
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool clientIndex;
      }

      public Group_RejectGroupInvitationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_RejectGroupInvitation_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_RejectGroupInvitation_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_RejectGroupInvitationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_RejectGroupInvitationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_RejectGroupInvitation_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_RejectGroupInvitation_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_RejectGroupJoinRequestArgs : TBase
    {
      private string _groupId;
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the invitation being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool profileId;
        public bool clientIndex;
      }

      public Group_RejectGroupJoinRequestArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_RejectGroupJoinRequest_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_RejectGroupJoinRequest_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_RejectGroupJoinRequestResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_RejectGroupJoinRequestResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_RejectGroupJoinRequest_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_RejectGroupJoinRequest_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_RemoveGroupMemberArgs : TBase
    {
      private string _groupId;
      private string _profileId;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being deleted.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool profileId;
        public bool clientIndex;
      }

      public Group_RemoveGroupMemberArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_RemoveGroupMember_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_RemoveGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_RemoveGroupMemberResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_RemoveGroupMemberResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_RemoveGroupMember_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_RemoveGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupDataArgs : TBase
    {
      private string _groupId;
      private long _version;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Version to verify.
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// Data to apply.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool version;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_UpdateGroupDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_UpdateGroupDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupEntityDataArgs : TBase
    {
      private string _groupId;
      private string _entityId;
      private long _version;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// ID of the entity.
      /// </summary>
      public string EntityId
      {
        get
        {
          return _entityId;
        }
        set
        {
          __isset.entityId = true;
          this._entityId = value;
        }
      }

      /// <summary>
      /// The current version of the group entity (for concurrency checking).
      /// </summary>
      public long Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          this._version = value;
        }
      }

      /// <summary>
      /// Custom application data.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool entityId;
        public bool version;
        public bool jsonData;
        public bool clientIndex;
      }

      public Group_UpdateGroupEntityDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EntityId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  Version = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupEntityData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EntityId != null && __isset.entityId)
          {
            field.Name = "entityId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EntityId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.version)
          {
            field.Name = "version";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupEntityData_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (EntityId != null && __isset.entityId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EntityId: ");
          sb.Append(EntityId);
        }
        if (__isset.version)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Version: ");
          sb.Append(Version);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupEntityDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_UpdateGroupEntityDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupEntityData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupEntityData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupMemberArgs : TBase
    {
      private string _groupId;
      private string _profileId;
      private Ruyi.SDK.BrainCloudApi.Role _role;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Profile ID of the member being updated.
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Role of the member being updated (optional).
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.Role"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }

      /// <summary>
      /// Attributes of the member being updated (optional).
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool profileId;
        public bool role;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public Group_UpdateGroupMemberArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Role = (Ruyi.SDK.BrainCloudApi.Role)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupMember_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.role)
          {
            field.Name = "role";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Role, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonAttributes != null && __isset.jsonAttributes)
          {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupMember_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.role)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Role: ");
          sb.Append(Role);
        }
        if (JsonAttributes != null && __isset.jsonAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonAttributes: ");
          sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupMemberResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_UpdateGroupMemberResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupMember_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupMember_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupNameArgs : TBase
    {
      private string _groupId;
      private string _name;
      private int _clientIndex;

      /// <summary>
      /// ID of the group.
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Name to apply.
      /// </summary>
      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool name;
        public bool clientIndex;
      }

      public Group_UpdateGroupNameArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Name = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupName_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Name != null && __isset.name)
          {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Name, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupName_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (Name != null && __isset.name)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Name: ");
          sb.Append(Name);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Group_UpdateGroupNameResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Group_UpdateGroupNameResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Group_UpdateGroupName_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Group_UpdateGroupName_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachEmailIdentityArgs : TBase
    {
      private string _email;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's e-mail address
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool email;
        public bool password;
        public bool clientIndex;
      }

      public Identity_AttachEmailIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Email = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachEmailIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Email != null && __isset.email)
          {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Email, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Password != null && __isset.password)
          {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachEmailIdentity_args(");
        bool __first = true;
        if (Email != null && __isset.email)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Email: ");
          sb.Append(Email);
        }
        if (Password != null && __isset.password)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Password: ");
          sb.Append(Password);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachEmailIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_AttachEmailIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachEmailIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_MergeEmailIdentityArgs : TBase
    {
      private string _email;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's e-mail address
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool email;
        public bool password;
        public bool clientIndex;
      }

      public Identity_MergeEmailIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Email = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_MergeEmailIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Email != null && __isset.email)
          {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Email, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Password != null && __isset.password)
          {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_MergeEmailIdentity_args(");
        bool __first = true;
        if (Email != null && __isset.email)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Email: ");
          sb.Append(Email);
        }
        if (Password != null && __isset.password)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Password: ");
          sb.Append(Password);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_MergeEmailIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_MergeEmailIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_MergeEmailIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_MergeEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachEmailIdentityArgs : TBase
    {
      private string _email;
      private bool _continueAnon;
      private int _clientIndex;

      /// <summary>
      /// The user's e-mail address
      /// </summary>
      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      /// <summary>
      /// Proceed even if the profile will revert to anonymous?
      /// </summary>
      public bool ContinueAnon
      {
        get
        {
          return _continueAnon;
        }
        set
        {
          __isset.continueAnon = true;
          this._continueAnon = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool email;
        public bool continueAnon;
        public bool clientIndex;
      }

      public Identity_DetachEmailIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Email = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  ContinueAnon = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachEmailIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Email != null && __isset.email)
          {
            field.Name = "email";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Email, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.continueAnon)
          {
            field.Name = "continueAnon";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ContinueAnon, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachEmailIdentity_args(");
        bool __first = true;
        if (Email != null && __isset.email)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Email: ");
          sb.Append(Email);
        }
        if (__isset.continueAnon)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ContinueAnon: ");
          sb.Append(ContinueAnon);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachEmailIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_DetachEmailIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachEmailIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachUniversalIdentityArgs : TBase
    {
      private string _userId;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's userId
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool password;
        public bool clientIndex;
      }

      public Identity_AttachUniversalIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachUniversalIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Password != null && __isset.password)
          {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachUniversalIdentity_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (Password != null && __isset.password)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Password: ");
          sb.Append(Password);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachUniversalIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_AttachUniversalIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachUniversalIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachUniversalIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_MergeUniversalIdentityArgs : TBase
    {
      private string _userId;
      private string _password;
      private int _clientIndex;

      /// <summary>
      /// The user's userId
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// The user's password
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool password;
        public bool clientIndex;
      }

      public Identity_MergeUniversalIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_MergeUniversalIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Password != null && __isset.password)
          {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_MergeUniversalIdentity_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (Password != null && __isset.password)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Password: ");
          sb.Append(Password);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_MergeUniversalIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_MergeUniversalIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_MergeUniversalIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_MergeUniversalIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachUniversalIdentityArgs : TBase
    {
      private string _userId;
      private bool _continueAnon;
      private int _clientIndex;

      /// <summary>
      /// The user's userId
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// Proceed even if the profile will revert to anonymous?
      /// </summary>
      public bool ContinueAnon
      {
        get
        {
          return _continueAnon;
        }
        set
        {
          __isset.continueAnon = true;
          this._continueAnon = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool continueAnon;
        public bool clientIndex;
      }

      public Identity_DetachUniversalIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  ContinueAnon = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachUniversalIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.continueAnon)
          {
            field.Name = "continueAnon";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ContinueAnon, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachUniversalIdentity_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (__isset.continueAnon)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ContinueAnon: ");
          sb.Append(ContinueAnon);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachUniversalIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_DetachUniversalIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachUniversalIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachUniversalIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_SwitchToChildProfileArgs : TBase
    {
      private string _childProfileId;
      private string _childAppId;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the child profile to switch to
      /// If null and forceCreate is true a new profile will be created
      /// </summary>
      public string ChildProfileId
      {
        get
        {
          return _childProfileId;
        }
        set
        {
          __isset.childProfileId = true;
          this._childProfileId = value;
        }
      }

      /// <summary>
      /// The appId of the child game to switch to
      /// </summary>
      public string ChildAppId
      {
        get
        {
          return _childAppId;
        }
        set
        {
          __isset.childAppId = true;
          this._childAppId = value;
        }
      }

      /// <summary>
      /// Should a new profile be created if it does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool childProfileId;
        public bool childAppId;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_SwitchToChildProfileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ChildProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ChildAppId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_SwitchToChildProfile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ChildProfileId != null && __isset.childProfileId)
          {
            field.Name = "childProfileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ChildProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ChildAppId != null && __isset.childAppId)
          {
            field.Name = "childAppId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ChildAppId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_SwitchToChildProfile_args(");
        bool __first = true;
        if (ChildProfileId != null && __isset.childProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ChildProfileId: ");
          sb.Append(ChildProfileId);
        }
        if (ChildAppId != null && __isset.childAppId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ChildAppId: ");
          sb.Append(ChildAppId);
        }
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_SwitchToChildProfileResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_SwitchToChildProfileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_SwitchToChildProfile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_SwitchToChildProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_SwitchToSingletonChildProfileArgs : TBase
    {
      private string _childAppId;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// The App ID of the child game to switch to
      /// </summary>
      public string ChildAppId
      {
        get
        {
          return _childAppId;
        }
        set
        {
          __isset.childAppId = true;
          this._childAppId = value;
        }
      }

      /// <summary>
      /// Should a new profile be created if one does not exist?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool childAppId;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_SwitchToSingletonChildProfileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ChildAppId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_SwitchToSingletonChildProfile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ChildAppId != null && __isset.childAppId)
          {
            field.Name = "childAppId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ChildAppId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_SwitchToSingletonChildProfile_args(");
        bool __first = true;
        if (ChildAppId != null && __isset.childAppId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ChildAppId: ");
          sb.Append(ChildAppId);
        }
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_SwitchToSingletonChildProfileResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_SwitchToSingletonChildProfileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_SwitchToSingletonChildProfile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_SwitchToSingletonChildProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachParentWithIdentityArgs : TBase
    {
      private string _externalId;
      private string _authenticationToken;
      private string _authenticationType;
      private string _externalAuthName;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// User ID
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// Password or client side token
      /// </summary>
      public string AuthenticationToken
      {
        get
        {
          return _authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this._authenticationToken = value;
        }
      }

      /// <summary>
      /// Type of authentication
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      /// <summary>
      /// Optional - if using AuthenticationType of external
      /// </summary>
      public string ExternalAuthName
      {
        get
        {
          return _externalAuthName;
        }
        set
        {
          __isset.externalAuthName = true;
          this._externalAuthName = value;
        }
      }

      /// <summary>
      /// If the profile does not exist, should it be created?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool externalId;
        public bool authenticationToken;
        public bool authenticationType;
        public bool externalAuthName;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_AttachParentWithIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ExternalId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  AuthenticationType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  ExternalAuthName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachParentWithIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ExternalId != null && __isset.externalId)
          {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationToken != null && __isset.authenticationToken)
          {
            field.Name = "authenticationToken";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationType != null && __isset.authenticationType)
          {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ExternalAuthName != null && __isset.externalAuthName)
          {
            field.Name = "externalAuthName";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalAuthName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachParentWithIdentity_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalId: ");
          sb.Append(ExternalId);
        }
        if (AuthenticationToken != null && __isset.authenticationToken)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationToken: ");
          sb.Append(AuthenticationToken);
        }
        if (AuthenticationType != null && __isset.authenticationType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationType: ");
          sb.Append(AuthenticationType);
        }
        if (ExternalAuthName != null && __isset.externalAuthName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalAuthName: ");
          sb.Append(ExternalAuthName);
        }
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachParentWithIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_AttachParentWithIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachParentWithIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachParentWithIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_SwitchToParentProfileArgs : TBase
    {
      private string _parentLevelName;
      private int _clientIndex;

      /// <summary>
      /// The level of the parent to switch to
      /// </summary>
      public string ParentLevelName
      {
        get
        {
          return _parentLevelName;
        }
        set
        {
          __isset.parentLevelName = true;
          this._parentLevelName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool parentLevelName;
        public bool clientIndex;
      }

      public Identity_SwitchToParentProfileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ParentLevelName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_SwitchToParentProfile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ParentLevelName != null && __isset.parentLevelName)
          {
            field.Name = "parentLevelName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParentLevelName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_SwitchToParentProfile_args(");
        bool __first = true;
        if (ParentLevelName != null && __isset.parentLevelName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParentLevelName: ");
          sb.Append(ParentLevelName);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_SwitchToParentProfileResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_SwitchToParentProfileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_SwitchToParentProfile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_SwitchToParentProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachParentArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Identity_DetachParentArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachParent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachParent_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachParentResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_DetachParentResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachParent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachParent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetChildProfilesArgs : TBase
    {
      private bool _includeSummaryData;
      private int _clientIndex;

      /// <summary>
      /// Whether to return the summary friend data along with this call
      /// </summary>
      public bool IncludeSummaryData
      {
        get
        {
          return _includeSummaryData;
        }
        set
        {
          __isset.includeSummaryData = true;
          this._includeSummaryData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool includeSummaryData;
        public bool clientIndex;
      }

      public Identity_GetChildProfilesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool)
                {
                  IncludeSummaryData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetChildProfiles_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.includeSummaryData)
          {
            field.Name = "includeSummaryData";
            field.Type = TType.Bool;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeSummaryData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetChildProfiles_args(");
        bool __first = true;
        if (__isset.includeSummaryData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeSummaryData: ");
          sb.Append(IncludeSummaryData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetChildProfilesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_GetChildProfilesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetChildProfiles_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetChildProfiles_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetIdentitiesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Identity_GetIdentitiesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetIdentities_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetIdentities_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetIdentitiesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_GetIdentitiesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetIdentities_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetIdentities_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetExpiredIdentitiesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Identity_GetExpiredIdentitiesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetExpiredIdentities_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetExpiredIdentities_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetExpiredIdentitiesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_GetExpiredIdentitiesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetExpiredIdentities_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetExpiredIdentities_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_RefreshIdentityArgs : TBase
    {
      private string _externalId;
      private string _authenticationToken;
      private string _authenticationType;
      private int _clientIndex;

      /// <summary>
      /// User ID
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// Password or client side token
      /// </summary>
      public string AuthenticationToken
      {
        get
        {
          return _authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this._authenticationToken = value;
        }
      }

      /// <summary>
      /// Type of authentication
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool externalId;
        public bool authenticationToken;
        public bool authenticationType;
        public bool clientIndex;
      }

      public Identity_RefreshIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ExternalId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  AuthenticationType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_RefreshIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ExternalId != null && __isset.externalId)
          {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationToken != null && __isset.authenticationToken)
          {
            field.Name = "authenticationToken";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationType != null && __isset.authenticationType)
          {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_RefreshIdentity_args(");
        bool __first = true;
        if (ExternalId != null && __isset.externalId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalId: ");
          sb.Append(ExternalId);
        }
        if (AuthenticationToken != null && __isset.authenticationToken)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationToken: ");
          sb.Append(AuthenticationToken);
        }
        if (AuthenticationType != null && __isset.authenticationType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationType: ");
          sb.Append(AuthenticationType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_RefreshIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_RefreshIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_RefreshIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_RefreshIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_ChangeEmailIdentityArgs : TBase
    {
      private string _oldEmailAddress;
      private string _password;
      private string _newEmailAddress;
      private bool _updateContactEmail;
      private int _clientIndex;

      /// <summary>
      /// Old email address
      /// </summary>
      public string OldEmailAddress
      {
        get
        {
          return _oldEmailAddress;
        }
        set
        {
          __isset.oldEmailAddress = true;
          this._oldEmailAddress = value;
        }
      }

      /// <summary>
      /// Password for identity
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      /// <summary>
      /// New email address
      /// </summary>
      public string NewEmailAddress
      {
        get
        {
          return _newEmailAddress;
        }
        set
        {
          __isset.newEmailAddress = true;
          this._newEmailAddress = value;
        }
      }

      /// <summary>
      /// Whether to update contact email in profile
      /// </summary>
      public bool UpdateContactEmail
      {
        get
        {
          return _updateContactEmail;
        }
        set
        {
          __isset.updateContactEmail = true;
          this._updateContactEmail = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool oldEmailAddress;
        public bool password;
        public bool newEmailAddress;
        public bool updateContactEmail;
        public bool clientIndex;
      }

      public Identity_ChangeEmailIdentityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OldEmailAddress = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  NewEmailAddress = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  UpdateContactEmail = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_ChangeEmailIdentity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OldEmailAddress != null && __isset.oldEmailAddress)
          {
            field.Name = "oldEmailAddress";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OldEmailAddress, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Password != null && __isset.password)
          {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (NewEmailAddress != null && __isset.newEmailAddress)
          {
            field.Name = "newEmailAddress";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(NewEmailAddress, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.updateContactEmail)
          {
            field.Name = "updateContactEmail";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(UpdateContactEmail, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_ChangeEmailIdentity_args(");
        bool __first = true;
        if (OldEmailAddress != null && __isset.oldEmailAddress)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OldEmailAddress: ");
          sb.Append(OldEmailAddress);
        }
        if (Password != null && __isset.password)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Password: ");
          sb.Append(Password);
        }
        if (NewEmailAddress != null && __isset.newEmailAddress)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NewEmailAddress: ");
          sb.Append(NewEmailAddress);
        }
        if (__isset.updateContactEmail)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UpdateContactEmail: ");
          sb.Append(UpdateContactEmail);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_ChangeEmailIdentityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_ChangeEmailIdentityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_ChangeEmailIdentity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_ChangeEmailIdentity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachPeerProfileArgs : TBase
    {
      private string _peer;
      private string _externalId;
      private string _authenticationToken;
      private string _authenticationType;
      private string _externalAuthName;
      private bool _forceCreate;
      private int _clientIndex;

      /// <summary>
      /// Name of the peer to connect to
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      /// <summary>
      /// User ID
      /// </summary>
      public string ExternalId
      {
        get
        {
          return _externalId;
        }
        set
        {
          __isset.externalId = true;
          this._externalId = value;
        }
      }

      /// <summary>
      /// Password or client side token
      /// </summary>
      public string AuthenticationToken
      {
        get
        {
          return _authenticationToken;
        }
        set
        {
          __isset.authenticationToken = true;
          this._authenticationToken = value;
        }
      }

      /// <summary>
      /// Type of authentication
      /// </summary>
      public string AuthenticationType
      {
        get
        {
          return _authenticationType;
        }
        set
        {
          __isset.authenticationType = true;
          this._authenticationType = value;
        }
      }

      /// <summary>
      /// Optional - if using AuthenticationType of external
      /// </summary>
      public string ExternalAuthName
      {
        get
        {
          return _externalAuthName;
        }
        set
        {
          __isset.externalAuthName = true;
          this._externalAuthName = value;
        }
      }

      /// <summary>
      /// If the profile does not exist, should it be created?
      /// </summary>
      public bool ForceCreate
      {
        get
        {
          return _forceCreate;
        }
        set
        {
          __isset.forceCreate = true;
          this._forceCreate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool peer;
        public bool externalId;
        public bool authenticationToken;
        public bool authenticationType;
        public bool externalAuthName;
        public bool forceCreate;
        public bool clientIndex;
      }

      public Identity_AttachPeerProfileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Peer = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ExternalId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  AuthenticationType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.String)
                {
                  ExternalAuthName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.Bool)
                {
                  ForceCreate = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachPeerProfile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Peer != null && __isset.peer)
          {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Peer, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ExternalId != null && __isset.externalId)
          {
            field.Name = "externalId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationToken != null && __isset.authenticationToken)
          {
            field.Name = "authenticationToken";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AuthenticationType != null && __isset.authenticationType)
          {
            field.Name = "authenticationType";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AuthenticationType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ExternalAuthName != null && __isset.externalAuthName)
          {
            field.Name = "externalAuthName";
            field.Type = TType.String;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ExternalAuthName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.forceCreate)
          {
            field.Name = "forceCreate";
            field.Type = TType.Bool;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ForceCreate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachPeerProfile_args(");
        bool __first = true;
        if (Peer != null && __isset.peer)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Peer: ");
          sb.Append(Peer);
        }
        if (ExternalId != null && __isset.externalId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalId: ");
          sb.Append(ExternalId);
        }
        if (AuthenticationToken != null && __isset.authenticationToken)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationToken: ");
          sb.Append(AuthenticationToken);
        }
        if (AuthenticationType != null && __isset.authenticationType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AuthenticationType: ");
          sb.Append(AuthenticationType);
        }
        if (ExternalAuthName != null && __isset.externalAuthName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExternalAuthName: ");
          sb.Append(ExternalAuthName);
        }
        if (__isset.forceCreate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ForceCreate: ");
          sb.Append(ForceCreate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_AttachPeerProfileResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_AttachPeerProfileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_AttachPeerProfile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_AttachPeerProfile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachPeerArgs : TBase
    {
      private string _peer;
      private int _clientIndex;

      /// <summary>
      /// Name of the peer to connect to
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool peer;
        public bool clientIndex;
      }

      public Identity_DetachPeerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Peer = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachPeer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Peer != null && __isset.peer)
          {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Peer, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachPeer_args(");
        bool __first = true;
        if (Peer != null && __isset.peer)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Peer: ");
          sb.Append(Peer);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_DetachPeerResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_DetachPeerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_DetachPeer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_DetachPeer_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetPeerProfilesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Identity_GetPeerProfilesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetPeerProfiles_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetPeerProfiles_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Identity_GetPeerProfilesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Identity_GetPeerProfilesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Identity_GetPeerProfiles_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Identity_GetPeerProfiles_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Mail_SendBasicEmailArgs : TBase
    {
      private string _profileId;
      private string _subject;
      private string _body;
      private int _clientIndex;

      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// The email subject
      /// </summary>
      public string Subject
      {
        get
        {
          return _subject;
        }
        set
        {
          __isset.subject = true;
          this._subject = value;
        }
      }

      /// <summary>
      /// The email body
      /// </summary>
      public string Body
      {
        get
        {
          return _body;
        }
        set
        {
          __isset.body = true;
          this._body = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool subject;
        public bool body;
        public bool clientIndex;
      }

      public Mail_SendBasicEmailArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Subject = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Body = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Mail_SendBasicEmail_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Subject != null && __isset.subject)
          {
            field.Name = "subject";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Subject, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Body != null && __isset.body)
          {
            field.Name = "body";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Body, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Mail_SendBasicEmail_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (Subject != null && __isset.subject)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Subject: ");
          sb.Append(Subject);
        }
        if (Body != null && __isset.body)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Body: ");
          sb.Append(Body);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Mail_SendBasicEmailResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Mail_SendBasicEmailResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Mail_SendBasicEmail_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Mail_SendBasicEmail_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Mail_SendAdvancedEmailArgs : TBase
    {
      private string _profileId;
      private string _jsonServiceParams;
      private int _clientIndex;

      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Parameters to send to the email service. See the documentation for
      /// a full list. http://getbraincloud.com/apidocs/apiref/#capi-mail
      /// </summary>
      public string JsonServiceParams
      {
        get
        {
          return _jsonServiceParams;
        }
        set
        {
          __isset.jsonServiceParams = true;
          this._jsonServiceParams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool jsonServiceParams;
        public bool clientIndex;
      }

      public Mail_SendAdvancedEmailArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonServiceParams = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Mail_SendAdvancedEmail_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonServiceParams != null && __isset.jsonServiceParams)
          {
            field.Name = "jsonServiceParams";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonServiceParams, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Mail_SendAdvancedEmail_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (JsonServiceParams != null && __isset.jsonServiceParams)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonServiceParams: ");
          sb.Append(JsonServiceParams);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Mail_SendAdvancedEmailResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Mail_SendAdvancedEmailResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Mail_SendAdvancedEmail_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Mail_SendAdvancedEmail_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Mail_SendAdvancedEmailByAddressArgs : TBase
    {
      private string _emailAddress;
      private string _jsonServiceParams;
      private int _clientIndex;

      /// <summary>
      /// The address to send the email to
      /// </summary>
      public string EmailAddress
      {
        get
        {
          return _emailAddress;
        }
        set
        {
          __isset.emailAddress = true;
          this._emailAddress = value;
        }
      }

      /// <summary>
      /// Parameters to send to the email service. See the documentation for
      /// a full list. http://getbraincloud.com/apidocs/apiref/#capi-mail
      /// </summary>
      public string JsonServiceParams
      {
        get
        {
          return _jsonServiceParams;
        }
        set
        {
          __isset.jsonServiceParams = true;
          this._jsonServiceParams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool emailAddress;
        public bool jsonServiceParams;
        public bool clientIndex;
      }

      public Mail_SendAdvancedEmailByAddressArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EmailAddress = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonServiceParams = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Mail_SendAdvancedEmailByAddress_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EmailAddress != null && __isset.emailAddress)
          {
            field.Name = "emailAddress";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EmailAddress, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonServiceParams != null && __isset.jsonServiceParams)
          {
            field.Name = "jsonServiceParams";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonServiceParams, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Mail_SendAdvancedEmailByAddress_args(");
        bool __first = true;
        if (EmailAddress != null && __isset.emailAddress)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EmailAddress: ");
          sb.Append(EmailAddress);
        }
        if (JsonServiceParams != null && __isset.jsonServiceParams)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonServiceParams: ");
          sb.Append(JsonServiceParams);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Mail_SendAdvancedEmailByAddressResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Mail_SendAdvancedEmailByAddressResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Mail_SendAdvancedEmailByAddress_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Mail_SendAdvancedEmailByAddress_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_ReadArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public MatchMaking_ReadArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_Read_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_Read_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_ReadResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_ReadResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_Read_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_Read_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_SetPlayerRatingArgs : TBase
    {
      private long _playerRating;
      private int _clientIndex;

      /// <summary>
      /// The new player rating.
      /// </summary>
      public long PlayerRating
      {
        get
        {
          return _playerRating;
        }
        set
        {
          __isset.playerRating = true;
          this._playerRating = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playerRating;
        public bool clientIndex;
      }

      public MatchMaking_SetPlayerRatingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  PlayerRating = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_SetPlayerRating_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.playerRating)
          {
            field.Name = "playerRating";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(PlayerRating, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_SetPlayerRating_args(");
        bool __first = true;
        if (__isset.playerRating)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerRating: ");
          sb.Append(PlayerRating);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_SetPlayerRatingResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_SetPlayerRatingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_SetPlayerRating_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_SetPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_ResetPlayerRatingArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public MatchMaking_ResetPlayerRatingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_ResetPlayerRating_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_ResetPlayerRating_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_ResetPlayerRatingResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_ResetPlayerRatingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_ResetPlayerRating_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_ResetPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_IncrementPlayerRatingArgs : TBase
    {
      private long _increment;
      private int _clientIndex;

      /// <summary>
      /// The increment amount
      /// </summary>
      public long Increment
      {
        get
        {
          return _increment;
        }
        set
        {
          __isset.increment = true;
          this._increment = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool increment;
        public bool clientIndex;
      }

      public MatchMaking_IncrementPlayerRatingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Increment = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_IncrementPlayerRating_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.increment)
          {
            field.Name = "increment";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Increment, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_IncrementPlayerRating_args(");
        bool __first = true;
        if (__isset.increment)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Increment: ");
          sb.Append(Increment);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_IncrementPlayerRatingResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_IncrementPlayerRatingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_IncrementPlayerRating_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_IncrementPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_DecrementPlayerRatingArgs : TBase
    {
      private long _decrement;
      private int _clientIndex;

      /// <summary>
      /// The decrement amount
      /// </summary>
      public long Decrement
      {
        get
        {
          return _decrement;
        }
        set
        {
          __isset.decrement = true;
          this._decrement = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool decrement;
        public bool clientIndex;
      }

      public MatchMaking_DecrementPlayerRatingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Decrement = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_DecrementPlayerRating_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.decrement)
          {
            field.Name = "decrement";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Decrement, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_DecrementPlayerRating_args(");
        bool __first = true;
        if (__isset.decrement)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Decrement: ");
          sb.Append(Decrement);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_DecrementPlayerRatingResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_DecrementPlayerRatingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_DecrementPlayerRating_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_DecrementPlayerRating_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_TurnShieldOnArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public MatchMaking_TurnShieldOnArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_TurnShieldOn_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_TurnShieldOn_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_TurnShieldOnResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_TurnShieldOnResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_TurnShieldOn_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_TurnShieldOn_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_TurnShieldOnForArgs : TBase
    {
      private int _minutes;
      private int _clientIndex;

      /// <summary>
      /// Number of minutes to turn the shield on for
      /// </summary>
      public int Minutes
      {
        get
        {
          return _minutes;
        }
        set
        {
          __isset.minutes = true;
          this._minutes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool minutes;
        public bool clientIndex;
      }

      public MatchMaking_TurnShieldOnForArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Minutes = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_TurnShieldOnFor_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.minutes)
          {
            field.Name = "minutes";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Minutes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_TurnShieldOnFor_args(");
        bool __first = true;
        if (__isset.minutes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Minutes: ");
          sb.Append(Minutes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_TurnShieldOnForResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_TurnShieldOnForResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_TurnShieldOnFor_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_TurnShieldOnFor_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_TurnShieldOffArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public MatchMaking_TurnShieldOffArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_TurnShieldOff_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_TurnShieldOff_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_TurnShieldOffResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_TurnShieldOffResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_TurnShieldOff_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_TurnShieldOff_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_IncrementShieldOnForArgs : TBase
    {
      private int _minutes;
      private int _clientIndex;

      /// <summary>
      /// Number of minutes to increase the shield time for
      /// </summary>
      public int Minutes
      {
        get
        {
          return _minutes;
        }
        set
        {
          __isset.minutes = true;
          this._minutes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool minutes;
        public bool clientIndex;
      }

      public MatchMaking_IncrementShieldOnForArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Minutes = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_IncrementShieldOnFor_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.minutes)
          {
            field.Name = "minutes";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Minutes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_IncrementShieldOnFor_args(");
        bool __first = true;
        if (__isset.minutes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Minutes: ");
          sb.Append(Minutes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_IncrementShieldOnForResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_IncrementShieldOnForResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_IncrementShieldOnFor_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_IncrementShieldOnFor_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_GetShieldExpiryArgs : TBase
    {
      private string _playerId;
      private int _clientIndex;

      /// <summary>
      /// The player id or use null to retrieve for the current player
      /// </summary>
      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playerId;
        public bool clientIndex;
      }

      public MatchMaking_GetShieldExpiryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_GetShieldExpiry_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlayerId != null && __isset.playerId)
          {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_GetShieldExpiry_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerId: ");
          sb.Append(PlayerId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_GetShieldExpiryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_GetShieldExpiryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_GetShieldExpiry_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_GetShieldExpiry_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersArgs : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rangeDelta;
        public bool numMatches;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayersArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RangeDelta = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  NumMatches = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayers_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rangeDelta)
          {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RangeDelta, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.numMatches)
          {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(NumMatches, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayers_args(");
        bool __first = true;
        if (__isset.rangeDelta)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RangeDelta: ");
          sb.Append(RangeDelta);
        }
        if (__isset.numMatches)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NumMatches: ");
          sb.Append(NumMatches);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_FindPlayersResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayers_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayers_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersWithAttributesArgs : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private string _jsonAttributes;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      /// <summary>
      /// Attributes match criteria
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rangeDelta;
        public bool numMatches;
        public bool jsonAttributes;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayersWithAttributesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RangeDelta = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  NumMatches = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayersWithAttributes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rangeDelta)
          {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RangeDelta, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.numMatches)
          {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(NumMatches, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonAttributes != null && __isset.jsonAttributes)
          {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayersWithAttributes_args(");
        bool __first = true;
        if (__isset.rangeDelta)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RangeDelta: ");
          sb.Append(RangeDelta);
        }
        if (__isset.numMatches)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NumMatches: ");
          sb.Append(NumMatches);
        }
        if (JsonAttributes != null && __isset.jsonAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonAttributes: ");
          sb.Append(JsonAttributes);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersWithAttributesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_FindPlayersWithAttributesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayersWithAttributes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayersWithAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersUsingFilterArgs : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private string _jsonExtraParms;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      /// <summary>
      /// Parameters to pass to the CloudCode filter script
      /// </summary>
      public string JsonExtraParms
      {
        get
        {
          return _jsonExtraParms;
        }
        set
        {
          __isset.jsonExtraParms = true;
          this._jsonExtraParms = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rangeDelta;
        public bool numMatches;
        public bool jsonExtraParms;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayersUsingFilterArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RangeDelta = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  NumMatches = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonExtraParms = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayersUsingFilter_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rangeDelta)
          {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RangeDelta, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.numMatches)
          {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(NumMatches, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonExtraParms != null && __isset.jsonExtraParms)
          {
            field.Name = "jsonExtraParms";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonExtraParms, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayersUsingFilter_args(");
        bool __first = true;
        if (__isset.rangeDelta)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RangeDelta: ");
          sb.Append(RangeDelta);
        }
        if (__isset.numMatches)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NumMatches: ");
          sb.Append(NumMatches);
        }
        if (JsonExtraParms != null && __isset.jsonExtraParms)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonExtraParms: ");
          sb.Append(JsonExtraParms);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersUsingFilterResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_FindPlayersUsingFilterResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayersUsingFilter_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayersUsingFilter_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersWithAttributesUsingFilterArgs : TBase
    {
      private long _rangeDelta;
      private long _numMatches;
      private string _jsonAttributes;
      private string _jsonExtraParms;
      private int _clientIndex;

      /// <summary>
      /// The range delta
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      /// <summary>
      /// The maximum number of matches to return
      /// </summary>
      public long NumMatches
      {
        get
        {
          return _numMatches;
        }
        set
        {
          __isset.numMatches = true;
          this._numMatches = value;
        }
      }

      /// <summary>
      /// Attributes match criteria
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      /// <summary>
      /// Parameters to pass to the CloudCode filter script
      /// </summary>
      public string JsonExtraParms
      {
        get
        {
          return _jsonExtraParms;
        }
        set
        {
          __isset.jsonExtraParms = true;
          this._jsonExtraParms = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rangeDelta;
        public bool numMatches;
        public bool jsonAttributes;
        public bool jsonExtraParms;
        public bool clientIndex;
      }

      public MatchMaking_FindPlayersWithAttributesUsingFilterArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RangeDelta = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  NumMatches = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  JsonExtraParms = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayersWithAttributesUsingFilter_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rangeDelta)
          {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RangeDelta, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.numMatches)
          {
            field.Name = "numMatches";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(NumMatches, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonAttributes != null && __isset.jsonAttributes)
          {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonExtraParms != null && __isset.jsonExtraParms)
          {
            field.Name = "jsonExtraParms";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonExtraParms, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayersWithAttributesUsingFilter_args(");
        bool __first = true;
        if (__isset.rangeDelta)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RangeDelta: ");
          sb.Append(RangeDelta);
        }
        if (__isset.numMatches)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NumMatches: ");
          sb.Append(NumMatches);
        }
        if (JsonAttributes != null && __isset.jsonAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonAttributes: ");
          sb.Append(JsonAttributes);
        }
        if (JsonExtraParms != null && __isset.jsonExtraParms)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonExtraParms: ");
          sb.Append(JsonExtraParms);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_FindPlayersWithAttributesUsingFilterResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_FindPlayersWithAttributesUsingFilterResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_FindPlayersWithAttributesUsingFilter_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_FindPlayersWithAttributesUsingFilter_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_EnableMatchMakingArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public MatchMaking_EnableMatchMakingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_EnableMatchMaking_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_EnableMatchMaking_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_EnableMatchMakingResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_EnableMatchMakingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_EnableMatchMaking_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_EnableMatchMaking_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_DisableMatchMakingArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public MatchMaking_DisableMatchMakingArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_DisableMatchMaking_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_DisableMatchMaking_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class MatchMaking_DisableMatchMakingResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public MatchMaking_DisableMatchMakingResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("MatchMaking_DisableMatchMaking_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("MatchMaking_DisableMatchMaking_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class OneWayMatch_StartMatchArgs : TBase
    {
      private string _otherPlayerId;
      private long _rangeDelta;
      private int _clientIndex;

      /// <summary>
      /// The player to start a match with
      /// </summary>
      public string OtherPlayerId
      {
        get
        {
          return _otherPlayerId;
        }
        set
        {
          __isset.otherPlayerId = true;
          this._otherPlayerId = value;
        }
      }

      /// <summary>
      /// The range delta used for the initial match search
      /// </summary>
      public long RangeDelta
      {
        get
        {
          return _rangeDelta;
        }
        set
        {
          __isset.rangeDelta = true;
          this._rangeDelta = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool otherPlayerId;
        public bool rangeDelta;
        public bool clientIndex;
      }

      public OneWayMatch_StartMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  OtherPlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  RangeDelta = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("OneWayMatch_StartMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (OtherPlayerId != null && __isset.otherPlayerId)
          {
            field.Name = "otherPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(OtherPlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.rangeDelta)
          {
            field.Name = "rangeDelta";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RangeDelta, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OneWayMatch_StartMatch_args(");
        bool __first = true;
        if (OtherPlayerId != null && __isset.otherPlayerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("OtherPlayerId: ");
          sb.Append(OtherPlayerId);
        }
        if (__isset.rangeDelta)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RangeDelta: ");
          sb.Append(RangeDelta);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class OneWayMatch_StartMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public OneWayMatch_StartMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("OneWayMatch_StartMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OneWayMatch_StartMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class OneWayMatch_CancelMatchArgs : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// The playback stream id returned in the start match
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public OneWayMatch_CancelMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlaybackStreamId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("OneWayMatch_CancelMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId)
          {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlaybackStreamId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OneWayMatch_CancelMatch_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlaybackStreamId: ");
          sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class OneWayMatch_CancelMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public OneWayMatch_CancelMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("OneWayMatch_CancelMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OneWayMatch_CancelMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class OneWayMatch_CompleteMatchArgs : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// The playback stream id returned in the initial start match
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public OneWayMatch_CompleteMatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlaybackStreamId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("OneWayMatch_CompleteMatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId)
          {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlaybackStreamId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OneWayMatch_CompleteMatch_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlaybackStreamId: ");
          sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class OneWayMatch_CompleteMatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public OneWayMatch_CompleteMatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("OneWayMatch_CompleteMatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OneWayMatch_CompleteMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_StartStreamArgs : TBase
    {
      private string _targetPlayerId;
      private bool _includeSharedData;
      private int _clientIndex;

      /// <summary>
      /// The player to start a stream with
      /// </summary>
      public string TargetPlayerId
      {
        get
        {
          return _targetPlayerId;
        }
        set
        {
          __isset.targetPlayerId = true;
          this._targetPlayerId = value;
        }
      }

      /// <summary>
      /// Whether to include shared data in the stream
      /// </summary>
      public bool IncludeSharedData
      {
        get
        {
          return _includeSharedData;
        }
        set
        {
          __isset.includeSharedData = true;
          this._includeSharedData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool targetPlayerId;
        public bool includeSharedData;
        public bool clientIndex;
      }

      public PlaybackStream_StartStreamArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  TargetPlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  IncludeSharedData = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_StartStream_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (TargetPlayerId != null && __isset.targetPlayerId)
          {
            field.Name = "targetPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TargetPlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.includeSharedData)
          {
            field.Name = "includeSharedData";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeSharedData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_StartStream_args(");
        bool __first = true;
        if (TargetPlayerId != null && __isset.targetPlayerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TargetPlayerId: ");
          sb.Append(TargetPlayerId);
        }
        if (__isset.includeSharedData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeSharedData: ");
          sb.Append(IncludeSharedData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_StartStreamResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlaybackStream_StartStreamResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_StartStream_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_StartStream_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_ReadStreamArgs : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public PlaybackStream_ReadStreamArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlaybackStreamId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_ReadStream_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId)
          {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlaybackStreamId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_ReadStream_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlaybackStreamId: ");
          sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_ReadStreamResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlaybackStream_ReadStreamResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_ReadStream_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_ReadStream_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_EndStreamArgs : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public PlaybackStream_EndStreamArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlaybackStreamId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_EndStream_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId)
          {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlaybackStreamId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_EndStream_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlaybackStreamId: ");
          sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_EndStreamResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlaybackStream_EndStreamResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_EndStream_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_EndStream_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_DeleteStreamArgs : TBase
    {
      private string _playbackStreamId;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playbackStreamId;
        public bool clientIndex;
      }

      public PlaybackStream_DeleteStreamArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlaybackStreamId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_DeleteStream_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId)
          {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlaybackStreamId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_DeleteStream_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlaybackStreamId: ");
          sb.Append(PlaybackStreamId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_DeleteStreamResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlaybackStream_DeleteStreamResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_DeleteStream_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_DeleteStream_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_AddEventArgs : TBase
    {
      private string _playbackStreamId;
      private string _eventData;
      private string _summary;
      private int _clientIndex;

      /// <summary>
      /// Identifies the stream to read
      /// </summary>
      public string PlaybackStreamId
      {
        get
        {
          return _playbackStreamId;
        }
        set
        {
          __isset.playbackStreamId = true;
          this._playbackStreamId = value;
        }
      }

      /// <summary>
      /// Describes the event
      /// </summary>
      public string EventData
      {
        get
        {
          return _eventData;
        }
        set
        {
          __isset.eventData = true;
          this._eventData = value;
        }
      }

      /// <summary>
      /// Current summary data as of this event
      /// </summary>
      public string Summary
      {
        get
        {
          return _summary;
        }
        set
        {
          __isset.summary = true;
          this._summary = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playbackStreamId;
        public bool eventData;
        public bool summary;
        public bool clientIndex;
      }

      public PlaybackStream_AddEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlaybackStreamId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  EventData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Summary = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_AddEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlaybackStreamId != null && __isset.playbackStreamId)
          {
            field.Name = "playbackStreamId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlaybackStreamId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EventData != null && __isset.eventData)
          {
            field.Name = "eventData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Summary != null && __isset.summary)
          {
            field.Name = "summary";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Summary, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_AddEvent_args(");
        bool __first = true;
        if (PlaybackStreamId != null && __isset.playbackStreamId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlaybackStreamId: ");
          sb.Append(PlaybackStreamId);
        }
        if (EventData != null && __isset.eventData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventData: ");
          sb.Append(EventData);
        }
        if (Summary != null && __isset.summary)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Summary: ");
          sb.Append(Summary);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_AddEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlaybackStream_AddEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_AddEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_AddEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_GetRecentStreamsForInitiatingPlayerArgs : TBase
    {
      private string _initiatingPlayerId;
      private int _maxNumStreams;
      private int _clientIndex;

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public string InitiatingPlayerId
      {
        get
        {
          return _initiatingPlayerId;
        }
        set
        {
          __isset.initiatingPlayerId = true;
          this._initiatingPlayerId = value;
        }
      }

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public int MaxNumStreams
      {
        get
        {
          return _maxNumStreams;
        }
        set
        {
          __isset.maxNumStreams = true;
          this._maxNumStreams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool initiatingPlayerId;
        public bool maxNumStreams;
        public bool clientIndex;
      }

      public PlaybackStream_GetRecentStreamsForInitiatingPlayerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  InitiatingPlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  MaxNumStreams = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_GetRecentStreamsForInitiatingPlayer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (InitiatingPlayerId != null && __isset.initiatingPlayerId)
          {
            field.Name = "initiatingPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(InitiatingPlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxNumStreams)
          {
            field.Name = "maxNumStreams";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxNumStreams, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_GetRecentStreamsForInitiatingPlayer_args(");
        bool __first = true;
        if (InitiatingPlayerId != null && __isset.initiatingPlayerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("InitiatingPlayerId: ");
          sb.Append(InitiatingPlayerId);
        }
        if (__isset.maxNumStreams)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxNumStreams: ");
          sb.Append(MaxNumStreams);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_GetRecentStreamsForInitiatingPlayerResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlaybackStream_GetRecentStreamsForInitiatingPlayerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_GetRecentStreamsForInitiatingPlayer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_GetRecentStreamsForInitiatingPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_GetRecentStreamsForTargetPlayerArgs : TBase
    {
      private string _targetPlayerId;
      private int _maxNumStreams;
      private int _clientIndex;

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public string TargetPlayerId
      {
        get
        {
          return _targetPlayerId;
        }
        set
        {
          __isset.targetPlayerId = true;
          this._targetPlayerId = value;
        }
      }

      /// <summary>
      /// The player that started the stream
      /// </summary>
      public int MaxNumStreams
      {
        get
        {
          return _maxNumStreams;
        }
        set
        {
          __isset.maxNumStreams = true;
          this._maxNumStreams = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool targetPlayerId;
        public bool maxNumStreams;
        public bool clientIndex;
      }

      public PlaybackStream_GetRecentStreamsForTargetPlayerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  TargetPlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  MaxNumStreams = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_GetRecentStreamsForTargetPlayer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (TargetPlayerId != null && __isset.targetPlayerId)
          {
            field.Name = "targetPlayerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TargetPlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.maxNumStreams)
          {
            field.Name = "maxNumStreams";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MaxNumStreams, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_GetRecentStreamsForTargetPlayer_args(");
        bool __first = true;
        if (TargetPlayerId != null && __isset.targetPlayerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TargetPlayerId: ");
          sb.Append(TargetPlayerId);
        }
        if (__isset.maxNumStreams)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MaxNumStreams: ");
          sb.Append(MaxNumStreams);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlaybackStream_GetRecentStreamsForTargetPlayerResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlaybackStream_GetRecentStreamsForTargetPlayerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlaybackStream_GetRecentStreamsForTargetPlayer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlaybackStream_GetRecentStreamsForTargetPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_ReadUserStateArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerState_ReadUserStateArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_ReadUserState_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_ReadUserState_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_ReadUserStateResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_ReadUserStateResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_ReadUserState_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_ReadUserState_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_DeleteUserArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerState_DeleteUserArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_DeleteUser_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_DeleteUser_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_DeleteUserResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_DeleteUserResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_DeleteUser_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_DeleteUser_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_ResetUserArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerState_ResetUserArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_ResetUser_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_ResetUser_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_ResetUserResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_ResetUserResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_ResetUser_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_ResetUser_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_LogoutArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerState_LogoutArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_Logout_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_Logout_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_LogoutResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_LogoutResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_Logout_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_Logout_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateUserNameArgs : TBase
    {
      private string _userName;
      private int _clientIndex;

      /// <summary>
      /// The name of the user
      /// </summary>
      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userName;
        public bool clientIndex;
      }

      public PlayerState_UpdateUserNameArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateUserName_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserName != null && __isset.userName)
          {
            field.Name = "userName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateUserName_args(");
        bool __first = true;
        if (UserName != null && __isset.userName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserName: ");
          sb.Append(UserName);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateUserNameResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_UpdateUserNameResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateUserName_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateUserName_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateSummaryFriendDataArgs : TBase
    {
      private string _jsonSummaryData;
      private int _clientIndex;

      /// <summary>
      /// A JSON string defining the summary data.
      /// For example:
      /// {
      ///   "xp":123,
      ///   "level":12,
      ///   "highScore":45123
      /// }
      /// </summary>
      public string JsonSummaryData
      {
        get
        {
          return _jsonSummaryData;
        }
        set
        {
          __isset.jsonSummaryData = true;
          this._jsonSummaryData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonSummaryData;
        public bool clientIndex;
      }

      public PlayerState_UpdateSummaryFriendDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonSummaryData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateSummaryFriendData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonSummaryData != null && __isset.jsonSummaryData)
          {
            field.Name = "jsonSummaryData";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonSummaryData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateSummaryFriendData_args(");
        bool __first = true;
        if (JsonSummaryData != null && __isset.jsonSummaryData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonSummaryData: ");
          sb.Append(JsonSummaryData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateSummaryFriendDataResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_UpdateSummaryFriendDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateSummaryFriendData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateSummaryFriendData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_GetAttributesArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerState_GetAttributesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_GetAttributes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_GetAttributes_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_GetAttributesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_GetAttributesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_GetAttributes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_GetAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateAttributesArgs : TBase
    {
      private string _jsonAttributes;
      private bool _wipeExisting;
      private int _clientIndex;

      /// <summary>
      /// Single layer json string that is a set of key-value pairs
      /// </summary>
      public string JsonAttributes
      {
        get
        {
          return _jsonAttributes;
        }
        set
        {
          __isset.jsonAttributes = true;
          this._jsonAttributes = value;
        }
      }

      /// <summary>
      /// Whether to wipe existing attributes prior to update.
      /// </summary>
      public bool WipeExisting
      {
        get
        {
          return _wipeExisting;
        }
        set
        {
          __isset.wipeExisting = true;
          this._wipeExisting = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonAttributes;
        public bool wipeExisting;
        public bool clientIndex;
      }

      public PlayerState_UpdateAttributesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonAttributes = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  WipeExisting = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateAttributes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonAttributes != null && __isset.jsonAttributes)
          {
            field.Name = "jsonAttributes";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonAttributes, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.wipeExisting)
          {
            field.Name = "wipeExisting";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(WipeExisting, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateAttributes_args(");
        bool __first = true;
        if (JsonAttributes != null && __isset.jsonAttributes)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonAttributes: ");
          sb.Append(JsonAttributes);
        }
        if (__isset.wipeExisting)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("WipeExisting: ");
          sb.Append(WipeExisting);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateAttributesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_UpdateAttributesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateAttributes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_RemoveAttributesArgs : TBase
    {
      private List<string> _attributeNames;
      private int _clientIndex;

      /// <summary>
      /// List of attribute names.
      /// </summary>
      public List<string> AttributeNames
      {
        get
        {
          return _attributeNames;
        }
        set
        {
          __isset.attributeNames = true;
          this._attributeNames = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool attributeNames;
        public bool clientIndex;
      }

      public PlayerState_RemoveAttributesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    AttributeNames = new List<string>();
                    TList _list37 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i38 = 0; _i38 < _list37.Count; ++_i38)
                    {
                      string _elem39;
                      _elem39 = await iprot.ReadStringAsync(cancellationToken);
                      AttributeNames.Add(_elem39);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_RemoveAttributes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AttributeNames != null && __isset.attributeNames)
          {
            field.Name = "attributeNames";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, AttributeNames.Count), cancellationToken);
              foreach (string _iter40 in AttributeNames)
              {
                await oprot.WriteStringAsync(_iter40, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_RemoveAttributes_args(");
        bool __first = true;
        if (AttributeNames != null && __isset.attributeNames)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AttributeNames: ");
          sb.Append(AttributeNames);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_RemoveAttributesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_RemoveAttributesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_RemoveAttributes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_RemoveAttributes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateUserPictureUrlArgs : TBase
    {
      private string _pictureUrl;
      private int _clientIndex;

      /// <summary>
      /// URL to apply.
      /// </summary>
      public string PictureUrl
      {
        get
        {
          return _pictureUrl;
        }
        set
        {
          __isset.pictureUrl = true;
          this._pictureUrl = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool pictureUrl;
        public bool clientIndex;
      }

      public PlayerState_UpdateUserPictureUrlArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PictureUrl = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateUserPictureUrl_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PictureUrl != null && __isset.pictureUrl)
          {
            field.Name = "pictureUrl";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PictureUrl, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateUserPictureUrl_args(");
        bool __first = true;
        if (PictureUrl != null && __isset.pictureUrl)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PictureUrl: ");
          sb.Append(PictureUrl);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateUserPictureUrlResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_UpdateUserPictureUrlResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateUserPictureUrl_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateUserPictureUrl_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateContactEmailArgs : TBase
    {
      private string _contactEmail;
      private int _clientIndex;

      /// <summary>
      /// Updated email
      /// </summary>
      public string ContactEmail
      {
        get
        {
          return _contactEmail;
        }
        set
        {
          __isset.contactEmail = true;
          this._contactEmail = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool contactEmail;
        public bool clientIndex;
      }

      public PlayerState_UpdateContactEmailArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ContactEmail = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateContactEmail_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ContactEmail != null && __isset.contactEmail)
          {
            field.Name = "contactEmail";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ContactEmail, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateContactEmail_args(");
        bool __first = true;
        if (ContactEmail != null && __isset.contactEmail)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ContactEmail: ");
          sb.Append(ContactEmail);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerState_UpdateContactEmailResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerState_UpdateContactEmailResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerState_UpdateContactEmail_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerState_UpdateContactEmail_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ReadAllUserStatsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerStatistics_ReadAllUserStatsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ReadAllUserStats_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ReadAllUserStats_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ReadAllUserStatsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_ReadAllUserStatsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ReadAllUserStats_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ReadAllUserStats_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ReadUserStatsSubsetArgs : TBase
    {
      private List<string> _playerStats;
      private int _clientIndex;

      public List<string> PlayerStats
      {
        get
        {
          return _playerStats;
        }
        set
        {
          __isset.playerStats = true;
          this._playerStats = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playerStats;
        public bool clientIndex;
      }

      public PlayerStatistics_ReadUserStatsSubsetArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    PlayerStats = new List<string>();
                    TList _list41 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i42 = 0; _i42 < _list41.Count; ++_i42)
                    {
                      string _elem43;
                      _elem43 = await iprot.ReadStringAsync(cancellationToken);
                      PlayerStats.Add(_elem43);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ReadUserStatsSubset_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlayerStats != null && __isset.playerStats)
          {
            field.Name = "playerStats";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, PlayerStats.Count), cancellationToken);
              foreach (string _iter44 in PlayerStats)
              {
                await oprot.WriteStringAsync(_iter44, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ReadUserStatsSubset_args(");
        bool __first = true;
        if (PlayerStats != null && __isset.playerStats)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerStats: ");
          sb.Append(PlayerStats);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ReadUserStatsSubsetResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_ReadUserStatsSubsetResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ReadUserStatsSubset_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ReadUserStatsSubset_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ReadUserStatsForCategoryArgs : TBase
    {
      private string _category;
      private int _clientIndex;

      /// <summary>
      /// The user statistics category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool category;
        public bool clientIndex;
      }

      public PlayerStatistics_ReadUserStatsForCategoryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ReadUserStatsForCategory_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ReadUserStatsForCategory_args(");
        bool __first = true;
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ReadUserStatsForCategoryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_ReadUserStatsForCategoryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ReadUserStatsForCategory_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ReadUserStatsForCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ResetAllUserStatsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerStatistics_ResetAllUserStatsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ResetAllUserStats_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ResetAllUserStats_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ResetAllUserStatsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_ResetAllUserStatsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ResetAllUserStats_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ResetAllUserStats_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_IncrementUserStats_SSFOArgs : TBase
    {
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The JSON encoded data to be sent to the server as follows:
      /// {
      ///   stat1: 10,
      ///   stat2: -5.5,
      /// }
      /// would increment stat1 by 10 and decrement stat2 by 5.5.
      /// For the full statistics grammer see the api.braincloudservers.com site.
      /// There are many more complex operations supported such as:
      /// {
      ///   stat1:INC_TO_LIMIT#9#30
      /// }
      /// which increments stat1 by 9 up to a limit of 30.
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonData;
        public bool clientIndex;
      }

      public PlayerStatistics_IncrementUserStats_SSFOArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_IncrementUserStats_SSFO_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_IncrementUserStats_SSFO_args(");
        bool __first = true;
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_IncrementUserStats_SSFOResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_IncrementUserStats_SSFOResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_IncrementUserStats_SSFO_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_IncrementUserStats_SSFO_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_IncrementUserStats_DSFOArgs : TBase
    {
      private Dictionary<string, string> _dictData;
      private int _clientIndex;

      /// <summary>
      /// Stats name and their increments:
      /// {
      ///  {"stat1", 10},
      ///  {"stat1", -5}
      /// }
      /// 
      /// would increment stat1 by 10 and decrement stat2 by 5.
      /// For the full statistics grammer see the api.braincloudservers.com site.
      /// There are many more complex operations supported such as:
      /// {
      ///   stat1:INC_TO_LIMIT#9#30
      /// }
      /// which increments stat1 by 9 up to a limit of 30.
      /// </summary>
      public Dictionary<string, string> DictData
      {
        get
        {
          return _dictData;
        }
        set
        {
          __isset.dictData = true;
          this._dictData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool dictData;
        public bool clientIndex;
      }

      public PlayerStatistics_IncrementUserStats_DSFOArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    DictData = new Dictionary<string, string>();
                    TMap _map45 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i46 = 0; _i46 < _map45.Count; ++_i46)
                    {
                      string _key47;
                      string _val48;
                      _key47 = await iprot.ReadStringAsync(cancellationToken);
                      _val48 = await iprot.ReadStringAsync(cancellationToken);
                      DictData[_key47] = _val48;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_IncrementUserStats_DSFO_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (DictData != null && __isset.dictData)
          {
            field.Name = "dictData";
            field.Type = TType.Map;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, DictData.Count), cancellationToken);
              foreach (string _iter49 in DictData.Keys)
              {
                await oprot.WriteStringAsync(_iter49, cancellationToken);
                await oprot.WriteStringAsync(DictData[_iter49], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_IncrementUserStats_DSFO_args(");
        bool __first = true;
        if (DictData != null && __isset.dictData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("DictData: ");
          sb.Append(DictData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_IncrementUserStats_DSFOResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_IncrementUserStats_DSFOResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_IncrementUserStats_DSFO_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_IncrementUserStats_DSFO_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ProcessStatisticsArgs : TBase
    {
      private Dictionary<string, string> _statisticsData;
      private int _clientIndex;

      /// <summary>
      /// Example data to be passed to method:
      /// {
      ///     "DEAD_CATS": "RESET",
      ///     "LIVES_LEFT": "SET#9",
      ///     "MICE_KILLED": "INC#2",
      ///     "DOG_SCARE_BONUS_POINTS": "INC#10",
      ///     "TREES_CLIMBED": 1
      /// }
      /// </summary>
      public Dictionary<string, string> StatisticsData
      {
        get
        {
          return _statisticsData;
        }
        set
        {
          __isset.statisticsData = true;
          this._statisticsData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool statisticsData;
        public bool clientIndex;
      }

      public PlayerStatistics_ProcessStatisticsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    StatisticsData = new Dictionary<string, string>();
                    TMap _map50 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i51 = 0; _i51 < _map50.Count; ++_i51)
                    {
                      string _key52;
                      string _val53;
                      _key52 = await iprot.ReadStringAsync(cancellationToken);
                      _val53 = await iprot.ReadStringAsync(cancellationToken);
                      StatisticsData[_key52] = _val53;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ProcessStatistics_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (StatisticsData != null && __isset.statisticsData)
          {
            field.Name = "statisticsData";
            field.Type = TType.Map;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, StatisticsData.Count), cancellationToken);
              foreach (string _iter54 in StatisticsData.Keys)
              {
                await oprot.WriteStringAsync(_iter54, cancellationToken);
                await oprot.WriteStringAsync(StatisticsData[_iter54], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ProcessStatistics_args(");
        bool __first = true;
        if (StatisticsData != null && __isset.statisticsData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StatisticsData: ");
          sb.Append(StatisticsData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_ProcessStatisticsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_ProcessStatisticsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_ProcessStatistics_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_ProcessStatistics_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_GetNextExperienceLevelArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PlayerStatistics_GetNextExperienceLevelArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_GetNextExperienceLevel_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_GetNextExperienceLevel_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_GetNextExperienceLevelResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_GetNextExperienceLevelResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_GetNextExperienceLevel_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_GetNextExperienceLevel_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_IncrementExperiencePointsArgs : TBase
    {
      private int _xpValue;
      private int _clientIndex;

      /// <summary>
      /// The amount to increase the user's experience by
      /// </summary>
      public int XpValue
      {
        get
        {
          return _xpValue;
        }
        set
        {
          __isset.xpValue = true;
          this._xpValue = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool xpValue;
        public bool clientIndex;
      }

      public PlayerStatistics_IncrementExperiencePointsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  XpValue = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_IncrementExperiencePoints_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.xpValue)
          {
            field.Name = "xpValue";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(XpValue, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_IncrementExperiencePoints_args(");
        bool __first = true;
        if (__isset.xpValue)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("XpValue: ");
          sb.Append(XpValue);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_IncrementExperiencePointsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_IncrementExperiencePointsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_IncrementExperiencePoints_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_IncrementExperiencePoints_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_SetExperiencePointsArgs : TBase
    {
      private int _xpValue;
      private int _clientIndex;

      /// <summary>
      /// The amount to set the the player's experience to
      /// </summary>
      public int XpValue
      {
        get
        {
          return _xpValue;
        }
        set
        {
          __isset.xpValue = true;
          this._xpValue = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool xpValue;
        public bool clientIndex;
      }

      public PlayerStatistics_SetExperiencePointsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  XpValue = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_SetExperiencePoints_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.xpValue)
          {
            field.Name = "xpValue";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(XpValue, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_SetExperiencePoints_args(");
        bool __first = true;
        if (__isset.xpValue)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("XpValue: ");
          sb.Append(XpValue);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatistics_SetExperiencePointsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatistics_SetExperiencePointsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatistics_SetExperiencePoints_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatistics_SetExperiencePoints_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatisticsEvent_TriggerStatsEventArgs : TBase
    {
      private string _eventName;
      private int _eventMultiplier;
      private int _clientIndex;

      public string EventName
      {
        get
        {
          return _eventName;
        }
        set
        {
          __isset.eventName = true;
          this._eventName = value;
        }
      }

      public int EventMultiplier
      {
        get
        {
          return _eventMultiplier;
        }
        set
        {
          __isset.eventMultiplier = true;
          this._eventMultiplier = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool eventName;
        public bool eventMultiplier;
        public bool clientIndex;
      }

      public PlayerStatisticsEvent_TriggerStatsEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  EventName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  EventMultiplier = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (EventName != null && __isset.eventName)
          {
            field.Name = "eventName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.eventMultiplier)
          {
            field.Name = "eventMultiplier";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(EventMultiplier, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvent_args(");
        bool __first = true;
        if (EventName != null && __isset.eventName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventName: ");
          sb.Append(EventName);
        }
        if (__isset.eventMultiplier)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventMultiplier: ");
          sb.Append(EventMultiplier);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatisticsEvent_TriggerStatsEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatisticsEvent_TriggerStatsEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatisticsEvent_TriggerStatsEventsArgs : TBase
    {
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// jsonData
      /// [
      ///   {
      ///     "eventName": "event1",
      ///     "eventMultiplier": 1
      ///   },
      ///   {
      ///     "eventName": "event2",
      ///     "eventMultiplier": 1
      ///   }
      /// ]
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jsonData;
        public bool clientIndex;
      }

      public PlayerStatisticsEvent_TriggerStatsEventsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvents_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvents_args(");
        bool __first = true;
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PlayerStatisticsEvent_TriggerStatsEventsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PlayerStatisticsEvent_TriggerStatsEventsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PlayerStatisticsEvent_TriggerStatsEvents_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PlayerStatisticsEvent_TriggerStatsEvents_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetCurrencyArgs : TBase
    {
      private string _currencyType;
      private int _clientIndex;

      /// <summary>
      /// The currency type to retrieve or null
      /// if all currency types are being requested.
      /// </summary>
      public string CurrencyType
      {
        get
        {
          return _currencyType;
        }
        set
        {
          __isset.currencyType = true;
          this._currencyType = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool currencyType;
        public bool clientIndex;
      }

      public Product_GetCurrencyArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CurrencyType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetCurrency_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CurrencyType != null && __isset.currencyType)
          {
            field.Name = "currencyType";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CurrencyType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetCurrency_args(");
        bool __first = true;
        if (CurrencyType != null && __isset.currencyType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CurrencyType: ");
          sb.Append(CurrencyType);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetCurrencyResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Product_GetCurrencyResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetCurrency_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetCurrency_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetSalesInventoryArgs : TBase
    {
      private string _platform;
      private string _userCurrency;
      private int _clientIndex;

      /// <summary>
      /// The store platform. Valid stores are:
      /// - itunes
      /// - facebook
      /// - appworld
      /// - steam
      /// - windows
      /// - windowsPhone
      /// - googlePlay
      /// </summary>
      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The currency to retrieve the sales
      /// inventory for. This is only used for Steam and Facebook stores.
      /// </summary>
      public string UserCurrency
      {
        get
        {
          return _userCurrency;
        }
        set
        {
          __isset.userCurrency = true;
          this._userCurrency = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool platform;
        public bool userCurrency;
        public bool clientIndex;
      }

      public Product_GetSalesInventoryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Platform = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  UserCurrency = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetSalesInventory_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Platform != null && __isset.platform)
          {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Platform, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (UserCurrency != null && __isset.userCurrency)
          {
            field.Name = "userCurrency";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserCurrency, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetSalesInventory_args(");
        bool __first = true;
        if (Platform != null && __isset.platform)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Platform: ");
          sb.Append(Platform);
        }
        if (UserCurrency != null && __isset.userCurrency)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserCurrency: ");
          sb.Append(UserCurrency);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetSalesInventoryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Product_GetSalesInventoryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetSalesInventory_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetSalesInventory_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetSalesInventoryByCategoryArgs : TBase
    {
      private string _platform;
      private string _userCurrency;
      private string _category;
      private int _clientIndex;

      /// <summary>
      /// The store platform. Valid stores are:
      /// - itunes
      /// - facebook
      /// - appworld
      /// - steam
      /// - windows
      /// - windowsPhone
      /// - googlePlay
      /// </summary>
      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The currency to retrieve the sales
      /// inventory for. This is only used for Steam and Facebook stores.
      /// </summary>
      public string UserCurrency
      {
        get
        {
          return _userCurrency;
        }
        set
        {
          __isset.userCurrency = true;
          this._userCurrency = value;
        }
      }

      /// <summary>
      /// The product category
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool platform;
        public bool userCurrency;
        public bool category;
        public bool clientIndex;
      }

      public Product_GetSalesInventoryByCategoryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Platform = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  UserCurrency = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetSalesInventoryByCategory_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Platform != null && __isset.platform)
          {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Platform, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (UserCurrency != null && __isset.userCurrency)
          {
            field.Name = "userCurrency";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserCurrency, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetSalesInventoryByCategory_args(");
        bool __first = true;
        if (Platform != null && __isset.platform)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Platform: ");
          sb.Append(Platform);
        }
        if (UserCurrency != null && __isset.userCurrency)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserCurrency: ");
          sb.Append(UserCurrency);
        }
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetSalesInventoryByCategoryResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Product_GetSalesInventoryByCategoryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetSalesInventoryByCategory_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetSalesInventoryByCategory_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_VerifyMicrosoftReceiptArgs : TBase
    {
      private string _receipt;
      private int _clientIndex;

      /// <summary>
      /// Receipt XML
      /// </summary>
      public string Receipt
      {
        get
        {
          return _receipt;
        }
        set
        {
          __isset.receipt = true;
          this._receipt = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool receipt;
        public bool clientIndex;
      }

      public Product_VerifyMicrosoftReceiptArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Receipt = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_VerifyMicrosoftReceipt_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Receipt != null && __isset.receipt)
          {
            field.Name = "receipt";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Receipt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_VerifyMicrosoftReceipt_args(");
        bool __first = true;
        if (Receipt != null && __isset.receipt)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Receipt: ");
          sb.Append(Receipt);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_VerifyMicrosoftReceiptResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Product_VerifyMicrosoftReceiptResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_VerifyMicrosoftReceipt_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_VerifyMicrosoftReceipt_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetEligiblePromotionsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Product_GetEligiblePromotionsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetEligiblePromotions_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetEligiblePromotions_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_GetEligiblePromotionsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Product_GetEligiblePromotionsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_GetEligiblePromotions_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_GetEligiblePromotions_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_VerifyItunesReceiptArgs : TBase
    {
      private string _base64EncReceiptData;
      private int _clientIndex;

      /// <summary>
      /// Base64 encoded receipt data
      /// </summary>
      public string Base64EncReceiptData
      {
        get
        {
          return _base64EncReceiptData;
        }
        set
        {
          __isset.base64EncReceiptData = true;
          this._base64EncReceiptData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool base64EncReceiptData;
        public bool clientIndex;
      }

      public Product_VerifyItunesReceiptArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Base64EncReceiptData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_VerifyItunesReceipt_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Base64EncReceiptData != null && __isset.base64EncReceiptData)
          {
            field.Name = "base64EncReceiptData";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Base64EncReceiptData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_VerifyItunesReceipt_args(");
        bool __first = true;
        if (Base64EncReceiptData != null && __isset.base64EncReceiptData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Base64EncReceiptData: ");
          sb.Append(Base64EncReceiptData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Product_VerifyItunesReceiptResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Product_VerifyItunesReceiptResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Product_VerifyItunesReceipt_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Product_VerifyItunesReceipt_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Profanity_ProfanityCheckArgs : TBase
    {
      private string _text;
      private string _languages;
      private bool _flagEmail;
      private bool _flagPhone;
      private bool _flagUrls;
      private int _clientIndex;

      /// <summary>
      /// The text to check
      /// </summary>
      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      /// <summary>
      /// Optional comma delimited list of two character language codes
      /// </summary>
      public string Languages
      {
        get
        {
          return _languages;
        }
        set
        {
          __isset.languages = true;
          this._languages = value;
        }
      }

      /// <summary>
      /// Optional processing of email addresses
      /// </summary>
      public bool FlagEmail
      {
        get
        {
          return _flagEmail;
        }
        set
        {
          __isset.flagEmail = true;
          this._flagEmail = value;
        }
      }

      /// <summary>
      /// Optional processing of phone numbers
      /// </summary>
      public bool FlagPhone
      {
        get
        {
          return _flagPhone;
        }
        set
        {
          __isset.flagPhone = true;
          this._flagPhone = value;
        }
      }

      /// <summary>
      /// Optional processing of urls
      /// </summary>
      public bool FlagUrls
      {
        get
        {
          return _flagUrls;
        }
        set
        {
          __isset.flagUrls = true;
          this._flagUrls = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool text;
        public bool languages;
        public bool flagEmail;
        public bool flagPhone;
        public bool flagUrls;
        public bool clientIndex;
      }

      public Profanity_ProfanityCheckArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Text = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Languages = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  FlagEmail = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  FlagPhone = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Bool)
                {
                  FlagUrls = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Profanity_ProfanityCheck_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Text != null && __isset.text)
          {
            field.Name = "text";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Text, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Languages != null && __isset.languages)
          {
            field.Name = "languages";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Languages, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagEmail)
          {
            field.Name = "flagEmail";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagEmail, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagPhone)
          {
            field.Name = "flagPhone";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagPhone, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagUrls)
          {
            field.Name = "flagUrls";
            field.Type = TType.Bool;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagUrls, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Profanity_ProfanityCheck_args(");
        bool __first = true;
        if (Text != null && __isset.text)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Text: ");
          sb.Append(Text);
        }
        if (Languages != null && __isset.languages)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Languages: ");
          sb.Append(Languages);
        }
        if (__isset.flagEmail)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagEmail: ");
          sb.Append(FlagEmail);
        }
        if (__isset.flagPhone)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagPhone: ");
          sb.Append(FlagPhone);
        }
        if (__isset.flagUrls)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagUrls: ");
          sb.Append(FlagUrls);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Profanity_ProfanityCheckResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Profanity_ProfanityCheckResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Profanity_ProfanityCheck_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Profanity_ProfanityCheck_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Profanity_ProfanityReplaceTextArgs : TBase
    {
      private string _text;
      private string _replaceSymbol;
      private string _languages;
      private bool _flagEmail;
      private bool _flagPhone;
      private bool _flagUrls;
      private int _clientIndex;

      /// <summary>
      /// The text to check
      /// </summary>
      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      /// <summary>
      /// The text to replace individual characters of profanity text with
      /// </summary>
      public string ReplaceSymbol
      {
        get
        {
          return _replaceSymbol;
        }
        set
        {
          __isset.replaceSymbol = true;
          this._replaceSymbol = value;
        }
      }

      /// <summary>
      /// Optional comma delimited list of two character language codes
      /// </summary>
      public string Languages
      {
        get
        {
          return _languages;
        }
        set
        {
          __isset.languages = true;
          this._languages = value;
        }
      }

      /// <summary>
      /// Optional processing of email addresses
      /// </summary>
      public bool FlagEmail
      {
        get
        {
          return _flagEmail;
        }
        set
        {
          __isset.flagEmail = true;
          this._flagEmail = value;
        }
      }

      /// <summary>
      /// Optional processing of phone numbers
      /// </summary>
      public bool FlagPhone
      {
        get
        {
          return _flagPhone;
        }
        set
        {
          __isset.flagPhone = true;
          this._flagPhone = value;
        }
      }

      /// <summary>
      /// Optional processing of urls
      /// </summary>
      public bool FlagUrls
      {
        get
        {
          return _flagUrls;
        }
        set
        {
          __isset.flagUrls = true;
          this._flagUrls = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool text;
        public bool replaceSymbol;
        public bool languages;
        public bool flagEmail;
        public bool flagPhone;
        public bool flagUrls;
        public bool clientIndex;
      }

      public Profanity_ProfanityReplaceTextArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Text = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ReplaceSymbol = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Languages = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  FlagEmail = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Bool)
                {
                  FlagPhone = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.Bool)
                {
                  FlagUrls = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Profanity_ProfanityReplaceText_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Text != null && __isset.text)
          {
            field.Name = "text";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Text, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ReplaceSymbol != null && __isset.replaceSymbol)
          {
            field.Name = "replaceSymbol";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ReplaceSymbol, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Languages != null && __isset.languages)
          {
            field.Name = "languages";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Languages, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagEmail)
          {
            field.Name = "flagEmail";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagEmail, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagPhone)
          {
            field.Name = "flagPhone";
            field.Type = TType.Bool;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagPhone, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagUrls)
          {
            field.Name = "flagUrls";
            field.Type = TType.Bool;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagUrls, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Profanity_ProfanityReplaceText_args(");
        bool __first = true;
        if (Text != null && __isset.text)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Text: ");
          sb.Append(Text);
        }
        if (ReplaceSymbol != null && __isset.replaceSymbol)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReplaceSymbol: ");
          sb.Append(ReplaceSymbol);
        }
        if (Languages != null && __isset.languages)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Languages: ");
          sb.Append(Languages);
        }
        if (__isset.flagEmail)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagEmail: ");
          sb.Append(FlagEmail);
        }
        if (__isset.flagPhone)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagPhone: ");
          sb.Append(FlagPhone);
        }
        if (__isset.flagUrls)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagUrls: ");
          sb.Append(FlagUrls);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Profanity_ProfanityReplaceTextResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Profanity_ProfanityReplaceTextResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Profanity_ProfanityReplaceText_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Profanity_ProfanityReplaceText_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Profanity_ProfanityIdentifyBadWordsArgs : TBase
    {
      private string _text;
      private string _languages;
      private bool _flagEmail;
      private bool _flagPhone;
      private bool _flagUrls;
      private int _clientIndex;

      /// <summary>
      /// The text to check
      /// </summary>
      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      /// <summary>
      /// Optional comma delimited list of two character language codes
      /// </summary>
      public string Languages
      {
        get
        {
          return _languages;
        }
        set
        {
          __isset.languages = true;
          this._languages = value;
        }
      }

      /// <summary>
      /// Optional processing of email addresses
      /// </summary>
      public bool FlagEmail
      {
        get
        {
          return _flagEmail;
        }
        set
        {
          __isset.flagEmail = true;
          this._flagEmail = value;
        }
      }

      /// <summary>
      /// Optional processing of phone numbers
      /// </summary>
      public bool FlagPhone
      {
        get
        {
          return _flagPhone;
        }
        set
        {
          __isset.flagPhone = true;
          this._flagPhone = value;
        }
      }

      /// <summary>
      /// Optional processing of urls
      /// </summary>
      public bool FlagUrls
      {
        get
        {
          return _flagUrls;
        }
        set
        {
          __isset.flagUrls = true;
          this._flagUrls = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool text;
        public bool languages;
        public bool flagEmail;
        public bool flagPhone;
        public bool flagUrls;
        public bool clientIndex;
      }

      public Profanity_ProfanityIdentifyBadWordsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Text = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Languages = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  FlagEmail = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  FlagPhone = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Bool)
                {
                  FlagUrls = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Profanity_ProfanityIdentifyBadWords_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Text != null && __isset.text)
          {
            field.Name = "text";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Text, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Languages != null && __isset.languages)
          {
            field.Name = "languages";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Languages, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagEmail)
          {
            field.Name = "flagEmail";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagEmail, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagPhone)
          {
            field.Name = "flagPhone";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagPhone, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.flagUrls)
          {
            field.Name = "flagUrls";
            field.Type = TType.Bool;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(FlagUrls, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Profanity_ProfanityIdentifyBadWords_args(");
        bool __first = true;
        if (Text != null && __isset.text)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Text: ");
          sb.Append(Text);
        }
        if (Languages != null && __isset.languages)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Languages: ");
          sb.Append(Languages);
        }
        if (__isset.flagEmail)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagEmail: ");
          sb.Append(FlagEmail);
        }
        if (__isset.flagPhone)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagPhone: ");
          sb.Append(FlagPhone);
        }
        if (__isset.flagUrls)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FlagUrls: ");
          sb.Append(FlagUrls);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Profanity_ProfanityIdentifyBadWordsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Profanity_ProfanityIdentifyBadWordsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Profanity_ProfanityIdentifyBadWords_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Profanity_ProfanityIdentifyBadWords_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_DeregisterAllPushNotificationDeviceTokensArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public PushNotification_DeregisterAllPushNotificationDeviceTokensArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_DeregisterAllPushNotificationDeviceTokens_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_DeregisterAllPushNotificationDeviceTokens_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_DeregisterAllPushNotificationDeviceTokensResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_DeregisterAllPushNotificationDeviceTokensResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_DeregisterAllPushNotificationDeviceTokens_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_DeregisterAllPushNotificationDeviceTokens_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_DeregisterPushNotificationDeviceTokenArgs : TBase
    {
      private string _platform;
      private string _token;
      private int _clientIndex;

      /// <summary>
      /// The device platform being registered.
      /// </summary>
      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The platform-dependant device token needed for push notifications.
      /// </summary>
      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool platform;
        public bool token;
        public bool clientIndex;
      }

      public PushNotification_DeregisterPushNotificationDeviceTokenArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Platform = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Token = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_DeregisterPushNotificationDeviceToken_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Platform != null && __isset.platform)
          {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Platform, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Token != null && __isset.token)
          {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_DeregisterPushNotificationDeviceToken_args(");
        bool __first = true;
        if (Platform != null && __isset.platform)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Platform: ");
          sb.Append(Platform);
        }
        if (Token != null && __isset.token)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Token: ");
          sb.Append(Token);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_DeregisterPushNotificationDeviceTokenResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_DeregisterPushNotificationDeviceTokenResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_DeregisterPushNotificationDeviceToken_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_DeregisterPushNotificationDeviceToken_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_RegisterPushNotificationDeviceTokenArgs : TBase
    {
      private string _platform;
      private string _token;
      private int _clientIndex;

      public string Platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      /// <summary>
      /// The platform-dependant device token needed for push notifications.
      /// </summary>
      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool platform;
        public bool token;
        public bool clientIndex;
      }

      public PushNotification_RegisterPushNotificationDeviceTokenArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Platform = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Token = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_RegisterPushNotificationDeviceToken_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Platform != null && __isset.platform)
          {
            field.Name = "platform";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Platform, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Token != null && __isset.token)
          {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_RegisterPushNotificationDeviceToken_args(");
        bool __first = true;
        if (Platform != null && __isset.platform)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Platform: ");
          sb.Append(Platform);
        }
        if (Token != null && __isset.token)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Token: ");
          sb.Append(Token);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_RegisterPushNotificationDeviceTokenResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_RegisterPushNotificationDeviceTokenResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_RegisterPushNotificationDeviceToken_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_RegisterPushNotificationDeviceToken_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendSimplePushNotificationArgs : TBase
    {
      private string _toProfileId;
      private string _message;
      private int _clientIndex;

      /// <summary>
      /// The braincloud profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Text of the push notification
      /// </summary>
      public string Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool toProfileId;
        public bool message;
        public bool clientIndex;
      }

      public PushNotification_SendSimplePushNotificationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ToProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Message = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendSimplePushNotification_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ToProfileId != null && __isset.toProfileId)
          {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ToProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Message != null && __isset.message)
          {
            field.Name = "message";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Message, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendSimplePushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ToProfileId: ");
          sb.Append(ToProfileId);
        }
        if (Message != null && __isset.message)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Message: ");
          sb.Append(Message);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendSimplePushNotificationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendSimplePushNotificationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendSimplePushNotification_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendSimplePushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRichPushNotificationArgs : TBase
    {
      private string _toProfileId;
      private int _notificationTemplateId;
      private int _clientIndex;

      /// <summary>
      /// The braincloud profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Id of the notification template
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool toProfileId;
        public bool notificationTemplateId;
        public bool clientIndex;
      }

      public PushNotification_SendRichPushNotificationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ToProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  NotificationTemplateId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRichPushNotification_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ToProfileId != null && __isset.toProfileId)
          {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ToProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.notificationTemplateId)
          {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(NotificationTemplateId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRichPushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ToProfileId: ");
          sb.Append(ToProfileId);
        }
        if (__isset.notificationTemplateId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NotificationTemplateId: ");
          sb.Append(NotificationTemplateId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRichPushNotificationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendRichPushNotificationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRichPushNotification_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRichPushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRichPushNotificationWithParamsArgs : TBase
    {
      private string _toProfileId;
      private int _notificationTemplateId;
      private string _substitutionJson;
      private int _clientIndex;

      /// <summary>
      /// The braincloud profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Id of the notification template
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// JSON defining the substitution params to use with the template
      /// </summary>
      public string SubstitutionJson
      {
        get
        {
          return _substitutionJson;
        }
        set
        {
          __isset.substitutionJson = true;
          this._substitutionJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool toProfileId;
        public bool notificationTemplateId;
        public bool substitutionJson;
        public bool clientIndex;
      }

      public PushNotification_SendRichPushNotificationWithParamsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ToProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  NotificationTemplateId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  SubstitutionJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRichPushNotificationWithParams_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ToProfileId != null && __isset.toProfileId)
          {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ToProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.notificationTemplateId)
          {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(NotificationTemplateId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SubstitutionJson != null && __isset.substitutionJson)
          {
            field.Name = "substitutionJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SubstitutionJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRichPushNotificationWithParams_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ToProfileId: ");
          sb.Append(ToProfileId);
        }
        if (__isset.notificationTemplateId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NotificationTemplateId: ");
          sb.Append(NotificationTemplateId);
        }
        if (SubstitutionJson != null && __isset.substitutionJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SubstitutionJson: ");
          sb.Append(SubstitutionJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRichPushNotificationWithParamsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendRichPushNotificationWithParamsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRichPushNotificationWithParams_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRichPushNotificationWithParams_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendTemplatedPushNotificationToGroupArgs : TBase
    {
      private string _groupId;
      private int _notificationTemplateId;
      private string _substitutionsJson;
      private int _clientIndex;

      /// <summary>
      /// Target group
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Id of the notification template
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// JSON defining the substitution params to use with the template
      /// </summary>
      public string SubstitutionsJson
      {
        get
        {
          return _substitutionsJson;
        }
        set
        {
          __isset.substitutionsJson = true;
          this._substitutionsJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool notificationTemplateId;
        public bool substitutionsJson;
        public bool clientIndex;
      }

      public PushNotification_SendTemplatedPushNotificationToGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  NotificationTemplateId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  SubstitutionsJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendTemplatedPushNotificationToGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.notificationTemplateId)
          {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(NotificationTemplateId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SubstitutionsJson != null && __isset.substitutionsJson)
          {
            field.Name = "substitutionsJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SubstitutionsJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendTemplatedPushNotificationToGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.notificationTemplateId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NotificationTemplateId: ");
          sb.Append(NotificationTemplateId);
        }
        if (SubstitutionsJson != null && __isset.substitutionsJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SubstitutionsJson: ");
          sb.Append(SubstitutionsJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendTemplatedPushNotificationToGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendTemplatedPushNotificationToGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendTemplatedPushNotificationToGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendTemplatedPushNotificationToGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendNormalizedPushNotificationToGroupArgs : TBase
    {
      private string _groupId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _clientIndex;

      /// <summary>
      /// Target group
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool clientIndex;
      }

      public PushNotification_SendNormalizedPushNotificationToGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AlertContentJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  CustomDataJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendNormalizedPushNotificationToGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AlertContentJson != null && __isset.alertContentJson)
          {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AlertContentJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomDataJson != null && __isset.customDataJson)
          {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CustomDataJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationToGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (AlertContentJson != null && __isset.alertContentJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AlertContentJson: ");
          sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomDataJson: ");
          sb.Append(CustomDataJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendNormalizedPushNotificationToGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendNormalizedPushNotificationToGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendNormalizedPushNotificationToGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationToGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRawPushNotificationUTCArgs : TBase
    {
      private string _profileId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _startTime;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      /// <summary>
      /// Start time of sending the push notification
      /// </summary>
      public int StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool startTime;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRawPushNotificationUTCArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FcmContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  IosContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  FacebookContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  StartTime = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRawPushNotificationUTC_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FcmContent != null && __isset.fcmContent)
          {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FcmContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (IosContent != null && __isset.iosContent)
          {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(IosContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FacebookContent != null && __isset.facebookContent)
          {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FacebookContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.startTime)
          {
            field.Name = "startTime";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(StartTime, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationUTC_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (FcmContent != null && __isset.fcmContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FcmContent: ");
          sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IosContent: ");
          sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FacebookContent: ");
          sb.Append(FacebookContent);
        }
        if (__isset.startTime)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StartTime: ");
          sb.Append(StartTime);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRawPushNotificationUTCResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_ScheduleRawPushNotificationUTCResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRawPushNotificationUTC_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRawPushNotificationMinutesArgs : TBase
    {
      private string _profileId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      /// <summary>
      /// Minutes from now to send the push notification
      /// </summary>
      public int MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRawPushNotificationMinutesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FcmContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  IosContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  FacebookContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  MinutesFromNow = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRawPushNotificationMinutes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FcmContent != null && __isset.fcmContent)
          {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FcmContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (IosContent != null && __isset.iosContent)
          {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(IosContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FacebookContent != null && __isset.facebookContent)
          {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FacebookContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.minutesFromNow)
          {
            field.Name = "minutesFromNow";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MinutesFromNow, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationMinutes_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (FcmContent != null && __isset.fcmContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FcmContent: ");
          sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IosContent: ");
          sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FacebookContent: ");
          sb.Append(FacebookContent);
        }
        if (__isset.minutesFromNow)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MinutesFromNow: ");
          sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRawPushNotificationMinutesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_ScheduleRawPushNotificationMinutesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRawPushNotificationMinutes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRawPushNotificationMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRawPushNotificationArgs : TBase
    {
      private string _toProfileId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool toProfileId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool clientIndex;
      }

      public PushNotification_SendRawPushNotificationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ToProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FcmContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  IosContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  FacebookContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRawPushNotification_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ToProfileId != null && __isset.toProfileId)
          {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ToProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FcmContent != null && __isset.fcmContent)
          {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FcmContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (IosContent != null && __isset.iosContent)
          {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(IosContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FacebookContent != null && __isset.facebookContent)
          {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FacebookContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRawPushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ToProfileId: ");
          sb.Append(ToProfileId);
        }
        if (FcmContent != null && __isset.fcmContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FcmContent: ");
          sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IosContent: ");
          sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FacebookContent: ");
          sb.Append(FacebookContent);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRawPushNotificationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendRawPushNotificationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRawPushNotification_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRawPushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRawPushNotificationBatchArgs : TBase
    {
      private List<string> _profileIds;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs to send the notification to
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileIds;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool clientIndex;
      }

      public PushNotification_SendRawPushNotificationBatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    ProfileIds = new List<string>();
                    TList _list55 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i56 = 0; _i56 < _list55.Count; ++_i56)
                    {
                      string _elem57;
                      _elem57 = await iprot.ReadStringAsync(cancellationToken);
                      ProfileIds.Add(_elem57);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FcmContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  IosContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  FacebookContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRawPushNotificationBatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileIds != null && __isset.profileIds)
          {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, ProfileIds.Count), cancellationToken);
              foreach (string _iter58 in ProfileIds)
              {
                await oprot.WriteStringAsync(_iter58, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FcmContent != null && __isset.fcmContent)
          {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FcmContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (IosContent != null && __isset.iosContent)
          {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(IosContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FacebookContent != null && __isset.facebookContent)
          {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FacebookContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRawPushNotificationBatch_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileIds: ");
          sb.Append(ProfileIds);
        }
        if (FcmContent != null && __isset.fcmContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FcmContent: ");
          sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IosContent: ");
          sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FacebookContent: ");
          sb.Append(FacebookContent);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRawPushNotificationBatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendRawPushNotificationBatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRawPushNotificationBatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRawPushNotificationBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRawPushNotificationToGroupArgs : TBase
    {
      private string _groupId;
      private string _fcmContent;
      private string _iosContent;
      private string _facebookContent;
      private int _clientIndex;

      /// <summary>
      /// Target group
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      /// <summary>
      /// Valid Fcm data content
      /// </summary>
      public string FcmContent
      {
        get
        {
          return _fcmContent;
        }
        set
        {
          __isset.fcmContent = true;
          this._fcmContent = value;
        }
      }

      /// <summary>
      /// Valid ios data content
      /// </summary>
      public string IosContent
      {
        get
        {
          return _iosContent;
        }
        set
        {
          __isset.iosContent = true;
          this._iosContent = value;
        }
      }

      /// <summary>
      /// Facebook template string
      /// </summary>
      public string FacebookContent
      {
        get
        {
          return _facebookContent;
        }
        set
        {
          __isset.facebookContent = true;
          this._facebookContent = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool groupId;
        public bool fcmContent;
        public bool iosContent;
        public bool facebookContent;
        public bool clientIndex;
      }

      public PushNotification_SendRawPushNotificationToGroupArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FcmContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  IosContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  FacebookContent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRawPushNotificationToGroup_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FcmContent != null && __isset.fcmContent)
          {
            field.Name = "fcmContent";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FcmContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (IosContent != null && __isset.iosContent)
          {
            field.Name = "iosContent";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(IosContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FacebookContent != null && __isset.facebookContent)
          {
            field.Name = "facebookContent";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FacebookContent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRawPushNotificationToGroup_args(");
        bool __first = true;
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (FcmContent != null && __isset.fcmContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FcmContent: ");
          sb.Append(FcmContent);
        }
        if (IosContent != null && __isset.iosContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IosContent: ");
          sb.Append(IosContent);
        }
        if (FacebookContent != null && __isset.facebookContent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FacebookContent: ");
          sb.Append(FacebookContent);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendRawPushNotificationToGroupResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendRawPushNotificationToGroupResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendRawPushNotificationToGroup_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendRawPushNotificationToGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleNormalizedPushNotificationUTCArgs : TBase
    {
      private string _profileId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _startTime;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      /// <summary>
      /// Start time of sending the push notification
      /// </summary>
      public int StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool startTime;
        public bool clientIndex;
      }

      public PushNotification_ScheduleNormalizedPushNotificationUTCArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AlertContentJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  CustomDataJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  StartTime = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationUTC_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AlertContentJson != null && __isset.alertContentJson)
          {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AlertContentJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomDataJson != null && __isset.customDataJson)
          {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CustomDataJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.startTime)
          {
            field.Name = "startTime";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(StartTime, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationUTC_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (AlertContentJson != null && __isset.alertContentJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AlertContentJson: ");
          sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomDataJson: ");
          sb.Append(CustomDataJson);
        }
        if (__isset.startTime)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StartTime: ");
          sb.Append(StartTime);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleNormalizedPushNotificationUTCResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_ScheduleNormalizedPushNotificationUTCResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationUTC_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleNormalizedPushNotificationMinutesArgs : TBase
    {
      private string _profileId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      /// <summary>
      /// Minutes from now to send the push notification
      /// </summary>
      public int MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public PushNotification_ScheduleNormalizedPushNotificationMinutesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AlertContentJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  CustomDataJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  MinutesFromNow = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationMinutes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AlertContentJson != null && __isset.alertContentJson)
          {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AlertContentJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomDataJson != null && __isset.customDataJson)
          {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CustomDataJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.minutesFromNow)
          {
            field.Name = "minutesFromNow";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MinutesFromNow, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationMinutes_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (AlertContentJson != null && __isset.alertContentJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AlertContentJson: ");
          sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomDataJson: ");
          sb.Append(CustomDataJson);
        }
        if (__isset.minutesFromNow)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MinutesFromNow: ");
          sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleNormalizedPushNotificationMinutesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_ScheduleNormalizedPushNotificationMinutesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleNormalizedPushNotificationMinutes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleNormalizedPushNotificationMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRichPushNotificationUTCArgs : TBase
    {
      private string _profileId;
      private int _notificationTemplateId;
      private string _substitutionsJson;
      private int _startTime;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string SubstitutionsJson
      {
        get
        {
          return _substitutionsJson;
        }
        set
        {
          __isset.substitutionsJson = true;
          this._substitutionsJson = value;
        }
      }

      /// <summary>
      /// Start time of sending the push notification
      /// </summary>
      public int StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool notificationTemplateId;
        public bool substitutionsJson;
        public bool startTime;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRichPushNotificationUTCArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  NotificationTemplateId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  SubstitutionsJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  StartTime = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRichPushNotificationUTC_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.notificationTemplateId)
          {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(NotificationTemplateId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SubstitutionsJson != null && __isset.substitutionsJson)
          {
            field.Name = "substitutionsJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SubstitutionsJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.startTime)
          {
            field.Name = "startTime";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(StartTime, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationUTC_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.notificationTemplateId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NotificationTemplateId: ");
          sb.Append(NotificationTemplateId);
        }
        if (SubstitutionsJson != null && __isset.substitutionsJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SubstitutionsJson: ");
          sb.Append(SubstitutionsJson);
        }
        if (__isset.startTime)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StartTime: ");
          sb.Append(StartTime);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRichPushNotificationUTCResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_ScheduleRichPushNotificationUTCResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRichPushNotificationUTC_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRichPushNotificationMinutesArgs : TBase
    {
      private string _profileId;
      private int _notificationTemplateId;
      private string _substitutionsJson;
      private int _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ProfileId
      {
        get
        {
          return _profileId;
        }
        set
        {
          __isset.profileId = true;
          this._profileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public int NotificationTemplateId
      {
        get
        {
          return _notificationTemplateId;
        }
        set
        {
          __isset.notificationTemplateId = true;
          this._notificationTemplateId = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string SubstitutionsJson
      {
        get
        {
          return _substitutionsJson;
        }
        set
        {
          __isset.substitutionsJson = true;
          this._substitutionsJson = value;
        }
      }

      /// <summary>
      /// Minutes from now to send the push notification
      /// </summary>
      public int MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileId;
        public bool notificationTemplateId;
        public bool substitutionsJson;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public PushNotification_ScheduleRichPushNotificationMinutesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  NotificationTemplateId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  SubstitutionsJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  MinutesFromNow = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRichPushNotificationMinutes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileId != null && __isset.profileId)
          {
            field.Name = "profileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.notificationTemplateId)
          {
            field.Name = "notificationTemplateId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(NotificationTemplateId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SubstitutionsJson != null && __isset.substitutionsJson)
          {
            field.Name = "substitutionsJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SubstitutionsJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.minutesFromNow)
          {
            field.Name = "minutesFromNow";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(MinutesFromNow, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationMinutes_args(");
        bool __first = true;
        if (ProfileId != null && __isset.profileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileId: ");
          sb.Append(ProfileId);
        }
        if (__isset.notificationTemplateId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NotificationTemplateId: ");
          sb.Append(NotificationTemplateId);
        }
        if (SubstitutionsJson != null && __isset.substitutionsJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SubstitutionsJson: ");
          sb.Append(SubstitutionsJson);
        }
        if (__isset.minutesFromNow)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MinutesFromNow: ");
          sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_ScheduleRichPushNotificationMinutesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_ScheduleRichPushNotificationMinutesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_ScheduleRichPushNotificationMinutes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_ScheduleRichPushNotificationMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendNormalizedPushNotificationArgs : TBase
    {
      private string _toProfileId;
      private string _alertContentJson;
      private string _customDataJson;
      private int _clientIndex;

      /// <summary>
      /// The profileId of the user to receive the notification
      /// </summary>
      public string ToProfileId
      {
        get
        {
          return _toProfileId;
        }
        set
        {
          __isset.toProfileId = true;
          this._toProfileId = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool toProfileId;
        public bool alertContentJson;
        public bool customDataJson;
        public bool clientIndex;
      }

      public PushNotification_SendNormalizedPushNotificationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ToProfileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AlertContentJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  CustomDataJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendNormalizedPushNotification_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ToProfileId != null && __isset.toProfileId)
          {
            field.Name = "toProfileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ToProfileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AlertContentJson != null && __isset.alertContentJson)
          {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AlertContentJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomDataJson != null && __isset.customDataJson)
          {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CustomDataJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendNormalizedPushNotification_args(");
        bool __first = true;
        if (ToProfileId != null && __isset.toProfileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ToProfileId: ");
          sb.Append(ToProfileId);
        }
        if (AlertContentJson != null && __isset.alertContentJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AlertContentJson: ");
          sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomDataJson: ");
          sb.Append(CustomDataJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendNormalizedPushNotificationResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendNormalizedPushNotificationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendNormalizedPushNotification_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendNormalizedPushNotification_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendNormalizedPushNotificationBatchArgs : TBase
    {
      private List<string> _profileIds;
      private string _alertContentJson;
      private string _customDataJson;
      private int _clientIndex;

      /// <summary>
      /// Collection of profile IDs to send the notification to
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      /// <summary>
      /// Body and title of alert
      /// </summary>
      public string AlertContentJson
      {
        get
        {
          return _alertContentJson;
        }
        set
        {
          __isset.alertContentJson = true;
          this._alertContentJson = value;
        }
      }

      /// <summary>
      /// Optional custom data
      /// </summary>
      public string CustomDataJson
      {
        get
        {
          return _customDataJson;
        }
        set
        {
          __isset.customDataJson = true;
          this._customDataJson = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool profileIds;
        public bool alertContentJson;
        public bool customDataJson;
        public bool clientIndex;
      }

      public PushNotification_SendNormalizedPushNotificationBatchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    ProfileIds = new List<string>();
                    TList _list59 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i60 = 0; _i60 < _list59.Count; ++_i60)
                    {
                      string _elem61;
                      _elem61 = await iprot.ReadStringAsync(cancellationToken);
                      ProfileIds.Add(_elem61);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  AlertContentJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  CustomDataJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendNormalizedPushNotificationBatch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ProfileIds != null && __isset.profileIds)
          {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, ProfileIds.Count), cancellationToken);
              foreach (string _iter62 in ProfileIds)
              {
                await oprot.WriteStringAsync(_iter62, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (AlertContentJson != null && __isset.alertContentJson)
          {
            field.Name = "alertContentJson";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AlertContentJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomDataJson != null && __isset.customDataJson)
          {
            field.Name = "customDataJson";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CustomDataJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationBatch_args(");
        bool __first = true;
        if (ProfileIds != null && __isset.profileIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileIds: ");
          sb.Append(ProfileIds);
        }
        if (AlertContentJson != null && __isset.alertContentJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AlertContentJson: ");
          sb.Append(AlertContentJson);
        }
        if (CustomDataJson != null && __isset.customDataJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomDataJson: ");
          sb.Append(CustomDataJson);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class PushNotification_SendNormalizedPushNotificationBatchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public PushNotification_SendNormalizedPushNotificationBatchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("PushNotification_SendNormalizedPushNotificationBatch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("PushNotification_SendNormalizedPushNotificationBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunScriptArgs : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private int _clientIndex;

      /// <summary>
      /// The name of the script to be run
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// Data to be sent to the script in json format
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool scriptName;
        public bool jsonScriptData;
        public bool clientIndex;
      }

      public Script_RunScriptArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ScriptName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonScriptData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunScript_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ScriptName != null && __isset.scriptName)
          {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ScriptName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonScriptData != null && __isset.jsonScriptData)
          {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonScriptData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunScript_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ScriptName: ");
          sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonScriptData: ");
          sb.Append(JsonScriptData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunScriptResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Script_RunScriptResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunScript_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunScript_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_ScheduleRunScriptUTCArgs : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private long _startDateInUTC;
      private int _clientIndex;

      /// <summary>
      /// Name of script
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON bundle to pass to script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// The start date as a DateTime object
      /// </summary>
      public long StartDateInUTC
      {
        get
        {
          return _startDateInUTC;
        }
        set
        {
          __isset.startDateInUTC = true;
          this._startDateInUTC = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool scriptName;
        public bool jsonScriptData;
        public bool startDateInUTC;
        public bool clientIndex;
      }

      public Script_ScheduleRunScriptUTCArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ScriptName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonScriptData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  StartDateInUTC = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_ScheduleRunScriptUTC_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ScriptName != null && __isset.scriptName)
          {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ScriptName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonScriptData != null && __isset.jsonScriptData)
          {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonScriptData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.startDateInUTC)
          {
            field.Name = "startDateInUTC";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(StartDateInUTC, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_ScheduleRunScriptUTC_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ScriptName: ");
          sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonScriptData: ");
          sb.Append(JsonScriptData);
        }
        if (__isset.startDateInUTC)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StartDateInUTC: ");
          sb.Append(StartDateInUTC);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_ScheduleRunScriptUTCResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Script_ScheduleRunScriptUTCResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_ScheduleRunScriptUTC_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_ScheduleRunScriptUTC_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_ScheduleRunScriptMinutesArgs : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private long _minutesFromNow;
      private int _clientIndex;

      /// <summary>
      /// Name of script
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON bundle to pass to script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// Number of minutes from now to run script
      /// </summary>
      public long MinutesFromNow
      {
        get
        {
          return _minutesFromNow;
        }
        set
        {
          __isset.minutesFromNow = true;
          this._minutesFromNow = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool scriptName;
        public bool jsonScriptData;
        public bool minutesFromNow;
        public bool clientIndex;
      }

      public Script_ScheduleRunScriptMinutesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ScriptName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonScriptData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  MinutesFromNow = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_ScheduleRunScriptMinutes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ScriptName != null && __isset.scriptName)
          {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ScriptName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonScriptData != null && __isset.jsonScriptData)
          {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonScriptData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.minutesFromNow)
          {
            field.Name = "minutesFromNow";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(MinutesFromNow, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_ScheduleRunScriptMinutes_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ScriptName: ");
          sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonScriptData: ");
          sb.Append(JsonScriptData);
        }
        if (__isset.minutesFromNow)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MinutesFromNow: ");
          sb.Append(MinutesFromNow);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_ScheduleRunScriptMinutesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Script_ScheduleRunScriptMinutesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_ScheduleRunScriptMinutes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_ScheduleRunScriptMinutes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunParentScriptArgs : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private string _parentLevel;
      private int _clientIndex;

      /// <summary>
      /// Name of script
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON bundle to pass to script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// The level name of the parent to run the script from
      /// </summary>
      public string ParentLevel
      {
        get
        {
          return _parentLevel;
        }
        set
        {
          __isset.parentLevel = true;
          this._parentLevel = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool scriptName;
        public bool jsonScriptData;
        public bool parentLevel;
        public bool clientIndex;
      }

      public Script_RunParentScriptArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ScriptName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonScriptData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  ParentLevel = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunParentScript_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ScriptName != null && __isset.scriptName)
          {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ScriptName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonScriptData != null && __isset.jsonScriptData)
          {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonScriptData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParentLevel != null && __isset.parentLevel)
          {
            field.Name = "parentLevel";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParentLevel, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunParentScript_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ScriptName: ");
          sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonScriptData: ");
          sb.Append(JsonScriptData);
        }
        if (ParentLevel != null && __isset.parentLevel)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParentLevel: ");
          sb.Append(ParentLevel);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunParentScriptResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Script_RunParentScriptResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunParentScript_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunParentScript_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_CancelScheduledScriptArgs : TBase
    {
      private string _jobId;
      private int _clientIndex;

      /// <summary>
      /// ID of script job to cancel
      /// </summary>
      public string JobId
      {
        get
        {
          return _jobId;
        }
        set
        {
          __isset.jobId = true;
          this._jobId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool jobId;
        public bool clientIndex;
      }

      public Script_CancelScheduledScriptArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  JobId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_CancelScheduledScript_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (JobId != null && __isset.jobId)
          {
            field.Name = "jobId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JobId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_CancelScheduledScript_args(");
        bool __first = true;
        if (JobId != null && __isset.jobId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JobId: ");
          sb.Append(JobId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_CancelScheduledScriptResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Script_CancelScheduledScriptResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_CancelScheduledScript_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_CancelScheduledScript_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunPeerScriptArgs : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private string _peer;
      private int _clientIndex;

      /// <summary>
      /// The name of the script to run
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON data to pass into the script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// Identifies the peer
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool scriptName;
        public bool jsonScriptData;
        public bool peer;
        public bool clientIndex;
      }

      public Script_RunPeerScriptArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ScriptName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonScriptData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Peer = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunPeerScript_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ScriptName != null && __isset.scriptName)
          {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ScriptName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonScriptData != null && __isset.jsonScriptData)
          {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonScriptData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Peer != null && __isset.peer)
          {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Peer, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunPeerScript_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ScriptName: ");
          sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonScriptData: ");
          sb.Append(JsonScriptData);
        }
        if (Peer != null && __isset.peer)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Peer: ");
          sb.Append(Peer);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunPeerScriptResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Script_RunPeerScriptResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunPeerScript_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunPeerScript_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunPeerScriptAsynchArgs : TBase
    {
      private string _scriptName;
      private string _jsonScriptData;
      private string _peer;
      private int _clientIndex;

      /// <summary>
      /// The name of the script to run
      /// </summary>
      public string ScriptName
      {
        get
        {
          return _scriptName;
        }
        set
        {
          __isset.scriptName = true;
          this._scriptName = value;
        }
      }

      /// <summary>
      /// JSON data to pass into the script
      /// </summary>
      public string JsonScriptData
      {
        get
        {
          return _jsonScriptData;
        }
        set
        {
          __isset.jsonScriptData = true;
          this._jsonScriptData = value;
        }
      }

      /// <summary>
      /// Identifies the peer
      /// </summary>
      public string Peer
      {
        get
        {
          return _peer;
        }
        set
        {
          __isset.peer = true;
          this._peer = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool scriptName;
        public bool jsonScriptData;
        public bool peer;
        public bool clientIndex;
      }

      public Script_RunPeerScriptAsynchArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ScriptName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  JsonScriptData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Peer = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunPeerScriptAsynch_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ScriptName != null && __isset.scriptName)
          {
            field.Name = "scriptName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ScriptName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonScriptData != null && __isset.jsonScriptData)
          {
            field.Name = "jsonScriptData";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonScriptData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Peer != null && __isset.peer)
          {
            field.Name = "peer";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Peer, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunPeerScriptAsynch_args(");
        bool __first = true;
        if (ScriptName != null && __isset.scriptName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ScriptName: ");
          sb.Append(ScriptName);
        }
        if (JsonScriptData != null && __isset.jsonScriptData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonScriptData: ");
          sb.Append(JsonScriptData);
        }
        if (Peer != null && __isset.peer)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Peer: ");
          sb.Append(Peer);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Script_RunPeerScriptAsynchResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Script_RunPeerScriptAsynchResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Script_RunPeerScriptAsynch_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Script_RunPeerScriptAsynch_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetSocialLeaderboardArgs : TBase
    {
      private string _leaderboardId;
      private bool _replaceName;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// If true, the currently logged in player's name will be replaced
      /// by the string "You".
      /// </summary>
      public bool ReplaceName
      {
        get
        {
          return _replaceName;
        }
        set
        {
          __isset.replaceName = true;
          this._replaceName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool replaceName;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetSocialLeaderboardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  ReplaceName = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetSocialLeaderboard_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.replaceName)
          {
            field.Name = "replaceName";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ReplaceName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.replaceName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReplaceName: ");
          sb.Append(ReplaceName);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetSocialLeaderboardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetSocialLeaderboardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetSocialLeaderboard_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetMultiSocialLeaderboardArgs : TBase
    {
      private List<string> _leaderboardIds;
      private int _leaderboardResultCount;
      private bool _replaceName;
      private int _clientIndex;

      /// <summary>
      /// Array of leaderboard id strings
      /// </summary>
      public List<string> LeaderboardIds
      {
        get
        {
          return _leaderboardIds;
        }
        set
        {
          __isset.leaderboardIds = true;
          this._leaderboardIds = value;
        }
      }

      /// <summary>
      /// Maximum count of entries to return for each leaderboard.
      /// </summary>
      public int LeaderboardResultCount
      {
        get
        {
          return _leaderboardResultCount;
        }
        set
        {
          __isset.leaderboardResultCount = true;
          this._leaderboardResultCount = value;
        }
      }

      /// <summary>
      /// If true, the currently logged in player's name will be replaced
      /// by the string "You".
      /// </summary>
      public bool ReplaceName
      {
        get
        {
          return _replaceName;
        }
        set
        {
          __isset.replaceName = true;
          this._replaceName = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardIds;
        public bool leaderboardResultCount;
        public bool replaceName;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetMultiSocialLeaderboardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    LeaderboardIds = new List<string>();
                    TList _list63 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i64 = 0; _i64 < _list63.Count; ++_i64)
                    {
                      string _elem65;
                      _elem65 = await iprot.ReadStringAsync(cancellationToken);
                      LeaderboardIds.Add(_elem65);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  LeaderboardResultCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  ReplaceName = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetMultiSocialLeaderboard_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardIds != null && __isset.leaderboardIds)
          {
            field.Name = "leaderboardIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, LeaderboardIds.Count), cancellationToken);
              foreach (string _iter66 in LeaderboardIds)
              {
                await oprot.WriteStringAsync(_iter66, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.leaderboardResultCount)
          {
            field.Name = "leaderboardResultCount";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(LeaderboardResultCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.replaceName)
          {
            field.Name = "replaceName";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ReplaceName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetMultiSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardIds != null && __isset.leaderboardIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardIds: ");
          sb.Append(LeaderboardIds);
        }
        if (__isset.leaderboardResultCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardResultCount: ");
          sb.Append(LeaderboardResultCount);
        }
        if (__isset.replaceName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReplaceName: ");
          sb.Append(ReplaceName);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetMultiSocialLeaderboardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetMultiSocialLeaderboardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetMultiSocialLeaderboard_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetMultiSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardPageArgs : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _startIndex;
      private int _endIndex;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The index at which to start the page.
      /// </summary>
      public int StartIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      /// <summary>
      /// The index at which to end the page.
      /// </summary>
      public int EndIndex
      {
        get
        {
          return _endIndex;
        }
        set
        {
          __isset.endIndex = true;
          this._endIndex = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool sort;
        public bool startIndex;
        public bool endIndex;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  StartIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  EndIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.sort)
          {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Sort, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.startIndex)
          {
            field.Name = "startIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(StartIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.endIndex)
          {
            field.Name = "endIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(EndIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPage_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.sort)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Sort: ");
          sb.Append(Sort);
        }
        if (__isset.startIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StartIndex: ");
          sb.Append(StartIndex);
        }
        if (__isset.endIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EndIndex: ");
          sb.Append(EndIndex);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardPageResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardPageByVersionArgs : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _startIndex;
      private int _endIndex;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The index at which to start the page.
      /// </summary>
      public int StartIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      /// <summary>
      /// The index at which to end the page.
      /// </summary>
      public int EndIndex
      {
        get
        {
          return _endIndex;
        }
        set
        {
          __isset.endIndex = true;
          this._endIndex = value;
        }
      }

      /// <summary>
      /// The historical version to retrieve.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool sort;
        public bool startIndex;
        public bool endIndex;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPageByVersionArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  StartIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  EndIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.sort)
          {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Sort, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.startIndex)
          {
            field.Name = "startIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(StartIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.endIndex)
          {
            field.Name = "endIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(EndIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.sort)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Sort: ");
          sb.Append(Sort);
        }
        if (__isset.startIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StartIndex: ");
          sb.Append(StartIndex);
        }
        if (__isset.endIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EndIndex: ");
          sb.Append(EndIndex);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardPageByVersionResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardPageByVersionResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardViewArgs : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _beforeCount;
      private int _afterCount;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The count of number of players before the current player to include.
      /// </summary>
      public int BeforeCount
      {
        get
        {
          return _beforeCount;
        }
        set
        {
          __isset.beforeCount = true;
          this._beforeCount = value;
        }
      }

      /// <summary>
      /// The count of number of players after the current player to include.
      /// </summary>
      public int AfterCount
      {
        get
        {
          return _afterCount;
        }
        set
        {
          __isset.afterCount = true;
          this._afterCount = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool sort;
        public bool beforeCount;
        public bool afterCount;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardViewArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  BeforeCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  AfterCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardView_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.sort)
          {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Sort, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.beforeCount)
          {
            field.Name = "beforeCount";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(BeforeCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.afterCount)
          {
            field.Name = "afterCount";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(AfterCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardView_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.sort)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Sort: ");
          sb.Append(Sort);
        }
        if (__isset.beforeCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("BeforeCount: ");
          sb.Append(BeforeCount);
        }
        if (__isset.afterCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AfterCount: ");
          sb.Append(AfterCount);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardViewResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardViewResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardView_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardView_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardViewByVersionArgs : TBase
    {
      private string _leaderboardId;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _beforeCount;
      private int _afterCount;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The id of the leaderboard to retrieve.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The count of number of players before the current player to include.
      /// </summary>
      public int BeforeCount
      {
        get
        {
          return _beforeCount;
        }
        set
        {
          __isset.beforeCount = true;
          this._beforeCount = value;
        }
      }

      /// <summary>
      /// The count of number of players after the current player to include.
      /// </summary>
      public int AfterCount
      {
        get
        {
          return _afterCount;
        }
        set
        {
          __isset.afterCount = true;
          this._afterCount = value;
        }
      }

      /// <summary>
      /// The historial version to retrieve. Use -1 for current leaderboard.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool sort;
        public bool beforeCount;
        public bool afterCount;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardViewByVersionArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  BeforeCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  AfterCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.sort)
          {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Sort, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.beforeCount)
          {
            field.Name = "beforeCount";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(BeforeCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.afterCount)
          {
            field.Name = "afterCount";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(AfterCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.sort)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Sort: ");
          sb.Append(Sort);
        }
        if (__isset.beforeCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("BeforeCount: ");
          sb.Append(BeforeCount);
        }
        if (__isset.afterCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AfterCount: ");
          sb.Append(AfterCount);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardViewByVersionResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardViewByVersionResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardVersionsArgs : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// In_leaderboard identifier.
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardVersionsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardVersions_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardVersions_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardVersionsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardVersionsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardVersions_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardVersions_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGroupSocialLeaderboardArgs : TBase
    {
      private string _leaderboardId;
      private string _groupId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to read
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The group ID
      /// </summary>
      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool groupId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGroupSocialLeaderboardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  GroupId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGroupSocialLeaderboard_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (GroupId != null && __isset.groupId)
          {
            field.Name = "groupId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GroupId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGroupSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (GroupId != null && __isset.groupId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GroupId: ");
          sb.Append(GroupId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGroupSocialLeaderboardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGroupSocialLeaderboardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGroupSocialLeaderboard_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGroupSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_PostScoreToLeaderboardArgs : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to post to
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool clientIndex;
      }

      public SocialLeaderboard_PostScoreToLeaderboardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Score = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_PostScoreToLeaderboard_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.score)
          {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Score, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_PostScoreToLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.score)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Score: ");
          sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_PostScoreToLeaderboardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_PostScoreToLeaderboardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_PostScoreToLeaderboard_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_PostScoreToLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_RemovePlayerScoreArgs : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The version of the leaderboard
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_RemovePlayerScoreArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_RemovePlayerScore_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_RemovePlayerScore_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_RemovePlayerScoreResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_RemovePlayerScoreResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_RemovePlayerScore_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_RemovePlayerScore_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboardArgs : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private Ruyi.SDK.BrainCloudApi.SocialLeaderboardType _leaderboardType;
      private Ruyi.SDK.BrainCloudApi.RotationType _rotationType;
      private long _rotationReset;
      private int _retainedCount;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to post to
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// leaderboard type
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SocialLeaderboardType"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SocialLeaderboardType LeaderboardType
      {
        get
        {
          return _leaderboardType;
        }
        set
        {
          __isset.leaderboardType = true;
          this._leaderboardType = value;
        }
      }

      /// <summary>
      /// Type of rotation
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.RotationType"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.RotationType RotationType
      {
        get
        {
          return _rotationType;
        }
        set
        {
          __isset.rotationType = true;
          this._rotationType = value;
        }
      }

      /// <summary>
      /// Date to reset the leaderboard UTC
      /// </summary>
      public long RotationReset
      {
        get
        {
          return _rotationReset;
        }
        set
        {
          __isset.rotationReset = true;
          this._rotationReset = value;
        }
      }

      /// <summary>
      /// How many rotations to keep
      /// </summary>
      public int RetainedCount
      {
        get
        {
          return _retainedCount;
        }
        set
        {
          __isset.retainedCount = true;
          this._retainedCount = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool leaderboardType;
        public bool rotationType;
        public bool rotationReset;
        public bool retainedCount;
        public bool clientIndex;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Score = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  LeaderboardType = (Ruyi.SDK.BrainCloudApi.SocialLeaderboardType)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  RotationType = (Ruyi.SDK.BrainCloudApi.RotationType)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I64)
                {
                  RotationReset = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.I32)
                {
                  RetainedCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 8:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboard_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.score)
          {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Score, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.leaderboardType)
          {
            field.Name = "leaderboardType";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)LeaderboardType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.rotationType)
          {
            field.Name = "rotationType";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)RotationType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.rotationReset)
          {
            field.Name = "rotationReset";
            field.Type = TType.I64;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RotationReset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.retainedCount)
          {
            field.Name = "retainedCount";
            field.Type = TType.I32;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(RetainedCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 8;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.score)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Score: ");
          sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.leaderboardType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardType: ");
          sb.Append(LeaderboardType);
        }
        if (__isset.rotationType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RotationType: ");
          sb.Append(RotationType);
        }
        if (__isset.rotationReset)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RotationReset: ");
          sb.Append(RotationReset);
        }
        if (__isset.retainedCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RetainedCount: ");
          sb.Append(RetainedCount);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboard_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboardDaysArgs : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private Ruyi.SDK.BrainCloudApi.SocialLeaderboardType _leaderboardType;
      private long _rotationReset;
      private int _retainedCount;
      private int _numDaysToRotate;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard to post to
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// leaderboard type
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SocialLeaderboardType"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SocialLeaderboardType LeaderboardType
      {
        get
        {
          return _leaderboardType;
        }
        set
        {
          __isset.leaderboardType = true;
          this._leaderboardType = value;
        }
      }

      /// <summary>
      /// Date to reset the leaderboard UTC
      /// </summary>
      public long RotationReset
      {
        get
        {
          return _rotationReset;
        }
        set
        {
          __isset.rotationReset = true;
          this._rotationReset = value;
        }
      }

      /// <summary>
      /// How many rotations to keep
      /// </summary>
      public int RetainedCount
      {
        get
        {
          return _retainedCount;
        }
        set
        {
          __isset.retainedCount = true;
          this._retainedCount = value;
        }
      }

      /// <summary>
      /// How many days between each rotation
      /// </summary>
      public int NumDaysToRotate
      {
        get
        {
          return _numDaysToRotate;
        }
        set
        {
          __isset.numDaysToRotate = true;
          this._numDaysToRotate = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool leaderboardType;
        public bool rotationReset;
        public bool retainedCount;
        public bool numDaysToRotate;
        public bool clientIndex;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboardDaysArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Score = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  LeaderboardType = (Ruyi.SDK.BrainCloudApi.SocialLeaderboardType)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I64)
                {
                  RotationReset = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  RetainedCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.I32)
                {
                  NumDaysToRotate = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 8:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.score)
          {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Score, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.leaderboardType)
          {
            field.Name = "leaderboardType";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)LeaderboardType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.rotationReset)
          {
            field.Name = "rotationReset";
            field.Type = TType.I64;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RotationReset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.retainedCount)
          {
            field.Name = "retainedCount";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(RetainedCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.numDaysToRotate)
          {
            field.Name = "numDaysToRotate";
            field.Type = TType.I32;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(NumDaysToRotate, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 8;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.score)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Score: ");
          sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.leaderboardType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardType: ");
          sb.Append(LeaderboardType);
        }
        if (__isset.rotationReset)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RotationReset: ");
          sb.Append(RotationReset);
        }
        if (__isset.retainedCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RetainedCount: ");
          sb.Append(RetainedCount);
        }
        if (__isset.numDaysToRotate)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NumDaysToRotate: ");
          sb.Append(NumDaysToRotate);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_PostScoreToDynamicLeaderboardDaysResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_PostScoreToDynamicLeaderboardDaysResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetPlayersSocialLeaderboardArgs : TBase
    {
      private string _leaderboardId;
      private List<string> _profileIds;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The IDs of the players
      /// </summary>
      public List<string> ProfileIds
      {
        get
        {
          return _profileIds;
        }
        set
        {
          __isset.profileIds = true;
          this._profileIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool profileIds;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetPlayersSocialLeaderboardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.List)
                {
                  {
                    ProfileIds = new List<string>();
                    TList _list67 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i68 = 0; _i68 < _list67.Count; ++_i68)
                    {
                      string _elem69;
                      _elem69 = await iprot.ReadStringAsync(cancellationToken);
                      ProfileIds.Add(_elem69);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetPlayersSocialLeaderboard_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ProfileIds != null && __isset.profileIds)
          {
            field.Name = "profileIds";
            field.Type = TType.List;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, ProfileIds.Count), cancellationToken);
              foreach (string _iter70 in ProfileIds)
              {
                await oprot.WriteStringAsync(_iter70, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetPlayersSocialLeaderboard_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (ProfileIds != null && __isset.profileIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ProfileIds: ");
          sb.Append(ProfileIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetPlayersSocialLeaderboardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetPlayersSocialLeaderboardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetPlayersSocialLeaderboard_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetPlayersSocialLeaderboard_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_ListLeaderboardsArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public SocialLeaderboard_ListLeaderboardsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_ListLeaderboards_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_ListLeaderboards_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_ListLeaderboardsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_ListLeaderboardsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_ListLeaderboards_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_ListLeaderboards_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCountArgs : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCountArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCount_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCount_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCountResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCountResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCount_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCount_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionArgs : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The version of the leaderboard
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersionResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetPlayerScoreArgs : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The ID of the leaderboard
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The version of the leaderboard. Use -1 for current.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetPlayerScoreArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetPlayerScore_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetPlayerScore_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetPlayerScoreResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetPlayerScoreResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetPlayerScore_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetPlayerScore_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetPlayerScoresFromLeaderboardsArgs : TBase
    {
      private List<string> _leaderboardIds;
      private int _clientIndex;

      /// <summary>
      /// A collection of leaderboardIds to retrieve scores from
      /// </summary>
      public List<string> LeaderboardIds
      {
        get
        {
          return _leaderboardIds;
        }
        set
        {
          __isset.leaderboardIds = true;
          this._leaderboardIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardIds;
        public bool clientIndex;
      }

      public SocialLeaderboard_GetPlayerScoresFromLeaderboardsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List)
                {
                  {
                    LeaderboardIds = new List<string>();
                    TList _list71 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i72 = 0; _i72 < _list71.Count; ++_i72)
                    {
                      string _elem73;
                      _elem73 = await iprot.ReadStringAsync(cancellationToken);
                      LeaderboardIds.Add(_elem73);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetPlayerScoresFromLeaderboards_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardIds != null && __isset.leaderboardIds)
          {
            field.Name = "leaderboardIds";
            field.Type = TType.List;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, LeaderboardIds.Count), cancellationToken);
              foreach (string _iter74 in LeaderboardIds)
              {
                await oprot.WriteStringAsync(_iter74, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetPlayerScoresFromLeaderboards_args(");
        bool __first = true;
        if (LeaderboardIds != null && __isset.leaderboardIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardIds: ");
          sb.Append(LeaderboardIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialLeaderboard_GetPlayerScoresFromLeaderboardsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialLeaderboard_GetPlayerScoresFromLeaderboardsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialLeaderboard_GetPlayerScoresFromLeaderboards_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialLeaderboard_GetPlayerScoresFromLeaderboards_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Time_ReadServerTimeArgs : TBase
    {
      private int _clientIndex;

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool clientIndex;
      }

      public Time_ReadServerTimeArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Time_ReadServerTime_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Time_ReadServerTime_args(");
        bool __first = true;
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Time_ReadServerTimeResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Time_ReadServerTimeResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Time_ReadServerTime_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Time_ReadServerTime_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_ClaimTournamentRewardArgs : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Version of the tournament to claim rewards for.
      /// Use -1 for the latest version.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public Tournament_ClaimTournamentRewardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_ClaimTournamentReward_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_ClaimTournamentReward_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_ClaimTournamentRewardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_ClaimTournamentRewardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_ClaimTournamentReward_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_ClaimTournamentReward_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_GetTournamentStatusArgs : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Version of the tournament. Use -1 for the latest version.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public Tournament_GetTournamentStatusArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_GetTournamentStatus_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_GetTournamentStatus_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_GetTournamentStatusResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_GetTournamentStatusResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_GetTournamentStatus_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_GetTournamentStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_JoinTournamentArgs : TBase
    {
      private string _leaderboardId;
      private string _tournamentCode;
      private long _initialScore;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Tournament to join
      /// </summary>
      public string TournamentCode
      {
        get
        {
          return _tournamentCode;
        }
        set
        {
          __isset.tournamentCode = true;
          this._tournamentCode = value;
        }
      }

      /// <summary>
      /// The initial score for players first joining a tournament
      /// Usually 0, unless leaderboard is LOW_VALUE
      /// </summary>
      public long InitialScore
      {
        get
        {
          return _initialScore;
        }
        set
        {
          __isset.initialScore = true;
          this._initialScore = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool tournamentCode;
        public bool initialScore;
        public bool clientIndex;
      }

      public Tournament_JoinTournamentArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  TournamentCode = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  InitialScore = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_JoinTournament_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (TournamentCode != null && __isset.tournamentCode)
          {
            field.Name = "tournamentCode";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TournamentCode, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.initialScore)
          {
            field.Name = "initialScore";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(InitialScore, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_JoinTournament_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (TournamentCode != null && __isset.tournamentCode)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TournamentCode: ");
          sb.Append(TournamentCode);
        }
        if (__isset.initialScore)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("InitialScore: ");
          sb.Append(InitialScore);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_JoinTournamentResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_JoinTournamentResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_JoinTournament_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_JoinTournament_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_LeaveTournamentArgs : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public Tournament_LeaveTournamentArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_LeaveTournament_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_LeaveTournament_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_LeaveTournamentResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_LeaveTournamentResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_LeaveTournament_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_LeaveTournament_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_PostTournamentScoreArgs : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private long _roundStartedTime;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      /// <summary>
      /// Optional data attached to the leaderboard entry
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// Time the user started the match resulting in the score
      /// being posted.
      /// </summary>
      public long RoundStartedTime
      {
        get
        {
          return _roundStartedTime;
        }
        set
        {
          __isset.roundStartedTime = true;
          this._roundStartedTime = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool roundStartedTime;
        public bool clientIndex;
      }

      public Tournament_PostTournamentScoreArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Score = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I64)
                {
                  RoundStartedTime = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_PostTournamentScore_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.score)
          {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Score, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.roundStartedTime)
          {
            field.Name = "roundStartedTime";
            field.Type = TType.I64;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RoundStartedTime, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_PostTournamentScore_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.score)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Score: ");
          sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.roundStartedTime)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RoundStartedTime: ");
          sb.Append(RoundStartedTime);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_PostTournamentScoreResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_PostTournamentScoreResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_PostTournamentScore_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_PostTournamentScore_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_PostTournamentScoreWithResultsArgs : TBase
    {
      private string _leaderboardId;
      private long _score;
      private string _jsonData;
      private long _roundStartedTime;
      private Ruyi.SDK.BrainCloudApi.SortOrder _sort;
      private int _beforeCount;
      private int _afterCount;
      private long _initialScore;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// The score to post
      /// </summary>
      public long Score
      {
        get
        {
          return _score;
        }
        set
        {
          __isset.score = true;
          this._score = value;
        }
      }

      /// <summary>
      /// Optional data attached to the leaderboard entry
      /// </summary>
      public string JsonData
      {
        get
        {
          return _jsonData;
        }
        set
        {
          __isset.jsonData = true;
          this._jsonData = value;
        }
      }

      /// <summary>
      /// Time the user started the match resulting in the score
      /// being posted.
      /// </summary>
      public long RoundStartedTime
      {
        get
        {
          return _roundStartedTime;
        }
        set
        {
          __isset.roundStartedTime = true;
          this._roundStartedTime = value;
        }
      }

      /// <summary>
      /// Sort key Sort order of page.
      /// 
      /// <seealso cref="Ruyi.SDK.BrainCloudApi.SortOrder"/>
      /// </summary>
      public Ruyi.SDK.BrainCloudApi.SortOrder Sort
      {
        get
        {
          return _sort;
        }
        set
        {
          __isset.sort = true;
          this._sort = value;
        }
      }

      /// <summary>
      /// The count of number of players before the current player to include.
      /// </summary>
      public int BeforeCount
      {
        get
        {
          return _beforeCount;
        }
        set
        {
          __isset.beforeCount = true;
          this._beforeCount = value;
        }
      }

      /// <summary>
      /// The count of number of players after the current player to include.
      /// </summary>
      public int AfterCount
      {
        get
        {
          return _afterCount;
        }
        set
        {
          __isset.afterCount = true;
          this._afterCount = value;
        }
      }

      /// <summary>
      /// The initial score for players first joining a tournament
      /// Usually 0, unless leaderboard is LOW_VALUE
      /// </summary>
      public long InitialScore
      {
        get
        {
          return _initialScore;
        }
        set
        {
          __isset.initialScore = true;
          this._initialScore = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool score;
        public bool jsonData;
        public bool roundStartedTime;
        public bool sort;
        public bool beforeCount;
        public bool afterCount;
        public bool initialScore;
        public bool clientIndex;
      }

      public Tournament_PostTournamentScoreWithResultsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Score = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  JsonData = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I64)
                {
                  RoundStartedTime = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.I32)
                {
                  Sort = (Ruyi.SDK.BrainCloudApi.SortOrder)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  BeforeCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 7:
                if (field.Type == TType.I32)
                {
                  AfterCount = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 8:
                if (field.Type == TType.I64)
                {
                  InitialScore = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 9:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_PostTournamentScoreWithResults_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.score)
          {
            field.Name = "score";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Score, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (JsonData != null && __isset.jsonData)
          {
            field.Name = "jsonData";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(JsonData, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.roundStartedTime)
          {
            field.Name = "roundStartedTime";
            field.Type = TType.I64;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RoundStartedTime, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.sort)
          {
            field.Name = "sort";
            field.Type = TType.I32;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)Sort, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.beforeCount)
          {
            field.Name = "beforeCount";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(BeforeCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.afterCount)
          {
            field.Name = "afterCount";
            field.Type = TType.I32;
            field.ID = 7;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(AfterCount, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.initialScore)
          {
            field.Name = "initialScore";
            field.Type = TType.I64;
            field.ID = 8;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(InitialScore, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 9;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_PostTournamentScoreWithResults_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.score)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Score: ");
          sb.Append(Score);
        }
        if (JsonData != null && __isset.jsonData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("JsonData: ");
          sb.Append(JsonData);
        }
        if (__isset.roundStartedTime)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RoundStartedTime: ");
          sb.Append(RoundStartedTime);
        }
        if (__isset.sort)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Sort: ");
          sb.Append(Sort);
        }
        if (__isset.beforeCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("BeforeCount: ");
          sb.Append(BeforeCount);
        }
        if (__isset.afterCount)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AfterCount: ");
          sb.Append(AfterCount);
        }
        if (__isset.initialScore)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("InitialScore: ");
          sb.Append(InitialScore);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_PostTournamentScoreWithResultsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_PostTournamentScoreWithResultsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_PostTournamentScoreWithResults_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_PostTournamentScoreWithResults_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_ViewCurrentRewardArgs : TBase
    {
      private string _leaderboardId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool clientIndex;
      }

      public Tournament_ViewCurrentRewardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_ViewCurrentReward_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_ViewCurrentReward_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_ViewCurrentRewardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_ViewCurrentRewardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_ViewCurrentReward_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_ViewCurrentReward_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_ViewRewardArgs : TBase
    {
      private string _leaderboardId;
      private int _versionId;
      private int _clientIndex;

      /// <summary>
      /// The leaderboard for the tournament
      /// </summary>
      public string LeaderboardId
      {
        get
        {
          return _leaderboardId;
        }
        set
        {
          __isset.leaderboardId = true;
          this._leaderboardId = value;
        }
      }

      /// <summary>
      /// Version of the tournament. Use -1 for the latest version.
      /// </summary>
      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          this._versionId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool leaderboardId;
        public bool versionId;
        public bool clientIndex;
      }

      public Tournament_ViewRewardArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  LeaderboardId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  VersionId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_ViewReward_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (LeaderboardId != null && __isset.leaderboardId)
          {
            field.Name = "leaderboardId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(LeaderboardId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.versionId)
          {
            field.Name = "versionId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(VersionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_ViewReward_args(");
        bool __first = true;
        if (LeaderboardId != null && __isset.leaderboardId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("LeaderboardId: ");
          sb.Append(LeaderboardId);
        }
        if (__isset.versionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("VersionId: ");
          sb.Append(VersionId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Tournament_ViewRewardResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Tournament_ViewRewardResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Tournament_ViewReward_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Tournament_ViewReward_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Patch_GetGameManifestArgs : TBase
    {
      private string _gameId;
      private int _clientIndex;

      public string GameId
      {
        get
        {
          return _gameId;
        }
        set
        {
          __isset.gameId = true;
          this._gameId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool gameId;
        public bool clientIndex;
      }

      public Patch_GetGameManifestArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  GameId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Patch_GetGameManifest_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (GameId != null && __isset.gameId)
          {
            field.Name = "gameId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(GameId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Patch_GetGameManifest_args(");
        bool __first = true;
        if (GameId != null && __isset.gameId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GameId: ");
          sb.Append(GameId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Patch_GetGameManifestResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Patch_GetGameManifestResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Patch_GetGameManifest_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Patch_GetGameManifest_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareVideoArgs : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareVideoArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Resource = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    Tagged = new List<string>();
                    TList _list75 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i76 = 0; _i76 < _list75.Count; ++_i76)
                    {
                      string _elem77;
                      _elem77 = await iprot.ReadStringAsync(cancellationToken);
                      Tagged.Add(_elem77);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    Show = new List<string>();
                    TList _list78 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i79 = 0; _i79 < _list78.Count; ++_i79)
                    {
                      string _elem80;
                      _elem80 = await iprot.ReadStringAsync(cancellationToken);
                      Show.Add(_elem80);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.List)
                {
                  {
                    Block = new List<string>();
                    TList _list81 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i82 = 0; _i82 < _list81.Count; ++_i82)
                    {
                      string _elem83;
                      _elem83 = await iprot.ReadStringAsync(cancellationToken);
                      Block.Add(_elem83);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareVideo_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Resource != null && __isset.resource)
          {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Resource, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tagged != null && __isset.tagged)
          {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tagged.Count), cancellationToken);
              foreach (string _iter84 in Tagged)
              {
                await oprot.WriteStringAsync(_iter84, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Show != null && __isset.show)
          {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Show.Count), cancellationToken);
              foreach (string _iter85 in Show)
              {
                await oprot.WriteStringAsync(_iter85, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Block != null && __isset.block)
          {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Block.Count), cancellationToken);
              foreach (string _iter86 in Block)
              {
                await oprot.WriteStringAsync(_iter86, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareVideo_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Resource: ");
          sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tagged: ");
          sb.Append(Tagged);
        }
        if (Show != null && __isset.show)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Show: ");
          sb.Append(Show);
        }
        if (Block != null && __isset.block)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Block: ");
          sb.Append(Block);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareVideoResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ShareVideoResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareVideo_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareVideo_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareScreenshotArgs : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareScreenshotArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Resource = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    Tagged = new List<string>();
                    TList _list87 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i88 = 0; _i88 < _list87.Count; ++_i88)
                    {
                      string _elem89;
                      _elem89 = await iprot.ReadStringAsync(cancellationToken);
                      Tagged.Add(_elem89);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    Show = new List<string>();
                    TList _list90 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i91 = 0; _i91 < _list90.Count; ++_i91)
                    {
                      string _elem92;
                      _elem92 = await iprot.ReadStringAsync(cancellationToken);
                      Show.Add(_elem92);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.List)
                {
                  {
                    Block = new List<string>();
                    TList _list93 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i94 = 0; _i94 < _list93.Count; ++_i94)
                    {
                      string _elem95;
                      _elem95 = await iprot.ReadStringAsync(cancellationToken);
                      Block.Add(_elem95);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareScreenshot_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Resource != null && __isset.resource)
          {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Resource, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tagged != null && __isset.tagged)
          {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tagged.Count), cancellationToken);
              foreach (string _iter96 in Tagged)
              {
                await oprot.WriteStringAsync(_iter96, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Show != null && __isset.show)
          {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Show.Count), cancellationToken);
              foreach (string _iter97 in Show)
              {
                await oprot.WriteStringAsync(_iter97, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Block != null && __isset.block)
          {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Block.Count), cancellationToken);
              foreach (string _iter98 in Block)
              {
                await oprot.WriteStringAsync(_iter98, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareScreenshot_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Resource: ");
          sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tagged: ");
          sb.Append(Tagged);
        }
        if (Show != null && __isset.show)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Show: ");
          sb.Append(Show);
        }
        if (Block != null && __isset.block)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Block: ");
          sb.Append(Block);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareScreenshotResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ShareScreenshotResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareScreenshot_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareScreenshot_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareAchievementArgs : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareAchievementArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Resource = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    Tagged = new List<string>();
                    TList _list99 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i100 = 0; _i100 < _list99.Count; ++_i100)
                    {
                      string _elem101;
                      _elem101 = await iprot.ReadStringAsync(cancellationToken);
                      Tagged.Add(_elem101);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    Show = new List<string>();
                    TList _list102 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i103 = 0; _i103 < _list102.Count; ++_i103)
                    {
                      string _elem104;
                      _elem104 = await iprot.ReadStringAsync(cancellationToken);
                      Show.Add(_elem104);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.List)
                {
                  {
                    Block = new List<string>();
                    TList _list105 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i106 = 0; _i106 < _list105.Count; ++_i106)
                    {
                      string _elem107;
                      _elem107 = await iprot.ReadStringAsync(cancellationToken);
                      Block.Add(_elem107);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareAchievement_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Resource != null && __isset.resource)
          {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Resource, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tagged != null && __isset.tagged)
          {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tagged.Count), cancellationToken);
              foreach (string _iter108 in Tagged)
              {
                await oprot.WriteStringAsync(_iter108, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Show != null && __isset.show)
          {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Show.Count), cancellationToken);
              foreach (string _iter109 in Show)
              {
                await oprot.WriteStringAsync(_iter109, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Block != null && __isset.block)
          {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Block.Count), cancellationToken);
              foreach (string _iter110 in Block)
              {
                await oprot.WriteStringAsync(_iter110, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareAchievement_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Resource: ");
          sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tagged: ");
          sb.Append(Tagged);
        }
        if (Show != null && __isset.show)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Show: ");
          sb.Append(Show);
        }
        if (Block != null && __isset.block)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Block: ");
          sb.Append(Block);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareAchievementResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ShareAchievementResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareAchievement_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareAchievement_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareAppArgs : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareAppArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Resource = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    Tagged = new List<string>();
                    TList _list111 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i112 = 0; _i112 < _list111.Count; ++_i112)
                    {
                      string _elem113;
                      _elem113 = await iprot.ReadStringAsync(cancellationToken);
                      Tagged.Add(_elem113);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    Show = new List<string>();
                    TList _list114 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i115 = 0; _i115 < _list114.Count; ++_i115)
                    {
                      string _elem116;
                      _elem116 = await iprot.ReadStringAsync(cancellationToken);
                      Show.Add(_elem116);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.List)
                {
                  {
                    Block = new List<string>();
                    TList _list117 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i118 = 0; _i118 < _list117.Count; ++_i118)
                    {
                      string _elem119;
                      _elem119 = await iprot.ReadStringAsync(cancellationToken);
                      Block.Add(_elem119);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareApp_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Resource != null && __isset.resource)
          {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Resource, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tagged != null && __isset.tagged)
          {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tagged.Count), cancellationToken);
              foreach (string _iter120 in Tagged)
              {
                await oprot.WriteStringAsync(_iter120, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Show != null && __isset.show)
          {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Show.Count), cancellationToken);
              foreach (string _iter121 in Show)
              {
                await oprot.WriteStringAsync(_iter121, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Block != null && __isset.block)
          {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Block.Count), cancellationToken);
              foreach (string _iter122 in Block)
              {
                await oprot.WriteStringAsync(_iter122, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareApp_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Resource: ");
          sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tagged: ");
          sb.Append(Tagged);
        }
        if (Show != null && __isset.show)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Show: ");
          sb.Append(Show);
        }
        if (Block != null && __isset.block)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Block: ");
          sb.Append(Block);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareAppResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ShareAppResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareApp_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareApp_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareChannelArgs : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareChannelArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Resource = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    Tagged = new List<string>();
                    TList _list123 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i124 = 0; _i124 < _list123.Count; ++_i124)
                    {
                      string _elem125;
                      _elem125 = await iprot.ReadStringAsync(cancellationToken);
                      Tagged.Add(_elem125);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    Show = new List<string>();
                    TList _list126 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i127 = 0; _i127 < _list126.Count; ++_i127)
                    {
                      string _elem128;
                      _elem128 = await iprot.ReadStringAsync(cancellationToken);
                      Show.Add(_elem128);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.List)
                {
                  {
                    Block = new List<string>();
                    TList _list129 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i130 = 0; _i130 < _list129.Count; ++_i130)
                    {
                      string _elem131;
                      _elem131 = await iprot.ReadStringAsync(cancellationToken);
                      Block.Add(_elem131);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareChannel_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Resource != null && __isset.resource)
          {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Resource, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tagged != null && __isset.tagged)
          {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tagged.Count), cancellationToken);
              foreach (string _iter132 in Tagged)
              {
                await oprot.WriteStringAsync(_iter132, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Show != null && __isset.show)
          {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Show.Count), cancellationToken);
              foreach (string _iter133 in Show)
              {
                await oprot.WriteStringAsync(_iter133, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Block != null && __isset.block)
          {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Block.Count), cancellationToken);
              foreach (string _iter134 in Block)
              {
                await oprot.WriteStringAsync(_iter134, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareChannel_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Resource: ");
          sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tagged: ");
          sb.Append(Tagged);
        }
        if (Show != null && __isset.show)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Show: ");
          sb.Append(Show);
        }
        if (Block != null && __isset.block)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Block: ");
          sb.Append(Block);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareChannelResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ShareChannelResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareChannel_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareChannel_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareLinkArgs : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareLinkArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Resource = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    Tagged = new List<string>();
                    TList _list135 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i136 = 0; _i136 < _list135.Count; ++_i136)
                    {
                      string _elem137;
                      _elem137 = await iprot.ReadStringAsync(cancellationToken);
                      Tagged.Add(_elem137);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    Show = new List<string>();
                    TList _list138 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i139 = 0; _i139 < _list138.Count; ++_i139)
                    {
                      string _elem140;
                      _elem140 = await iprot.ReadStringAsync(cancellationToken);
                      Show.Add(_elem140);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.List)
                {
                  {
                    Block = new List<string>();
                    TList _list141 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i142 = 0; _i142 < _list141.Count; ++_i142)
                    {
                      string _elem143;
                      _elem143 = await iprot.ReadStringAsync(cancellationToken);
                      Block.Add(_elem143);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareLink_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Resource != null && __isset.resource)
          {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Resource, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tagged != null && __isset.tagged)
          {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tagged.Count), cancellationToken);
              foreach (string _iter144 in Tagged)
              {
                await oprot.WriteStringAsync(_iter144, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Show != null && __isset.show)
          {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Show.Count), cancellationToken);
              foreach (string _iter145 in Show)
              {
                await oprot.WriteStringAsync(_iter145, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Block != null && __isset.block)
          {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Block.Count), cancellationToken);
              foreach (string _iter146 in Block)
              {
                await oprot.WriteStringAsync(_iter146, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareLink_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Resource: ");
          sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tagged: ");
          sb.Append(Tagged);
        }
        if (Show != null && __isset.show)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Show: ");
          sb.Append(Show);
        }
        if (Block != null && __isset.block)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Block: ");
          sb.Append(Block);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareLinkResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ShareLinkResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareLink_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareLink_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareGameGuideArgs : TBase
    {
      private int _timestamp;
      private string _resource;
      private List<string> _tagged;
      private List<string> _show;
      private List<string> _block;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string Resource
      {
        get
        {
          return _resource;
        }
        set
        {
          __isset.resource = true;
          this._resource = value;
        }
      }

      public List<string> Tagged
      {
        get
        {
          return _tagged;
        }
        set
        {
          __isset.tagged = true;
          this._tagged = value;
        }
      }

      public List<string> Show
      {
        get
        {
          return _show;
        }
        set
        {
          __isset.show = true;
          this._show = value;
        }
      }

      public List<string> Block
      {
        get
        {
          return _block;
        }
        set
        {
          __isset.block = true;
          this._block = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool resource;
        public bool tagged;
        public bool show;
        public bool block;
        public bool clientIndex;
      }

      public SocialFeed_ShareGameGuideArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Resource = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    Tagged = new List<string>();
                    TList _list147 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i148 = 0; _i148 < _list147.Count; ++_i148)
                    {
                      string _elem149;
                      _elem149 = await iprot.ReadStringAsync(cancellationToken);
                      Tagged.Add(_elem149);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    Show = new List<string>();
                    TList _list150 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i151 = 0; _i151 < _list150.Count; ++_i151)
                    {
                      string _elem152;
                      _elem152 = await iprot.ReadStringAsync(cancellationToken);
                      Show.Add(_elem152);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.List)
                {
                  {
                    Block = new List<string>();
                    TList _list153 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i154 = 0; _i154 < _list153.Count; ++_i154)
                    {
                      string _elem155;
                      _elem155 = await iprot.ReadStringAsync(cancellationToken);
                      Block.Add(_elem155);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareGameGuide_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Resource != null && __isset.resource)
          {
            field.Name = "resource";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Resource, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tagged != null && __isset.tagged)
          {
            field.Name = "tagged";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tagged.Count), cancellationToken);
              foreach (string _iter156 in Tagged)
              {
                await oprot.WriteStringAsync(_iter156, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Show != null && __isset.show)
          {
            field.Name = "show";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Show.Count), cancellationToken);
              foreach (string _iter157 in Show)
              {
                await oprot.WriteStringAsync(_iter157, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Block != null && __isset.block)
          {
            field.Name = "block";
            field.Type = TType.List;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Block.Count), cancellationToken);
              foreach (string _iter158 in Block)
              {
                await oprot.WriteStringAsync(_iter158, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareGameGuide_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (Resource != null && __isset.resource)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Resource: ");
          sb.Append(Resource);
        }
        if (Tagged != null && __isset.tagged)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tagged: ");
          sb.Append(Tagged);
        }
        if (Show != null && __isset.show)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Show: ");
          sb.Append(Show);
        }
        if (Block != null && __isset.block)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Block: ");
          sb.Append(Block);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ShareGameGuideResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ShareGameGuideResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ShareGameGuide_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ShareGameGuide_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadSocialFeedArgs : TBase
    {
      private int _skip;
      private int _limit;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool skip;
        public bool limit;
        public bool clientIndex;
      }

      public SocialFeed_ReadSocialFeedArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Skip = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Limit = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadSocialFeed_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.skip)
          {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Skip, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.limit)
          {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Limit, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadSocialFeed_args(");
        bool __first = true;
        if (__isset.skip)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Skip: ");
          sb.Append(Skip);
        }
        if (__isset.limit)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Limit: ");
          sb.Append(Limit);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadSocialFeedResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ReadSocialFeedResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadSocialFeed_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadSocialFeed_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadFilteredSocialFeedArgs : TBase
    {
      private int _skip;
      private int _limit;
      private List<string> _playerIds;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public List<string> PlayerIds
      {
        get
        {
          return _playerIds;
        }
        set
        {
          __isset.playerIds = true;
          this._playerIds = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool skip;
        public bool limit;
        public bool playerIds;
        public bool clientIndex;
      }

      public SocialFeed_ReadFilteredSocialFeedArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Skip = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Limit = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    PlayerIds = new List<string>();
                    TList _list159 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i160 = 0; _i160 < _list159.Count; ++_i160)
                    {
                      string _elem161;
                      _elem161 = await iprot.ReadStringAsync(cancellationToken);
                      PlayerIds.Add(_elem161);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadFilteredSocialFeed_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.skip)
          {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Skip, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.limit)
          {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Limit, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (PlayerIds != null && __isset.playerIds)
          {
            field.Name = "playerIds";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, PlayerIds.Count), cancellationToken);
              foreach (string _iter162 in PlayerIds)
              {
                await oprot.WriteStringAsync(_iter162, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadFilteredSocialFeed_args(");
        bool __first = true;
        if (__isset.skip)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Skip: ");
          sb.Append(Skip);
        }
        if (__isset.limit)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Limit: ");
          sb.Append(Limit);
        }
        if (PlayerIds != null && __isset.playerIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerIds: ");
          sb.Append(PlayerIds);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadFilteredSocialFeedResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ReadFilteredSocialFeedResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadFilteredSocialFeed_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadFilteredSocialFeed_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadFriendsSocialFeedArgs : TBase
    {
      private int _skip;
      private int _limit;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool skip;
        public bool limit;
        public bool clientIndex;
      }

      public SocialFeed_ReadFriendsSocialFeedArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Skip = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Limit = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadFriendsSocialFeed_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.skip)
          {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Skip, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.limit)
          {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Limit, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadFriendsSocialFeed_args(");
        bool __first = true;
        if (__isset.skip)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Skip: ");
          sb.Append(Skip);
        }
        if (__isset.limit)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Limit: ");
          sb.Append(Limit);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadFriendsSocialFeedResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ReadFriendsSocialFeedResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadFriendsSocialFeed_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadFriendsSocialFeed_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_PostCommentArgs : TBase
    {
      private int _timestamp;
      private string _parentId;
      private string _content;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public string Content
      {
        get
        {
          return _content;
        }
        set
        {
          __isset.content = true;
          this._content = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool parentId;
        public bool content;
        public bool clientIndex;
      }

      public SocialFeed_PostCommentArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ParentId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Content = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_PostComment_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParentId != null && __isset.parentId)
          {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParentId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Content != null && __isset.content)
          {
            field.Name = "content";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Content, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_PostComment_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (ParentId != null && __isset.parentId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParentId: ");
          sb.Append(ParentId);
        }
        if (Content != null && __isset.content)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Content: ");
          sb.Append(Content);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_PostCommentResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_PostCommentResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_PostComment_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_PostComment_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_PostCommentReplyArgs : TBase
    {
      private int _timestamp;
      private string _parentId;
      private string _content;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public string Content
      {
        get
        {
          return _content;
        }
        set
        {
          __isset.content = true;
          this._content = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool parentId;
        public bool content;
        public bool clientIndex;
      }

      public SocialFeed_PostCommentReplyArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ParentId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Content = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_PostCommentReply_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParentId != null && __isset.parentId)
          {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParentId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Content != null && __isset.content)
          {
            field.Name = "content";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Content, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_PostCommentReply_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (ParentId != null && __isset.parentId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParentId: ");
          sb.Append(ParentId);
        }
        if (Content != null && __isset.content)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Content: ");
          sb.Append(Content);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_PostCommentReplyResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_PostCommentReplyResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_PostCommentReply_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_PostCommentReply_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadCommentsArgs : TBase
    {
      private int _skip;
      private int _limit;
      private string _parentId;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool skip;
        public bool limit;
        public bool parentId;
        public bool clientIndex;
      }

      public SocialFeed_ReadCommentsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Skip = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Limit = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  ParentId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadComments_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.skip)
          {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Skip, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.limit)
          {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Limit, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParentId != null && __isset.parentId)
          {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParentId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadComments_args(");
        bool __first = true;
        if (__isset.skip)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Skip: ");
          sb.Append(Skip);
        }
        if (__isset.limit)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Limit: ");
          sb.Append(Limit);
        }
        if (ParentId != null && __isset.parentId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParentId: ");
          sb.Append(ParentId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadCommentsResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ReadCommentsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadComments_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadComments_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadCommentRepliesArgs : TBase
    {
      private int _skip;
      private int _limit;
      private string _parentId;
      private int _clientIndex;

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public string ParentId
      {
        get
        {
          return _parentId;
        }
        set
        {
          __isset.parentId = true;
          this._parentId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool skip;
        public bool limit;
        public bool parentId;
        public bool clientIndex;
      }

      public SocialFeed_ReadCommentRepliesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Skip = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Limit = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  ParentId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadCommentReplies_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.skip)
          {
            field.Name = "skip";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Skip, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.limit)
          {
            field.Name = "limit";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Limit, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParentId != null && __isset.parentId)
          {
            field.Name = "parentId";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParentId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadCommentReplies_args(");
        bool __first = true;
        if (__isset.skip)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Skip: ");
          sb.Append(Skip);
        }
        if (__isset.limit)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Limit: ");
          sb.Append(Limit);
        }
        if (ParentId != null && __isset.parentId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParentId: ");
          sb.Append(ParentId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_ReadCommentRepliesResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_ReadCommentRepliesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_ReadCommentReplies_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_ReadCommentReplies_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_LikeCommentArgs : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_LikeCommentArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SocialFeedId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_LikeComment_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId)
          {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SocialFeedId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_LikeComment_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SocialFeedId: ");
          sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_LikeCommentResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_LikeCommentResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_LikeComment_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_LikeComment_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_LikeActivityArgs : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_LikeActivityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SocialFeedId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_LikeActivity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId)
          {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SocialFeedId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_LikeActivity_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SocialFeedId: ");
          sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_LikeActivityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_LikeActivityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_LikeActivity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_LikeActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnlikeCommentArgs : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_UnlikeCommentArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SocialFeedId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnlikeComment_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId)
          {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SocialFeedId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnlikeComment_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SocialFeedId: ");
          sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnlikeCommentResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_UnlikeCommentResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnlikeComment_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnlikeComment_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnlikeActivityArgs : TBase
    {
      private string _socialFeedId;
      private int _clientIndex;

      public string SocialFeedId
      {
        get
        {
          return _socialFeedId;
        }
        set
        {
          __isset.socialFeedId = true;
          this._socialFeedId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool socialFeedId;
        public bool clientIndex;
      }

      public SocialFeed_UnlikeActivityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  SocialFeedId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnlikeActivity_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (SocialFeedId != null && __isset.socialFeedId)
          {
            field.Name = "socialFeedId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(SocialFeedId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnlikeActivity_args(");
        bool __first = true;
        if (SocialFeedId != null && __isset.socialFeedId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SocialFeedId: ");
          sb.Append(SocialFeedId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnlikeActivityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_UnlikeActivityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnlikeActivity_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnlikeActivity_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_SetFeedVisibilityArgs : TBase
    {
      private string _visibility;
      private int _clientIndex;

      public string Visibility
      {
        get
        {
          return _visibility;
        }
        set
        {
          __isset.visibility = true;
          this._visibility = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool visibility;
        public bool clientIndex;
      }

      public SocialFeed_SetFeedVisibilityArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Visibility = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_SetFeedVisibility_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Visibility != null && __isset.visibility)
          {
            field.Name = "visibility";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Visibility, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_SetFeedVisibility_args(");
        bool __first = true;
        if (Visibility != null && __isset.visibility)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Visibility: ");
          sb.Append(Visibility);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_SetFeedVisibilityResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_SetFeedVisibilityResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_SetFeedVisibility_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_SetFeedVisibility_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_BlockPlayerArgs : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_BlockPlayerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_BlockPlayer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlayerId != null && __isset.playerId)
          {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_BlockPlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerId: ");
          sb.Append(PlayerId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_BlockPlayerResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_BlockPlayerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_BlockPlayer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_BlockPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_HidePlayerArgs : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_HidePlayerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_HidePlayer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlayerId != null && __isset.playerId)
          {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_HidePlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerId: ");
          sb.Append(PlayerId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_HidePlayerResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_HidePlayerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_HidePlayer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_HidePlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnblockPlayerArgs : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_UnblockPlayerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnblockPlayer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlayerId != null && __isset.playerId)
          {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnblockPlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerId: ");
          sb.Append(PlayerId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnblockPlayerResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_UnblockPlayerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnblockPlayer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnblockPlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnhidePlayerArgs : TBase
    {
      private string _playerId;
      private int _clientIndex;

      public string PlayerId
      {
        get
        {
          return _playerId;
        }
        set
        {
          __isset.playerId = true;
          this._playerId = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool playerId;
        public bool clientIndex;
      }

      public SocialFeed_UnhidePlayerArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  PlayerId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnhidePlayer_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (PlayerId != null && __isset.playerId)
          {
            field.Name = "playerId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(PlayerId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnhidePlayer_args(");
        bool __first = true;
        if (PlayerId != null && __isset.playerId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PlayerId: ");
          sb.Append(PlayerId);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SocialFeed_UnhidePlayerResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SocialFeed_UnhidePlayerResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SocialFeed_UnhidePlayer_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SocialFeed_UnhidePlayer_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_StartTelemetrySessionArgs : TBase
    {
      private int _timestamp;
      private int _clientIndex;

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timestamp;
        public bool clientIndex;
      }

      public Telemetry_StartTelemetrySessionArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_StartTelemetrySession_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_StartTelemetrySession_args(");
        bool __first = true;
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_StartTelemetrySessionResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Telemetry_StartTelemetrySessionResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_StartTelemetrySession_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_StartTelemetrySession_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_EndTelemetrySessionArgs : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool clientIndex;
      }

      public Telemetry_EndTelemetrySessionArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  TelemetrySessionId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_EndTelemetrySession_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId)
          {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TelemetrySessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_EndTelemetrySession_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TelemetrySessionId: ");
          sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_EndTelemetrySessionResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Telemetry_EndTelemetrySessionResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_EndTelemetrySession_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_EndTelemetrySession_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_LogTelemetryEventArgs : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private string _eventType;
      private string _participantId;
      private Dictionary<string, string> _customData;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      public string ParticipantId
      {
        get
        {
          return _participantId;
        }
        set
        {
          __isset.participantId = true;
          this._participantId = value;
        }
      }

      public Dictionary<string, string> CustomData
      {
        get
        {
          return _customData;
        }
        set
        {
          __isset.customData = true;
          this._customData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool eventType;
        public bool participantId;
        public bool customData;
        public bool clientIndex;
      }

      public Telemetry_LogTelemetryEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  TelemetrySessionId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  EventType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  ParticipantId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Map)
                {
                  {
                    CustomData = new Dictionary<string, string>();
                    TMap _map163 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i164 = 0; _i164 < _map163.Count; ++_i164)
                    {
                      string _key165;
                      string _val166;
                      _key165 = await iprot.ReadStringAsync(cancellationToken);
                      _val166 = await iprot.ReadStringAsync(cancellationToken);
                      CustomData[_key165] = _val166;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_LogTelemetryEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId)
          {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TelemetrySessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EventType != null && __isset.eventType)
          {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParticipantId != null && __isset.participantId)
          {
            field.Name = "participantId";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParticipantId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomData != null && __isset.customData)
          {
            field.Name = "customData";
            field.Type = TType.Map;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, CustomData.Count), cancellationToken);
              foreach (string _iter167 in CustomData.Keys)
              {
                await oprot.WriteStringAsync(_iter167, cancellationToken);
                await oprot.WriteStringAsync(CustomData[_iter167], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_LogTelemetryEvent_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TelemetrySessionId: ");
          sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (EventType != null && __isset.eventType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventType: ");
          sb.Append(EventType);
        }
        if (ParticipantId != null && __isset.participantId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParticipantId: ");
          sb.Append(ParticipantId);
        }
        if (CustomData != null && __isset.customData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomData: ");
          sb.Append(CustomData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_LogTelemetryEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Telemetry_LogTelemetryEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_LogTelemetryEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_LogTelemetryEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_StartTelemetryEventArgs : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private string _eventType;
      private string _participantId;
      private Dictionary<string, string> _customData;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      public string ParticipantId
      {
        get
        {
          return _participantId;
        }
        set
        {
          __isset.participantId = true;
          this._participantId = value;
        }
      }

      public Dictionary<string, string> CustomData
      {
        get
        {
          return _customData;
        }
        set
        {
          __isset.customData = true;
          this._customData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool eventType;
        public bool participantId;
        public bool customData;
        public bool clientIndex;
      }

      public Telemetry_StartTelemetryEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  TelemetrySessionId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  EventType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  ParticipantId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Map)
                {
                  {
                    CustomData = new Dictionary<string, string>();
                    TMap _map168 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i169 = 0; _i169 < _map168.Count; ++_i169)
                    {
                      string _key170;
                      string _val171;
                      _key170 = await iprot.ReadStringAsync(cancellationToken);
                      _val171 = await iprot.ReadStringAsync(cancellationToken);
                      CustomData[_key170] = _val171;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_StartTelemetryEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId)
          {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TelemetrySessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EventType != null && __isset.eventType)
          {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParticipantId != null && __isset.participantId)
          {
            field.Name = "participantId";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParticipantId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomData != null && __isset.customData)
          {
            field.Name = "customData";
            field.Type = TType.Map;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, CustomData.Count), cancellationToken);
              foreach (string _iter172 in CustomData.Keys)
              {
                await oprot.WriteStringAsync(_iter172, cancellationToken);
                await oprot.WriteStringAsync(CustomData[_iter172], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_StartTelemetryEvent_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TelemetrySessionId: ");
          sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (EventType != null && __isset.eventType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventType: ");
          sb.Append(EventType);
        }
        if (ParticipantId != null && __isset.participantId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParticipantId: ");
          sb.Append(ParticipantId);
        }
        if (CustomData != null && __isset.customData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomData: ");
          sb.Append(CustomData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_StartTelemetryEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Telemetry_StartTelemetryEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_StartTelemetryEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_StartTelemetryEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_EndTelemetryEventArgs : TBase
    {
      private string _telemetrySessionId;
      private int _timestamp;
      private string _eventType;
      private string _participantId;
      private Dictionary<string, string> _customData;
      private int _clientIndex;

      public string TelemetrySessionId
      {
        get
        {
          return _telemetrySessionId;
        }
        set
        {
          __isset.telemetrySessionId = true;
          this._telemetrySessionId = value;
        }
      }

      public int Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }

      public string ParticipantId
      {
        get
        {
          return _participantId;
        }
        set
        {
          __isset.participantId = true;
          this._participantId = value;
        }
      }

      public Dictionary<string, string> CustomData
      {
        get
        {
          return _customData;
        }
        set
        {
          __isset.customData = true;
          this._customData = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool telemetrySessionId;
        public bool timestamp;
        public bool eventType;
        public bool participantId;
        public bool customData;
        public bool clientIndex;
      }

      public Telemetry_EndTelemetryEventArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  TelemetrySessionId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Timestamp = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  EventType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  ParticipantId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 5:
                if (field.Type == TType.Map)
                {
                  {
                    CustomData = new Dictionary<string, string>();
                    TMap _map173 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i174 = 0; _i174 < _map173.Count; ++_i174)
                    {
                      string _key175;
                      string _val176;
                      _key175 = await iprot.ReadStringAsync(cancellationToken);
                      _val176 = await iprot.ReadStringAsync(cancellationToken);
                      CustomData[_key175] = _val176;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 6:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_EndTelemetryEvent_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (TelemetrySessionId != null && __isset.telemetrySessionId)
          {
            field.Name = "telemetrySessionId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(TelemetrySessionId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.timestamp)
          {
            field.Name = "timestamp";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Timestamp, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EventType != null && __isset.eventType)
          {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(EventType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ParticipantId != null && __isset.participantId)
          {
            field.Name = "participantId";
            field.Type = TType.String;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ParticipantId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CustomData != null && __isset.customData)
          {
            field.Name = "customData";
            field.Type = TType.Map;
            field.ID = 5;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, CustomData.Count), cancellationToken);
              foreach (string _iter177 in CustomData.Keys)
              {
                await oprot.WriteStringAsync(_iter177, cancellationToken);
                await oprot.WriteStringAsync(CustomData[_iter177], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 6;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_EndTelemetryEvent_args(");
        bool __first = true;
        if (TelemetrySessionId != null && __isset.telemetrySessionId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("TelemetrySessionId: ");
          sb.Append(TelemetrySessionId);
        }
        if (__isset.timestamp)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Timestamp: ");
          sb.Append(Timestamp);
        }
        if (EventType != null && __isset.eventType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EventType: ");
          sb.Append(EventType);
        }
        if (ParticipantId != null && __isset.participantId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ParticipantId: ");
          sb.Append(ParticipantId);
        }
        if (CustomData != null && __isset.customData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CustomData: ");
          sb.Append(CustomData);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class Telemetry_EndTelemetryEventResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public Telemetry_EndTelemetryEventResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("Telemetry_EndTelemetryEvent_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("Telemetry_EndTelemetryEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_DownloadFileArgs : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private bool _replaceIfExists;
      private int _clientIndex;

      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public bool ReplaceIfExists
      {
        get
        {
          return _replaceIfExists;
        }
        set
        {
          __isset.replaceIfExists = true;
          this._replaceIfExists = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool cloudFilename;
        public bool replaceIfExists;
        public bool clientIndex;
      }

      public File_DownloadFileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  CloudFilename = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  ReplaceIfExists = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_DownloadFile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CloudFilename != null && __isset.cloudFilename)
          {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudFilename, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.replaceIfExists)
          {
            field.Name = "replaceIfExists";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(ReplaceIfExists, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_DownloadFile_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudFilename: ");
          sb.Append(CloudFilename);
        }
        if (__isset.replaceIfExists)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReplaceIfExists: ");
          sb.Append(ReplaceIfExists);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_DownloadFileResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_DownloadFileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_DownloadFile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_DownloadFile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetDownloadInfoArgs : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private int _clientIndex;

      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool cloudFilename;
        public bool clientIndex;
      }

      public File_GetDownloadInfoArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  CloudFilename = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetDownloadInfo_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CloudFilename != null && __isset.cloudFilename)
          {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudFilename, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetDownloadInfo_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudFilename: ");
          sb.Append(CloudFilename);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_GetDownloadInfoResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_GetDownloadInfoResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_GetDownloadInfo_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_GetDownloadInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_CancelDownloadArgs : TBase
    {
      private string _cloudPath;
      private string _cloudFilename;
      private int _clientIndex;

      public string CloudPath
      {
        get
        {
          return _cloudPath;
        }
        set
        {
          __isset.cloudPath = true;
          this._cloudPath = value;
        }
      }

      public string CloudFilename
      {
        get
        {
          return _cloudFilename;
        }
        set
        {
          __isset.cloudFilename = true;
          this._cloudFilename = value;
        }
      }

      public int ClientIndex
      {
        get
        {
          return _clientIndex;
        }
        set
        {
          __isset.clientIndex = true;
          this._clientIndex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cloudPath;
        public bool cloudFilename;
        public bool clientIndex;
      }

      public File_CancelDownloadArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  CloudPath = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  CloudFilename = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  ClientIndex = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_CancelDownload_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (CloudPath != null && __isset.cloudPath)
          {
            field.Name = "cloudPath";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudPath, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (CloudFilename != null && __isset.cloudFilename)
          {
            field.Name = "cloudFilename";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(CloudFilename, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.clientIndex)
          {
            field.Name = "clientIndex";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ClientIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_CancelDownload_args(");
        bool __first = true;
        if (CloudPath != null && __isset.cloudPath)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudPath: ");
          sb.Append(CloudPath);
        }
        if (CloudFilename != null && __isset.cloudFilename)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CloudFilename: ");
          sb.Append(CloudFilename);
        }
        if (__isset.clientIndex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ClientIndex: ");
          sb.Append(ClientIndex);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class File_CancelDownloadResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public File_CancelDownloadResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("File_CancelDownload_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("File_CancelDownload_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }

  }
}
