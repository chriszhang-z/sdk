/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.SettingSystem.Api
{
  public partial class SettingSystemService
  {
    public interface IAsync
    {
      /// <summary>
      /// Get a setting data of the module.
      /// </summary>
      /// <param name="id">The setting's unique id in current module.</param>
      Task<Ruyi.SDK.CommonType.SettingItem> GetSettingItemAsync(string id, CancellationToken cancellationToken);

      /// <summary>
      /// Get a list of setting data of the module.
      /// </summary>
      /// <param name="category">Category to filter the settings. Null indicates getting all settings of the module</param>
      /// <param name="includeChildren">Whecher to get the settings of children cagegories.</param>
      Task<List<Ruyi.SDK.CommonType.SettingItem>> GetSettingItemsAsync(string category, bool includeChildren, CancellationToken cancellationToken);

      /// <summary>
      /// Search a set of settings using a json format string.
      /// According to the format of json string your write, searching can be separated to 3 types: simple search, lambda search and complicated search. And each of they can be combined with the other.
      /// </summary>
      /// <param name="filterJson">Json string used to search.</param>
      Task<Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult>> SearchSettingItemsAsync(string filterJson, CancellationToken cancellationToken);

      /// <summary>
      /// Get settings and categories in a tree
      /// </summary>
      Task<Ruyi.SDK.SettingSystem.Api.SettingTree> GetCategoryNodeAsync(CancellationToken cancellationToken);

      Task<Ruyi.SDK.SettingSystem.Api.NodeList> GetChildNodeAsync(string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, CancellationToken cancellationToken);

      /// <summary>
      /// Set the specified setting's "dataValue" with the new value
      /// </summary>
      /// <param name="key">Identity of the setting</param>
      /// <param name="val">Value to be set</param>
      Task<bool> SetSettingItemAsync(string key, string val, CancellationToken cancellationToken);

      /// <summary>
      /// Set a set of settings' "dataValue"
      /// </summary>
      /// <param name="keyValues">The key-values to be set.</param>
      Task<int> SetSettingItemsAsync(Dictionary<string, string> keyValues, CancellationToken cancellationToken);

      /// <summary>
      /// Restore a module setting to default
      /// </summary>
      /// <param name="moduleName">Module name specifies the module to be restored.</param>
      /// <param name="category">The category of which to restored. Null indicates all settings.</param>
      Task<bool> RestoreDefaultAsync(string moduleName, string category, CancellationToken cancellationToken);

      Task<bool> RestoreUserDefaultAsync(string userId, string moduleName, string category, CancellationToken cancellationToken);

      /// <summary>
      /// Update the module settings from an older version to the latest one
      /// </summary>
      /// <param name="moduleName">Module of the setting</param>
      Task<bool> UpdateModuleVersionAsync(string moduleName, CancellationToken cancellationToken);

      Task<int> SetUserAppDataAsync(string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems, CancellationToken cancellationToken);

      Task<Ruyi.SDK.CommonType.AppData> GetUserAppDataAsync(string userId, string category, List<string> settingKeys, CancellationToken cancellationToken);

      Task<int> RemoveUserAppDataAsync(string userId, string category, List<string> settingKeys, CancellationToken cancellationToken);

      /// <summary>
      /// Notify layer0 that a setting item has specific event
      /// </summary>
      /// <param name="key">The item's ID</param>
      /// <param name="contents">Optional. The arguments of the notification. In json string format</param>
      Task<bool> SettingItemNotifyAsync(string key, string contents, CancellationToken cancellationToken);

      Task<Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings> GetNetworkSettingsAsync(CancellationToken cancellationToken);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async Task<Ruyi.SDK.CommonType.SettingItem> GetSettingItemAsync(string id, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSettingItem", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GetSettingItemArgs();
        args.Id = id;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GetSettingItemResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSettingItem failed: unknown result");
      }

      public async Task<List<Ruyi.SDK.CommonType.SettingItem>> GetSettingItemsAsync(string category, bool includeChildren, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSettingItems", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GetSettingItemsArgs();
        args.Category = category;
        args.IncludeChildren = includeChildren;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GetSettingItemsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSettingItems failed: unknown result");
      }

      public async Task<Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult>> SearchSettingItemsAsync(string filterJson, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SearchSettingItems", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SearchSettingItemsArgs();
        args.FilterJson = filterJson;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SearchSettingItemsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchSettingItems failed: unknown result");
      }

      public async Task<Ruyi.SDK.SettingSystem.Api.SettingTree> GetCategoryNodeAsync(CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCategoryNode", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GetCategoryNodeArgs();
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GetCategoryNodeResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCategoryNode failed: unknown result");
      }

      public async Task<Ruyi.SDK.SettingSystem.Api.NodeList> GetChildNodeAsync(string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetChildNode", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GetChildNodeArgs();
        args.Parent = parent;
        args.NodeType = nodeType;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GetChildNodeResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChildNode failed: unknown result");
      }

      public async Task<bool> SetSettingItemAsync(string key, string val, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetSettingItem", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SetSettingItemArgs();
        args.Key = key;
        args.Val = val;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SetSettingItemResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSettingItem failed: unknown result");
      }

      public async Task<int> SetSettingItemsAsync(Dictionary<string, string> keyValues, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetSettingItems", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SetSettingItemsArgs();
        args.KeyValues = keyValues;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SetSettingItemsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSettingItems failed: unknown result");
      }

      public async Task<bool> RestoreDefaultAsync(string moduleName, string category, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RestoreDefault", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new RestoreDefaultArgs();
        args.ModuleName = moduleName;
        args.Category = category;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new RestoreDefaultResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RestoreDefault failed: unknown result");
      }

      public async Task<bool> RestoreUserDefaultAsync(string userId, string moduleName, string category, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RestoreUserDefault", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new RestoreUserDefaultArgs();
        args.UserId = userId;
        args.ModuleName = moduleName;
        args.Category = category;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new RestoreUserDefaultResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RestoreUserDefault failed: unknown result");
      }

      public async Task<bool> UpdateModuleVersionAsync(string moduleName, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateModuleVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new UpdateModuleVersionArgs();
        args.ModuleName = moduleName;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new UpdateModuleVersionResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateModuleVersion failed: unknown result");
      }

      public async Task<int> SetUserAppDataAsync(string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetUserAppData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SetUserAppDataArgs();
        args.UserId = userId;
        args.Category = category;
        args.SettingItems = settingItems;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SetUserAppDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetUserAppData failed: unknown result");
      }

      public async Task<Ruyi.SDK.CommonType.AppData> GetUserAppDataAsync(string userId, string category, List<string> settingKeys, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetUserAppData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GetUserAppDataArgs();
        args.UserId = userId;
        args.Category = category;
        args.SettingKeys = settingKeys;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GetUserAppDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserAppData failed: unknown result");
      }

      public async Task<int> RemoveUserAppDataAsync(string userId, string category, List<string> settingKeys, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RemoveUserAppData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new RemoveUserAppDataArgs();
        args.UserId = userId;
        args.Category = category;
        args.SettingKeys = settingKeys;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new RemoveUserAppDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveUserAppData failed: unknown result");
      }

      public async Task<bool> SettingItemNotifyAsync(string key, string contents, CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SettingItemNotify", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new SettingItemNotifyArgs();
        args.Key = key;
        args.Contents = contents;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new SettingItemNotifyResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SettingItemNotify failed: unknown result");
      }

      public async Task<Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings> GetNetworkSettingsAsync(CancellationToken cancellationToken)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetNetworkSettings", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new GetNetworkSettingsArgs();
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new GetNetworkSettingsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.error1)
        {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNetworkSettings failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private IAsync _iAsync;

      public AsyncProcessor(IAsync iAsync)
      {
        if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

        _iAsync = iAsync;
        processMap_["GetSettingItem"] = GetSettingItem_ProcessAsync;
        processMap_["GetSettingItems"] = GetSettingItems_ProcessAsync;
        processMap_["SearchSettingItems"] = SearchSettingItems_ProcessAsync;
        processMap_["GetCategoryNode"] = GetCategoryNode_ProcessAsync;
        processMap_["GetChildNode"] = GetChildNode_ProcessAsync;
        processMap_["SetSettingItem"] = SetSettingItem_ProcessAsync;
        processMap_["SetSettingItems"] = SetSettingItems_ProcessAsync;
        processMap_["RestoreDefault"] = RestoreDefault_ProcessAsync;
        processMap_["RestoreUserDefault"] = RestoreUserDefault_ProcessAsync;
        processMap_["UpdateModuleVersion"] = UpdateModuleVersion_ProcessAsync;
        processMap_["SetUserAppData"] = SetUserAppData_ProcessAsync;
        processMap_["GetUserAppData"] = GetUserAppData_ProcessAsync;
        processMap_["RemoveUserAppData"] = RemoveUserAppData_ProcessAsync;
        processMap_["SettingItemNotify"] = SettingItemNotify_ProcessAsync;
        processMap_["GetNetworkSettings"] = GetNetworkSettings_ProcessAsync;
      }

      protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async Task GetSettingItem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GetSettingItemArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GetSettingItemResult();
        try
        {
          try
          {
            result.Success = await _iAsync.GetSettingItemAsync(args.Id, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetSettingItem", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSettingItem", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GetSettingItems_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GetSettingItemsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GetSettingItemsResult();
        try
        {
          try
          {
            result.Success = await _iAsync.GetSettingItemsAsync(args.Category, args.IncludeChildren, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetSettingItems", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSettingItems", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SearchSettingItems_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SearchSettingItemsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SearchSettingItemsResult();
        try
        {
          try
          {
            result.Success = await _iAsync.SearchSettingItemsAsync(args.FilterJson, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SearchSettingItems", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SearchSettingItems", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GetCategoryNode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GetCategoryNodeArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GetCategoryNodeResult();
        try
        {
          try
          {
            result.Success = await _iAsync.GetCategoryNodeAsync(cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetCategoryNode", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCategoryNode", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GetChildNode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GetChildNodeArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GetChildNodeResult();
        try
        {
          try
          {
            result.Success = await _iAsync.GetChildNodeAsync(args.Parent, args.NodeType, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetChildNode", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetChildNode", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SetSettingItem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SetSettingItemArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SetSettingItemResult();
        try
        {
          try
          {
            result.Success = await _iAsync.SetSettingItemAsync(args.Key, args.Val, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetSettingItem", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetSettingItem", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SetSettingItems_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SetSettingItemsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SetSettingItemsResult();
        try
        {
          try
          {
            result.Success = await _iAsync.SetSettingItemsAsync(args.KeyValues, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetSettingItems", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetSettingItems", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task RestoreDefault_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new RestoreDefaultArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new RestoreDefaultResult();
        try
        {
          try
          {
            result.Success = await _iAsync.RestoreDefaultAsync(args.ModuleName, args.Category, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RestoreDefault", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RestoreDefault", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task RestoreUserDefault_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new RestoreUserDefaultArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new RestoreUserDefaultResult();
        try
        {
          try
          {
            result.Success = await _iAsync.RestoreUserDefaultAsync(args.UserId, args.ModuleName, args.Category, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RestoreUserDefault", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RestoreUserDefault", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task UpdateModuleVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new UpdateModuleVersionArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new UpdateModuleVersionResult();
        try
        {
          try
          {
            result.Success = await _iAsync.UpdateModuleVersionAsync(args.ModuleName, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("UpdateModuleVersion", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("UpdateModuleVersion", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SetUserAppData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SetUserAppDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SetUserAppDataResult();
        try
        {
          try
          {
            result.Success = await _iAsync.SetUserAppDataAsync(args.UserId, args.Category, args.SettingItems, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetUserAppData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetUserAppData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GetUserAppData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GetUserAppDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GetUserAppDataResult();
        try
        {
          try
          {
            result.Success = await _iAsync.GetUserAppDataAsync(args.UserId, args.Category, args.SettingKeys, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserAppData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserAppData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task RemoveUserAppData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new RemoveUserAppDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new RemoveUserAppDataResult();
        try
        {
          try
          {
            result.Success = await _iAsync.RemoveUserAppDataAsync(args.UserId, args.Category, args.SettingKeys, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RemoveUserAppData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RemoveUserAppData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task SettingItemNotify_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new SettingItemNotifyArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new SettingItemNotifyResult();
        try
        {
          try
          {
            result.Success = await _iAsync.SettingItemNotifyAsync(args.Key, args.Contents, cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SettingItemNotify", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SettingItemNotify", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task GetNetworkSettings_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new GetNetworkSettingsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new GetNetworkSettingsResult();
        try
        {
          try
          {
            result.Success = await _iAsync.GetNetworkSettingsAsync(cancellationToken);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetNetworkSettings", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetNetworkSettings", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }


    public partial class GetSettingItemArgs : TBase
    {
      private string _id;

      /// <summary>
      /// The setting's unique id in current module.
      /// </summary>
      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool id;
      }

      public GetSettingItemArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Id = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetSettingItem_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Id != null && __isset.id)
          {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetSettingItem_args(");
        bool __first = true;
        if (Id != null && __isset.id)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Id: ");
          sb.Append(Id);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetSettingItemResult : TBase
    {
      private Ruyi.SDK.CommonType.SettingItem _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.CommonType.SettingItem Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public GetSettingItemResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Ruyi.SDK.CommonType.SettingItem();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetSettingItem_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetSettingItem_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetSettingItemsArgs : TBase
    {
      private string _category;
      private bool _includeChildren;

      /// <summary>
      /// Category to filter the settings. Null indicates getting all settings of the module
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      /// <summary>
      /// Whecher to get the settings of children cagegories.
      /// </summary>
      public bool IncludeChildren
      {
        get
        {
          return _includeChildren;
        }
        set
        {
          __isset.includeChildren = true;
          this._includeChildren = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool category;
        public bool includeChildren;
      }

      public GetSettingItemsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Bool)
                {
                  IncludeChildren = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetSettingItems_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.includeChildren)
          {
            field.Name = "includeChildren";
            field.Type = TType.Bool;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(IncludeChildren, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetSettingItems_args(");
        bool __first = true;
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (__isset.includeChildren)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("IncludeChildren: ");
          sb.Append(IncludeChildren);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetSettingItemsResult : TBase
    {
      private List<Ruyi.SDK.CommonType.SettingItem> _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public List<Ruyi.SDK.CommonType.SettingItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public GetSettingItemsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    Success = new List<Ruyi.SDK.CommonType.SettingItem>();
                    TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      Ruyi.SDK.CommonType.SettingItem _elem2;
                      _elem2 = new Ruyi.SDK.CommonType.SettingItem();
                      await _elem2.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem2);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetSettingItems_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Ruyi.SDK.CommonType.SettingItem _iter3 in Success)
                {
                  await _iter3.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetSettingItems_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SearchSettingItemsArgs : TBase
    {
      private string _filterJson;

      /// <summary>
      /// Json string used to search.
      /// </summary>
      public string FilterJson
      {
        get
        {
          return _filterJson;
        }
        set
        {
          __isset.filterJson = true;
          this._filterJson = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool filterJson;
      }

      public SearchSettingItemsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  FilterJson = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SearchSettingItems_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (FilterJson != null && __isset.filterJson)
          {
            field.Name = "filterJson";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FilterJson, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SearchSettingItems_args(");
        bool __first = true;
        if (FilterJson != null && __isset.filterJson)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FilterJson: ");
          sb.Append(FilterJson);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SearchSettingItemsResult : TBase
    {
      private Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public SearchSettingItemsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    Success = new Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult>();
                    TMap _map4 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i5 = 0; _i5 < _map4.Count; ++_i5)
                    {
                      string _key6;
                      Ruyi.SDK.SettingSystem.Api.SettingSearchResult _val7;
                      _key6 = await iprot.ReadStringAsync(cancellationToken);
                      _val7 = new Ruyi.SDK.SettingSystem.Api.SettingSearchResult();
                      await _val7.ReadAsync(iprot, cancellationToken);
                      Success[_key6] = _val7;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SearchSettingItems_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter8 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter8, cancellationToken);
                  await Success[_iter8].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SearchSettingItems_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetCategoryNodeArgs : TBase
    {

      public GetCategoryNodeArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetCategoryNode_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetCategoryNode_args(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetCategoryNodeResult : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.SettingTree _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.SettingTree Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public GetCategoryNodeResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Ruyi.SDK.SettingSystem.Api.SettingTree();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetCategoryNode_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetCategoryNode_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetChildNodeArgs : TBase
    {
      private string _parent;
      private Ruyi.SDK.SettingSystem.Api.NodeType _nodeType;

      public string Parent
      {
        get
        {
          return _parent;
        }
        set
        {
          __isset.parent = true;
          this._parent = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Ruyi.SDK.SettingSystem.Api.NodeType"/>
      /// </summary>
      public Ruyi.SDK.SettingSystem.Api.NodeType NodeType
      {
        get
        {
          return _nodeType;
        }
        set
        {
          __isset.nodeType = true;
          this._nodeType = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool parent;
        public bool nodeType;
      }

      public GetChildNodeArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Parent = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  NodeType = (Ruyi.SDK.SettingSystem.Api.NodeType)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetChildNode_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Parent != null && __isset.parent)
          {
            field.Name = "parent";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Parent, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.nodeType)
          {
            field.Name = "nodeType";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async((int)NodeType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetChildNode_args(");
        bool __first = true;
        if (Parent != null && __isset.parent)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Parent: ");
          sb.Append(Parent);
        }
        if (__isset.nodeType)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("NodeType: ");
          sb.Append(NodeType);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetChildNodeResult : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.NodeList _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.NodeList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public GetChildNodeResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Ruyi.SDK.SettingSystem.Api.NodeList();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetChildNode_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetChildNode_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SetSettingItemArgs : TBase
    {
      private string _key;
      private string _val;

      /// <summary>
      /// Identity of the setting
      /// </summary>
      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      /// <summary>
      /// Value to be set
      /// </summary>
      public string Val
      {
        get
        {
          return _val;
        }
        set
        {
          __isset.val = true;
          this._val = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool key;
        public bool val;
      }

      public SetSettingItemArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Key = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Val = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetSettingItem_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Key != null && __isset.key)
          {
            field.Name = "key";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Key, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Val != null && __isset.val)
          {
            field.Name = "val";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Val, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetSettingItem_args(");
        bool __first = true;
        if (Key != null && __isset.key)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Key: ");
          sb.Append(Key);
        }
        if (Val != null && __isset.val)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Val: ");
          sb.Append(Val);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SetSettingItemResult : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public SetSettingItemResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetSettingItem_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetSettingItem_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SetSettingItemsArgs : TBase
    {
      private Dictionary<string, string> _keyValues;

      /// <summary>
      /// The key-values to be set.
      /// </summary>
      public Dictionary<string, string> KeyValues
      {
        get
        {
          return _keyValues;
        }
        set
        {
          __isset.keyValues = true;
          this._keyValues = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool keyValues;
      }

      public SetSettingItemsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    KeyValues = new Dictionary<string, string>();
                    TMap _map9 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i10 = 0; _i10 < _map9.Count; ++_i10)
                    {
                      string _key11;
                      string _val12;
                      _key11 = await iprot.ReadStringAsync(cancellationToken);
                      _val12 = await iprot.ReadStringAsync(cancellationToken);
                      KeyValues[_key11] = _val12;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetSettingItems_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (KeyValues != null && __isset.keyValues)
          {
            field.Name = "keyValues";
            field.Type = TType.Map;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, KeyValues.Count), cancellationToken);
              foreach (string _iter13 in KeyValues.Keys)
              {
                await oprot.WriteStringAsync(_iter13, cancellationToken);
                await oprot.WriteStringAsync(KeyValues[_iter13], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetSettingItems_args(");
        bool __first = true;
        if (KeyValues != null && __isset.keyValues)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("KeyValues: ");
          sb.Append(KeyValues);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SetSettingItemsResult : TBase
    {
      private int _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public SetSettingItemsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetSettingItems_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetSettingItems_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class RestoreDefaultArgs : TBase
    {
      private string _moduleName;
      private string _category;

      /// <summary>
      /// Module name specifies the module to be restored.
      /// </summary>
      public string ModuleName
      {
        get
        {
          return _moduleName;
        }
        set
        {
          __isset.moduleName = true;
          this._moduleName = value;
        }
      }

      /// <summary>
      /// The category of which to restored. Null indicates all settings.
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool moduleName;
        public bool category;
      }

      public RestoreDefaultArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ModuleName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("RestoreDefault_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ModuleName != null && __isset.moduleName)
          {
            field.Name = "moduleName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ModuleName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RestoreDefault_args(");
        bool __first = true;
        if (ModuleName != null && __isset.moduleName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ModuleName: ");
          sb.Append(ModuleName);
        }
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class RestoreDefaultResult : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public RestoreDefaultResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("RestoreDefault_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RestoreDefault_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class RestoreUserDefaultArgs : TBase
    {
      private string _userId;
      private string _moduleName;
      private string _category;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string ModuleName
      {
        get
        {
          return _moduleName;
        }
        set
        {
          __isset.moduleName = true;
          this._moduleName = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool moduleName;
        public bool category;
      }

      public RestoreUserDefaultArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ModuleName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("RestoreUserDefault_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ModuleName != null && __isset.moduleName)
          {
            field.Name = "moduleName";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ModuleName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RestoreUserDefault_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (ModuleName != null && __isset.moduleName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ModuleName: ");
          sb.Append(ModuleName);
        }
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class RestoreUserDefaultResult : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public RestoreUserDefaultResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("RestoreUserDefault_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RestoreUserDefault_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class UpdateModuleVersionArgs : TBase
    {
      private string _moduleName;

      /// <summary>
      /// Module of the setting
      /// </summary>
      public string ModuleName
      {
        get
        {
          return _moduleName;
        }
        set
        {
          __isset.moduleName = true;
          this._moduleName = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool moduleName;
      }

      public UpdateModuleVersionArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ModuleName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("UpdateModuleVersion_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (ModuleName != null && __isset.moduleName)
          {
            field.Name = "moduleName";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(ModuleName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("UpdateModuleVersion_args(");
        bool __first = true;
        if (ModuleName != null && __isset.moduleName)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ModuleName: ");
          sb.Append(ModuleName);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class UpdateModuleVersionResult : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public UpdateModuleVersionResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("UpdateModuleVersion_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("UpdateModuleVersion_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SetUserAppDataArgs : TBase
    {
      private string _userId;
      private string _category;
      private Dictionary<string, Ruyi.SDK.CommonType.SettingValue> _settingItems;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public Dictionary<string, Ruyi.SDK.CommonType.SettingValue> SettingItems
      {
        get
        {
          return _settingItems;
        }
        set
        {
          __isset.settingItems = true;
          this._settingItems = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool category;
        public bool settingItems;
      }

      public SetUserAppDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Map)
                {
                  {
                    SettingItems = new Dictionary<string, Ruyi.SDK.CommonType.SettingValue>();
                    TMap _map14 = await iprot.ReadMapBeginAsync(cancellationToken);
                    for(int _i15 = 0; _i15 < _map14.Count; ++_i15)
                    {
                      string _key16;
                      Ruyi.SDK.CommonType.SettingValue _val17;
                      _key16 = await iprot.ReadStringAsync(cancellationToken);
                      _val17 = new Ruyi.SDK.CommonType.SettingValue();
                      await _val17.ReadAsync(iprot, cancellationToken);
                      SettingItems[_key16] = _val17;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetUserAppData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SettingItems != null && __isset.settingItems)
          {
            field.Name = "settingItems";
            field.Type = TType.Map;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, SettingItems.Count), cancellationToken);
              foreach (string _iter18 in SettingItems.Keys)
              {
                await oprot.WriteStringAsync(_iter18, cancellationToken);
                await SettingItems[_iter18].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetUserAppData_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (SettingItems != null && __isset.settingItems)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SettingItems: ");
          sb.Append(SettingItems);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SetUserAppDataResult : TBase
    {
      private int _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public SetUserAppDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SetUserAppData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetUserAppData_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetUserAppDataArgs : TBase
    {
      private string _userId;
      private string _category;
      private List<string> _settingKeys;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public List<string> SettingKeys
      {
        get
        {
          return _settingKeys;
        }
        set
        {
          __isset.settingKeys = true;
          this._settingKeys = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool category;
        public bool settingKeys;
      }

      public GetUserAppDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    SettingKeys = new List<string>();
                    TList _list19 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i20 = 0; _i20 < _list19.Count; ++_i20)
                    {
                      string _elem21;
                      _elem21 = await iprot.ReadStringAsync(cancellationToken);
                      SettingKeys.Add(_elem21);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetUserAppData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SettingKeys != null && __isset.settingKeys)
          {
            field.Name = "settingKeys";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, SettingKeys.Count), cancellationToken);
              foreach (string _iter22 in SettingKeys)
              {
                await oprot.WriteStringAsync(_iter22, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetUserAppData_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (SettingKeys != null && __isset.settingKeys)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SettingKeys: ");
          sb.Append(SettingKeys);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetUserAppDataResult : TBase
    {
      private Ruyi.SDK.CommonType.AppData _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.CommonType.AppData Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public GetUserAppDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Ruyi.SDK.CommonType.AppData();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetUserAppData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetUserAppData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class RemoveUserAppDataArgs : TBase
    {
      private string _userId;
      private string _category;
      private List<string> _settingKeys;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public List<string> SettingKeys
      {
        get
        {
          return _settingKeys;
        }
        set
        {
          __isset.settingKeys = true;
          this._settingKeys = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool userId;
        public bool category;
        public bool settingKeys;
      }

      public RemoveUserAppDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  UserId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Category = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    SettingKeys = new List<string>();
                    TList _list23 = await iprot.ReadListBeginAsync(cancellationToken);
                    for(int _i24 = 0; _i24 < _list23.Count; ++_i24)
                    {
                      string _elem25;
                      _elem25 = await iprot.ReadStringAsync(cancellationToken);
                      SettingKeys.Add(_elem25);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("RemoveUserAppData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (UserId != null && __isset.userId)
          {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(UserId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Category != null && __isset.category)
          {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Category, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SettingKeys != null && __isset.settingKeys)
          {
            field.Name = "settingKeys";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, SettingKeys.Count), cancellationToken);
              foreach (string _iter26 in SettingKeys)
              {
                await oprot.WriteStringAsync(_iter26, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RemoveUserAppData_args(");
        bool __first = true;
        if (UserId != null && __isset.userId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("UserId: ");
          sb.Append(UserId);
        }
        if (Category != null && __isset.category)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Category: ");
          sb.Append(Category);
        }
        if (SettingKeys != null && __isset.settingKeys)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SettingKeys: ");
          sb.Append(SettingKeys);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class RemoveUserAppDataResult : TBase
    {
      private int _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public RemoveUserAppDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("RemoveUserAppData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RemoveUserAppData_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SettingItemNotifyArgs : TBase
    {
      private string _key;
      private string _contents;

      /// <summary>
      /// The item's ID
      /// </summary>
      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      /// <summary>
      /// Optional. The arguments of the notification. In json string format
      /// </summary>
      public string Contents
      {
        get
        {
          return _contents;
        }
        set
        {
          __isset.contents = true;
          this._contents = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool key;
        public bool contents;
      }

      public SettingItemNotifyArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Key = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Contents = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SettingItemNotify_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Key != null && __isset.key)
          {
            field.Name = "key";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Key, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Contents != null && __isset.contents)
          {
            field.Name = "contents";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Contents, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SettingItemNotify_args(");
        bool __first = true;
        if (Key != null && __isset.key)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Key: ");
          sb.Append(Key);
        }
        if (Contents != null && __isset.contents)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Contents: ");
          sb.Append(Contents);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class SettingItemNotifyResult : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public SettingItemNotifyResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("SettingItemNotify_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SettingItemNotify_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetNetworkSettingsArgs : TBase
    {

      public GetNetworkSettingsArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetNetworkSettings_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetNetworkSettings_args(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class GetNetworkSettingsResult : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool error1;
      }

      public GetNetworkSettingsResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  await Error1.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("GetNetworkSettings_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.error1)
          {
            if (Error1 != null)
            {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Error1.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetNetworkSettings_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Error1: ");
          sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }

  }
}
